{
  "name": "mbpp_125_find_length",
  "language": "rb",
  "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, count_zero + count_one].max\n    end\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpjquliqxm\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpjquliqxm.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007464396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.97 tests/s, 133.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0+count_1].max\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i in string.length-1..0\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0+count_1].max\n    end\n  end\n  return max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpz85ww5bc\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpz85ww5bc.rb:34:in `test_find_length'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_find_length\n     33:     candidate = method(:find_length)\n  => 34:     assert_equal(6, candidate.call(\"11000010001\"))\n     35:     assert_equal(1, candidate.call(\"10111\"))\n     36:     assert_equal(2, candidate.call(\"11011101100101\"))\n     37:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007244982 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.03 tests/s, 138.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_of_1 = 0\n  count_of_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_of_1 += 1\n    else\n      count_of_0 += 1\n    end\n    max_length = [max_length, count_of_1 - count_of_0].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp8fop7jbi\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp8fop7jbi.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007060618 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.63 tests/s, 141.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = (count_0 - count_1).abs if (count_0 - count_1).abs > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpjoy4wda_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpjoy4wda_.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007102586 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.79 tests/s, 140.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_len = [max_len, (count_0 - count_1).abs].max\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp_dzp2frq\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_dzp2frq.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00708535 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.14 tests/s, 141.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  string.each_char.with_index do |char, index|\n    if char == \"1\"\n      max_length = index + 1\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpwim0rh7z\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpwim0rh7z.rb:15:in `test_find_length'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_find_length\n     14:     candidate = method(:find_length)\n  => 15:     assert_equal(6, candidate.call(\"11000010001\"))\n     16:     assert_equal(1, candidate.call(\"10111\"))\n     17:     assert_equal(2, candidate.call(\"11011101100101\"))\n     18:   end\n<6> expected but was\n<11>\n===============================================================================\n\nFinished in 0.007323887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.54 tests/s, 136.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmpnezjvmdg.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpnezjvmdg.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpm4namif6\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpm4namif6.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014173507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.55 tests/s, 70.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  return 0 if string.length == 1\n  max_diff = 0\n  i = 0\n  while i < string.length\n    j = i + 1\n    while j < string.length\n      diff = (string[i..j].count('0') - string[i..j].count('1')).abs\n      max_diff = diff if diff > max_diff\n      j += 1\n    end\n    i += 1\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpojumkq_q\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpojumkq_q.rb:22:in `test_find_length'\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n     21:     assert_equal(6, candidate.call(\"11000010001\"))\n  => 22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n     25: end\n<1> expected but was\n<3>\n===============================================================================\n\nFinished in 0.007424141 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.70 tests/s, 269.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  string.each_char do |char|\n    if char == '1'\n      current_length += 1\n    else\n      max_length = current_length if current_length > max_length\n      current_length = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmprj368mcf\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprj368mcf.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007358914 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.89 tests/s, 135.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmplpei8m5w\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmplpei8m5w.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007335104 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.33 tests/s, 136.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  return 0 if string.length <= 1\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpyw6zqmkw\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpyw6zqmkw.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007161686 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.63 tests/s, 139.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  zeros = 0\n  ones = 0\n  max_diff = 0\n  string.each_char do |char|\n    if char == '0'\n      zeros += 1\n    else\n      ones += 1\n    end\n    max_diff = [max_diff, (zeros - ones).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpghextvjs\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpghextvjs.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007251211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.91 tests/s, 137.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_len = [max_len, (count_zero - count_one).abs].max\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp6q7fu2j7\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp6q7fu2j7.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007537359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.67 tests/s, 132.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpw806d_\nStarted\n.\nFinished in 0.000454101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2202.15 tests/s, 6606.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpem3uyoll\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpem3uyoll.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007644945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.81 tests/s, 130.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  for i in 0..string.length-1\n    for j in i+1..string.length\n      sub_string = string[i..j]\n      diff = (sub_string.count('0') - sub_string.count('1')).abs\n      max_diff = diff if diff > max_diff\n    end\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpp_2n1cg6\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpp_2n1cg6.rb:18:in `test_find_length'\n     15:   def test_find_length\n     16:     candidate = method(:find_length)\n     17:     assert_equal(6, candidate.call(\"11000010001\"))\n  => 18:     assert_equal(1, candidate.call(\"10111\"))\n     19:     assert_equal(2, candidate.call(\"11011101100101\"))\n     20:   end\n     21: end\n<1> expected but was\n<3>\n===============================================================================\n\nFinished in 0.007516749 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.04 tests/s, 266.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  return 0 if string.length == 1\n  max_length = 0\n  (0..string.length-1).each do |i|\n    (i+1..string.length-1).each do |j|\n      sub_string = string[i..j]\n      if sub_string.count('0') == sub_string.count('1')\n        max_length = [max_length, sub_string.length].max\n      end\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpyor3_1_t\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpyor3_1_t.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007788868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.39 tests/s, 128.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if max_length < count\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzk4ysr2_\nStarted\n.\nFinished in 0.000418562 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2389.13 tests/s, 7167.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    diff = (count_0 - count_1).abs\n    max_diff = diff if diff > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp8ts_f4tj\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp8ts_f4tj.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007423389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.71 tests/s, 134.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykcww04p\nStarted\n.\nFinished in 0.000421747 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2371.09 tests/s, 7113.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp19c9c66v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp19c9c66v.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.013441626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.40 tests/s, 74.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmploky0g6g\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmploky0g6g.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007334102 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.35 tests/s, 136.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  # Write your code here\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpy6vhfj4w\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpy6vhfj4w.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007495913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.41 tests/s, 133.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpem3uyoll\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpem3uyoll.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007644945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.81 tests/s, 130.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  zeros = 0\n  ones = 0\n  string.each_char do |char|\n    if char == '0'\n      zeros += 1\n    else\n      ones += 1\n    end\n    if zeros == ones\n      max_diff = [max_diff, zeros + ones].max\n    end\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp64gclgsf\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp64gclgsf.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.008218502 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.68 tests/s, 121.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one + 1\n      max_length = [max_length, count_one*2+1].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_one == count_zero + 1\n      max_length = [max_length, count_zero*2+1].max\n    end\n  end\n  return max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpr5vi1hty\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpr5vi1hty.rb:46:in `test_find_length'\n     43: class TestHumanEval < Test::Unit::TestCase\n     44:   def test_find_length\n     45:     candidate = method(:find_length)\n  => 46:     assert_equal(6, candidate.call(\"11000010001\"))\n     47:     assert_equal(1, candidate.call(\"10111\"))\n     48:     assert_equal(2, candidate.call(\"11011101100101\"))\n     49:   end\n<6> expected but was\n<7>\n===============================================================================\n\nFinished in 0.007124526 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.36 tests/s, 140.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_1 = 0\n  count_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_1 += 1\n    else\n      count_0 += 1\n    end\n    max_diff = [max_diff, (count_1 - count_0).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp6tdkw59w\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp6tdkw59w.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007654581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.64 tests/s, 130.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_diff = [max_diff, count_zero].max\n    end\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpngfdbmrl\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpngfdbmrl.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00736838 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.72 tests/s, 135.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  count = 0\n  max_count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_count = count if count > max_count\n    count = 0 if count < 0\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd_insgtl\nStarted\n.\nFinished in 0.000488005 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2049.16 tests/s, 6147.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpnvqqohik\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpnvqqohik.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006989006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.08 tests/s, 143.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmplpei8m5w\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmplpei8m5w.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007335104 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.33 tests/s, 136.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpem3uyoll\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpem3uyoll.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007644945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.81 tests/s, 130.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_count = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_count = count if count > max_count\n    count = 0 if count < 0\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsh7fnqtr\nStarted\n.\nFinished in 0.000425458 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2350.41 tests/s, 7051.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpem3uyoll\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpem3uyoll.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007644945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.81 tests/s, 130.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  return max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmps1ewclfy\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmps1ewclfy.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006970357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.46 tests/s, 143.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmps5za2hy3\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmps5za2hy3.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006931872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.26 tests/s, 144.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfpw806d_\nStarted\n.\nFinished in 0.000454101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2202.15 tests/s, 6606.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_one - count_zero].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpk8yyoya9\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpk8yyoya9.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007018284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.48 tests/s, 142.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp16jfql5v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp16jfql5v.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.00694081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.08 tests/s, 144.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "/tmp/tmpnezjvmdg.rb:8: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpnezjvmdg.rb:15: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one + 1\n      max_length = [max_length, count_one*2+1].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_one == count_zero + 1\n      max_length = [max_length, count_zero*2+1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpft683p_e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpft683p_e.rb:46:in `test_find_length'\n     43: class TestHumanEval < Test::Unit::TestCase\n     44:   def test_find_length\n     45:     candidate = method(:find_length)\n  => 46:     assert_equal(6, candidate.call(\"11000010001\"))\n     47:     assert_equal(1, candidate.call(\"10111\"))\n     48:     assert_equal(2, candidate.call(\"11011101100101\"))\n     49:   end\n<6> expected but was\n<7>\n===============================================================================\n\nFinished in 0.006661841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.11 tests/s, 150.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpem3uyoll\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpem3uyoll.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007644945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.81 tests/s, 130.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  return max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmps1ewclfy\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmps1ewclfy.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006970357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.46 tests/s, 143.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpekrszatp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpekrszatp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007019664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.46 tests/s, 142.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp_av5z99e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_av5z99e.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007171486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.44 tests/s, 139.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = count_zero + count_one\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpz857zu7v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpz857zu7v.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007068305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.48 tests/s, 141.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  return 0 if string.length == 1\n  max_length = 0\n  (0..string.length-1).each do |i|\n    (i+1..string.length-1).each do |j|\n      if (string[i..j].count('0') - string[i..j].count('1')).abs > max_length\n        max_length = (string[i..j].count('0') - string[i..j].count('1')).abs\n      end\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp6p_folbu\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp6p_folbu.rb:19:in `test_find_length'\n     16:   def test_find_length\n     17:     candidate = method(:find_length)\n     18:     assert_equal(6, candidate.call(\"11000010001\"))\n  => 19:     assert_equal(1, candidate.call(\"10111\"))\n     20:     assert_equal(2, candidate.call(\"11011101100101\"))\n     21:   end\n     22: end\n<1> expected but was\n<3>\n===============================================================================\n\nFinished in 0.0072948 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.08 tests/s, 274.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    elsif char == '1'\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph7_i82yo\nStarted\n.\nFinished in 0.000476259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2099.70 tests/s, 6299.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_of_1 = 0\n  count_of_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_of_1 += 1\n    elsif char == '0'\n      count_of_0 += 1\n    end\n    max_length = [max_length, count_of_1 - count_of_0].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpqlbwh_pl\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqlbwh_pl.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.013751567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.72 tests/s, 72.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykcww04p\nStarted\n.\nFinished in 0.000421747 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2371.09 tests/s, 7113.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  count = 0\n  max = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = [max, count].max\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpz5mu27ms\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpz5mu27ms.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007094655 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.95 tests/s, 140.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = [max_length, current_length].max\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpqfm0cme_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqfm0cme_.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006802168 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.01 tests/s, 147.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  # Write your code here\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmplbsfboc9\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmplbsfboc9.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006725978 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.68 tests/s, 148.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero * 2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  string.reverse.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero * 2].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp4cr_3oz8\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp4cr_3oz8.rb:34:in `test_find_length'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_find_length\n     33:     candidate = method(:find_length)\n  => 34:     assert_equal(6, candidate.call(\"11000010001\"))\n     35:     assert_equal(1, candidate.call(\"10111\"))\n     36:     assert_equal(2, candidate.call(\"11011101100101\"))\n     37:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007377627 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.54 tests/s, 135.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max = count if count > max\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7bhb3pm5\nStarted\n.\nFinished in 0.000488873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2045.52 tests/s, 6136.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_diff = count if count > max_diff\n    count = 0 if count < 0\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpm6_gvjv3\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpm6_gvjv3.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006937176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.15 tests/s, 144.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpgmxeyzvh\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpgmxeyzvh.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006719682 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.82 tests/s, 148.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpkcx7io5k\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpkcx7io5k.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006774356 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.62 tests/s, 147.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp_av5z99e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_av5z99e.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007171486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.44 tests/s, 139.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_length = count.abs if count.abs > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp17_et6sj\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp17_et6sj.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.008369402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.48 tests/s, 119.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0*2].max\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1 + 1\n      max_length = [max_length, count_1*2+1].max\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_1 == count_0 + 1\n      max_length = [max_length, count_0*2+1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp_0fhyi4_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_0fhyi4_.rb:46:in `test_find_length'\n     43: class TestHumanEval < Test::Unit::TestCase\n     44:   def test_find_length\n     45:     candidate = method(:find_length)\n  => 46:     assert_equal(6, candidate.call(\"11000010001\"))\n     47:     assert_equal(1, candidate.call(\"10111\"))\n     48:     assert_equal(2, candidate.call(\"11011101100101\"))\n     49:   end\n<6> expected but was\n<7>\n===============================================================================\n\nFinished in 0.007202703 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.84 tests/s, 138.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0 + count_1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpagluqz67\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpagluqz67.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006587778 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.80 tests/s, 151.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = [max_length, current_length].max\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpqfm0cme_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqfm0cme_.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006802168 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.01 tests/s, 147.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = count_0 + count_1\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpuq0cx0u_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpuq0cx0u_.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00623887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.29 tests/s, 160.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0 + count_1].max\n    end\n  end\n  return max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpya7babud\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpya7babud.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006736924 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.44 tests/s, 148.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp19c9c66v\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp19c9c66v.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.013441626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.40 tests/s, 74.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0 + count_1].max\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpagluqz67\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpagluqz67.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006587778 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.80 tests/s, 151.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_of_0 = 0\n  count_of_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_of_0 += 1\n    else\n      count_of_1 += 1\n    end\n    max_diff = (count_of_0 - count_of_1).abs if (count_of_0 - count_of_1).abs > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpg8nety7e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpg8nety7e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006089423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.22 tests/s, 164.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  # Write your code here\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpy6vhfj4w\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpy6vhfj4w.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007495913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.41 tests/s, 133.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpvoqa4eq_\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpvoqa4eq_.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006287274 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.05 tests/s, 159.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmpslx81l8y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpslx81l8y.rb:24:in `test_find_length'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_find_length\n     23:     candidate = method(:find_length)\n  => 24:     assert_equal(6, candidate.call(\"11000010001\"))\n     25:     assert_equal(1, candidate.call(\"10111\"))\n     26:     assert_equal(2, candidate.call(\"11011101100101\"))\n     27:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007554691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.37 tests/s, 132.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp13ufss2e\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp13ufss2e.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007023378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.38 tests/s, 142.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpl38wag1f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpl38wag1f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006187174 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.62 tests/s, 161.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpykcww04p\nStarted\n.\nFinished in 0.000421747 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2371.09 tests/s, 7113.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    elsif char == '1'\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpqa5vokq0\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpqa5vokq0.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.008090357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.60 tests/s, 123.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  return 0 if string.length == 0\n  return 1 if string.length == 1\n  max_length = 0\n  (0..string.length-1).each do |i|\n    (i+1..string.length-1).each do |j|\n      if (string[i..j].count('0') - string[i..j].count('1')).abs > max_length\n        max_length = (string[i..j].count('0') - string[i..j].count('1')).abs\n      end\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmps9c11yc7\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmps9c11yc7.rb:20:in `test_find_length'\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n     19:     assert_equal(6, candidate.call(\"11000010001\"))\n  => 20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n     23: end\n<1> expected but was\n<3>\n===============================================================================\n\nFinished in 0.006450719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.02 tests/s, 310.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    diff = (count_zero - count_one).abs\n    max_diff = diff if diff > max_diff\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpvkqvsxlc\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpvkqvsxlc.rb:21:in `test_find_length'\n     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_find_length\n     20:     candidate = method(:find_length)\n  => 21:     assert_equal(6, candidate.call(\"11000010001\"))\n     22:     assert_equal(1, candidate.call(\"10111\"))\n     23:     assert_equal(2, candidate.call(\"11011101100101\"))\n     24:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006172881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.00 tests/s, 162.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_len = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, i+1].max\n    end\n  end\n  max_len\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpyq3wqjzw\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpyq3wqjzw.rb:22:in `test_find_length'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_find_length\n     21:     candidate = method(:find_length)\n  => 22:     assert_equal(6, candidate.call(\"11000010001\"))\n     23:     assert_equal(1, candidate.call(\"10111\"))\n     24:     assert_equal(2, candidate.call(\"11011101100101\"))\n     25:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006165977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.18 tests/s, 162.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  curr_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    curr_length += 1\n    if count_zero == count_one\n      max_length = curr_length if curr_length > max_length\n      curr_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmp5r81o61u\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp5r81o61u.rb:27:in `test_find_length'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_find_length\n     26:     candidate = method(:find_length)\n  => 27:     assert_equal(6, candidate.call(\"11000010001\"))\n     28:     assert_equal(1, candidate.call(\"10111\"))\n     29:     assert_equal(2, candidate.call(\"11011101100101\"))\n     30:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006035417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.69 tests/s, 165.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_v44u3f1\nStarted\n.\nFinished in 0.000404195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2474.05 tests/s, 7422.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpltv1ah6p\nStarted\n.\nFinished in 0.000402021 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2487.43 tests/s, 7462.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmpxo243s2c\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpxo243s2c.rb:19:in `test_find_length'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_length\n     18:     candidate = method(:find_length)\n  => 19:     assert_equal(6, candidate.call(\"11000010001\"))\n     20:     assert_equal(1, candidate.call(\"10111\"))\n     21:     assert_equal(2, candidate.call(\"11011101100101\"))\n     22:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007337253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.29 tests/s, 136.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmp228v183f\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp228v183f.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.00728106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.34 tests/s, 137.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_one = 0\n  count_zero = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_one - count_zero).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmppzsd8lu4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppzsd8lu4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006236601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.34 tests/s, 160.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmppkjguxnp\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmppkjguxnp.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007343348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.18 tests/s, 136.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero, count_one].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmpwunauhmr\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmpwunauhmr.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<7>\n===============================================================================\n\nFinished in 0.006330839 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.96 tests/s, 157.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  string.split('0').map { |substring| substring.length }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmplhzjdnf0\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmplhzjdnf0.rb:9:in `test_find_length'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_find_length\n      8:     candidate = method(:find_length)\n  =>  9:     assert_equal(6, candidate.call(\"11000010001\"))\n     10:     assert_equal(1, candidate.call(\"10111\"))\n     11:     assert_equal(2, candidate.call(\"11011101100101\"))\n     12:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.006238839 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.29 tests/s, 160.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1665509994,
      "stdout": "Loaded suite /tmp/tmprn6auwe4\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmprn6auwe4.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.007306034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.87 tests/s, 136.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    count = count + 1 if char == '1'\n    count = count - 1 if char == '0'\n    max_length = count if count > max_length\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122958,
      "stdout": "Loaded suite /tmp/tmphmrnjoix\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmphmrnjoix.rb:16:in `test_find_length'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_find_length\n     15:     candidate = method(:find_length)\n  => 16:     assert_equal(6, candidate.call(\"11000010001\"))\n     17:     assert_equal(1, candidate.call(\"10111\"))\n     18:     assert_equal(2, candidate.call(\"11011101100101\"))\n     19:   end\n<6> expected but was\n<2>\n===============================================================================\n\nFinished in 0.005985241 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n167.08 tests/s, 167.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
      "timestamp": 1666122957,
      "stdout": "Loaded suite /tmp/tmp_94hs22y\nStarted\nF\n===============================================================================\nFailure: test_find_length(TestHumanEval)\n/tmp/tmp_94hs22y.rb:20:in `test_find_length'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_find_length\n     19:     candidate = method(:find_length)\n  => 20:     assert_equal(6, candidate.call(\"11000010001\"))\n     21:     assert_equal(1, candidate.call(\"10111\"))\n     22:     assert_equal(2, candidate.call(\"11011101100101\"))\n     23:   end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.014346047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.71 tests/s, 69.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}