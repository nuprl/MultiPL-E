{
  "name": "mbpp_272_rear_extract",
  "language": "rb",
  "prompt": "# Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\ndef rear_extract(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rear_extract\n    candidate = method(:rear_extract)\n    assert_equal([21, 20, 19], candidate.call([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]))\n    assert_equal([36, 25, 45], candidate.call([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]))\n    assert_equal([14, 36, 56], candidate.call([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  rear_list\nend",
    "  rear_array = []\n  test_list.each do |sub_array|\n    rear_array << sub_array[-1]\n  end\n  return rear_array\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |array|\n    rear_list << array.last\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |array|\n    rear_list << array[-1]\n  end\n  return rear_list\nend",
    "  rear_list = []\n  test_list.each do |array|\n    rear_list << array[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  return rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |x|\n    rear_list << x.last\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list.last\n  end\n  return rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  return rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list.push(sub_list[-1])\n  end\n  return rear_list\nend",
    "  rear_list = []\n  test_list.each do |array|\n    rear_list << array[-1]\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |array|\n    rear_list << array.last\n  end\n  rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  return rear_list\nend",
    "  rear_list = []\n  test_list.each do |sub_list|\n    rear_list << sub_list[-1]\n  end\n  return rear_list\nend"
  ]
}