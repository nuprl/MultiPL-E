{
  "name": "mbpp_440_find_adverb_position",
  "language": "rb",
  "prompt": "# Write a function to find the first adverb and their positions in a given sentence.\ndef find_adverb_position(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_adverb_position\n    candidate = method(:find_adverb_position)\n    assert_equal([0, 7, \"clearly\"], candidate.call(\"clearly!! we can see the sky\"))\n    assert_equal([0, 9, \"seriously\"], candidate.call(\"seriously!! there are many roses\"))\n    assert_equal([0, 13, \"unfortunately\"], candidate.call(\"unfortunately!! sita is going to home\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.split(\" \").each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index.map { |word, index| [word, index] }\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb is: #{adverb}\"\n    puts \"The position is: #{text.index(adverb)}\"\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverb_positions = []\n  adverbs.each do |adverb|\n    adverb_positions << text.index(adverb)\n  end\n  return adverbs, adverb_positions\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} Position: #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and it's position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    adverb_position << index if word.end_with?(\"ly\")\n  end\n  adverb_position\nend",
    "  text.scan(/\\b[a-z]*ly\\b/i).map { |word| text.index(word) }\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and it's position is #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at index #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and it is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"#{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and the position is #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"#{adverb} is an adverb and it is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverb_positions = text.enum_for(:scan, /\\w+ly/).map { Regexp.last_match.begin(0) }\n  puts \"Adverbs: #{adverbs}\"\n  puts \"Adverb positions: #{adverb_positions}\"\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |word| text.index(word) }\nend",
    "  text.split(\" \").each_with_index.map { |word, index| [word, index] if word.end_with?(\"ly\") }.compact\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"#{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |word, index|\n    puts \"The adverb #{word} is at position #{index + 1}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is found at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverb = text.scan(/\\w+ly/)\n  adverb_position = text.scan(/\\w+ly/).map {|x| text.index(x)}\n  puts \"Adverb: #{adverb}\"\n  puts \"Adverb position: #{adverb_position}\"\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |word, index|\n    puts \"#{word} is an adverb and is at position #{index}\"\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The first adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |word, index|\n    puts \"#{word} is at position #{index}\"\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index}\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} at position #{index}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.map { |adverb| text.index(adverb) }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    adverb_positions << index if word.end_with?('ly')\n  end\n  adverb_positions\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and it's position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at index #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} at position #{index}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index}\"\n    end\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    adverb_positions << index if word.end_with?(\"ly\")\n  end\n  adverb_positions\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.map { |adverb| text.index(adverb) }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    if word.match(/ly$/)\n      adverbs << word\n      adverb_positions << index\n    end\n  end\n  return adverbs, adverb_positions\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    adverb_position << index if word.end_with?('ly')\n  end\n  adverb_position\nend",
    "  adverbs = []\n  positions = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << word\n      positions << index\n    end\n  end\n  [adverbs, positions]\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"The adverb #{adverb} is at position #{index}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    adverb_positions << index if word.end_with?(\"ly\")\n  end\n  adverb_positions\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts adverb + \": \" + text.index(adverb).to_s\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is at position #{index}\"\n  end\nend",
    "  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    adverb_positions << index if word.end_with?(\"ly\")\n  end\n  adverb_positions\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index.map { |word, index| [word, index] }\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split(\" \").each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index}.\"\n    end\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << [word, index]\n    end\n  end\n  adverb_position\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << {word: word, index: index}\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |adverb| text.index(adverb) }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at index #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.match(/ly$/)\n      return \"#{word} is an adverb and it is at position #{index}.\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverb_positions = []\n  adverbs.each do |adverb|\n    adverb_positions << text.index(adverb)\n  end\n  adverb_positions\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = []\n  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << word\n      adverb_positions << index\n    end\n  end\n  puts \"Adverbs: #{adverbs}\"\n  puts \"Adverb Positions: #{adverb_positions}\"\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it's position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.match(/\\w+ly/)\n      adverb_position << index\n    end\n  end\n  adverb_position\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverb_positions = []\n  adverbs.each do |adverb|\n    adverb_positions << text.index(adverb)\n  end\n  return adverb_positions\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.map { |adverb| text.index(adverb) }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return [word, index]\n    end\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and the position is #{index}.\"\n    end\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |word| text.index(word) }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverb_positions = text.enum_for(:scan, /\\w+ly/).map { Regexp.last_match.begin(0) }\n  puts \"Adverbs: #{adverbs}\"\n  puts \"Adverb positions: #{adverb_positions}\"\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << index\n    end\n  end\n  adverb_position\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is found at position #{index}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.downcase.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each_with_index do |adverb, index|\n    puts \"#{adverb} is an adverb and it is found at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.split.each_with_index.map do |word, index|\n    if word.end_with?(\"ly\")\n      [word, index]\n    end\n  end.compact\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |word| text.index(word) }\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"The adverb #{adverb} is at position #{index}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The first adverb is #{word} and it is found at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |word| text.index(word) }\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    adverb_position << index if word.end_with?(\"ly\")\n  end\n  adverb_position\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    adverb_position << index if word.end_with?('ly')\n  end\n  adverb_position\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index.select{|word, index| word.end_with?(\"ly\")}.map{|word, index| [word, index+1]}\nend"
  ]
}