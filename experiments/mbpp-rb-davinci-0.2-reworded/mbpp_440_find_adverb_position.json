{
  "name": "mbpp_440_find_adverb_position",
  "language": "rb",
  "prompt": "# Write a function to find the first adverb and their positions in a given sentence.\ndef find_adverb_position(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_adverb_position\n    candidate = method(:find_adverb_position)\n    assert_equal([0, 7, \"clearly\"], candidate.call(\"clearly!! we can see the sky\"))\n    assert_equal([0, 9, \"seriously\"], candidate.call(\"seriously!! there are many roses\"))\n    assert_equal([0, 13, \"unfortunately\"], candidate.call(\"unfortunately!! sita is going to home\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.split(\" \").each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index.map { |word, index| [word, index] }\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb is: #{adverb}\"\n    puts \"The position is: #{text.index(adverb)}\"\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverb_positions = []\n  adverbs.each do |adverb|\n    adverb_positions << text.index(adverb)\n  end\n  return adverbs, adverb_positions\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} Position: #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and it's position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    adverb_position << index if word.end_with?(\"ly\")\n  end\n  adverb_position\nend",
    "  text.scan(/\\b[a-z]*ly\\b/i).map { |word| text.index(word) }\nend"
  ]
}