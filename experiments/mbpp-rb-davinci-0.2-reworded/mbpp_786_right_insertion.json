{
  "name": "mbpp_786_right_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_insertion\n    candidate = method(:right_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  a.bsearch_index{|e| e >= x}\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return a.length if a.empty? || x > a.last\n  return 0 if x < a.first\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      return mid\n    end\n  end\n  low\nend",
    "  return a.length if a.empty? || x > a.last\n  return 0 if x < a.first",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return a.size if a.empty? || a.last < x\n  left, right = 0, a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  # return 0 if a.empty?\n  # return a.size if x > a[-1]\n  # return 0 if x < a[0]\n  #\n  # left = 0\n  # right = a.size - 1\n  #\n  # while left <= right\n  #   mid = left + (right - left) / 2\n  #   if a[mid] == x\n  #     return mid + 1\n  #   elsif a[mid] < x\n  #     left = mid + 1\n  #   else\n  #     right = mid - 1\n  #   end\n  # end\n  #\n  # left",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  # Return the index of the first element in the array that is greater than x.\n  # If all elements are less than or equal to x, return the index of the last element plus one.\n  # If the array is empty, return 0.\n  return 0 if a.empty?\n  return a.size if a.last <= x\n  left = 0\n  right = a.size - 1\n  while left < right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left, right = 0, a.size\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend"
  ]
}