{
  "name": "mbpp_786_right_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_insertion\n    candidate = method(:right_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  a.bsearch_index{|e| e >= x}\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return a.length if a.empty? || x > a.last\n  return 0 if x < a.first\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      return mid\n    end\n  end\n  low\nend",
    "  return a.length if a.empty? || x > a.last\n  return 0 if x < a.first",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return a.size if a.empty? || a.last < x\n  left, right = 0, a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  # return 0 if a.empty?\n  # return a.size if x > a[-1]\n  # return 0 if x < a[0]\n  #\n  # left = 0\n  # right = a.size - 1\n  #\n  # while left <= right\n  #   mid = left + (right - left) / 2\n  #   if a[mid] == x\n  #     return mid + 1\n  #   elsif a[mid] < x\n  #     left = mid + 1\n  #   else\n  #     right = mid - 1\n  #   end\n  # end\n  #\n  # left",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  # Return the index of the first element in the array that is greater than x.\n  # If all elements are less than or equal to x, return the index of the last element plus one.\n  # If the array is empty, return 0.\n  return 0 if a.empty?\n  return a.size if a.last <= x\n  left = 0\n  right = a.size - 1\n  while left < right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left, right = 0, a.size\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length && a[i] < x\n    i += 1\n  end\n  i\nend",
    "  i = 0\n  while i < a.size && a[i] < x\n    i += 1\n  end\n  i\nend",
    "  return a.length if a.empty? || x > a.last\n  return 0 if x < a.first\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  # return 0 if x < a[0]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a.length if x > a[-1]\n  # return a",
    "  a.bsearch_index { |y| y >= x } || a.size\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return a.length if a[-1] <= x\n  return 0 if a[0] >= x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  # Write your code here\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      low = mid + 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.size\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return a.length if a[-1] <= x\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.size if x > a.last\n  return 0 if x < a.first",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return a.length if a.empty? || a.last < x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  # return index of first element that is greater than x\n  # or length of array if no such element exists\n  # assume array is sorted in ascending order\n  # assume no duplicate elements\n  lo = 0\n  hi = a.length\n  while lo < hi\n    mid = (lo + hi) / 2\n    if x < a[mid]\n      hi = mid\n    else\n      lo = mid + 1\n    end\n  end\n  lo\nend",
    "  return a.length if a.last < x\n  return 0 if a.first > x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  right\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] > x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  low, high = 0, a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1",
    "  return a.length if x > a.last\n  return 0 if x < a.first\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid\n    else\n      left = mid + 1\n    end\n  end\n  if a[left] < x\n    left + 1\n  else\n    left\n  end\nend",
    "  # TODO\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.size if x > a[-1]",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  return a.length if a.length == 0 || x > a[-1]\n  return 0 if x < a[0]\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return a.size if a.size == 0 || a[-1] <= x\n  left = 0\n  right = a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low, high = 0, a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] > x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # Return the index of the first element in the array that is greater than x.\n  # If all elements are less than or equal to x, return the length of the array.\n  # If the array is empty, return 0.\n  return 0 if a.empty?\n  return a.length if a.all? { |e| e <= x }\n  a.each_with_index do |e, i|\n    return i if e > x\n  end\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    elsif x > a[mid]\n      low = mid + 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return a.length if a.length == 0 || x > a[-1]\n  return 0 if x < a[0]\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  a.bsearch_index { |e| e >= x } || a.size\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return a.length\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  i = 0\n  j = a.size - 1\n  while i <= j\n    m = (i + j) / 2\n    if a[m] < x\n      i = m + 1\n    else\n      j = m - 1\n    end\n  end\n  i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  right\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  # Write your code here.\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return a.length if x > a[-1]\n  return 0 if x < a[0]\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return a.size if a.size == 0\n  return 0 if a[0] > x\n  return a.size if a[-1] <= x",
    "  return 0 if a.empty?\n  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = left + (right - left) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return a.length if a.empty? || a.last < x\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  # Write your code here\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  j = a.length - 1\n  while i <= j\n    m = (i + j) / 2\n    if a[m] == x\n      i = m + 1\n    elsif a[m] < x\n      i = m + 1\n    else\n      j = m - 1\n    end\n  end\n  i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  lo = 0\n  hi = a.length - 1\n  while lo <= hi\n    mid = lo + (hi - lo) / 2\n    if a[mid] < x\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  lo\nend",
    "  i = 0\n  j = a.length - 1\n  while i <= j\n    mid = (i + j) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      i = mid + 1\n    else\n      j = mid - 1\n    end\n  end\n  return i\nend",
    "  # Return the index of the first element in the array that is greater than x.\n  # If x is greater than all elements in the array, return the length of the array.\n  # If the array is empty, return 0.\n  return 0 if a.empty?\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  # return 0 if x < a[0]\n  # return a.length if x > a[-1]\n  # return a.length if x == a[-1]\n  # return 0 if x == a[0]\n  # return 1 if x > a[0] && x < a[1]\n  # return 1 if x == a[1]\n  # return a.length - 1 if x > a[-2] && x < a[-1]\n  # return a.length - 1 if x == a[-2]\n  # return a.length - 2 if x > a[-3] && x < a[-2]\n  # return a.length - 2 if x == a[-3]\n  # return a.length - 3 if x > a[-4] && x < a[-3]\n  # return a.length - 3 if x == a[-4]\n  # return a.length - 4 if x > a[-5] && x < a[-4]\n  # return a.length - 4 if x == a[-5]\n  # return a.length - 5 if x > a[-6] && x < a[-5]\n  # return a.length - 5 if x == a[-6]\n  # return a.length - 6 if x > a[-7] && x < a[-6]\n  # return a.length - 6 if x == a[-7]\n  # return a.length - 7 if x > a[-8] && x < a[-7]\n  # return a.length - 7 if x == a[-8]\n  # return a.length - 8 if x > a[-9] && x < a[-8]\n  # return a.length - 8 if x == a[-9]\n  # return a.length - 9 if x > a[-10] && x < a[-9]\n  # return a.length - 9 if x == a[-10]\n  # return a.length - 10 if x > a[-11] && x < a[-10]\n  # return a.length - 10 if x == a[-11]\n  # return a.length",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] > x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  return a.length if a.last < x\n  return 0 if a.first > x\n  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  i = 0\n  while i < a.length && a[i] < x\n    i += 1\n  end\n  i\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      left = mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      return m\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] > x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  a.each_with_index do |e, i|\n    return i if e > x\n  end\n  return a.length\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  lo = 0\n  hi = a.length\n  while lo < hi\n    mid = (lo + hi) / 2\n    if x < a[mid]\n      hi = mid\n    else\n      lo = mid + 1\n    end\n  end\n  lo\nend",
    "  l, r = 0, a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] > x\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  l\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  # Write your code here.\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return a.length if a.empty? || x > a.last\n  return 0 if x < a.first",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || a[0] >= x\n  return a.size if a[-1] < x\n  l, r = 0, a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.length if x > a[-1]",
    "  return a.size if a.empty? || x > a.last\n  left, right = 0, a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.size - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty?\n  return a.size if a.last < x\n  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      low = mid + 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # return the index of the first element in the array that is greater than x\n  a.each_with_index do |e, i|\n    return i if e > x\n  end\n  a.length\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      l = m + 1\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  l, r = 0, a.size\n  while l < r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] <= x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # return the index of the first element that is greater than x\n  # return the length of the array if all elements are less than or equal to x\n  # return 0 if x is less than all elements\n  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  # Write your code here\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  # return the index of the first element that is greater than x\n  # if there is no such element, return the length of the array\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  l, r = 0, a.size\n  while l < r\n    m = (l + r) / 2\n    if a[m] <= x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  return 0 if a.empty?\n  return a.size if a.last < x\n  left, right = 0, a.size - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  return 0 if a.empty?\n  return a.length if x > a.last",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid + 1\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  a.each_with_index do |val, i|\n    return i if val > x\n  end\n  a.length\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] <= x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return a.length if a.empty? || a.last < x\n  return 0 if a.first > x\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend"
  ]
}