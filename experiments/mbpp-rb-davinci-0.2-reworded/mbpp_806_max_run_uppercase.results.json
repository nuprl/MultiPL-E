{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rb",
  "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.split('').map { |char| char.ord }.each_with_object([0, 0]) do |char, (max, count), |\n    if char >= 65 && char <= 90\n      count += 1\n      max = count if count > max\n    else\n      count = 0\n    end\n  end.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "Loaded suite /tmp/tmp_5zov1on\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp_5zov1on.rb:16:in `test_max_run_uppercase'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_max_run_uppercase\n     15:     candidate = method(:max_run_uppercase)\n  => 16:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     17:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     18:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     19:   end\n<5> expected but was\n<0>\n===============================================================================\n\nFinished in 0.006700477 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.24 tests/s, 149.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3wnwlenr\nStarted\n.\nFinished in 0.000430278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2324.08 tests/s, 6972.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.chars.each do |char|\n    if char == char.upcase\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplac0tcr4\nStarted\n.\nFinished in 0.000437126 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2287.67 tests/s, 6863.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |c|\n    if c.upcase == c\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzmt27img\nStarted\n.\nFinished in 0.000592526 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1687.69 tests/s, 5063.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  count = 0\n  max = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      count += 1\n      max = count if count > max\n    else\n      count = 0\n    end\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvxfbnxb1\nStarted\n.\nFinished in 0.000457677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2184.95 tests/s, 6554.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n      max_run = run if run > max_run\n    else\n      run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzut2fqqa\nStarted\n.\nFinished in 0.000624423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1601.48 tests/s, 4804.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n      max_run = run if run > max_run\n    else\n      run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzut2fqqa\nStarted\n.\nFinished in 0.000624423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1601.48 tests/s, 4804.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmcd63qo8\nStarted\n.\nFinished in 0.000453627 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2204.45 tests/s, 6613.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3iepiyd4\nStarted\n.\nFinished in 0.000430766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.45 tests/s, 6964.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max = 0\n  curr = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      curr += 1\n    else\n      curr = 0\n    end\n    max = curr if curr > max\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpek7peiin\nStarted\n.\nFinished in 0.000481013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.95 tests/s, 6236.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.scan(/[A-Z]+/).max_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmp4821x350\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp4821x350.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"ISBES\">\n===============================================================================\n\nFinished in 0.007055208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.74 tests/s, 141.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  # Write your code here\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      if current_run > max_run\n        max_run = current_run\n      end\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvcxtcr3z\nStarted\n.\nFinished in 0.000431037 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2319.99 tests/s, 6959.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp_pah07zf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_pah07zf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp_pah07zf.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_pah07zf.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  return test_str.scan(/[A-Z]+/).max_by(&:length).length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyf3ngiac\nStarted\n.\nFinished in 0.000442806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.33 tests/s, 6774.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk_while { |a, b| a.upcase == b.upcase }.max_by(&:size).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmp75462q01\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp75462q01.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"G\">\n===============================================================================\n\nFinished in 0.006520784 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.36 tests/s, 153.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwv74pa_g\nStarted\n.\nFinished in 0.000444176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2251.36 tests/s, 6754.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2y0gilyr\nStarted\n.\nFinished in 0.000434623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.84 tests/s, 6902.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnvkv0x7s\nStarted\n.\nFinished in 0.000436501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.95 tests/s, 6872.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwv74pa_g\nStarted\n.\nFinished in 0.000444176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2251.36 tests/s, 6754.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  current_count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_count += 1\n      max_count = current_count if current_count > max_count\n    else\n      current_count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1aul29zh\nStarted\n.\nFinished in 0.000575348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1738.08 tests/s, 5214.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk{|x| x.upcase == x}.map{|x,y| y.length}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_0xpcmc4\nStarted\n.\nFinished in 0.000488339 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2047.76 tests/s, 6143.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmpud1nbrkm\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpud1nbrkm.rb:20:in `test_max_run_uppercase'\n     17:   def test_max_run_uppercase\n     18:     candidate = method(:max_run_uppercase)\n     19:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n  => 20:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     21:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     22:   end\n     23: end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006919768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.51 tests/s, 289.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3iepiyd4\nStarted\n.\nFinished in 0.000430766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.45 tests/s, 6964.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps4ii28mc\nStarted\n.\nFinished in 0.000437615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.11 tests/s, 6855.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmcd63qo8\nStarted\n.\nFinished in 0.000453627 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2204.45 tests/s, 6613.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpld04s99h\nStarted\n.\nFinished in 0.000440996 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2267.59 tests/s, 6802.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  # split the string into an array of characters\n  # iterate through the array of characters\n  # if the character is uppercase, add it to a new array\n  # if the character is not uppercase, stop adding to the new array\n  # return the length of the new array\n  # if the new array is empty, return 0\n  char_array = test_str.split('')\n  uppercase_array = []\n  char_array.each do |char|\n    if char == char.upcase\n      uppercase_array << char\n    else\n      break\n    end\n  end\n  if uppercase_array.empty?\n    0\n  else\n    uppercase_array.length\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmpmfc605dk\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpmfc605dk.rb:28:in `test_max_run_uppercase'\n     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_max_run_uppercase\n     27:     candidate = method(:max_run_uppercase)\n  => 28:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     29:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     30:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     31:   end\n<5> expected but was\n<1>\n===============================================================================\n\nFinished in 0.013389983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.68 tests/s, 74.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      if current_run > max_run\n        max_run = current_run\n      end\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmp5yi8so7y\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp5yi8so7y.rb:22:in `test_max_run_uppercase'\n     19:   def test_max_run_uppercase\n     20:     candidate = method(:max_run_uppercase)\n     21:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n  => 22:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     23:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     24:   end\n     25: end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.008094849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.54 tests/s, 247.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  # your code here\n  return test_str.scan(/[A-Z]+/).max_by(&:length).length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbiwvzdwh\nStarted\n.\nFinished in 0.000439284 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2276.43 tests/s, 6829.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  current_count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_count += 1\n    else\n      current_count = 0\n    end\n    max_count = current_count if current_count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq8j1vbw0\nStarted\n.\nFinished in 0.000513388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1947.84 tests/s, 5843.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsigk2w13\nStarted\n.\nFinished in 0.000456443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2190.85 tests/s, 6572.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps4ii28mc\nStarted\n.\nFinished in 0.000437615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.11 tests/s, 6855.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  # Write your code here\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      count += 1\n    else\n      max_count = count if count > max_count\n      count = 0\n    end\n  end\n  max_count = count if count > max_count\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1d1cc_7t\nStarted\n.\nFinished in 0.000524329 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1907.20 tests/s, 5721.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max = 0\n  current = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current += 1\n    else\n      current = 0\n    end\n    max = current if current > max\n  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptpf20z6w\nStarted\n.\nFinished in 0.00048397 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2066.24 tests/s, 6198.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfywbz3gs\nStarted\n.\nFinished in 0.000743688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1344.65 tests/s, 4033.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3iepiyd4\nStarted\n.\nFinished in 0.000430766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.45 tests/s, 6964.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.scan(/[A-Z]+/).max_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmp4821x350\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmp4821x350.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"ISBES\">\n===============================================================================\n\nFinished in 0.007055208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.74 tests/s, 141.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfywbz3gs\nStarted\n.\nFinished in 0.000743688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1344.65 tests/s, 4033.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmevrxq0_\nStarted\n.\nFinished in 0.000424883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2353.59 tests/s, 7060.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfywbz3gs\nStarted\n.\nFinished in 0.000743688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1344.65 tests/s, 4033.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.split(\"\").each do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp70av7qxk\nStarted\n.\nFinished in 0.000521015 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1919.33 tests/s, 5757.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps4ii28mc\nStarted\n.\nFinished in 0.000437615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.11 tests/s, 6855.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeqmhfvaa\nStarted\n.\nFinished in 0.000436383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.56 tests/s, 6874.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0oey64b3\nStarted\n.\nFinished in 0.000472834 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2114.91 tests/s, 6344.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  current_count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_count += 1\n    else\n      current_count = 0\n    end\n    max_count = current_count if current_count > max_count\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq8j1vbw0\nStarted\n.\nFinished in 0.000513388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1947.84 tests/s, 5843.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2y0gilyr\nStarted\n.\nFinished in 0.000434623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.84 tests/s, 6902.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n    else\n      run = 0\n    end\n    max_run = run if run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx97ze0sg\nStarted\n.\nFinished in 0.000392613 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.04 tests/s, 7641.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd92xo9zx\nStarted\n.\nFinished in 0.000447305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2235.61 tests/s, 6706.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps4ii28mc\nStarted\n.\nFinished in 0.000437615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.11 tests/s, 6855.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpld04s99h\nStarted\n.\nFinished in 0.000440996 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2267.59 tests/s, 6802.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |c| c.upcase == c }.map { |k, v| v.size }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnjmiaozd\nStarted\n.\nFinished in 0.000453138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2206.83 tests/s, 6620.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps4ii28mc\nStarted\n.\nFinished in 0.000437615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2285.11 tests/s, 6855.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.chars.each do |char|\n    if char.match(/[A-Z]/)\n      run += 1\n    else\n      max_run = run if run > max_run\n      run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "Loaded suite /tmp/tmpvow61eqb\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpvow61eqb.rb:20:in `test_max_run_uppercase'\n     17:   def test_max_run_uppercase\n     18:     candidate = method(:max_run_uppercase)\n     19:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n  => 20:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     21:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     22:   end\n     23: end\n<6> expected but was\n<4>\n===============================================================================\n\nFinished in 0.006478424 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.36 tests/s, 308.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeqmhfvaa\nStarted\n.\nFinished in 0.000436383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2291.56 tests/s, 6874.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |char| char.upcase == char }.map { |_, chunk| chunk.size }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw3sejard\nStarted\n.\nFinished in 0.000455126 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2197.19 tests/s, 6591.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpouvu9fja\nStarted\n.\nFinished in 0.000942898 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1060.56 tests/s, 3181.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  current_count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_count += 1\n      max_count = current_count if current_count > max_count\n    else\n      current_count = 0\n    end\n  end\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1aul29zh\nStarted\n.\nFinished in 0.000575348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1738.08 tests/s, 5214.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2y0gilyr\nStarted\n.\nFinished in 0.000434623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.84 tests/s, 6902.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  # split string into array of characters\n  char_arr = test_str.split(\"\")\n  # initialize variables\n  max_run = 0\n  current_run = 0\n  # iterate through array\n  char_arr.each do |char|\n    # if character is uppercase, increment current run\n    if char.upcase == char\n      current_run += 1\n    # if character is not uppercase, reset current run\n    else\n      current_run = 0\n    end\n    # if current run is greater than max run, set max run to current run\n    if current_run > max_run\n      max_run = current_run\n    end\n  end\n  # return max run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpknslqppe\nStarted\n.\nFinished in 0.000481289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2077.75 tests/s, 6233.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char == char.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprgnovbso\nStarted\n.\nFinished in 0.000436727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.76 tests/s, 6869.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk{|c| c.upcase == c}.map{|c, a| a.size}.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprxgfl1c_\nStarted\n.\nFinished in 0.000460409 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2171.98 tests/s, 6515.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp2akiwla\nStarted\n.\nFinished in 0.000427368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2339.90 tests/s, 7019.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n    else\n      run = 0\n    end\n    max_run = run if run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx97ze0sg\nStarted\n.\nFinished in 0.000392613 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2547.04 tests/s, 7641.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo4wa8dl\nStarted\n.\nFinished in 0.000439154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2277.11 tests/s, 6831.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk2k7wji7\nStarted\n.\nFinished in 0.000433734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.56 tests/s, 6916.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char =~ /[A-Z]/\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnvkv0x7s\nStarted\n.\nFinished in 0.000436501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2290.95 tests/s, 6872.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgsyshid\nStarted\n.\nFinished in 0.000430787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.33 tests/s, 6964.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  test_str.chars.chunk { |c| c.upcase == c }.map { |k, v| v.join }.max_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "Loaded suite /tmp/tmpbi49kt9e\nStarted\nF\n===============================================================================\nFailure: test_max_run_uppercase(TestHumanEval)\n/tmp/tmpbi49kt9e.rb:9:in `test_max_run_uppercase'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_max_run_uppercase\n      8:     candidate = method(:max_run_uppercase)\n  =>  9:     assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n     10:     assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n     11:     assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n     12:   end\n<5> expected but was\n<\"ISBES\">\n===============================================================================\n\nFinished in 0.006449854 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.04 tests/s, 155.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      max_count = count if count > max_count\n      count = 0\n    end\n  end\n  max_count = count if count > max_count\n  max_count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_f7j4u09\nStarted\n.\nFinished in 0.000407779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2452.31 tests/s, 7356.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      run += 1\n    else\n      max_run = run if run > max_run\n      run = 0\n    end\n  end\n  max_run = run if run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsy30dqks\nStarted\n.\nFinished in 0.000407601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2453.38 tests/s, 7360.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw94mkiig\nStarted\n.\nFinished in 0.000426883 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2342.56 tests/s, 7027.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}