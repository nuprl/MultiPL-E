{
  "name": "mbpp_470_add_pairwise",
  "language": "rb",
  "prompt": "# Write a function to find the pairwise addition of the neighboring elements of the given array.\ndef add_pairwise(test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_pairwise\n    candidate = method(:add_pairwise)\n    assert_equal([6, 12, 15, 18], candidate.call([1, 5, 7, 8, 10]))\n    assert_equal([8, 14, 17, 20], candidate.call([2, 6, 8, 9, 11]))\n    assert_equal([10, 16, 19, 22], candidate.call([3, 7, 9, 10, 12]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup.each_cons(2).map { |x, y| x + y }\nend",
    "  test_tup.each_with_index.map{|e,i| i.even? ? e + test_tup[i+1] : e}\nend",
    "  test_tup.each_cons(2).map { |a, b| a + b }\nend",
    "  test_tup.each_with_index.map { |e, i| e + test_tup[i + 1] }.compact\nend",
    "  test_tup.each_cons(2).map { |x, y| x + y }\nend",
    "  test_tup.each_cons(2).map { |a, b| a + b }\nend",
    "  new_arr = []\n  test_tup.each_with_index do |num, index|\n    if index == test_tup.length - 1\n      new_arr << test_tup[index] + test_tup[0]\n    else\n      new_arr << test_tup[index] + test_tup[index + 1]\n    end\n  end\n  new_arr\nend",
    "  test_tup.each_with_index.map { |e, i| e + test_tup[i + 1] }.compact\nend",
    "  test_tup.each_with_index.map do |_, index|\n    test_tup[index] + test_tup[index + 1]\n  end\nend",
    "  test_tup.each_with_index.map do |num, index|\n    if index == test_tup.length - 1\n      num + test_tup[0]\n    else\n      num + test_tup[index + 1]\n    end\n  end\nend",
    "  test_tup.each_cons(2).map { |x, y| x + y }\nend",
    "  test_tup.each_cons(2).map { |x, y| x + y }\nend",
    "  test_tup.each_with_index.map { |x, i| x + test_tup[i + 1] }.compact\nend",
    "  test_tup.each_with_index.map { |x, i| x + test_tup[i+1] }.compact\nend",
    "  test_tup.each_with_index.map { |x, i| i.even? ? x + test_tup[i + 1] : x }.compact\nend",
    "  test_tup.each_cons(2).map {|x,y| x+y}\nend",
    "  test_tup.each_cons(2).map { |a, b| a + b }\nend",
    "  test_tup.each_cons(2).map { |a, b| a + b }\nend",
    "  test_tup.each_cons(2).map { |x, y| x + y }\nend",
    "  sum = 0\n  test_tup.each_with_index do |num, index|\n    if index < test_tup.length - 1\n      sum += num + test_tup[index + 1]\n    end\n  end\n  sum\nend"
  ]
}