{
  "name": "mbpp_278_count_first_elements",
  "language": "rb",
  "prompt": "# Write a function to find the number of elements that occurs before the array element in the given array.\ndef count_first_elements(test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_first_elements\n    candidate = method(:count_first_elements)\n    assert_equal(3, candidate.call([1, 5, 7, [4, 6], 10]))\n    assert_equal(2, candidate.call([2, 9, [5, 7], 11]))\n    assert_equal(4, candidate.call([11, 15, 5, 8, [2, 3], 8]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup.each_with_index.map { |e, i| test_tup[0...i].count(e) }\nend",
    "  test_tup.each_with_index do |x,i|\n    puts \"#{x} occurs before #{test_tup[i+1]} #{i} times\"\n  end\nend",
    "  count = 0\n  test_tup.each do |i|\n    count += 1 if i < test_tup[0]\n  end\n  count\nend",
    "  test_tup.each_with_index.map { |e, i| test_tup[0..i].count(e) - 1 }\nend",
    "  test_tup.each_with_index do |element, index|\n    puts \"The number of elements before #{element} is #{index}\"\n  end\nend",
    "  test_tup.each_with_index.map { |e, i| test_tup[0..i].count(e) - 1 }\nend",
    "  test_tup.each_with_index do |x, i|\n    puts \"Number of elements before #{x} is #{i}\"\n  end\nend",
    "  test_tup.map { |x| test_tup.index(x) }\nend",
    "  test_tup.each_with_index.map { |e, i| test_tup[0..i].count(e) - 1 }\nend",
    "  test_tup.each_with_index.map { |e, i| i if e == test_tup.first }.compact.count\nend",
    "  test_tup.each_with_object([]) do |element, array|\n    array << test_tup.take_while { |e| e != element }.count\n  end\nend",
    "  test_tup.map { |x| test_tup.index(x) }\nend",
    "  test_tup.each_with_index.map { |e, i| test_tup[0..i].count(e) - 1 }\nend",
    "  test_tup.each_with_index.map { |e, i| test_tup[0..i].count(e) - 1 }\nend",
    "  test_tup.each_with_index.map { |e, i| test_tup[0..i].count(e) }\nend",
    "  test_tup.each_with_index.map { |e, i| test_tup[0..i].count(e) }\nend",
    "  count = 0\n  test_tup.each do |i|\n    if i == test_tup[-1]\n      break\n    else\n      count += 1\n    end\n  end\n  count\nend",
    "  test_tup.map { |x| test_tup.index(x) }\nend",
    "  test_tup.map { |e| test_tup.index(e) }\nend",
    "  test_tup.each_with_index.map { |el, i| i if el == test_tup.first }.compact.count\nend"
  ]
}