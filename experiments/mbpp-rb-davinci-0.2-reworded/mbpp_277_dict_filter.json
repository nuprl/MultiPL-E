{
  "name": "mbpp_277_dict_filter",
  "language": "rb",
  "prompt": "# Write a function that takes in a hash and integer n and filters the hash to only include entries with values greater than or equal to n.\ndef dict_filter(dict, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_dict_filter\n    candidate = method(:dict_filter)\n    assert_equal({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 170))\n    assert_equal({\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 180))\n    assert_equal({\"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 190))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  dict.select { |k, v| v >= n }\nend",
    "    new_dict = {}\n    dict.each do |key, value|\n        if value >= n\n            new_dict[key] = value\n        end\n    end\n    return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  dict.select { |k, v| v >= n }\nend",
    "    new_dict = {}\n    dict.each do |key, value|\n        if value >= n\n            new_dict[key] = value\n        end\n    end\n    return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "    new_dict = {}\n    dict.each do |key, value|\n        if value >= n\n            new_dict[key] = value\n        end\n    end\n    return new_dict\nend",
    "  new_dict = {}\n  dict.each do |k, v|\n    if v >= n\n      new_dict[k] = v\n    end\n  end\n  new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "    new_dict = {}\n    dict.each do |key, value|\n        if value >= n\n            new_dict[key] = value\n        end\n    end\n    return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  new_dict\nend",
    "  new_dict = {}\n  dict.each do |key, value|\n    if value >= n\n      new_dict[key] = value\n    end\n  end\n  return new_dict\nend"
  ]
}