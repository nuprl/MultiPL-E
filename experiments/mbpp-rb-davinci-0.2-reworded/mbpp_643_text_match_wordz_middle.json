{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "rb",
  "prompt": "# Write a function that checks if a strings contains 'z', except at the start and end of the word.\ndef text_match_wordz_middle(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_wordz_middle\n    candidate = method(:text_match_wordz_middle)\n    assert_equal(true, candidate.call(\"pythonzabc.\"))\n    assert_equal(false, candidate.call(\"zxyabc.\"))\n    assert_equal(false, candidate.call(\"  lang  .\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if /\\bz\\B/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/\\Bz\\B/) ? true : false\nend",
    "  if /\\bz\\w*z\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if /\\bz\\w+z\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/\\b[^z]*z[^z]*\\b/) ? true : false\nend",
    "  text.match(/\\b[^z]*z[^z]*\\b/) ? true : false\nend",
    "  if /\\bz\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if /\\bz\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if /\\bz\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if /\\bz\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if /\\bz\\b/ =~ text\n    puts \"There is a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if /\\bz\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/\\b[^z]*z[^z]*\\b/) ? true : false\nend",
    "  if /\\bz\\B/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/\\b[^z]*z[^z]*\\b/) ? true : false\nend",
    "  if /\\bz\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if text.match(/\\bz\\b/)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/\\b[^z]*z[^z]*\\b/) ? true : false\nend",
    "  if /\\bz\\b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/\\b[^z]*z[^z]*\\b/) ? true : false\nend"
  ]
}