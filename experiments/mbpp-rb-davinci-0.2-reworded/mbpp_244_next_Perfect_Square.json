{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_Perfect_Square\n    candidate = method(:next_Perfect_Square)\n    assert_equal(36, candidate.call(35))\n    assert_equal(9, candidate.call(6))\n    assert_equal(16, candidate.call(9))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  i = 1\n  while i < n\n    i += 1\n  end\n  i = i**2\n  puts \"The next perfect square is #{i}\"\nend",
    "  return (n + 1) ** 2\nend",
    "  return (n+1)**2\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  return i * i\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  return i * i\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  if i * i == n\n    return i * i\n  else\n    return (i + 1) * (i + 1)\n  end\nend",
    "  return (n+1)**2\nend\nputs next_Perfect_Square(5)",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  i * i\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  i * i\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  if i * i == n\n    return n\n  else\n    return i * i\n  end\nend",
    "  return \"Please enter a positive number\" if n < 0\n  return \"Please enter a number\" if n.class != Fixnum\n  return \"Please enter a number\" if n.class != Float\n  return \"Please enter a number\" if n.class != Integer\n  return \"Please enter a number\" if n.class != Rational\n  return \"Please enter a number\" if n.class != Complex\n  return \"Please enter a number\" if n.class != BigDecimal\n  return \"Please enter a number\" if n.class != Bignum\n  return \"Please enter a number\" if n.class != String\n  return \"Please enter a number\" if n.class != Symbol\n  return \"Please enter a number\" if n.class != NilClass\n  return \"Please enter a number\" if n.class != TrueClass\n  return \"Please enter a number\" if n.class != FalseClass\n  return \"Please enter a number\" if n.class != Array\n  return \"Please enter a number\" if n.class != Hash\n  return \"Please enter a number\" if n.class != Range\n  return \"Please enter a number\" if n.class != Regexp\n  return \"Please enter a number\" if n.class != Struct\n  return \"Please enter a number\" if n.class != Method\n  return \"Please enter a number\" if n.class != Proc\n  return \"Please enter a number\" if n.class != MatchData\n  return \"Please enter a number\" if n.class != Time\n  return \"Please enter a number\" if n.class != File\n  return \"Please enter a number\" if n.class != Dir\n  return \"Please enter a number\" if n.class != IO\n  return \"Please enter a number\" if n.class != Enumerator\n  return \"Please enter a number\" if n.class != Thread\n  return \"Please enter a number\" if n.class != ThreadGroup\n  return \"Please enter a number\" if n.class != Binding\n  return \"Please enter a number\" if n.class != Exception\n  return \"Please enter a number\" if n.class != SystemExit\n  return \"Please enter a number\" if n.class != SignalException\n  return \"Please enter a number\" if n.class != Interrupt\n",
    "  n = n.to_i\n  return (n+1)**2 if n == Math.sqrt(n)**2\n  return (Math.sqrt(n).ceil)**2\nend",
    "  return (n+1)**2\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  i**2\nend",
    "  return (n + 1) ** 2\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  i * i\nend",
    "  n = n.to_i\n  if n < 0\n    puts \"Please enter a positive number\"\n  else\n    while true\n      if Math.sqrt(n) % 1 == 0\n        puts \"The next perfect square is #{n}\"\n        break\n      else\n        n += 1\n      end\n    end\n  end\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  return i * i\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  i * i\nend",
    "  i = 1\n  while i < n\n    i += 1\n  end\n  return i*i\nend"
  ]
}