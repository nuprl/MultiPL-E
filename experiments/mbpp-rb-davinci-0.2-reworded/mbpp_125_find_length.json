{
  "name": "mbpp_125_find_length",
  "language": "rb",
  "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_len = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, count_zero + count_one].max\n    end\n  end\n  max_len\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0+count_1].max\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i in string.length-1..0\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0+count_1].max\n    end\n  end\n  return max_diff\nend",
    "  max_length = 0\n  count_of_1 = 0\n  count_of_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_of_1 += 1\n    else\n      count_of_0 += 1\n    end\n    max_length = [max_length, count_of_1 - count_of_0].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = (count_0 - count_1).abs if (count_0 - count_1).abs > max_diff\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_len = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_len = [max_len, (count_0 - count_1).abs].max\n  end\n  max_len\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  string.each_char.with_index do |char, index|\n    if char == \"1\"\n      max_length = index + 1\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  return 0 if string.length == 1\n  max_diff = 0\n  i = 0\n  while i < string.length\n    j = i + 1\n    while j < string.length\n      diff = (string[i..j].count('0') - string[i..j].count('1')).abs\n      max_diff = diff if diff > max_diff\n      j += 1\n    end\n    i += 1\n  end\n  max_diff\nend",
    "  max_length = 0\n  current_length = 0\n  string.each_char do |char|\n    if char == '1'\n      current_length += 1\n    else\n      max_length = current_length if current_length > max_length\n      current_length = 0\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  return 0 if string.length <= 1\n  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  zeros = 0\n  ones = 0\n  max_diff = 0\n  string.each_char do |char|\n    if char == '0'\n      zeros += 1\n    else\n      ones += 1\n    end\n    max_diff = [max_diff, (zeros - ones).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_len = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_len = [max_len, (count_zero - count_one).abs].max\n  end\n  max_len\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_diff = 0\n  for i in 0..string.length-1\n    for j in i+1..string.length\n      sub_string = string[i..j]\n      diff = (sub_string.count('0') - sub_string.count('1')).abs\n      max_diff = diff if diff > max_diff\n    end\n  end\n  max_diff\nend",
    "  return 0 if string.length == 1\n  max_length = 0\n  (0..string.length-1).each do |i|\n    (i+1..string.length-1).each do |j|\n      sub_string = string[i..j]\n      if sub_string.count('0') == sub_string.count('1')\n        max_length = [max_length, sub_string.length].max\n      end\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if max_length < count\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    diff = (count_0 - count_1).abs\n    max_diff = diff if diff > max_diff\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  # Write your code here\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_diff = 0\n  zeros = 0\n  ones = 0\n  string.each_char do |char|\n    if char == '0'\n      zeros += 1\n    else\n      ones += 1\n    end\n    if zeros == ones\n      max_diff = [max_diff, zeros + ones].max\n    end\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one + 1\n      max_length = [max_length, count_one*2+1].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_one == count_zero + 1\n      max_length = [max_length, count_zero*2+1].max\n    end\n  end\n  return max_length\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_diff = 0\n  count_1 = 0\n  count_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_1 += 1\n    else\n      count_0 += 1\n    end\n    max_diff = [max_diff, (count_1 - count_0).abs].max\n  end\n  max_diff\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_diff = [max_diff, count_zero].max\n    end\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  count = 0\n  max_count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_count = count if count > max_count\n    count = 0 if count < 0\n  end\n  max_count\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_count = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_count = count if count > max_count\n    count = 0 if count < 0\n  end\n  max_count\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  return max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = count if count > max_length\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_one - count_zero].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one + 1\n      max_length = [max_length, count_one*2+1].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_one == count_zero + 1\n      max_length = [max_length, count_zero*2+1].max\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero*2].max\n    end\n  end\n  return max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = count_zero + count_one\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  return 0 if string.length == 1\n  max_length = 0\n  (0..string.length-1).each do |i|\n    (i+1..string.length-1).each do |j|\n      if (string[i..j].count('0') - string[i..j].count('1')).abs > max_length\n        max_length = (string[i..j].count('0') - string[i..j].count('1')).abs\n      end\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    elsif char == '1'\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_of_1 = 0\n  count_of_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_of_1 += 1\n    elsif char == '0'\n      count_of_0 += 1\n    end\n    max_length = [max_length, count_of_1 - count_of_0].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  count = 0\n  max = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = [max, count].max\n  end\n  max\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = [max_length, current_length].max\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  # Write your code here\n  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero * 2].max\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  string.reverse.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero * 2].max\n    end\n  end\n  max_length\nend",
    "  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max = count if count > max\n  end\n  max\nend",
    "  max_diff = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_diff = count if count > max_diff\n    count = 0 if count < 0\n  end\n  max_diff\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count -= 1\n    else\n      count += 1\n    end\n    max_length = count.abs if count.abs > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0*2].max\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1 + 1\n      max_length = [max_length, count_1*2+1].max\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_1 == count_0 + 1\n      max_length = [max_length, count_0*2+1].max\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0 + count_1].max\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = [max_length, current_length].max\n      current_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = count_0 + count_1\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0 + count_1].max\n    end\n  end\n  return max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_length = [max_length, count_zero + count_one].max\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_length = [max_length, count_0 + count_1].max\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_of_0 = 0\n  count_of_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_of_0 += 1\n    else\n      count_of_1 += 1\n    end\n    max_diff = (count_of_0 - count_of_1).abs if (count_of_0 - count_of_1).abs > max_diff\n  end\n  max_diff\nend",
    "  # Write your code here\n  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '1'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    current_length += 1\n    if count_zero == count_one\n      max_length = current_length if current_length > max_length\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == \"0\"\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max = count if count > max\n    count = 0 if count < 0\n  end\n  max\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    elsif char == '1'\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  return 0 if string.length == 0\n  return 1 if string.length == 1\n  max_length = 0\n  (0..string.length-1).each do |i|\n    (i+1..string.length-1).each do |j|\n      if (string[i..j].count('0') - string[i..j].count('1')).abs > max_length\n        max_length = (string[i..j].count('0') - string[i..j].count('1')).abs\n      end\n    end\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    diff = (count_zero - count_one).abs\n    max_diff = diff if diff > max_diff\n  end\n  max_diff\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend",
    "  max_len = 0\n  count_zero = 0\n  count_one = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, i+1].max\n    end\n  end\n  max_len\nend",
    "  max_length = 0\n  curr_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    curr_length += 1\n    if count_zero == count_one\n      max_length = curr_length if curr_length > max_length\n      curr_length = 0\n      count_zero = 0\n      count_one = 0\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_one = 0\n  count_zero = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_one - count_zero).abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero, count_one].max\n  end\n  max_length\nend",
    "  string.split('0').map { |substring| substring.length }.max\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    count = count + 1 if char == '1'\n    count = count - 1 if char == '0'\n    max_length = count if count > max_length\n  end\n  max_length\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, (count_zero - count_one).abs].max\n  end\n  max_length\nend"
  ]
}