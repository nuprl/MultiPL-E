{
  "name": "mbpp_125_find_length",
  "language": "rb",
  "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_len = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    if count_zero == count_one\n      max_len = [max_len, count_zero + count_one].max\n    end\n  end\n  max_len\nend",
    "  max_length = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_length = [max_length, count_zero - count_one].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_zero = 0\n  count_one = 0\n  string.each_char do |char|\n    if char == '0'\n      count_zero += 1\n    else\n      count_one += 1\n    end\n    max_diff = [max_diff, (count_zero - count_one).abs].max\n  end\n  max_diff\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  for i in 0..string.length-1\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0+count_1].max\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i in string.length-1..0\n    if string[i] == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    if count_0 == count_1\n      max_diff = [max_diff, count_0+count_1].max\n    end\n  end\n  return max_diff\nend",
    "  max_length = 0\n  count_of_1 = 0\n  count_of_0 = 0\n  string.each_char do |char|\n    if char == '1'\n      count_of_1 += 1\n    else\n      count_of_0 += 1\n    end\n    max_length = [max_length, count_of_1 - count_of_0].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = (count_0 - count_1).abs if (count_0 - count_1).abs > max_diff\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend",
    "  max_len = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_len = [max_len, (count_0 - count_1).abs].max\n  end\n  max_len\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, (count_0 - count_1).abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_length = [max_length, count_0 - count_1].max\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = [max_length, count.abs].max\n  end\n  max_length\nend",
    "  max_length = 0\n  string.each_char.with_index do |char, index|\n    if char == \"1\"\n      max_length = index + 1\n    end\n  end\n  max_length\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    if count < 0\n      count = 0\n    end\n    max_length = [max_length, count].max\n  end\n  max_length\nend",
    "  max_length = 0\n  current_length = 0\n  count_zero = 0\n  count_one = 0",
    "  max_diff = 0\n  count_0 = 0\n  count_1 = 0\n  string.each_char do |char|\n    if char == '0'\n      count_0 += 1\n    else\n      count_1 += 1\n    end\n    max_diff = [max_diff, (count_0 - count_1).abs].max\n  end\n  max_diff\nend",
    "  max_length = 0\n  count = 0\n  string.each_char do |char|\n    if char == '0'\n      count += 1\n    else\n      count -= 1\n    end\n    max_length = count if count > max_length\n    count = 0 if count < 0\n  end\n  max_length\nend"
  ]
}