{
  "name": "mbpp_580_extract_even",
  "language": "rb",
  "prompt": "# Write a function to remove uneven elements in the nested mixed array.\ndef extract_even(test_tuple)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_even\n    candidate = method(:extract_even)\n    assert_equal([4, [6, [2, 4]], 6, 8], candidate.call([4, 5, [7, 6, [2, 4]], 6, 8]))\n    assert_equal([6, [8, [4, 8]]], candidate.call([5, 6, [8, 7, [4, 8]], 7, 9]))\n    assert_equal([6, [8, [4, 6]], 8, 10], candidate.call([5, 6, [9, 8, [4, 6]], 8, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tuple.each do |x|\n    if x.is_a?(Array)\n      extract_even(x)\n    else\n      puts x if x.even?\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      puts element if element.even?\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      if element % 2 != 0\n        test_tuple.delete(element)\n      end\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      if element % 2 == 0\n        puts element\n      end\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      puts element if element.even?\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    elsif element.is_a?(Integer)\n      if element % 2 != 0\n        test_tuple.delete(element)\n      end\n    end\n  end\n  test_tuple\nend",
    "  test_tuple.flatten.select { |x| x.is_a?(Integer) && x.even? }\nend",
    "  test_tuple.flatten.select { |x| x.even? }\nend",
    "  test_tuple.each_with_object([]) do |element, result|\n    if element.is_a?(Array)\n      result << extract_even(element)\n    else\n      result << element if element.even?\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      if element % 2 != 0\n        test_tuple.delete(element)\n      end\n    end\n  end\nend",
    "  test_tuple.each do |x|\n    if x.is_a?(Array)\n      extract_even(x)\n    else\n      puts x if x % 2 == 0\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.class == Array\n      element.delete_if { |x| x % 2 != 0 }\n    end\n  end\n  test_tuple\nend",
    "  test_tuple.flatten.select { |x| x.is_a?(Integer) && x.even? }\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      puts element if element.even?\n    end\n  end\nend",
    "  test_tuple.flatten.select { |x| x.is_a?(Integer) && x.even? }\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      puts element if element.even?\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      puts element if element % 2 == 0\n    end\n  end\nend",
    "  test_tuple.flatten.select { |x| x.even? }\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      puts element if element.even?\n    end\n  end\nend",
    "  test_tuple.each do |element|\n    if element.is_a?(Array)\n      extract_even(element)\n    else\n      puts element if element.even?\n    end\n  end\nend"
  ]
}