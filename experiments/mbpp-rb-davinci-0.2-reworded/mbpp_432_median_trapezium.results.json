{
  "name": "mbpp_432_median_trapezium",
  "language": "rb",
  "prompt": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmp92v0slj4\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmp92v0slj4.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008322231 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.16 tests/s, 120.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  median = (base1 + base2) / 2\n  median * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmpbq79q7wl\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbq79q7wl.rb:10:in `test_median_trapezium'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_median_trapezium\n      9:     candidate = method(:median_trapezium)\n  => 10:     assert_equal(20, candidate.call(15, 25, 35))\n     11:     assert_equal(15, candidate.call(10, 20, 30))\n     12:     assert_equal(7.5, candidate.call(6, 9, 4))\n     13:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006254216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.89 tests/s, 159.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  ((base1 + base2) / 2) * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmp_ynz9nor\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmp_ynz9nor.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006199051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.32 tests/s, 161.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2).to_f / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmp5z0r2uj5\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmp5z0r2uj5.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700.0>\n\ndiff:\n? 20   \n? 7 0.0\n? ? +++\n===============================================================================\n\nFinished in 0.006079854 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.48 tests/s, 164.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  ((base1 + base2) / 2) * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmp_ynz9nor\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmp_ynz9nor.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006199051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.32 tests/s, 161.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmp92v0slj4\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmp92v0slj4.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008322231 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.16 tests/s, 120.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  ((base1 + base2) / 2) * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmp_ynz9nor\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmp_ynz9nor.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006199051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.32 tests/s, 161.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  median = (base1 + base2) / 2\n  median * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmpbq79q7wl\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbq79q7wl.rb:10:in `test_median_trapezium'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_median_trapezium\n      9:     candidate = method(:median_trapezium)\n  => 10:     assert_equal(20, candidate.call(15, 25, 35))\n     11:     assert_equal(15, candidate.call(10, 20, 30))\n     12:     assert_equal(7.5, candidate.call(6, 9, 4))\n     13:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006254216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.89 tests/s, 159.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  ((base1 + base2) / 2) * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmp_ynz9nor\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmp_ynz9nor.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006199051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.32 tests/s, 161.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  median = (base1 + base2) / 2\n  median * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmpbq79q7wl\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbq79q7wl.rb:10:in `test_median_trapezium'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_median_trapezium\n      9:     candidate = method(:median_trapezium)\n  => 10:     assert_equal(20, candidate.call(15, 25, 35))\n     11:     assert_equal(15, candidate.call(10, 20, 30))\n     12:     assert_equal(7.5, candidate.call(6, 9, 4))\n     13:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006254216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.89 tests/s, 159.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  median = (base1 + base2) / 2\n  median * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1666122610,
      "stdout": "Loaded suite /tmp/tmpbq79q7wl\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbq79q7wl.rb:10:in `test_median_trapezium'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_median_trapezium\n      9:     candidate = method(:median_trapezium)\n  => 10:     assert_equal(20, candidate.call(15, 25, 35))\n     11:     assert_equal(15, candidate.call(10, 20, 30))\n     12:     assert_equal(7.5, candidate.call(6, 9, 4))\n     13:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.006254216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.89 tests/s, 159.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  return (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpxs0l1p6g\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpxs0l1p6g.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008809389 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.52 tests/s, 113.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) / 2 * height\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpn9mdk2ln\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpn9mdk2ln.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.007389364 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.33 tests/s, 135.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n  (base1 + base2) * height / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n",
      "timestamp": 1665517259,
      "stdout": "Loaded suite /tmp/tmpbokguhv1\nStarted\nF\n===============================================================================\nFailure: test_median_trapezium(TestHumanEval)\n/tmp/tmpbokguhv1.rb:9:in `test_median_trapezium'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_median_trapezium\n      8:     candidate = method(:median_trapezium)\n  =>  9:     assert_equal(20, candidate.call(15, 25, 35))\n     10:     assert_equal(15, candidate.call(10, 20, 30))\n     11:     assert_equal(7.5, candidate.call(6, 9, 4))\n     12:   end\n<20> expected but was\n<700>\n\ndiff:\n? 20 \n? 7 0\n? ? +\n===============================================================================\n\nFinished in 0.008258959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.08 tests/s, 121.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}