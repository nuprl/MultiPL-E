{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "rb",
  "prompt": "# Write a rbthon function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_non_repeating_character\n    candidate = method(:first_non_repeating_character)\n    assert_equal(nil, candidate.call(\"abcabc\"))\n    assert_equal(\"a\", candidate.call(\"abc\"))\n    assert_equal(\"c\", candidate.call(\"ababc\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  count = Hash.new(0)\n  str1.each_char { |char| count[char] += 1 }\n  count.key(1)\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find{|ch| str1.count(ch) == 1}\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char { |char| count[char] += 1 }\n  str1.each_char { |char| return char if count[char] == 1 }\n  nil\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char { |char| count[char] += 1 }\n  count.key(1)\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |x|\n    if str1.count(x) == 1\n      return x\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char { |char| count[char] += 1 }\n  count.each { |k, v| return k if v == 1 }\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |i|\n    if str1.count(i) == 1\n      return i\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.chars.each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char { |char| count[char] += 1 }\n  count.each { |k, v| return k if v == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split(\"\").each do |i|\n    if str1.count(i) == 1\n      return i\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  count = Hash.new(0)\n  str1.each_char { |char| count[char] += 1 }\n  str1.each_char { |char| return char if count[char] == 1 }\n  nil\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |ch|\n    return ch if str1.count(ch) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |x|\n    if str1.count(x) == 1\n      return x\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split(\"\").each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.each_char do |c|\n    return c if str1.count(c) == 1\n  end\nend",
    "  str1.split(\"\").each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend"
  ]
}