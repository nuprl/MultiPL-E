{
  "name": "mbpp_131_reverse_vowels",
  "language": "rb",
  "prompt": "# Write a rbthon function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_vowels\n    candidate = method(:reverse_vowels)\n    assert_equal(\"Python\", candidate.call(\"Python\"))\n    assert_equal(\"ASU\", candidate.call(\"USA\"))\n    assert_equal(\"ab\", candidate.call(\"ab\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select{|x| vowels.include?(x.downcase)}.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    vowels.include?(char) ? result.prepend(char) : result << char\n  end\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.inject([]) do |result, (char, index)|\n    vowels.include?(char.downcase) ? result.unshift(char) : result.push(char)\n  end.join\nend",
    "  vowels = []\n  str1.each_char do |char|\n    vowels << char if char =~ /[aeiou]/i\n  end\n  str1.each_char.with_index do |char, index|\n    str1[index] = vowels.pop if char =~ /[aeiou]/i\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    vowels.include?(char) ? result.insert(index, char) : result << char\n  end\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_object([]) do |char, arr|\n    arr.unshift(char) if vowels.include?(char.downcase)\n  end.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_index.inject([]) do |result, (char, index)|\n    vowels.include?(char) ? result.unshift(char) : result.push(char)\n  end.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i]) && vowels.include?(str1[j])\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i])\n      j -= 1\n    elsif vowels.include?(str1[j])\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    result << (vowels.include?(char.downcase) ? str1[-index - 1] : char)\n  end\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1.chars.map { |char| vowels.include?(char.downcase) ? char.reverse : char }.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index do |char, index|\n    if vowels.include?(char)\n      str1[index] = str1[-index - 1]\n      str1[-index - 1] = char\n    end\n  end\n  str1\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    if vowels.include?(char.downcase)\n      result << str1[(str1.length - 1) - str1[0..index].reverse.index(char)]\n    else\n      result << char\n    end\n  end\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char.downcase) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.map { |char| vowels.include?(char) ? char : char }.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i]) && vowels.include?(str1[j])\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i])\n      j -= 1\n    elsif vowels.include?(str1[j])\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  return str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1_array = str1.split(\"\")\n  str1_array.each_with_index do |letter, index|\n    if vowels.include?(letter)\n      str1_array[index] = str1_array[-index-1]\n    end\n  end\n  str1_array.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    vowels.include?(char.downcase) ? result.insert(index, result.slice!(vowels.index(char.downcase))) : result << char\n  end\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_index.map do |char, index|\n    vowels.include?(char) ? str1[-index - 1] : char\n  end.join\nend",
    "  str1.gsub(/[aeiou]/i) { |vowel| vowel.reverse }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_index do |char, index|\n    if vowels.include?(char)\n      str1[index] = str1[str1.rindex(char)]\n      str1[str1.rindex(char)] = char\n    end\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    result << (vowels.include?(char) ? str1[str1.length - index - 1] : char)\n  end\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select{|x| vowels.include?(x)}.reverse.join\nend\nputs reverse_vowels(\"hello\")\nputs reverse_vowels(\"hello world\")\nputs reverse_vowels(\"aeiou\")\nputs reverse_vowels(\"why\")",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = ['a', 'e', 'i', 'o', 'u']\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    vowels.include?(char.downcase) ? result.insert(index, result.slice!(vowels.index(char.downcase))) : result << char\n  end\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.split(\"\").select{|x| vowels.include?(x)}.reverse.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.split(\"\").select { |x| vowels.include?(x) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select{|v| vowels.include?(v)}.reverse.join\nend\nputs reverse_vowels(\"ruby\")",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.select{|char| vowels.include?(char)}.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    vowels.include?(char.downcase) ? result.insert(index, char) : result << char\n  end\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i, '*')\n    .tr('*', vowels.reverse.join)\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = 'aeiou'\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.each_with_index.inject(\"\") do |result, (char, index)|\n    vowels.include?(char.downcase) ? result.insert(index, result.slice!(result.rindex(/[aeiou]/i))) : result << char\n  end\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1.split(\"\").select{|x| vowels.include?(x)}.reverse.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.split(\"\").select{|x| vowels.include?(x)}.reverse.join(\"\")\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  str1.reverse.gsub(/[aeiou]/, 'a' => 'u', 'e' => 'o', 'i' => 'a', 'o' => 'e', 'u' => 'i')\nend",
    "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str1.split(\"\").each_with_index do |letter, index|\n    if vowels.include?(letter)\n      str1[index] = str1[-index]\n    end\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = ['a', 'e', 'i', 'o', 'u']\n  str1.chars.each_with_index do |char, index|\n    if vowels.include?(char)\n      str1[index] = str1[str1.length - index - 1]\n    end\n  end\n  str1\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |char| vowels.include?(char) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1.chars.select { |c| vowels.include?(c) }.reverse.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiou\"\n  str1 = str1.split(\"\")\n  i = 0\n  j = str1.length - 1\n  while i < j\n    if vowels.include?(str1[i].downcase) && vowels.include?(str1[j].downcase)\n      str1[i], str1[j] = str1[j], str1[i]\n      i += 1\n      j -= 1\n    elsif vowels.include?(str1[i].downcase)\n      j -= 1\n    elsif vowels.include?(str1[j].downcase)\n      i += 1\n    else\n      i += 1\n      j -= 1\n    end\n  end\n  str1.join(\"\")\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = \"aeiouAEIOU\"\n  str1.chars.each_with_object([]) do |char, arr|\n    arr.unshift(char) if vowels.include?(char)\n  end.join\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend",
    "  vowels = str1.scan(/[aeiou]/i)\n  str1.gsub(/[aeiou]/i) { vowels.pop }\nend"
  ]
}