{
  "name": "mbpp_160_find_solution",
  "language": "rb",
  "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  return nil if a > n || b > n\n  return [n/a, 0] if a * (n/a) == n\n  return [0, n/b] if b * (n/b) == n\n  x, y = find_solution(b, a % b, n)\n  [y, x - y * (a / b)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "Loaded suite /tmp/tmpl1jk6i1o\nStarted\nF\n===============================================================================\nFailure: test_find_solution(TestHumanEval)\n/tmp/tmpl1jk6i1o.rb:13:in `test_find_solution'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_find_solution\n     12:     candidate = method(:find_solution)\n  => 13:     assert_equal([2, 1], candidate.call(2, 3, 7))\n     14:     assert_equal(nil, candidate.call(4, 2, 7))\n     15:     assert_equal([4, 1], candidate.call(1, 13, 17))\n     16:   end\n<[2, 1]> expected but was\n<[-7, 7]>\n\ndiff:\n? [2 , 1]\n?  -7  7 \n?  ?  ? \n===============================================================================\n\nFinished in 0.007807751 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.08 tests/s, 128.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  x = 0\n  y = n / b\n  while x <= y\n    if a * x + b * y == n\n      return [x, y]\n    end\n    x += 1\n    y = (n - a * x) / b\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "Loaded suite /tmp/tmpmqw7ojlo\nStarted\nF\n===============================================================================\nFailure: test_find_solution(TestHumanEval)\n/tmp/tmpmqw7ojlo.rb:18:in `test_find_solution'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_find_solution\n     17:     candidate = method(:find_solution)\n  => 18:     assert_equal([2, 1], candidate.call(2, 3, 7))\n     19:     assert_equal(nil, candidate.call(4, 2, 7))\n     20:     assert_equal([4, 1], candidate.call(1, 13, 17))\n     21:   end\n<[2, 1]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007357166 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.92 tests/s, 135.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptdef32sr\nStarted\n.\nFinished in 0.000526201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.41 tests/s, 5701.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  x = 0\n  y = n\n  while x <= n\n    y = n - a * x\n    return [x, y] if y % b == 0\n    x += 1\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmpky2ktdyz\nStarted\nF\n===============================================================================\nFailure: test_find_solution(TestHumanEval)\n/tmp/tmpky2ktdyz.rb:16:in `test_find_solution'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_find_solution\n     15:     candidate = method(:find_solution)\n  => 16:     assert_equal([2, 1], candidate.call(2, 3, 7))\n     17:     assert_equal(nil, candidate.call(4, 2, 7))\n     18:     assert_equal([4, 1], candidate.call(1, 13, 17))\n     19:   end\n<[2, 1]> expected but was\n<[2, 3]>\n\ndiff:\n? [2, 1]\n?     3 \n?     ? \n===============================================================================\n\nFinished in 0.010265177 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.42 tests/s, 97.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  x = 0\n  y = 0\n  while (x * a) + (y * b) != n\n    if (x * a) + (y * b) > n\n      x -= 1\n    else\n      x += 1\n    end\n  end\n  return [x, y]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123299,
      "stdout": "Loaded suite /tmp/tmpweg5khh0\nStarted",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  x = 0\n  y = n / b\n  while (x * a + y * b) != n\n    x += 1\n    y = (n - a * x) / b\n    return nil if y < 0\n  end\n  [x, y]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprfctjivd\nStarted\n.\nFinished in 0.000507178 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1971.69 tests/s, 5915.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptdef32sr\nStarted\n.\nFinished in 0.000526201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.41 tests/s, 5701.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  x = 0\n  while x <= n\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n    x += 1\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpewqofkgv\nStarted\n.\nFinished in 0.000489185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2044.22 tests/s, 6132.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  for x in 0..n\n    for y in 0..n\n      if a * x + b * y == n\n        return [x, y]\n      end\n    end\n  end\n  return nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwcswxg10\nStarted\n.\nFinished in 0.00060983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1639.80 tests/s, 4919.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  for x in 0..n\n    for y in 0..n\n      return [x, y] if a * x + b * y == n\n    end\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5zska_m_\nStarted\n.\nFinished in 0.000565195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1769.30 tests/s, 5307.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if (n - a * x) % b == 0\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptdef32sr\nStarted\n.\nFinished in 0.000526201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.41 tests/s, 5701.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - (a * x)) / b\n    return [x, y] if (a * x) + (b * y) == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplk6bxmum\nStarted\n.\nFinished in 0.000461453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.07 tests/s, 6501.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  for x in 0..n\n    y = (n - a * x) / b\n    return [x, y] if y >= 0 && (n - a * x) % b == 0\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp665k8s48\nStarted\n.\nFinished in 0.000521595 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1917.20 tests/s, 5751.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  x = 0\n  y = n/b\n  while x <= n/a\n    if a*x + b*y == n\n      return [x, y]\n    else\n      x += 1\n      y -= 1\n    end\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1666123294,
      "stdout": "Loaded suite /tmp/tmpnqs4pu97\nStarted\nF\n===============================================================================\nFailure: test_find_solution(TestHumanEval)\n/tmp/tmpnqs4pu97.rb:19:in `test_find_solution'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_find_solution\n     18:     candidate = method(:find_solution)\n  => 19:     assert_equal([2, 1], candidate.call(2, 3, 7))\n     20:     assert_equal(nil, candidate.call(4, 2, 7))\n     21:     assert_equal([4, 1], candidate.call(1, 13, 17))\n     22:   end\n<[2, 1]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007359438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.88 tests/s, 135.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n  (0..n).each do |x|\n    y = (n - a * x) / b\n    return [x, y] if a * x + b * y == n\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpskrcqcbz\nStarted\n.\nFinished in 0.000481139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2078.40 tests/s, 6235.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}