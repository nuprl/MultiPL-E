{
  "name": "mbpp_75_find_tuples",
  "language": "rb",
  "prompt": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp131h6gfn\nStarted\n.\nFinished in 0.000385739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2592.43 tests/s, 7777.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_array| sub_array.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqgib_osy\nStarted\n.\nFinished in 0.000382674 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2613.19 tests/s, 7839.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_list|\n    if sub_list.all? { |num| num % k == 0 }\n      result.push(sub_list)\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwr1zots7\nStarted\n.\nFinished in 0.000468836 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2132.94 tests/s, 6398.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_list|\n    if sub_list.all? { |num| num % k == 0 }\n      result.push(sub_list)\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwr1zots7\nStarted\n.\nFinished in 0.000468836 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2132.94 tests/s, 6398.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n    new_list = []\n    test_list.each do |i|\n        if i.all? { |j| j % k == 0 }\n            new_list.push(i)\n        end\n    end\n    return new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_hcib93i\nStarted\n.\nFinished in 0.000646907 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1545.82 tests/s, 4637.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp131h6gfn\nStarted\n.\nFinished in 0.000385739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2592.43 tests/s, 7777.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |arr| arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgbvwccny\nStarted\n.\nFinished in 0.000766423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1304.76 tests/s, 3914.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_list|\n    result << sub_list if sub_list.all? { |num| num % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09nfzfy2\nStarted\n.\nFinished in 0.00054037 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1850.58 tests/s, 5551.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_array| sub_array.all? { |element| element % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmponf209he\nStarted\n.\nFinished in 0.000614058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1628.51 tests/s, 4885.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_arr| sub_arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprpuwe09w\nStarted\n.\nFinished in 0.000525922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1901.42 tests/s, 5704.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |arr| arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgbvwccny\nStarted\n.\nFinished in 0.000766423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1304.76 tests/s, 3914.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuc29dsf2\nStarted\n.\nFinished in 0.000787911 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1269.18 tests/s, 3807.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |arr| arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgbvwccny\nStarted\n.\nFinished in 0.000766423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1304.76 tests/s, 3914.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuc29dsf2\nStarted\n.\nFinished in 0.000787911 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1269.18 tests/s, 3807.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |arr| arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgbvwccny\nStarted\n.\nFinished in 0.000766423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1304.76 tests/s, 3914.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp131h6gfn\nStarted\n.\nFinished in 0.000385739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2592.43 tests/s, 7777.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  new_list = []\n  test_list.each do |i|\n    if i.all? { |e| e % k == 0 }\n      new_list << i\n    end\n  end\n  new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyo9_k4kw\nStarted\n.\nFinished in 0.000614615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1627.03 tests/s, 4881.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n    new_list = []\n    test_list.each do |sub_list|\n        if sub_list.all? { |num| num % k == 0 }\n            new_list.push(sub_list)\n        end\n    end\n    return new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpirtunfuj\nStarted\n.\nFinished in 0.000542563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1843.10 tests/s, 5529.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_array| sub_array.all? { |element| element % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmponf209he\nStarted\n.\nFinished in 0.000614058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1628.51 tests/s, 4885.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |i|\n    if i.all? { |x| x % k == 0 }\n      result.push(i)\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptueszx7o\nStarted\n.\nFinished in 0.000615243 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1625.37 tests/s, 4876.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select{|x| x.all?{|y| y%k==0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwb1x73b9\nStarted\n.\nFinished in 0.000522678 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1913.22 tests/s, 5739.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_list|\n    result << sub_list if sub_list.all? { |i| i % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppopakbef\nStarted\n.\nFinished in 0.000576006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.09 tests/s, 5208.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_list|\n    result << sub_list if sub_list.all? { |num| num % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09nfzfy2\nStarted\n.\nFinished in 0.00054037 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1850.58 tests/s, 5551.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp131h6gfn\nStarted\n.\nFinished in 0.000385739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2592.43 tests/s, 7777.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_arr| sub_arr.all? { |elem| elem % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp99ybz4_l\nStarted\n.\nFinished in 0.000668178 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1496.61 tests/s, 4489.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |i| i.all? { |j| j % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuc29dsf2\nStarted\n.\nFinished in 0.000787911 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1269.18 tests/s, 3807.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_array|\n    result << sub_array if sub_array.all? { |element| element % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi97cr9al\nStarted\n.\nFinished in 0.000488712 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2046.19 tests/s, 6138.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |arr|\n    result << arr if arr.all? { |num| num % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplhtsyqud\nStarted\n.\nFinished in 0.000529479 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1888.65 tests/s, 5665.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select {|x| x.all? {|y| y % k == 0}}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnf_w7yiy\nStarted\n.\nFinished in 0.000470385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2125.92 tests/s, 6377.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_arr| sub_arr.all? { |e| e % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpivcthlk0\nStarted\n.\nFinished in 0.000705605 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1417.22 tests/s, 4251.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_list|\n    result << sub_list if sub_list.all? { |num| num % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09nfzfy2\nStarted\n.\nFinished in 0.00054037 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1850.58 tests/s, 5551.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |arr| arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgbvwccny\nStarted\n.\nFinished in 0.000766423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1304.76 tests/s, 3914.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_arr| sub_arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprpuwe09w\nStarted\n.\nFinished in 0.000525922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1901.42 tests/s, 5704.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_arr| sub_arr.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprpuwe09w\nStarted\n.\nFinished in 0.000525922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1901.42 tests/s, 5704.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  # Write your code here\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplgedpfh5\nStarted\n.\nFinished in 0.000581876 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1718.58 tests/s, 5155.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |sub_list|\n    if sub_list.all? { |num| num % k == 0 }\n      result << sub_list\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi1_1uxho\nStarted\n.\nFinished in 0.000494473 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2022.36 tests/s, 6067.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  result = []\n  test_list.each do |list|\n    result << list if list.all? { |num| num % k == 0 }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp01wty8sh\nStarted\n.\nFinished in 0.000468951 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2132.42 tests/s, 6397.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  new_list = []\n  test_list.each do |sub_list|\n    if sub_list.all? { |num| num % k == 0 }\n      new_list << sub_list\n    end\n  end\n  new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_75ns1vc\nStarted\n.\nFinished in 0.000532775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1876.96 tests/s, 5630.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |tuple| tuple.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7t68k9bw\nStarted\n.\nFinished in 0.000388832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2571.80 tests/s, 7715.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |x| x.all? { |y| y % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvd9r61k\nStarted\n.\nFinished in 0.000383774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.70 tests/s, 7817.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n  test_list.select { |sub_list| sub_list.all? { |num| num % k == 0 } }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsgx0rfqi\nStarted\n.\nFinished in 0.00039396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2538.33 tests/s, 7614.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}