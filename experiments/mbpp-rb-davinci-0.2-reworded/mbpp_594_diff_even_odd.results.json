{
  "name": "mbpp_594_diff_even_odd",
  "language": "rb",
  "prompt": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x % 2 == 0}\n  odd_list = list1.select {|x| x % 2 != 0}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8llnufk0\nStarted\n.\nFinished in 0.000406701 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.81 tests/s, 7376.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select{|x| x.even?}\n  odd_list = list1.select{|x| x.odd?}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgxcd9_dr\nStarted\n.\nFinished in 0.000406739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2458.58 tests/s, 7375.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list.push(i)\n    else\n      odd_list.push(i)\n    end\n  end\n  puts \"The difference of first even and first odd number is #{even_list.first - odd_list.first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "Loaded suite /tmp/tmp3zofwdi1\nStarted\nThe difference of first even and first odd number is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmp3zofwdi1.rb:18:in `test_diff_even_odd'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_diff_even_odd\n     17:     candidate = method(:diff_even_odd)\n  => 18:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     19:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     20:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     21:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00823047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.50 tests/s, 121.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.find {|x| x.even?}\n  odd_num = list1.find {|x| x.odd?}\n  return even_num - odd_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphz_4ph5k\nStarted\n.\nFinished in 0.000411236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2431.69 tests/s, 7295.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  return even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpayct61pe\nStarted\n.\nFinished in 0.000387977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.47 tests/s, 7732.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwd4zok97\nStarted\n.\nFinished in 0.000393524 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.14 tests/s, 7623.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|num| num.even?}\n  odd = list1.select {|num| num.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm95oha9a\nStarted\n.\nFinished in 0.000414763 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2411.02 tests/s, 7233.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  return even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_au3xvb5\nStarted\n.\nFinished in 0.00039462 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.08 tests/s, 7602.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph8xr2v_6\nStarted\n.\nFinished in 0.00039014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2563.18 tests/s, 7689.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = []\n  odd_arr = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_arr << num\n    else\n      odd_arr << num\n    end\n  end\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp977c0o2o\nStarted\n.\nFinished in 0.000390663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.75 tests/s, 7679.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpklsnfvoe\nStarted\n.\nFinished in 0.000406232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.65 tests/s, 7384.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list << i\n    else\n      odd_list << i\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3hd7yr97\nStarted\n.\nFinished in 0.000392642 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2546.85 tests/s, 7640.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  return even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_au3xvb5\nStarted\n.\nFinished in 0.00039462 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.08 tests/s, 7602.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num.first - odd_num.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5f_isl66\nStarted\n.\nFinished in 0.00043048 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.99 tests/s, 6968.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |x| x.even? }\n  odd = list1.select { |x| x.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpexx744jh\nStarted\n.\nFinished in 0.000406463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2460.25 tests/s, 7380.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |x| x.even? }\n  odd = list1.find { |x| x.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2yocc4s5\nStarted\n.\nFinished in 0.000414254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.98 tests/s, 7241.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  return even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudjfk3mo\nStarted\n.\nFinished in 0.000740031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1351.29 tests/s, 4053.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_array << num\n    else\n      odd_array << num\n    end\n  end\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp4vb4nhv\nStarted\n.\nFinished in 0.000904228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1105.92 tests/s, 3317.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }.first\n  odd = list1.select { |num| num.odd? }.first\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfjcc6q38\nStarted\n.\nFinished in 0.000881716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1134.15 tests/s, 3402.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num % 2 == 0 }\n  odd = list1.select { |num| num % 2 != 0 }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyu0nreng\nStarted\n.\nFinished in 0.000846948 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1180.71 tests/s, 3542.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list.push(i)\n    else\n      odd_list.push(i)\n    end\n  end\n  puts \"The difference of the first even and first odd number of a given array is #{even_list[0] - odd_list[0]}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpyzlumact\nStarted\nThe difference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpyzlumact.rb:18:in `test_diff_even_odd'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_diff_even_odd\n     17:     candidate = method(:diff_even_odd)\n  => 18:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     19:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     20:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     21:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009303227 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.49 tests/s, 107.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph8xr2v_6\nStarted\n.\nFinished in 0.00039014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2563.18 tests/s, 7689.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  return even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudjfk3mo\nStarted\n.\nFinished in 0.000740031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1351.29 tests/s, 4053.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = []\n  odd = []\n  list1.each do |x|\n    if x % 2 == 0\n      even << x\n    else\n      odd << x\n    end\n  end\n  return even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp20eljz3x\nStarted\n.\nFinished in 0.000871534 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1147.40 tests/s, 3442.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwd4zok97\nStarted\n.\nFinished in 0.000393524 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.14 tests/s, 7623.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph8xr2v_6\nStarted\n.\nFinished in 0.00039014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2563.18 tests/s, 7689.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_array << i\n    else\n      odd_array << i\n    end\n  end\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxq0d214o\nStarted\n.\nFinished in 0.000778436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1284.63 tests/s, 3853.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |x| x.even? }\n  odd = list1.find { |x| x.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2yocc4s5\nStarted\n.\nFinished in 0.000414254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.98 tests/s, 7241.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |x| x.even? }\n  odd = list1.find { |x| x.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2yocc4s5\nStarted\n.\nFinished in 0.000414254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.98 tests/s, 7241.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |num| num.even? }\n  odd = list1.find { |num| num.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxawom5ab\nStarted\n.\nFinished in 0.00075972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1316.27 tests/s, 3948.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |i| i.even? }\n  odd_list = list1.select { |i| i.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpylzmzwa9\nStarted\n.\nFinished in 0.000824544 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1212.79 tests/s, 3638.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }.first\n  odd = list1.select { |num| num.odd? }.first\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfjcc6q38\nStarted\n.\nFinished in 0.000881716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1134.15 tests/s, 3402.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |x| x.even? }\n  odd = list1.select { |x| x.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpexx744jh\nStarted\n.\nFinished in 0.000406463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2460.25 tests/s, 7380.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_no = list1.select{|x| x.even?}\n  odd_no = list1.select{|x| x.odd?}\n  puts \"Difference of first even and first odd number of a given array is #{even_no[0] - odd_no[0]}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpb0mqsj08\nStarted\nDifference of first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpb0mqsj08.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008760095 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.15 tests/s, 114.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select(&:even?)\n  odd = list1.select(&:odd?)\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkun1bejk\nStarted\n.\nFinished in 0.000859354 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1163.66 tests/s, 3490.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwd4zok97\nStarted\n.\nFinished in 0.000393524 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.14 tests/s, 7623.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp40iqzcmn\nStarted\n.\nFinished in 0.001010516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n989.59 tests/s, 2968.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |num| num.even? }\n  odd = list1.find { |num| num.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxawom5ab\nStarted\n.\nFinished in 0.00075972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1316.27 tests/s, 3948.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select{|x| x%2==0}\n  odd_num = list1.select{|x| x%2!=0}\n  puts \"Difference of the first even and first odd number of a given array is #{even_num.first - odd_num.first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpzssxub06\nStarted\nDifference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpzssxub06.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010917029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n91.60 tests/s, 91.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = []\n  odd_arr = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_arr << i\n    else\n      odd_arr << i\n    end\n  end\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp98azw11l\nStarted\n.\nFinished in 0.001134139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n881.73 tests/s, 2645.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.find { |num| num.even? }\n  odd_num = list1.find { |num| num.odd? }\n  even_num - odd_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpafbgghbo\nStarted\n.\nFinished in 0.000861225 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1161.14 tests/s, 3483.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select{|num| num.even?}\n  odd_list = list1.select{|num| num.odd?}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsrb8229a\nStarted\n.\nFinished in 0.000854601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1170.14 tests/s, 3510.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7a89aop5\nStarted\n.\nFinished in 0.000945189 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1057.99 tests/s, 3173.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  list1.each do |num|\n    if num.even?\n      return num - list1.find{|n| n.odd?}\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpieha1j1g\nStarted\n.\nFinished in 0.000836113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1196.01 tests/s, 3588.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list.push(i)\n    else\n      odd_list.push(i)\n    end\n  end\n  puts \"The difference of the first even and first odd number of a given array is #{even_list.first - odd_list.first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpb4fe09vs\nStarted\nThe difference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpb4fe09vs.rb:18:in `test_diff_even_odd'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_diff_even_odd\n     17:     candidate = method(:diff_even_odd)\n  => 18:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     19:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     20:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     21:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011883585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.15 tests/s, 84.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|num| num.even?}\n  odd_list = list1.select {|num| num.odd?}\n  puts even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpw24nfw81\nStarted\n3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpw24nfw81.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010623943 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.13 tests/s, 94.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = list1.select { |num| num.even? }\n  odd_array = list1.select { |num| num.odd? }\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjr_8mwoy\nStarted\n.\nFinished in 0.00075972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1316.27 tests/s, 3948.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = []\n  odd_arr = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_arr << num\n    else\n      odd_arr << num\n    end\n  end\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp977c0o2o\nStarted\n.\nFinished in 0.000390663 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.75 tests/s, 7679.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpigpy9egk\nStarted\n.\nFinished in 0.000744449 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1343.28 tests/s, 4029.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  return even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpayct61pe\nStarted\n.\nFinished in 0.000387977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.47 tests/s, 7732.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = []\n  odd_arr = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_arr << i\n    else\n      odd_arr << i\n    end\n  end\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp98azw11l\nStarted\n.\nFinished in 0.001134139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n881.73 tests/s, 2645.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = list1.select { |num| num.even? }\n  odd_array = list1.select { |num| num.odd? }\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjr_8mwoy\nStarted\n.\nFinished in 0.00075972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1316.27 tests/s, 3948.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num.even?\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6vsint5p\nStarted\n.\nFinished in 0.000802535 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1246.05 tests/s, 3738.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|num| num.even?}\n  odd_list = list1.select {|num| num.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvnl7q1i3\nStarted\n.\nFinished in 0.000671666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.84 tests/s, 4466.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select{|num| num.even?}\n  odd_list = list1.select{|num| num.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmr79r0kv\nStarted\n.\nFinished in 0.000607517 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1646.04 tests/s, 4938.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  return even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0t2ep62q\nStarted\n.\nFinished in 0.000789699 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1266.31 tests/s, 3798.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|num| num.even?}\n  odd = list1.select {|num| num.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm95oha9a\nStarted\n.\nFinished in 0.000414763 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2411.02 tests/s, 7233.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  return even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_au3xvb5\nStarted\n.\nFinished in 0.00039462 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.08 tests/s, 7602.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num.even?\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6vsint5p\nStarted\n.\nFinished in 0.000802535 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1246.05 tests/s, 3738.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  puts \"The difference of the first even and first odd number of a given array is #{even_list[0] - odd_list[0]}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpel0_2iqc\nStarted\nThe difference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpel0_2iqc.rb:18:in `test_diff_even_odd'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_diff_even_odd\n     17:     candidate = method(:diff_even_odd)\n  => 18:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     19:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     20:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     21:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011451526 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.32 tests/s, 87.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list << i\n    else\n      odd_list << i\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3hd7yr97\nStarted\n.\nFinished in 0.000392642 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2546.85 tests/s, 7640.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = []\n  odd_arr = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_arr.push(num)\n    else\n      odd_arr.push(num)\n    end\n  end\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3zuoz1be\nStarted\n.\nFinished in 0.000824599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1212.71 tests/s, 3638.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = list1.select {|num| num.even?}\n  odd_arr = list1.select {|num| num.odd?}\n  diff = even_arr[0] - odd_arr[0]\n  puts diff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmppcvq0wrn\nStarted\n3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmppcvq0wrn.rb:12:in `test_diff_even_odd'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_diff_even_odd\n     11:     candidate = method(:diff_even_odd)\n  => 12:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     13:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     14:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     15:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.013236955 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.55 tests/s, 75.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  return even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_au3xvb5\nStarted\n.\nFinished in 0.00039462 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2534.08 tests/s, 7602.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|num| num % 2 == 0}\n  odd_list = list1.select {|num| num % 2 != 0}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_m25o275\nStarted\n.\nFinished in 0.000800067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1249.90 tests/s, 3749.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  puts even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpnutu7a4d\nStarted\n3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpnutu7a4d.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010437287 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.81 tests/s, 95.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpklsnfvoe\nStarted\n.\nFinished in 0.000406232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.65 tests/s, 7384.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_numbers = list1.select { |num| num.even? }\n  odd_numbers = list1.select { |num| num.odd? }\n  even_numbers.first - odd_numbers.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4jbiotoe\nStarted\n.\nFinished in 0.00083706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1194.66 tests/s, 3583.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_odd = list1.partition {|x| x.even?}\n  even_odd[0][0] - even_odd[1][0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3pdljfo6\nStarted\n.\nFinished in 0.000816007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1225.48 tests/s, 3676.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpklsnfvoe\nStarted\n.\nFinished in 0.000406232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.65 tests/s, 7384.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  puts even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpsve4br75\nStarted\n3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpsve4br75.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01236975 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.84 tests/s, 80.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x%2 == 0}\n  odd = list1.select{|x| x%2 != 0}\n  return (even[0] - odd[0])\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1xo0w96o\nStarted\n.\nFinished in 0.000588624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1698.88 tests/s, 5096.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |item|\n    if item % 2 == 0\n      even_list << item\n    else\n      odd_list << item\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvgw8f3ss\nStarted\n.\nFinished in 0.000490995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2036.68 tests/s, 6110.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.find {|num| num.even?}\n  odd_num = list1.find {|num| num.odd?}\n  even_num - odd_num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdtbd30yd\nStarted\n.\nFinished in 0.000990197 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1009.90 tests/s, 3029.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |x| x.even? }\n  odd_list = list1.select { |x| x.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd1gmlq98\nStarted\n.\nFinished in 0.000881683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1134.19 tests/s, 3402.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list << i\n    else\n      odd_list << i\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3hd7yr97\nStarted\n.\nFinished in 0.000392642 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2546.85 tests/s, 7640.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_array << num\n    else\n      odd_array << num\n    end\n  end\n  return even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpajggy4jm\nStarted\n.\nFinished in 0.000795109 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1257.69 tests/s, 3773.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  return even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkn5aeksn\nStarted\n.\nFinished in 0.000767529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1302.88 tests/s, 3908.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x%2==0}\n  odd = list1.select{|x| x%2!=0}\n  return even[0]-odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqb28wbhu\nStarted\n.\nFinished in 0.002190502 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n456.52 tests/s, 1369.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select {|num| num.even?}\n  odd_num = list1.select {|num| num.odd?}\n  return (even_num.first - odd_num.first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjoljc2qg\nStarted\n.\nFinished in 0.000810097 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1234.42 tests/s, 3703.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list.push(i)\n    else\n      odd_list.push(i)\n    end\n  end\n  puts \"The difference of the first even and first odd number of a given array is #{even_list[0] - odd_list[0]}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpyzlumact\nStarted\nThe difference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpyzlumact.rb:18:in `test_diff_even_odd'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_diff_even_odd\n     17:     candidate = method(:diff_even_odd)\n  => 18:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     19:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     20:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     21:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009303227 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.49 tests/s, 107.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |num| num.even? }\n  odd = list1.find { |num| num.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxawom5ab\nStarted\n.\nFinished in 0.00075972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1316.27 tests/s, 3948.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select(&:even?)\n  odd = list1.select(&:odd?)\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr75n0r_0\nStarted\n.\nFinished in 0.00079144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1263.52 tests/s, 3790.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |i| i.even? }\n  odd = list1.find { |i| i.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvu0yve6m\nStarted\n.\nFinished in 0.001030652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n970.26 tests/s, 2910.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |x| x.even? }\n  odd = list1.select { |x| x.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpexx744jh\nStarted\n.\nFinished in 0.000406463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2460.25 tests/s, 7380.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_array << num\n    else\n      odd_array << num\n    end\n  end\n  return even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpajggy4jm\nStarted\n.\nFinished in 0.000795109 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1257.69 tests/s, 3773.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|i| i.even?}\n  odd = list1.find {|i| i.odd?}\n  puts \"The difference of the first even and first odd number of a given array is #{even - odd}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmp125dqwow\nStarted\nThe difference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmp125dqwow.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009783793 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.21 tests/s, 102.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  puts \"The difference of the first even and first odd number of a given array is #{even[0] - odd[0]}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmpo_700ynn\nStarted\nThe difference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpo_700ynn.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009420493 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.15 tests/s, 106.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_numbers = list1.select { |num| num.even? }\n  odd_numbers = list1.select { |num| num.odd? }\n  even_numbers.first - odd_numbers.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4jbiotoe\nStarted\n.\nFinished in 0.00083706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1194.66 tests/s, 3583.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7a89aop5\nStarted\n.\nFinished in 0.000945189 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1057.99 tests/s, 3173.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  return even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0t2ep62q\nStarted\n.\nFinished in 0.000789699 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1266.31 tests/s, 3798.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |e| e.even? }\n  odd = list1.find { |e| e.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp16bswm3t\nStarted\n.\nFinished in 0.000667354 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1498.46 tests/s, 4495.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  puts \"Difference of first even and first odd number is #{even-odd}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmp_ycs8c3c\nStarted\nDifference of first even and first odd number is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmp_ycs8c3c.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00945104 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.81 tests/s, 105.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select {|x| x.even?}\n  odd_num = list1.select {|x| x.odd?}\n  return even_num[0] - odd_num[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplukcwhgu\nStarted\n.\nFinished in 0.000693361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1442.25 tests/s, 4326.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.find{|x| x.even?}\n  odd_num = list1.find{|x| x.odd?}\n  puts \"Difference of first even and first odd number is #{even_num - odd_num}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmpa37s_ijh\nStarted\nDifference of first even and first odd number is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpa37s_ijh.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.0117149 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n85.36 tests/s, 85.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = list1.select {|num| num.even?}\n  odd_arr = list1.select {|num| num.odd?}\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_d6kvv_i\nStarted\n.\nFinished in 0.000833569 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1199.66 tests/s, 3598.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = []\n  odd_arr = []\n  list1.each do |n|\n    if n % 2 == 0\n      even_arr << n\n    else\n      odd_arr << n\n    end\n  end\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3pjucg8r\nStarted\n.\nFinished in 0.00088906 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1124.78 tests/s, 3374.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7a89aop5\nStarted\n.\nFinished in 0.000945189 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1057.99 tests/s, 3173.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |x| x.even? }\n  odd = list1.select { |x| x.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpexx744jh\nStarted\n.\nFinished in 0.000406463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2460.25 tests/s, 7380.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find{|x| x.even?}\n  odd = list1.find{|x| x.odd?}\n  return even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpivo3qw_p\nStarted\n.\nFinished in 0.000794729 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1258.29 tests/s, 3774.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x%2 == 0}\n  odd = list1.select{|x| x%2 != 0}\n  return even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx8qajilq\nStarted\n.\nFinished in 0.000790478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1265.06 tests/s, 3795.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnfxqtjom\nStarted\n.\nFinished in 0.000747357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1338.05 tests/s, 4014.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select(&:even?)\n  odd = list1.select(&:odd?)\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr75n0r_0\nStarted\n.\nFinished in 0.00079144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1263.52 tests/s, 3790.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_arr = []\n  odd_arr = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_arr.push(i)\n    else\n      odd_arr.push(i)\n    end\n  end\n  even_arr.first - odd_arr.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpklw47r7i\nStarted\n.\nFinished in 0.000558837 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1789.43 tests/s, 5368.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  if even.length > 0 && odd.length > 0\n    return even[0] - odd[0]\n  else\n    return 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpth7hr6wm\nStarted\n.\nFinished in 0.000862091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1159.97 tests/s, 3479.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select{|num| num.even?}\n  odd_num = list1.select{|num| num.odd?}\n  even_num.first - odd_num.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu_lvtrvj\nStarted\n.\nFinished in 0.000700444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1427.67 tests/s, 4283.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_no = list1.select { |num| num.even? }\n  odd_no = list1.select { |num| num.odd? }\n  even_no.first - odd_no.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvh0hpolo\nStarted\n.\nFinished in 0.000858855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1164.34 tests/s, 3493.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find{|x| x.even?}\n  odd = list1.find{|x| x.odd?}\n  return even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpivo3qw_p\nStarted\n.\nFinished in 0.000794729 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1258.29 tests/s, 3774.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|i| i.even?}\n  odd = list1.find {|i| i.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi5m7mr2r\nStarted\n.\nFinished in 0.000543859 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1838.71 tests/s, 5516.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |e| e.even? }\n  odd = list1.find { |e| e.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp16bswm3t\nStarted\n.\nFinished in 0.000667354 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1498.46 tests/s, 4495.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|x| x.even?}\n  odd = list1.select{|x| x.odd?}\n  return (even[0] - odd[0])\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw9y9wj7m\nStarted\n.\nFinished in 0.000793108 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1260.86 tests/s, 3782.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_array << num\n    else\n      odd_array << num\n    end\n  end\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp4vb4nhv\nStarted\n.\nFinished in 0.000904228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1105.92 tests/s, 3317.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select {|num| num.even?}\n  odd_num = list1.select {|num| num.odd?}\n  puts even_num.first - odd_num.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmptehdx86e\nStarted\n3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmptehdx86e.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010385601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.29 tests/s, 96.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select{|num| num.even?}\n  odd_num = list1.select{|num| num.odd?}\n  even_num.first - odd_num.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu_lvtrvj\nStarted\n.\nFinished in 0.000700444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1427.67 tests/s, 4283.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |num| num.even? }\n  odd = list1.find { |num| num.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxawom5ab\nStarted\n.\nFinished in 0.00075972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1316.27 tests/s, 3948.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |x| x.even? }\n  odd = list1.select { |x| x.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpexx744jh\nStarted\n.\nFinished in 0.000406463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2460.25 tests/s, 7380.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_array << num\n    else\n      odd_array << num\n    end\n  end\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp4vb4nhv\nStarted\n.\nFinished in 0.000904228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1105.92 tests/s, 3317.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select{|x| x%2==0}\n  odd_list = list1.select{|x| x%2!=0}\n  return even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw5xqt2io\nStarted\n.\nFinished in 0.000735471 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1359.67 tests/s, 4079.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select{|x| x%2 == 0}\n  odd_list = list1.select{|x| x%2 != 0}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm57dr5jp\nStarted\n.\nFinished in 0.000986484 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1013.70 tests/s, 3041.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }.first\n  odd = list1.select { |num| num.odd? }.first\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfjcc6q38\nStarted\n.\nFinished in 0.000881716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1134.15 tests/s, 3402.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |x| x.even? }\n  odd = list1.select { |x| x.odd? }\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr2l6q0rw\nStarted\n.\nFinished in 0.000711976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1404.54 tests/s, 4213.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }\n  odd = list1.select { |num| num.odd? }\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw6ext554\nStarted\n.\nFinished in 0.000388394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2574.71 tests/s, 7724.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select { |num| num.even? }\n  odd_num = list1.select { |num| num.odd? }\n  even_num.first - odd_num.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5f_isl66\nStarted\n.\nFinished in 0.00043048 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.99 tests/s, 6968.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_odd_diff = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_odd_diff << num\n      break\n    end\n  end\n  list1.each do |num|\n    if num % 2 != 0\n      even_odd_diff << num\n      break\n    end\n  end\n  even_odd_diff[0] - even_odd_diff[1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgpyb4bui\nStarted\n.\nFinished in 0.00072198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1385.08 tests/s, 4155.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select { |num| num.even? }.first\n  odd = list1.select { |num| num.odd? }.first\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfjcc6q38\nStarted\n.\nFinished in 0.000881716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1134.15 tests/s, 3402.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select{|num| num.even?}\n  odd_num = list1.select{|num| num.odd?}\n  return even_num.first - odd_num.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2v27wovb\nStarted\n.\nFinished in 0.000516127 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1937.51 tests/s, 5812.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_odd_diff = 0\n  even_odd_diff = list1.detect { |x| x.even? } - list1.detect { |x| x.odd? }\n  puts \"Difference of first even and first odd number of the given array is #{even_odd_diff}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmpz7h9371q\nStarted\nDifference of first even and first odd number of the given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpz7h9371q.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009479936 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.49 tests/s, 105.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  return even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxjfnfq8q\nStarted\n.\nFinished in 0.00041937 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2384.53 tests/s, 7153.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|i| i.even?}\n  odd_list = list1.select {|i| i.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9vnyg3nb\nStarted\n.\nFinished in 0.000447676 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2233.76 tests/s, 6701.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find {|x| x.even?}\n  odd = list1.find {|x| x.odd?}\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxib0w5nb\nStarted\n.\nFinished in 0.000948711 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.06 tests/s, 3162.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7a89aop5\nStarted\n.\nFinished in 0.000945189 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1057.99 tests/s, 3173.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwxa9fmsq\nStarted\n.\nFinished in 0.000390553 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2560.47 tests/s, 7681.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select{|num| num.even?}\n  odd = list1.select{|num| num.odd?}\n  if even.length > 0 && odd.length > 0\n    even[0] - odd[0]\n  else\n    \"No even or odd numbers in the list\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbb_cuy6m\nStarted\n.\nFinished in 0.000434197 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2303.10 tests/s, 6909.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_array.push(num)\n    else\n      odd_array.push(num)\n    end\n  end\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3il02qk0\nStarted\n.\nFinished in 0.000443187 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2256.38 tests/s, 6769.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_numbers = list1.select { |num| num.even? }\n  odd_numbers = list1.select { |num| num.odd? }\n  even_numbers.first - odd_numbers.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4jbiotoe\nStarted\n.\nFinished in 0.00083706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1194.66 tests/s, 3583.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_array = []\n  odd_array = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_array << num\n    else\n      odd_array << num\n    end\n  end\n  even_array.first - odd_array.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp4vb4nhv\nStarted\n.\nFinished in 0.000904228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1105.92 tests/s, 3317.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  even[0] - odd[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpklsnfvoe\nStarted\n.\nFinished in 0.000406232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2461.65 tests/s, 7384.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|num| num.even?}\n  odd_list = list1.select {|num| num.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvnl7q1i3\nStarted\n.\nFinished in 0.000671666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.84 tests/s, 4466.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select{|i| i%2==0}\n  odd_list = list1.select{|i| i%2!=0}\n  puts \"Difference of first even and first odd number of the array is #{even_list.first - odd_list.first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmpk9ucc1dw\nStarted\nDifference of first even and first odd number of the array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpk9ucc1dw.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006371868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.94 tests/s, 156.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |x|\n    if x % 2 == 0\n      even_list.push(x)\n    else\n      odd_list.push(x)\n    end\n  end\n  puts \"#{even_list.first - odd_list.first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmpuzo8okuq\nStarted\n3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpuzo8okuq.rb:18:in `test_diff_even_odd'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_diff_even_odd\n     17:     candidate = method(:diff_even_odd)\n  => 18:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     19:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     20:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     21:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006226587 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.60 tests/s, 160.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.select {|x| x.even?}\n  odd = list1.select {|x| x.odd?}\n  puts even.first - odd.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "Loaded suite /tmp/tmpnutu7a4d\nStarted\n3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpnutu7a4d.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010437287 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.81 tests/s, 95.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select { |num| num.even? }\n  odd_list = list1.select { |num| num.odd? }\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi39uxr_x\nStarted\n.\nFinished in 0.000845857 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.23 tests/s, 3546.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list.push(i)\n    else\n      odd_list.push(i)\n    end\n  end\n  puts \"Difference of first even and first odd number of a given array is #{even_list.first - odd_list.first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmpuk0hgq2c\nStarted\nDifference of first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmpuk0hgq2c.rb:18:in `test_diff_even_odd'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_diff_even_odd\n     17:     candidate = method(:diff_even_odd)\n  => 18:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     19:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     20:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     21:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.005944799 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n168.21 tests/s, 168.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |i|\n    if i % 2 == 0\n      even_list.push(i)\n    else\n      odd_list.push(i)\n    end\n  end\n  return even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplvsvlvd_\nStarted\n.\nFinished in 0.000431323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2318.45 tests/s, 6955.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|num| num.even?}\n  odd_list = list1.select {|num| num.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvnl7q1i3\nStarted\n.\nFinished in 0.000671666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.84 tests/s, 4466.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|x| x.even?}\n  odd_list = list1.select {|x| x.odd?}\n  even_list[0] - odd_list[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph8xr2v_6\nStarted\n.\nFinished in 0.00039014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2563.18 tests/s, 7689.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find{|x| x%2==0}\n  odd = list1.find{|x| x%2!=0}\n  return even-odd\nend\nputs diff_even_odd([1,2,3,4,5,6])\nputs diff_even_odd([1,3,5,7,9])\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "1\n",
      "stderr": "/tmp/tmp3mtv6ctp.rb:5:in `diff_even_odd': undefined method `-' for nil:NilClass (NoMethodError)\n\n  return even-odd\n             ^\n\tfrom /tmp/tmp3mtv6ctp.rb:8:in `<main>'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_num = list1.select{|x| x.even?}\n  odd_num = list1.select{|x| x.odd?}\n  puts \"The difference of the first even and first odd number of a given array is #{even_num.first - odd_num.first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123555,
      "stdout": "Loaded suite /tmp/tmp27_6k_ag\nStarted\nThe difference of the first even and first odd number of a given array is 3\nF\n===============================================================================\nFailure: test_diff_even_odd(TestHumanEval)\n/tmp/tmp27_6k_ag.rb:11:in `test_diff_even_odd'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_diff_even_odd\n     10:     candidate = method(:diff_even_odd)\n  => 11:     assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n     12:     assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n     13:     assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n     14:   end\n<3> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006303419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.64 tests/s, 158.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = []\n  odd_list = []\n  list1.each do |num|\n    if num % 2 == 0\n      even_list << num\n    else\n      odd_list << num\n    end\n  end\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbqcn2lvi\nStarted\n.\nFinished in 0.000383283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2609.04 tests/s, 7827.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even = list1.find { |x| x.even? }\n  odd = list1.find { |x| x.odd? }\n  even - odd\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2yocc4s5\nStarted\n.\nFinished in 0.000414254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2413.98 tests/s, 7241.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n  even_list = list1.select {|num| num.even?}\n  odd_list = list1.select {|num| num.odd?}\n  even_list.first - odd_list.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n",
      "timestamp": 1666123554,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvnl7q1i3\nStarted\n.\nFinished in 0.000671666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1488.84 tests/s, 4466.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}