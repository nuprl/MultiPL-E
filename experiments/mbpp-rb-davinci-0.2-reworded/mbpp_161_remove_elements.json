{
  "name": "mbpp_161_remove_elements",
  "language": "rb",
  "prompt": "# Write a function to remove all elements from a given array present in another array.\ndef remove_elements(list1, list2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_elements\n    candidate = method(:remove_elements)\n    assert_equal([1, 3, 5, 7, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]))\n    assert_equal([2, 4, 6, 8, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))\n    assert_equal([1, 2, 3, 4, 6, 8, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.each do |x|\n    list2.each do |y|\n      if x == y\n        list1.delete(x)\n      end\n    end\n  end\n  return list1\nend",
    "  list1.delete_if { |e| list2.include?(e) }\nend",
    "  list1.delete_if { |x| list2.include? x }\nend",
    "  list1 - list2\nend",
    "  list1.delete_if { |x| list2.include?(x) }\nend",
    "  list1.each do |element|\n    list2.each do |element2|\n      if element == element2\n        list1.delete(element)\n      end\n    end\n  end\n  list1\nend",
    "  list1.each do |element|\n    list2.delete(element)\n  end\n  list2\nend",
    "  list1.delete_if { |x| list2.include?(x) }\nend",
    "  list1.each do |element|\n    list2.delete(element)\n  end\n  list2\nend",
    "  list1.reject { |x| list2.include?(x) }\nend",
    "  list1.delete_if { |e| list2.include?(e) }\nend",
    "  list1.each do |element|\n    list2.delete(element)\n  end\n  list2\nend",
    "  list1.each do |element|\n    list2.delete(element)\n  end\n  list2\nend",
    "  list1 - list2\nend",
    "  list1.each do |element|\n    list2.delete(element)\n  end\n  list2\nend",
    "  list1.each do |element|\n    list2.delete(element)\n  end\n  list2\nend",
    "  list1.each do |element|\n    if list2.include?(element)\n      list1.delete(element)\n    end\n  end\n  list1\nend",
    "  list1.reject { |e| list2.include?(e) }\nend",
    "  list1 - list2\nend",
    "  list1.reject { |e| list2.include?(e) }\nend"
  ]
}