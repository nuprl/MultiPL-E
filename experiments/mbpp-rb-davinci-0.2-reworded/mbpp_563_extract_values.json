{
  "name": "mbpp_563_extract_values",
  "language": "rb",
  "prompt": "# Write a function to extract values between quotation marks from a string.\ndef extract_values(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_values\n    candidate = method(:extract_values)\n    assert_equal([\"Python\", \"PHP\", \"Java\"], candidate.call(\"\"Python\", \"PHP\", \"Java\"\"))\n    assert_equal([\"python\", \"program\", \"language\"], candidate.call(\"\"python\",\"program\",\"language\"\"))\n    assert_equal([\"red\", \"blue\", \"green\", \"yellow\"], candidate.call(\"\"red\",\"blue\",\"green\",\"yellow\"\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  # Your code here\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  # TODO: return an array of values between quotation marks\n  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\\\"(.*?)\\\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\\\"(.*?)\\\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\\\"(.*?)\\\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\".*?\"/).map { |x| x.delete('\"') }\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend",
    "  text.scan(/\"(.*?)\"/)\nend",
    "  text.scan(/\"(.*?)\"/).flatten\nend"
  ]
}