{
  "name": "mbpp_736_left_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x > a[mid]\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  low, high = 0, a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  mid = 0\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  if x > a[mid]\n    mid + 1\n  else\n    mid\n  end\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend"
  ]
}