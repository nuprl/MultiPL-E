{
  "name": "mbpp_736_left_insertion",
  "language": "rb",
  "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x > a[mid]\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  low, high = 0, a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  mid = 0\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  if x > a[mid]\n    mid + 1\n  else\n    mid\n  end\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  return 0 if a.empty? || x < a.first\n  return a.length if x > a.last\n  l, r = 0, a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if a[m] == x\n      return m\n    elsif a[m] < x\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  l = 0\n  r = a.length - 1\n  while l <= r\n    m = (l + r) / 2\n    if x > a[m]\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  i = 0\n  while i < a.length && a[i] < x\n    i += 1\n  end\n  return i\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a[0] > x\n  return a.length if a[-1] < x\n  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    elsif x < a[mid]\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] >= x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  return 0 if x < a[0]\n  return a.size if x > a[-1]\n  l = 0\n  r = a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  a.bsearch_index { |e| e >= x }\nend",
    "  a.bsearch_index { |y| y >= x } || a.length\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |e| e >= x }\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if x < a[0]\n  return a.length if x > a[-1]\n  l, r = 0, a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  left = 0\n  right = a.size - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |e| e >= x } || a.size\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] >= x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # left_index = 0\n  # right_index = a.length - 1\n  # while left_index < right_index\n  #   mid_index = (left_index + right_index) / 2\n  #   if a[mid_index] < x\n  #     left_index = mid_index + 1\n  #   else\n  #     right_index = mid_index\n  #   end\n  # end\n  # left_index\n  a.bsearch_index { |e| e >= x } || a.length\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || a.first > x\n  return a.size if a.last < x\n  l, r = 0, a.size - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      if mid == 0 || a[mid - 1] != x\n        return mid\n      else\n        high = mid - 1\n      end\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.size - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  l = 0\n  r = a.length - 1\n  while l < r\n    m = (l + r) / 2\n    if a[m] < x\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  l\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  # if x is less than the first element of the array, return 0\n  if x < a[0]\n    return 0\n  end\n  # if x is greater than the last element of the array, return the length of the array\n  if x > a[-1]\n    return a.length\n  end\n  # if x is greater than the first element of the array and less than the last element of the array, do the following\n  if x > a[0] && x < a[-1]\n    # iterate through the array\n    a.each_with_index do |element, index|\n      # if the element is greater than x, return the index\n      if element > x\n        return index\n      end\n    end\n  end\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    else\n      high = mid\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left < right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] >= x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x <= a[mid]\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if x > a[mid]\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  return 0 if a.empty? || x < a[0]\n  return a.length if x > a[-1]\n  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x < a[mid]\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = low + (high - low) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  i = 0\n  while i < a.length\n    if a[i] > x\n      return i\n    end\n    i += 1\n  end\n  return i\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if a[mid] < x\n      low = mid + 1\n    elsif a[mid] > x\n      high = mid - 1\n    else\n      return mid\n    end\n  end\n  return low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low < high\n    mid = (low + high) / 2\n    if x <= a[mid]\n      high = mid\n    else\n      low = mid + 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] == x\n      return mid\n    elsif a[mid] > x\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return left\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  low\nend",
    "  a.bsearch_index { |e| e >= x }\nend",
    "  low = 0\n  high = a.length - 1",
    "  low = 0\n  high = a.length - 1",
    "  left = 0\n  right = a.length - 1\n  while left <= right\n    mid = (left + right) / 2\n    if a[mid] < x\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  left\nend",
    "  a.bsearch_index { |y| y >= x }\nend",
    "  low = 0\n  high = a.length - 1\n  while low <= high\n    mid = (low + high) / 2\n    if x > a[mid]\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend"
  ]
}