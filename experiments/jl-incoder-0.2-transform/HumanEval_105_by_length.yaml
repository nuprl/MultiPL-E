name: HumanEval_105_by_length
language: jl
prompt: "\"\"\"\n    Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
  \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
  Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty\
  \ array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange\
  \ number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"]\n    \"\"\"\n\
  function by_length(arr::Vector{Int64})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
  \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
  \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) ==\
  \ [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"\
  Eight\", \"Four\"])\nend\n"
completions: ["    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"\
    One\" if x == 1 \n        else \"Two\" if x == 2 \n        else \"Three\" if x\
    \ == 3 \n        else \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n\
    \        else \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n        else\
    \ \"Eight\" if x == 8 \n        else \"Nine\", arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array sorted in descending order. \nFor\
    \ example, if the array is [4, 3, 1, 2, 9], the function should return [9, 1,\
    \ 2, 3, 4]. \nIf the array is [4, 3, 1, 2, 9], the function should return [9,\
    \ 1, 2, 3, 4].", "    if arr.length == 0 \n        return Vector{String}() \n\
    \    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n      \
    \  arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) \n        return arr \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length", "    if arr.length\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend", "    if length(arr) == 0\
    \ \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> name(x), arr) \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the array sorted in descending order by the sum of each of the integers.\
    \ For example:\n>>> by_sum([])\n[]\n>>> by_sum([1, 2, 3, 4])\n[4, 3, 2, 1]\n>>>\
    \ by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n\
    >>> by_sum([4, 3, 2, 1])\n[4, 3, 2, ", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> \"One\" if x == 1 else \"Two\" if x == 2 \n        else \"\
    Three\" if x == 3 \n        else \"Four\" if x == 4 \n        else \"Five\" if\
    \ x == 5 \n        else \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n\
    \        else \"Eight\" if x == 8 \n        else \"Nine\", arr)\n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, ", "    \n    arr = sort(arr)\n\
    \    \n    arr2 = copy(arr)\n    \n    arr2[arr2 .< 1] = []\n    \n    arr2[arr2\
    \ .> 9] = []\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = reverse(arr2)\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 ", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> \"One\" if x == 1 \n        else \"Two\" if x == 2\n     \
    \   else \"Three\" if x == 3\n        else \"Four\" if x == 4\n        else \"\
    Five\" if x == 5\n        else \"Six\" if x == 6\n        else \"Seven\" if x\
    \ == 7\n        else \"Eight\" if x == 8\n        else \"Nine\", arr)\n    return\
    \ arr\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr,\
    \ 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"\
    Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\"\
    )\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n\
    \    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n \
    \   return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. For example:\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([-1,\
    \ -2, -3, -4])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n", "    if arr.length\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() |> reverse\
    \ \n        arr = arr |> map((digit) -> \"One\" |> get!(digit) |> toString) |>\
    \ Vector{String}\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string where each character is capitalized.",
  "    if arr.length == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n  \
    \      return arr \n    end\nend", "    if arr.length == 0 \n        return []\
    \ \n    else \n        arr = arr |> sort() |> reverse() \n        arr = arr |>\
    \ map((digit) -> \"One\"..\"Nine\" |> get) |> Vector{String}\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n", " \
    \   arr = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. For example:\n>>> by_length([])\n\
    0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9,\
    \ -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18,\
    \ -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7,\
    \ -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>>\
    \ by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15,\
    \ -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2,\
    \ -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n\
    25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14,\
    \ -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20,\
    \ -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10,\
    \ -12, -13, -14, -15, -", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr\
    \ = map(x -> \"One\" if x == 1 \n        else if x == 2 \n        then \"Two\"\
    \n        else if x == 3 \n        then \"Three\"\n        else if x == 4 \n \
    \       then \"Four\"\n        else if x == 5 \n        then \"Five\"\n      \
    \  else if x == 6 \n        then \"Six\"\n        else if x == 7 \n        then\
    \ \"Seven\"\n        else if x == 8 \n        then \"Eight\"\n        else if\
    \ x == 9 \n        then \"Nine\"\n        else x \n        end, arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers in the vector\
    \ in descending order. For example, if the vector is [5, 3, 1, 2, 4] then the\
    \ output should be [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]. Ignore any\
    \ numbers that are not between 1 and 9 inclusive.", "    if length(arr) == 0 \n\
    \        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" if x == 1 \n                else if x == 2\
    \ \n                    then \"Two\" \n                    else if x == 3 \n \
    \                       then \"Three\" \n                        else if x ==\
    \ 4 \n                            then \"Four\" \n                           \
    \ else if x == 5 \n                                then \"Five\" \n          \
    \                      else if x == 6 \n                                    then\
    \ \"Six\" \n                                    else if x == 7 \n            \
    \                            then \"Seven\" \n                               \
    \         else if x == 8 \n                                            then \"\
    Eight\" \n                                            else \"Nine\", x) \n   \
    \     return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n<code language=julia-1.4>\n\
    by_length([])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=juli", "    \n    arr = arr |> sort()\
    \ |> reverse()\n    \n    arr = arr |> map((x -> \"One\"..\"Nine\"[x-1]))\n  \
    \  \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n    by_length([])\n    by_length([2, 1])\n    by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, ", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = arr\
    \ .- 10\n    arr = arr .+ 10\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr\
    \ = arr .- 8\n    arr = arr .+ 8\n    arr = arr .- 7\n    arr = arr .+ 7\n   \
    \ arr = arr .- 6\n    arr = arr .+ 6\n    arr = arr .- 5\n    arr = arr .+ 5\n\
    \    arr = arr .- 4\n    arr = arr .+ 4\n    arr = arr .- 3\n    arr = arr .+\
    \ 3\n    arr = arr .- 2\n    arr = arr .+ 2\n    arr = arr .- 1\n    arr = arr\
    \ .+ 1\n    arr = arr .- 0\n    arr = arr .+ 0\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([1, -1, 55])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, ", "    arr = arr |> sort() |> reverse() |> map((x) -> \"One\"..\"\
    Nine\"[x]) |> Vector{String}\n    if arr.size == 0\n        arr\n    else\n  \
    \      arr\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array in reverse order.", "    \n    if\
    \ length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"\
    Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers that are between 1 and 9 inclusive.",
  "    arr = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, ", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.", "    \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        \n        arr = sort(arr) \n \
    \       \n        arr = reverse(arr) \n        \n        arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n        return arr\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. For example:\n>>> square([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5,\
    \ 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n\
    [4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49,\
    \ 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n\
    >>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4,\
    \ 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2,\
    \ 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4,\
    \ 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49,\
    \ 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n\
    >>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4,\
    \ 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2,\
    \ 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4,\
    \ 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, ", "    if arr.length == 0 \n\
    \        return Vector{String}() \n    else \n        arr = sort(arr) \n     \
    \   arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers squared. For example,\n\
    \    \n    >>> by_sum(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3]))\n    25\n    \n\
    \    Ignore any strange numbers in the vector:\n    >>> by_sum(Vector{Int64}([-1,\
    \ 55]))\n    55\n    \n    Ignore any negative numbers:\n    >>> by_sum(Vector{Int64}([-1,\
    \ 1, 55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n    >>> by_sum(Vector{Int64}([1.1,\
    \ 55.55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n    >>> by_sum(Vector{Int64}([1.1,\
    \ 55.55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n    >>> by_sum(Vector{Int64}([1.1,\
    \ 55.55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n", "    arr = sort(arr)\n \
    \   arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9", "    arr = sort(arr)\n    arr = reverse(arr)\n \
    \   arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. \nFor example, \n    square([1,2,3]) should return\
    \ 9\n    square([1,-2,3]) should return 9\n    square([1,-2,-3]) should return\
    \ -9\n    square([1,-2,-3,4]) should return -9\n    square([1,-2,-3,-4]) should\
    \ return -9\n    square([1,-2,-3,-4,5]) should return -9\n    square([1,-2,-3,-4,-5])\
    \ should return -9\n    square([1,-2,-3,-4,-5,6]) should return -9\n    square([1,-2,-3,-4,-5,-6,7])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,8]) should return -9\n   \
    \ square([1,-2,-3,-4,-5,-6,-7,-8,9]) should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,10])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,11]) should return\
    \ -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,12]) should return -9\n  \
    \  square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13]) should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,14])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,16])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-16,17])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,", "    arr = arr\
    \ |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    end", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, \"\
    1\", \"One\")\n    arr = replace(arr, \"2\", \"Two\")\n    arr = replace(arr,\
    \ \"3\", \"Three\")\n    arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr,\
    \ \"5\", \"Five\")\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr,\
    \ \"7\", \"Seven\")\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr,\
    \ \"9\", \"Nine\")\n    return arr\nend", "    if length(arr) == 0 \n        return\
    \ [] \n    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n\
    \        arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) \n        return arr \n \
    \   end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in descending order. For example, if the input vector is [2, 1, 4, 3, 6, 5,\
    \ 8], the output vector should be [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"One\", \"Nine\"]. Make sure to handle edge cases like the empty vector\
    \ and negative numbers.", "    if length(arr) == 0 \n        return [] \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of\
    \ integers and returns the array sorted in descending order by the sum of its\
    \ elements.", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n\
    \    arr = map(x -> \"One\" if x == 1 \n            else \"Two\" if x == 2 \n\
    \            else \"Three\" if x == 3 \n            else \"Four\" if x == 4 \n\
    \            else \"Five\" if x == 5 \n            else \"Six\" if x == 6 \n \
    \           else \"Seven\" if x == 7 \n            else \"Eight\" if x == 8 \n\
    \            else \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. For example:\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x], arr)\
    \ \n        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"Four\"\
    [x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x ->\
    \ \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr =\
    \ map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n  \
    \      return arr \nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers from 1 to 9 inclusive.", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ array of integers and returns the array in reverse order. For example, \n  \
    \  by_length([2, 1, 1, 4, 5, 8, 2, 3]) should return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]", "    arr = arr |> sort()\
    \ |> reverse() |> map(i->\"One\"..\"Nine\"[i])\n    return arr\nend", "    \n\
    \    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n  \
    \  arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. \nFor example, \n>>> square_sum([1,\
    \ 2, 3])\n25\n>>> square_sum([-1, -2, -3])\n0\n>>> square_sum([1, 2, -3, 4])\n\
    25\n>>> square_sum([-1, -2, -3, -4])\n0\n>>> square_sum([-1, -2, -3, -4, -5])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6])\n0\n>>> square_sum([-1, -2, -3, -4,\
    \ -5, -6, -7])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8])\n0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n25\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n25\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, ", "    if length(arr) == 0 \n  \
    \      return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n        arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.", "    arr = arr |> sort() |> reverse() |>\
    \ map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    if length(arr) == 0 \n \
    \       arr\n    else\n        arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=juli", "    if length(arr) == 0 \n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n\
    \    \n    return arr\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n  \
    \  arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers in the vector in descending order.\
    \ For example, if the input vector is [4, 3, 6, 2, 9], the output vector should\
    \ be [\"Nine\", \"Four\", \"Three\", \"Two\", \"One\"]. Ignore any numbers that\
    \ are not between 1 and 9.", "    \n    if length(arr) == 0 \n        return []\
    \ \n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\" if x == 1 \n        else \"Two\" if x == 2 \n        else \"Three\"\
    \ if x == 3 \n        else \"Four\" if x == 4 \n        else \"Five\" if x ==\
    \ 5 \n        else \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n   \
    \     else \"Eight\" if x == 8 \n        else \"Nine\", arr)\n    \n    return\
    \ arr\nend", "    \n    if arr.length == 0 \n        return Vector{String}()\n\
    \    end\n    \n    arr = arr |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"\
    One\"..\"Nine\"[x]) |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive, with the\
    \ number \"One\" in the first position and \"Nine\" in the last position. For\
    \ example, if the input vector is [1, 2, 3, 4, 5, 6, 7, 8, 9], the output should\
    \ be [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\", \"One\"].", "    if length(arr) == 0 \n        return [] \n\
    \    else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr\
    \ = map((&names(arr))) \n        return arr \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the sum\
    \ of the integers in the array.", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = replace(arr, 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr\
    \ = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr =\
    \ replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr,\
    \ 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr,\
    \ 9, \"Nine\")\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.", "    if length(arr) == 0 \n       \
    \ return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x],\
    \ arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"\
    Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x\
    \ -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr\
    \ = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent the numbers\
    \ in reverse order. For example, if the input vector is [1, 2, 3, 4], the output\
    \ vector should be [\"4\", \"3\", \"2\", \"1\"].", "    if arr.length == 0 \n\
    \        return [] \n    else \n        arr = arr |> sort() \n        arr = reverse(arr)\
    \ \n        arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) \n        return arr \n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of integers where the integers are the length\
    \ of the strings in the original vector. For example:\n>>> by_length([\"a\", \"\
    b\", \"c\", \"d\"])\n[3, 3]", "    arr = arr |> sort() |> reverse() |> map(x->\"\
    One\"..\"Nine\"[x]) |> Vector{String}\n    if arr.length == 0\n        arr\n \
    \   else\n        arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers between 1 and 9 inclusive.", "    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\n\
    end", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"\
    ..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of\
    \ integers and returns the array in reverse order.", "    arr = sort(arr)\n  \
    \  arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n    arr = replace(arr,\
    \ 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4,\
    \ \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"\
    Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\"\
    )\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend", "    arr = arr |>\
    \ sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    if\
    \ isempty(arr)\n        Vector{String}()\n    else\n        arr\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order.", " \
    \   arr = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, \"1\", \"\
    One\")\n    arr = replace(arr, \"2\", \"Two\")\n    arr = replace(arr, \"3\",\
    \ \"Three\")\n    arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr,\
    \ \"5\", \"Five\")\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr,\
    \ \"7\", \"Seven\")\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr,\
    \ \"9\", \"Nine\")\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and returns a vector of strings where each string in the original vector\
    \ is replaced by the first character of the string. For example:\n>>> by_first_char([\"\
    a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n>>> by_first_char([\"\
    a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n>>> by_first_char([])\n\
    []\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"\
    d\"]\n>>> by_first_char", "    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n   \
    \ arr3 = Vector{String}(undef, 0)\n    \n    for i in 1:length(arr)\n        if\
    \ arr[i] <= 9\n            arr3 .= arr[i]\n        else\n            arr3 .= by_length(arr2[i:])\n\
    \        end\n    end\n    \n    return arr3\nend", "    arr = arr |> sort() |>\
    \ reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    if length(arr)\
    \ == 0\n        Vector{String}()\n    else\n        arr\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = replace(arr, 1, \"One\") \n        arr = replace(arr, 2, \"Two\") \n\
    \        arr = replace(arr, 3, \"Three\") \n        arr = replace(arr, 4, \"Four\"\
    ) \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr, 6, \"\
    Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in the vector in descending order.", "    if arr.length == 0 \n        return\
    \ [] \n    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n\
    \        arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) \n        arr \n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers in the vector\
    \ in descending order.", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.", "    \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        \n        arr = sort(arr) \n \
    \       \n        arr = reverse(arr) \n        \n        arr = map(x -> \"One\"\
    \ if x == 1 \n            else \"Two\" if x == 2 \n            else \"Three\"\
    \ if x == 3 \n            else \"Four\" if x == 4 \n            else \"Five\"\
    \ if x == 5 \n            else \"Six\" if x == 6 \n            else \"Seven\"\
    \ if x == 7 \n            else \"Eight\" if x == 8 \n            else \"Nine\"\
    , arr) \n        \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    \n    arr = sort(arr)\n  \
    \  arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n        else\
    \ \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else \"Four\" if\
    \ x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if x == 6\n  \
    \      else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n        else\
    \ \"Nine\", arr)\n    \n    return arr\nend", "    if arr.length == 0 \n     \
    \   return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers in the array.", "  \
    \  arr = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\"\
    )\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n\
    \    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n  \
    \  arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr\
    \ = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return\
    \ arr\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- ", "    if length(arr) == 0 \n        return\
    \ [] \n    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n\
    \        arr = arr |> map(x->\"One\"..\"Nine\"[x-1], arr)\n        return arr\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers that are between 1 and 9 inclusive.", "    \n    arr = arr |>\
    \ sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n\
    \    if length(arr) == 0\n        return arr\n    end\n    \n    return arr\n\
    end", "    if length(arr) == 0 \n        return [] \n    else \n        arr =\
    \ sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> name(x), arr)\
    \ \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string and returns the number of vowels in that string. \nThe vowels\
    \ are \"a\", \"e\", \"i\", \"o\", and \"u\".", "    \n    arr = arr |> sort()\
    \ |> reverse() |> map((x) -> \"One\"..\"Nine\"[x]) |> Vector{String}\n    \n \
    \   if arr.size == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ a new array with the integers reversed.", "    if arr.length == 0\n        return\
    \ Vector{String}()\n    \n    arr = sort(arr)\n    \n    digits = Vector{String}()\n\
    \    \n    for i in arr\n        if i < 1 || i > 9\n            continue\n   \
    \     \n        digits.push(names[i])\n    end\n    \n    return reverse(digits)\n\
    end", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given integer\
    \ appears in the given array.", "    \n    arr = arr |> sort() |> reverse()\n\
    \    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n\
    \    return arr\nend", "    if length(arr) == 0 \n        return [] \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n  \
    \  end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nFor example, \n>>>\
    \ by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, ",
  "    \n    if length(arr) == 0 \n        return [] \n    else \n        \n     \
    \   arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \        \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers that are\
    \ between 1 and 9 inclusive.", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = replace(arr,\n        1 => \"One\",\n        2 => \"Two\",\n      \
    \  3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6\
    \ => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 =>\
    \ \"Nine\",\n        0 => \"Zero\",\n        Inf => \"Infinity\",\n        -Inf\
    \ => \"-Infinity\",\n    )\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order.",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \           else if x == 2 \n                \"Two\" \n            else if x ==\
    \ 3 \n                \"Three\" \n            else if x == 4 \n              \
    \  \"Four\" \n            else if x == 5 \n                \"Five\" \n       \
    \     else if x == 6 \n                \"Six\" \n            else if x == 7 \n\
    \                \"Seven\" \n            else if x == 8 \n                \"Eight\"\
    \ \n            else if x == 9 \n                \"Nine\" \n            else \n\
    \                \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers from 1 to 9 inclusive.",
  "    arr = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each number between\
    \ 1 and 9 inclusive.", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr =\
    \ map(x -> \"One\" if x == 1 else \"Two\" if x == 2 \n        else \"Three\" if\
    \ x == 3 \n        else \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n\
    \        else \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n        else\
    \ \"Eight\" if x == 8 \n        else \"Nine\", arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ \nthe numbers from 1 to 9 inclusive, sorted in descending order.", "    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend", " \
    \   arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"\
    [x], arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    \n    arr = arr |> sort\n    \n    arr\
    \ = reverse(arr)\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1], arr)\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\n", "    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n        else \"Two\"\
    \ if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\" if x ==\
    \ 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6 \n    \
    \    else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n        else\
    \ \"Nine\", arr)\n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ in the original vector is replaced by the first letter of the string followed\
    \ by the rest of the string. For example:\n>>> by_first_letter(\"Hello World\"\
    )\n[\"Hell\", \"o World\"]", "    arr = arr |> sort() |> reverse()\n    arr =\
    \ arr |> map(x->\"One\"..\"Nine\"[x-1]) |> Vector{String}\n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers from 1 to 9 inclusive.",
  "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\n\
    \        arr |> filter(x->x>=1 && x<=9),\n        \"One\",\n        \"Two\",\n\
    \        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n\
    \        \"Seven\",\n        \"Eight\",\n        \"Nine\")\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in reverse order. For\
    \ example, if the input vector is [5, 6, 4, 3, 1] then the output vector should\
    \ be [\"5\", \"6\", \"4\", \"3\", \"1\"].", "    arr = arr |> sort() |> reverse()\
    \ |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    if length(arr) == 0 \n\
    \        arr = []\n    end\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([3,\
    \ 6, 4, 1, 7, 8, 2, 5, 9])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, ", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x),\
    \ arr)\n    return arr\nend", "    arr = arr |> sort() |> reverse()\n    arr =\
    \ arr |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.",
  "    if arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    if length(arr) == 0 \n        return [] \n    else \n\
    \        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x ->\
    \ \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns a new array that contains the same integers but in reverse order.\
    \ For example, if the input array is [2, 1, 4, 3, 8, 5, 6], the output should\
    \ be [6, 5, 4, 3, 8, 2, 1]. Do not use any built-in functions (such as reverse).",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \           else if x == 2 \n                \"Two\" \n            else if x ==\
    \ 3 \n                \"Three\" \n            else if x == 4 \n              \
    \  \"Four\" \n            else if x == 5 \n                \"Five\" \n       \
    \     else if x == 6 \n                \"Six\" \n            else if x == 7 \n\
    \                \"Seven\" \n            else if x == 8 \n                \"Eight\"\
    \ \n            else if x == 9 \n                \"Nine\" \n            else \n\
    \                \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. For example:\n>>> square_sum([1, 2, 3, 4])\n\
    25", "    if arr.length == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \               else if x == 2 \n                    then \"Two\" \n         \
    \           else if x == 3 \n                        then \"Three\" \n       \
    \                 else if x == 4 \n                            then \"Four\" \n\
    \                            else if x == 5 \n                               \
    \ then \"Five\" \n                                else if x == 6 \n          \
    \                          then \"Six\" \n                                   \
    \ else if x == 7 \n                                        then \"Seven\" \n \
    \                                       else if x == 8 \n                    \
    \                        then \"Eight\" \n                                   \
    \         else \"Nine\" , arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. For example:\n>>> square([4, 9, 16, 25])\n[16, 49,\
    \ 256, 625]", "    \n    if length(arr) == 0 \n        return [] \n    else \n\
    \        \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n   \
    \     \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n\
    \        \n        return arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nFor example, \n>>> sum([1, 2, 3, 4])\n10\nWrite a function\
    \ that takes a vector of integers and returns the product of the integers in the\
    \ vector. \nFor example, \n>>> product([1, 2, 3, 4])\n24\nWrite a function that\
    \ takes a vector of integers and returns the largest integer in the vector. \n\
    For example, \n>>> max([1, 2, 3, 4])\n4\nWrite a function that takes a vector\
    \ of integers and returns the smallest integer in the vector. \nFor example, \n\
    >>> min([1, 2, 3, 4])\n1\nWrite a function that takes a vector of integers and\
    \ returns the number of integers in the vector. \nFor example, \n>>> len([1, 2,\
    \ 3, 4])\n4\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers in the vector are sorted in ascending order.\
    \ \nFor example, \n>>> sorted([1, 2, 3, 4])\n[1, 2, 3, 4]\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the integers\
    \ in the vector are sorted in descending order. \nFor example, \n>>> sorted([1,\
    \ 2, 3, 4], reverse=True)\n[4, 3, 2, 1]\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers where the integers in the vector\
    \ are sorted in ascending order and where the integers in the vector are sorted\
    \ in descending order. \nFor example, \n>>> sorted([1, 2, 3, 4], reverse=true)\n\
    [4, 3, 2, 1]\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers in the vector are sorted in ascending order and\
    \ where the integers in the vector are sorted in descending order and where the\
    \ integers in the vector are sorted in ascending order. \nFor example, \n>>> sorted([1,\
    \ 2, 3, 4], reverse=true, key=lambda x: (x > 3, x < 4))\n[4, 3, 2, 1]\nWrite a\
    \ function that takes a vector of integers and returns a vector of integers where\
    \ the integers in the vector are sorted in ascending order and where the integers\
    \ in the vector are sorted in descending order and where the integers in the vector\
    \ are sorted in ascending order. \nFor example, \n>>> sorted([1, 2, 3, 4], reverse=true,\
    \ key=lambda x: (x > 3, x < 4), reverse=True)\n[4, 3, 2, 1]\nWrite a function\
    \ that takes a vector of integers and returns a vector of integers where the integers\
    \ in the vector are sorted in ascending order and where the integers in the vector\
    \ are sorted in descending order and where the integers in the vector are sorted\
    \ in descending order. \nFor example, \n>>> sorted([1, 2, 3, 4], reverse=true,\
    \ key=lambda x: (x > 3, x < 4), reverse", "    if arr.length == 0\n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid\
    \ input\"), arr)\n    \n    return arr\nend", "    if arr.length == 0 \n     \
    \   return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x],\
    \ arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"\
    Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x\
    \ -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr\
    \ = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order. For example, if the vector\
    \ is [4, 2, 9, 1, 3, 6, 0, 5], the function should return [\"Five\", \"Six\",\
    \ \"Nine\", \"Four\", \"Three\", \"Two\", \"One\"]", "    if length(arr) == 0\
    \ \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings where each string is the\
    \ name of a number between 1 and 9 inclusive.", "    if length(arr) == 0 \n  \
    \      return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the same vector but with the integers replaced\
    \ by their corresponding names from \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".", "    \n    arr = sort(arr)\n\
    \    \n    arr2 = reverse(arr)\n    \n    arr3 = arr2.map(x => name(x))\n    \n\
    \    return arr3\nend", "    if length(arr) == 0 \n        return [] \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> name(x), arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])", "    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- ",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    arr = sort(arr)\n    arr =\
    \ reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=juli", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x\
    \ -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend", "    \n    arr = sort(arr)\n\
    \    \n    arr2 = arr\n    \n    for i in arr\n        if i < 1 || i > 9\n   \
    \         arr2 = arr2[-i]\n        else\n            arr2 = arr2[arr2 .!= i]\n\
    \        end\n    end\n    \n    arr2 = reverse(arr2)\n    \n    arr3 = arr2\n\
    \    \n    for i in arr3\n        arr3 = arr3[arr3 .!= i]\n    end\n    \n   \
    \ arr3 = arr3[arr3 .!= 1]\n    \n    return arr3\nend", "    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" if x == 1 \n            else if x == 2 \n \
    \               \"Two\" \n            else if x == 3 \n                \"Three\"\
    \ \n            else if x == 4 \n                \"Four\" \n            else if\
    \ x == 5 \n                \"Five\" \n            else if x == 6 \n          \
    \      \"Six\" \n            else if x == 7 \n                \"Seven\" \n   \
    \         else if x == 8 \n                \"Eight\" \n            else if x ==\
    \ 9 \n                \"Nine\" \n            else \n                \"\" \n  \
    \          , arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order\
    \ by the sum of its elements.", "    if arr.length == 0 \n        return [] \n\
    \    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n      \
    \  arr = arr |> map((digit) -> \"One\"..\"Nine\"[digit]) \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. For example:\n>>> by_length([])\n\
    0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 0, 1])\n1\n\
    >>> by_length([-1, 1, 0])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-", "    arr =\
    \ sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n   \
    \ return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function called by_length\
    \ that sorts the integers that are between 1 and 9 inclusive,\nreverses the resulting\
    \ array, and then replace each digit by its corresponding name from\n\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .", "    if arr.length == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n   \
    \     arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\"\
    ) \n        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"\
    Five\") \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr,\
    \ 7, \"Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the number of integers that are\
    \ between 1 and 9 inclusive.", "    if length(arr) == 0 \n        return [] \n\
    \    else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ array of integers and returns a new array where each element in the new array\
    \ is the product of all the numbers in the original array except the number itself.",
  "    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if arr.length == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ between 1 and 9 inclusive in descending order. For example, if the input vector\
    \ is [2, 1, 4, 3, 8, 5, 6, 7], the output vector should be [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"].", "    arr = arr |>\
    \ sort() |> reverse()\n    arr = arr |> map((x) -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x]\n    return\
    \ arr\nend", "    \n    arr = arr |> sort() |> reverse() |> map((digit) -> \"\
    One\"..\"Nine\"[digit]) |> Vector{String}\n    \n    if arr == []\n        arr\n\
    \    else\n        arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an array of integers and returns the array in reverse\
    \ sorted order. \nFor example, \n>>> by_length([])\n[]\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]\n>>> by_length([1, -1, 55])\n[\"One\"]", "    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return\
    \ arr\nend", "    \n    arr = arr |> sort() |> reverse() |> collect{|x| \n   \
    \     x % 10 == 0 ? \"One\" : \n        x % 10 == 1 ? \"Two\" : \n        x %\
    \ 10 == 2 ? \"Three\" : \n        x % 10 == 3 ? \"Four\" : \n        x % 10 ==\
    \ 4 ? \"Five\" : \n        x % 10 == 5 ? \"Six\" : \n        x % 10 == 6 ? \"\
    Seven\" : \n        x % 10 == 7 ? \"Eight\" : \n        x % 10 == 8 ? \"Nine\"\
    \ : \n        \"\"\n    }\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive, with the number \"One\" at the beginning\
    \ of the string, \"Two\" at the second position, and so on. For example, if the\
    \ input vector is [1, 2, 3, 4], the output vector should be [\"One\", \"Two\"\
    , \"Three\", \"Four\"].", "    \n    if length(arr) == 0 \n        return [] \n\
    \    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the array in reverse order.", "    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}()\n    \n    for\
    \ n in arr2\n        if n <= 9\n            arr3 += [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n - 1]\n      \
    \  else\n            arr3 += [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"\
    Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\
    ][n - 10]\n        end\n    end\n    \n    return arr3\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the array\
    \ sorted in descending order by the absolute value of the first element. For example:\n\
    >>> by_abs([3, -4, 1, -5, 2])\n[5, 4, 3, 2, 1]\n>>> by_abs([])\n[]\n>>> by_abs([-3,\
    \ -4, 1, -5, 2])\n[-5, -4, -3, -2, -1]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3])\n\
    [-6, -5, -4, -3, -2, -1, 3]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4])\n[-7,\
    \ -6, -5, -4, -3, -2, -1, 3, 4]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8,\
    \ 5])\n[-8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5]\n>>> by_abs([-3, -4, 1, -5, 2,\
    \ -6, 3, -7, 4, -8, 5, -9, 6])\n[-9, -8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5,\
    \ 6]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8, 5, -9, 6, -10])\n[-10, -9,\
    \ -8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5, 6, 7]\n>>> by_abs([-3, -4, 1, -5, 2,\
    \ -6, 3, -7, 4, -8, 5, -9, 6, -10, 7])\n[-10, -9, -8, -7, -6, -5, -4, -3, -2,\
    \ -1, 3, 4, 5, 6, 7, 8]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8, 5, -9,\
    \ 6, -10, 7, -9])\n[-9, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5, 6, 7,\
    \ 8, 9]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8", "    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else \"Two\" if\
    \ x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\" if x == 4\
    \ \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6 \n      \
    \  else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n        else\
    \ \"Nine\", arr)\n    return arr\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=juli", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x\
    \ -> name(x), arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, ", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> name(x), arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order.", "    if length(arr) == 0 \n        return [] \n\
    \    else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr\
    \ = map(x -> \"One\" if x == 1 \n            else if x == 2 \n               \
    \ \"Two\" \n            else if x == 3 \n                \"Three\" \n        \
    \    else if x == 4 \n                \"Four\" \n            else if x == 5 \n\
    \                \"Five\" \n            else if x == 6 \n                \"Six\"\
    \ \n            else if x == 7 \n                \"Seven\" \n            else\
    \ if x == 8 \n                \"Eight\" \n            else if x == 9 \n      \
    \          \"Nine\" \n            else \n                \"\" \n            ,\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nFor example, \n>>> sum([1, 2, 3, 4])\n10\n>>> sum([1, 2, 3, 0])\n0\n>>> sum([1,\
    \ 2, 3, -1])\n-1\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1,\
    \ 2, 3, 5])\n5", "    \n    if arr.length == 0 \n        return Vector{String}()\
    \ \n    else \n        \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n\
    \        \n        arr = map(x -> \"One\" if x == 1 \n            else if x ==\
    \ 2 \n                \"Two\" \n            else if x == 3 \n                \"\
    Three\" \n            else if x == 4 \n                \"Four\" \n           \
    \ else if x == 5 \n                \"Five\" \n            else if x == 6 \n  \
    \              \"Six\" \n            else if x == 7 \n                \"Seven\"\
    \ \n            else if x == 8 \n                \"Eight\" \n            else\
    \ if x == 9 \n                \"Nine\" \n            else \n                \"\
    \" \n            , arr)\n        \n        return arr\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the array\
    \ sorted in descending order by the absolute value of the integers. For example:\n\
    >>> by_abs([-2, -1, 0, 1, 2])\n[-1, 0, 1, 2]", "    \n    if length(arr) == 0\n\
    \        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ number appears in the given array. For example, given [1, 1, 1, 2, 2, 3], return\
    \ 3.", "    if length(arr) == 0 \n        return Vector{String}() \n    else \n\
    \        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x ->\
    \ \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x\
    \ -> \"Three\"[x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr\
    \ = map(x -> \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n  \
    \      arr = map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x],\
    \ arr) \n        arr = map(x -> \"Nine\"[x], arr) \n        return arr \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, ",
  "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n\
    \    return arr\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr =\
    \ map(x -> \"One\" if x == 1 else \"Two\" if x == 2 \n        else \"Three\" if\
    \ x == 3 \n        else \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n\
    \        else \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n        else\
    \ \"Eight\" if x == 8 \n        else \"Nine\", arr)\n    return arr\nend", " \
    \   if arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((digit) -> \"One\" |> getfield(digit,\
    \ :name) |> toString) \n        arr \n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=2 |>\n<code>", "    if length(arr) == 0 \n        return []\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\" if x == 1 \n                else if x == 2 \n       \
    \             then \"Two\" \n                    else if x == 3 \n           \
    \             then \"Three\" \n                        else if x == 4 \n     \
    \                       then \"Four\" \n                            else if x\
    \ == 5 \n                                then \"Five\" \n                    \
    \            else if x == 6 \n                                    then \"Six\"\
    \ \n                                    else if x == 7 \n                    \
    \                    then \"Seven\" \n                                       \
    \ else if x == 8 \n                                            then \"Eight\"\
    \ \n                                            else \"Nine\" \n             \
    \               end,arr) \n        arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in descending order.\
    \ For example, if the input vector is [5, 2, 7, 3, 6, 4, 8], the output vector\
    \ should be [\"Eight\", \"Five\", \"Six\", \"Four\", \"Three\", \"Two\", \"One\"\
    ]. Your function should ignore any numbers that are not between 1 and 9.", " \
    \   if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n  \
    \      arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x],\
    \ arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"\
    Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x\
    \ -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n       \
    \ arr = map(x -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers between 1 and 9 inclusive in descending\
    \ order.", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x),\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order but with each digit replaced by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".", "    \n    if length(arr) == 0 \n        return [] \n\
    \    else \n        arr = arr |> sort() \n        arr = reverse(arr) \n      \
    \  arr = arr |> map(x->\"One\"..\"Nine\"[x-1], arr)\n        return arr \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent \nthe numbers from 1 to 9 inclusive, sorted in descending\
    \ order.", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n  \
    \  arr = map(x -> \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")[x]\n    \n    return arr\nend", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n      \
    \  return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string.", "    if\
    \ arr.length == 0\n        return Vector{String}()\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend", "    if arr.length == 0 \n\
    \        return Vector{String}() \n    else \n        arr = arr |> sort() \n \
    \       arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"[x-1],\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    by_length([])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, ", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"\
    One\" if x == 1 else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n \
    \       else \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else\
    \ \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\"\
    \ if x == 8 \n        else \"Nine\", arr)\n    return arr\nend", "    \n    if\
    \ length(arr) == 0 \n        return Vector{String}() \n    else \n        \n \
    \       arr = sort(arr)\n        \n        arr = reverse(arr)\n        \n    \
    \    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n\
    \        return arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.", "    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    if length(arr) == 0 \n        return [] \n    else \n\
    \        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x ->\
    \ \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x\
    \ -> \"Three\"[x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr\
    \ = map(x -> \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n  \
    \      arr = map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x],\
    \ arr) \n        arr = map(x -> \"Nine\"[x], arr) \n        return arr \n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.", "    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n    return arr\nend",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers in the vector in descending order.",
  "    if arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order.",
  "    arr = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) |> Vector{String}\n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. For example:\n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([-1, 55])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>>\
    \ by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length", "    if arr.length == 0 \n\
    \        return Vector{String}() \n    else \n        arr = sort(arr) \n     \
    \   arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        arr\
    \ = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr) \n \
    \       arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"[x],\
    \ arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"\
    [x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x ->\
    \ \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order. \nFor example, \n    by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nshould return \n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty\
    \ array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"]\n    \n</text>\n\
    <code language=julia-1.5>", "    arr = sort(arr)\n    arr = reverse(arr)\n   \
    \ arr = replace(arr, 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr\
    \ = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr =\
    \ replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr,\
    \ 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr,\
    \ 9, \"Nine\")\n    return arr\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> \"One\" if x == 1 \n        else \"Two\" if x == 2\n     \
    \   else \"Three\" if x == 3\n        else \"Four\" if x == 4\n        else \"\
    Five\" if x == 5\n        else \"Six\" if x == 6\n        else \"Seven\" if x\
    \ == 7\n        else \"Eight\" if x == 8\n        else \"Nine\", arr)\n    return\
    \ arr\nend", "    \n    arr = sort(arr)\n    \n    arr2 = arr\n    \n    arr2\
    \ = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = reverse(arr2)\n\
    \    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n\
    \    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2\
    \ = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2\
    \ .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n\
    \    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n\
    \    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2\
    \ = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2\
    \ .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n\
    \    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n\
    \    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2\
    \ = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2\
    \ .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n\
    \    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n\
    \    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2\
    \ = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2\
    \ .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr", "   \
    \ if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n     \
    \   return arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of strings that represent each\
    \ of the numbers in the vector in descending order.", "    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end", "    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend", "    if length(arr) == 0\
    \ \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers in the vector in descending order. For example,\
    \ if the vector is [5, 3, 8, 2, 1] then the output should be [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]. Make\
    \ sure to include \"One\" at the beginning of the output vector. Make sure to\
    \ include \"Nine\" at the end of the output vector.", "    if arr.length == 0\
    \ \n        return [] \n    else \n        arr = arr |> sort() \n        arr =\
    \ reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"[x-1], arr)\n  \
    \      return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector. For example:\n>>> sum_squares([4, 9, 16, 25])\n490\n>>> sum_squares([-4,\
    \ 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>>\
    \ sum_squares([-4, 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16,\
    \ 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4, 9, 16, 25, -4,\
    \ 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25, -4, 9, 16,\
    \ 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4, 9, 16, 25, -4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16,\
    \ 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4,\
    \ 9, 16, 25, -4, 9, 16, 25, -", "    arr = arr |> sort() |> reverse() |> map(x->\"\
    One\"..\"Nine\"[x]) |> Vector{String}\n    if arr.length == 0\n        arr\n \
    \   else\n        arr\n    end\nend\n</cell>\n<code language=julia-1.3>\nby_length([])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an array of integers and returns the array sorted\
    \ in descending order.", "    \n    arr2 = arr\n    \n    if arr2 == []\n    \
    \    return arr2\n    end\n    \n    arr3 = arr2\n    \n    arr4 = arr3\n    \n\
    \    arr5 = arr4\n    \n    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8\
    \ = arr7\n    \n    arr9 = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n\
    \    \n    arr12 = arr11\n    \n    arr13 = arr12\n    \n    arr14 = arr13\n \
    \   \n    arr15 = arr14\n    \n    arr16 = arr15\n    \n    arr17 = arr16\n  \
    \  \n    arr18 = arr17\n    \n    arr19 = arr18\n    \n    arr20 = arr19\n   \
    \ \n    arr21 = arr20\n    \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n\
    \    arr24 = arr23\n    \n    arr25 = arr24\n    \n    arr26 = arr25\n    \n \
    \   arr27 = arr26\n    \n    arr28 = arr27\n    \n    arr29 = arr28\n    \n  \
    \  arr30 = arr29\n    \n    arr31 = arr30\n    \n    arr32 = arr31\n    \n   \
    \ arr33 = arr32\n    \n    arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36\
    \ = arr35\n    \n    arr37 = arr36\n    \n    arr38 = arr37\n    \n    arr39 =\
    \ arr38\n    \n    arr40 = arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n\
    \    \n    arr43 = arr42\n    \n    arr44 = arr43\n    \n    arr45 = arr44\n \
    \   \n    arr46 = arr45\n    \n    arr47 = arr46\n    \n    arr48 = arr47\n  \
    \  \n    arr49 = arr48\n    \n    arr50 = arr49\n    \n    arr51 = arr50\n   \
    \ \n    arr52 = arr51\n    \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n\
    \    arr55 = arr54\n    \n    arr56 = arr55\n    \n    arr57 = arr56\n    \n \
    \   arr58 = arr", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n \
    \   \n    arr = map(x -> \"One\" if x == 1 \n        else \"Two\" if x == 2\n\
    \        else \"Three\" if x == 3\n        else \"Four\" if x == 4\n        else\
    \ \"Five\" if x == 5\n        else \"Six\" if x == 6\n        else \"Seven\" if\
    \ x == 7\n        else \"Eight\" if x == 8\n        else \"Nine\", arr)\n    \n\
    \    return arr\nend", "    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n\
    \    \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of strings that represent each\
    \ of the numbers in the vector in descending order.", "    \n    arr2 = arr\n\
    \    arr2 = arr2[arr2 .>= 1 .& arr2 .<= 9]\n    arr2 = arr2[arr2 .> 0]\n    \n\
    \    arr3 = arr2\n    arr3 = reverse(arr3)\n    \n    arr4 = arr3\n    arr4 =\
    \ arr4 .- arr4 .% 10\n    \n    arr5 = arr4\n    arr5 = arr5 .- arr5 .% 10\n \
    \   \n    arr6 = arr5\n    arr6 = arr6 .- arr6 .% 10\n    \n    arr7 = arr6\n\
    \    arr7 = arr7 .- arr7 .% 10\n    \n    arr8 = arr7\n    arr8 = arr8 .- arr8\
    \ .% 10\n    \n    arr9 = arr8\n    arr9 = arr9 .- arr9 .% 10\n    \n    arr10\
    \ = arr9\n    arr10 = arr10 .- arr10 .% 10\n    \n    arr11 = arr10\n    arr11\
    \ = arr11 .- arr11 .% 10\n    \n    arr12 = arr11\n    arr12 = arr12 .- arr12\
    \ .% 10\n    \n    arr13 = arr12\n    arr13 = arr13 .- arr13 .% 10\n    \n   \
    \ arr14 = arr13\n    arr14 = arr14 .- arr14 .% 10\n    \n    arr15 = arr14\n \
    \   arr15 = arr15 .- arr15 .% 10\n    \n    arr16 = arr15\n    arr16 = arr16 .-\
    \ arr16 .% 10\n    \n    arr17 = arr16\n    arr17 = arr17 .- arr17 .% 10\n   \
    \ \n    arr18 = arr17\n    arr18 = arr18 .- arr18 .% 10\n    \n    arr19 = arr18\n\
    \    arr19 = arr19 .- arr19 .% 10\n    \n    arr20 = arr19\n    arr20 = arr20\
    \ .- arr20 .% 10\n    \n    arr21 = arr20\n    arr21 = arr21 .- arr21 .% 10\n\
    \    \n    arr22 = arr21\n    arr22 = arr22 .- arr22 .% 10\n    \n    arr23 =\
    \ arr22\n    arr23 = arr23 .- arr23 .% 10\n    \n    arr24 = arr23\n    arr24\
    \ = arr24 .- arr24", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend",
  "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n\
    \    return arr\nend", "    if length(arr) == 0 \n        return Vector{String}()\
    \ \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n       \
    \ arr = map(x -> \"One\"..\"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a string where each character is replaced by its corresponding letter from the\
    \ alphabet. For example, \"hello\" becomes \"hEllo\".", "    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x],\
    \ arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"\
    Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x\
    \ -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr\
    \ = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers. For\
    \ example:\n>>> sum_square([4, 9, 16, 25])\n490\n>>> sum_square([-4, 9, 16, 25])\n\
    -490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_square([-4,\
    \ 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25,\
    \ -4, 9, 16, 25])\n490\n>>> sum_square([-4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16,\
    \ 25, -4, 9, 16, 25])\n490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_square([-4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n\
    490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_square([-4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n\
    >>> sum_square([4, 9, 16, 25, -4, 9, 16, 25, -4, ", "    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = replace(arr, 1, \"One\")\n    \n\
    \    arr = replace(arr, 2, \"Two\")\n    \n    arr = replace(arr, 3, \"Three\"\
    )\n    \n    arr = replace(arr, 4, \"Four\")\n    \n    arr = replace(arr, 5,\
    \ \"Five\")\n    \n    arr = replace(arr, 6, \"Six\")\n    \n    arr = replace(arr,\
    \ 7, \"Seven\")\n    \n    arr = replace(arr, 8, \"Eight\")\n    \n    arr = replace(arr,\
    \ 9, \"Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x\
    \ -> \"One\"..\"Nine\"[x], arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. For example:\n>>> by_length([])\n\
    0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length",
  "    if length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" |> get(x) || \"\
    Two\" |> get(x) || \"Three\" |> get(x) || \"Four\" |> get(x) || \"Five\" |> get(x)\
    \ || \"Six\" |> get(x) || \"Seven\" |> get(x) || \"Eight\" |> get(x) || \"Nine\"\
    \ |> get(x), arr) \n        arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=sorting,arrays,julia |>\nI like using sortperm:\n<code>\njulia> sortperm(1:9)\n\
    10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=sorting,arrays,julia |>\nI like using sortperm:\n<code>\n\
    julia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n\
    \ 2\n 1\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using sortperm:\n\
    <code>\njulia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n\
    \ 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=2 |>\n\
    <code>\njulia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n\
    \ 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=1 |>\n\
    <code>\njulia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n\
    \ 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\njulia> sortperm(1:9)\n10-element Array", "    if arr.length == 0\
    \ \n        return [] \n    else \n        arr = arr |> sort() \n        arr =\
    \ reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"[x-1], arr)\n  \
    \      return arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ For example:\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([-1, -2, -3,\
    \ -4])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8])\n-36\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12])\n\
    -36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n-36\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n-36\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n\
    -36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n-36\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\
    -36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21])\n-36\n>>> square_sum([-1, -2, -3, -4, -", "    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend", " \
    \   if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \               else if x == 2 \n                    then \"Two\" \n         \
    \           else if x == 3 \n                        then \"Three\" \n       \
    \                 else if x == 4 \n                            then \"Four\" \n\
    \                            else if x == 5 \n                               \
    \ then \"Five\" \n                                else if x == 6 \n          \
    \                          then \"Six\" \n                                   \
    \ else if x == 7 \n                                        then \"Seven\" \n \
    \                                       else if x == 8 \n                    \
    \                        then \"Eight\" \n                                   \
    \         else \"Nine\" \n                    else x, arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the array in reverse order. For example:\n>>> by_length([])\n\
    []\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, ", "    arr = arr |> sort()\
    \ |> reverse() |> map((x) -> \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr |> filter((x) -> x != \"\"\
    )\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</",
  "    \n    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    if length(arr) == 0\n        arr = []\n    end\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nFor example, \n>>>\
    \ sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6", "    arr = arr |> sort() |> reverse() |>\
    \ map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    return arr if arr.length==0\n\
    \    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_", "    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = replace(arr,1:9,\"One\")\n    arr = replace(arr,10:19,\"\
    Two\")\n    arr = replace(arr,20:29,\"Three\")\n    arr = replace(arr,30:41,\"\
    Four\")\n    arr = replace(arr,42:51,\"Five\")\n    arr = replace(arr,52:61,\"\
    Six\")\n    arr = replace(arr,62:71,\"Seven\")\n    arr = replace(arr,72:81,\"\
    Eight\")\n    arr = replace(arr,82:91,\"Nine\")\n    return arr\nend", "    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell", "    if length(arr) == 0 \n        return [] \n  \
    \  else \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr =\
    \ map(x -> \"One\" if x == 1 \n        else if x == 2 \n        else \"Two\" if\
    \ x == 3 \n        else \"Three\" if x == 4 \n        else \"Four\" if x == 5\
    \ \n        else \"Five\" if x == 6 \n        else \"Six\" if x == 7 \n      \
    \  else \"Seven\" if x == 8 \n        else \"Eight\" if x == 9 \n        else\
    \ \"Nine\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nin the vector in reverse order. For example, if the vector\
    \ is [2, 1, 4, 3, 8, 5, 6, 7], the function should return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"].", "    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend", "    arr = sort(arr)\n  \
    \  arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return\
    \ arr\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x ->\
    \ \"One\" if x == 1 else \"Two\" if x == 2 \n        else \"Three\" if x == 3\
    \ \n        else \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n     \
    \   else \"Six\" if x == 6 \n        else \"Seven\" if x == 7 \n        else \"\
    Eight\" if x == 8 \n        else \"Nine\", arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. For example:\n>>> sum([1, 2, 3])\n9\n>>> sum([1, 2,\
    \ 3])^2\n9", "    arr = arr |> sort() |> reverse() |> map((x) -> \"One\"..\"Nine\"\
    [x]) |> Vector{String}\n    if arr.length == 0\n        arr\n    else\n      \
    \  arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of integers and returns the same vector but with the integers replaced by their\
    \ corresponding names from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\".", "    if length(arr) == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> name(x), arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers that are between 1 and 9 inclusive.", "    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.", "    arr = sort(arr)\n    arr =\
    \ reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order.",
  "    \n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n   \
    \ arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n\
    \    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+\
    \ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n   \
    \ arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n\
    \    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+\
    \ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n   \
    \ arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n\
    \    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+\
    \ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n   \
    \ arr = arr .+ 1\n", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings where each string is the\
    \ name of the integer in the vector that is less than or equal to 100.", "   \
    \ \n    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n    arr3 = arr2.map(x\
    \ => name(x))\n    \n    return arr3\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings. Each string in the returned vector is the name of a number between\
    \ 1 and 9 inclusive.", "    if length(arr) == 0 \n        return [] \n    else\
    \ \n        arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x\
    \ -> \"One\"[x], arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr\
    \ = map(x -> \"Three\"[x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n\
    \        arr = map(x -> \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x],\
    \ arr) \n        arr = map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"\
    Eight\"[x], arr) \n        arr = map(x -> \"Nine\"[x], arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in that vector in descending order.", "    \n    arr = sort(arr)\n    \n   \
    \ if length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr\
    \ = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers. If the vector is empty, return 0.", "    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else \"Two\" if\
    \ x == 2 else \"Three\" if x == 3 else \"Four\" if x == 4 else \"Five\" if x ==\
    \ 5 else \"Six\" if x == 6 else \"Seven\" if x == 7 else \"Eight\" if x == 8 else\
    \ \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5", "    if length(arr) == 0 \n \
    \       return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x->name(x), arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the sum of the integers squared. For example:\n>>> square_sum([1, 2, 3])\n9\n\
    >>> square_sum([-1, -2, -3])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0", "    if length(arr) == 0 \n        return [] \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = replace(arr, 1, \"\
    One\") \n        arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3,\
    \ \"Three\") \n        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr,\
    \ 5, \"Five\") \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr,\
    \ 7, \"Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.", "    arr = sort(arr)\n    arr = reverse(arr)\n   \
    \ arr = replace(arr, 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr\
    \ = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr =\
    \ replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr,\
    \ 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr,\
    \ 9, \"Nine\")\n    return arr\nend", "    if length(arr) == 0 \n        return\
    \ [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr) \n    \
    \    arr = map(x -> \"One\" if x == 1 \n            else \"Two\" if x == 2 \n\
    \            else \"Three\" if x == 3 \n            else \"Four\" if x == 4 \n\
    \            else \"Five\" if x == 5 \n            else \"Six\" if x == 6 \n \
    \           else \"Seven\" if x == 7 \n            else \"Eight\" if x == 8 \n\
    \            else \"Nine\", arr) \n        return arr \nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes an array of integers and returns the number\
    \ of integers that are less than or equal to 9. For example:\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n2\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])", "    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend", "  \
    \  \n    arr2 = arr\n    arr2 = arr2[arr2 .< 10]\n    arr2 = arr2[arr2 .> 0]\n\
    \    arr2 = reverse(arr2)\n    arr2 = arr2[arr2 .< 9]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 9]\n   \
    \ arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 10]\n    arr2 = arr2[arr2\
    \ .> 0]\n    \n    arr2 = arr2[arr2 .< 11]\n    arr2 = arr2[arr2 .> 0]\n    \n\
    \    arr2 = arr2[arr2 .< 12]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2\
    \ .< 13]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 14]\n    arr2\
    \ = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 15]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .< 16]\n    arr2 = arr2[arr2 .> 0]\n    \n  \
    \  arr2 = arr2[arr2 .< 17]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2\
    \ .< 18]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 19]\n    arr2\
    \ = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 20]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .< 21]\n    arr2 = arr2[arr2 .> 0]\n    \n  \
    \  arr2 = arr2[arr2 .< 22]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2\
    \ .< 23]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 24]\n    arr2\
    \ = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 25]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .< 26]\n    arr2 = arr", "    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return\
    \ arr\nend", "    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n   \
    \ arr3 = Vector{String}(undef, 0)\n    \n    for x in arr2\n        if x >= 1\
    \ && x <= 9\n            arr3 .= push!(arr3, names(ByLength))[x]\n        end\n\
    \    end\n    \n    return arr3\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers from 1 to\
    \ 9 inclusive, with the number 0 replaced by \"Zero\", the number 1 replaced by\
    \ \"One\", and so on. For example, if the input vector is [1, 2, 3, 8, 5, 6, 4,\
    \ 9], the output vector should be [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Zero\"]. Do not hard-code the replacement\
    \ strings. Use a loop to iterate over the input vector.", "    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- ", "    \n    if length(arr) == 0 \n        return [] \n    else \n     \
    \   arr = sort(arr)\n        \n        arr = reverse(arr)\n        \n        arr\
    \ = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n      \
    \  return arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array of integers and returns a new array where each element is the\
    \ sum of the previous two elements in the array. For example, given [1,2,3,4,5],\
    \ the output should be [3,7,11,15].", "    if length(arr) == 0\n        return\
    \ Vector{String}()\n    end\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, \n>>> square_sum([1, 2, 3])\n25", "    if arr.length == 0 \n\
    \        return [] \n    else \n        arr = arr |> sort() \n        arr = reverse(arr)\
    \ \n        arr = arr |> map((x) -> \"One\"..\"Nine\"[x]) \n        arr \n   \
    \ end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.", "    \n   \
    \ arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    \ if x == 1 \n        else \"Two\" if x == 2\n        else \"Three\" if x == 3\n\
    \        else \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else\
    \ \"Six\" if x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\"\
    \ if x == 8\n        else \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.", "   \
    \ \n    arr = sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    digits = Vector{String}(\"\"\
    )\n    \n    for x in arr\n        push!(digits, name_by_digit(x))\n    end\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=juli", "    if length(arr) == 0 \n        return [] \n    else \n \
    \       arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x ->\
    \ name(x), arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the sum of the\
    \ integers in the array.", "    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend",
  "    arr = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" <= x &&\
    \ x <= \"Nine\" ? x : \"\", arr)\n    return arr\nend", "    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = arr |> sort() \n        arr\
    \ = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"[x-1], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order. For example, if the vector\
    \ is [5, 3, 6, 2, 8], the function should return [\"Eight\", \"Five\", \"Six\"\
    , \"Two\", \"Three\", \"Two\", \"One\"]", "    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = replace(arr, \"1\", \"One\")\n    arr\
    \ = replace(arr, \"2\", \"Two\")\n    arr = replace(arr, \"3\", \"Three\")\n \
    \   arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr, \"5\", \"Five\"\
    )\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr, \"7\", \"Seven\"\
    )\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr, \"9\", \"\
    Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.0>\nby_length([])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
