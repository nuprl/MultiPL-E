language: jl
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else\
    \ \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\"\
    \ if x == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x ==\
    \ 8 \n        else \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array sorted in descending order. \nFor example, if the array is [4, 3,\
    \ 1, 2, 9], the function should return [9, 1, 2, 3, 4]. \nIf the array is [4,\
    \ 3, 1, 2, 9], the function should return [9, 1, 2, 3, 4].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbjk7jwq.jl:21\nin expression starting at\
    \ /tmp/tmpzbjk7jwq.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return Vector{String}() \n    else \n        arr =\
    \ arr |> sort() \n        arr = reverse(arr) \n        arr = arr |> map(x->\"\
    One\"..\"Nine\"[x-1]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfl2_v0t.jl:28\nin expression starting at\
    \ /tmp/tmppfl2_v0t.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpeezzd2vi.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpeezzd2vi.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpeezzd2vi.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeezzd2vi.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeezzd2vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeezzd2vi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpeezzd2vi.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeezzd2vi.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeezzd2vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeezzd2vi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpeezzd2vi.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeezzd2vi.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeezzd2vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeezzd2vi.jl:39\n "
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the array sorted in descending order by the\
    \ sum of each of the integers. For example:\n>>> by_sum([])\n[]\n>>> by_sum([1,\
    \ 2, 3, 4])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, \nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrdnqrp6.jl:28\nin expression starting at\
    \ /tmp/tmpqrdnqrp6.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, \n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttnaoymj.jl:21\nin expression starting at\
    \ /tmp/tmpttnaoymj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr2 = copy(arr)\n    \n    arr2[arr2 .< 1] =\
    \ []\n    \n    arr2[arr2 .> 9] = []\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = reverse(arr2)\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 =\
    \ arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 \nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuc2hf0z.jl:1\nin expression starting at /tmp/tmpwuc2hf0z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else\
    \ \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if\
    \ x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n\
    \        else \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfmi53vu.jl:21\nin expression starting at\
    \ /tmp/tmprfmi53vu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. For example:\n>>> square_sum([1,\
    \ 2, 3, 4])\n25\n>>> square_sum([-1, -2, -3, -4])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoft94ba.jl:32\nin expression starting at\
    \ /tmp/tmpwoft94ba.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse \n        arr = arr |> map((digit) -> \"One\" |> get!(digit) |> toString)\
    \ |> Vector{String}\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string where each character is capitalized.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqgh4tk9.jl:26\nin expression starting at\
    \ /tmp/tmpeqgh4tk9.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   return arr \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpuyptqt42.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpuyptqt42.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpuyptqt42.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyptqt42.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyptqt42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuyptqt42.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpuyptqt42.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyptqt42.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyptqt42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuyptqt42.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpuyptqt42.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyptqt42.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyptqt42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuyptqt42.jl:36\n "
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((digit) -> \"One\"..\"Nine\" |> get)\
    \ |> Vector{String}\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswubzlv_.jl:26\nin expression starting at\
    \ /tmp/tmpswubzlv_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. For example:\n>>> by_length([])\n\
    0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9,\
    \ -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18,\
    \ -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7,\
    \ -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>>\
    \ by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15,\
    \ -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2,\
    \ -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n\
    25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14,\
    \ -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20,\
    \ -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10,\
    \ -12, -13, -14, -15, -\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wy8ggeq.jl:23\nin expression starting at\
    \ /tmp/tmp1wy8ggeq.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else if x == 2 \n        then \"Two\"\n        else if x == 3 \n    \
    \    then \"Three\"\n        else if x == 4 \n        then \"Four\"\n        else\
    \ if x == 5 \n        then \"Five\"\n        else if x == 6 \n        then \"\
    Six\"\n        else if x == 7 \n        then \"Seven\"\n        else if x == 8\
    \ \n        then \"Eight\"\n        else if x == 9 \n        then \"Nine\"\n \
    \       else x \n        end, arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order. For example, if the vector\
    \ is [5, 3, 1, 2, 4] then the output should be [\"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]. Ignore any numbers that are not between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0y58xz4u.jl:21\nin expression starting at\
    \ /tmp/tmp0y58xz4u.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \            else if x == 2 \n                    then \"Two\" \n            \
    \        else if x == 3 \n                        then \"Three\" \n          \
    \              else if x == 4 \n                            then \"Four\" \n \
    \                           else if x == 5 \n                                then\
    \ \"Five\" \n                                else if x == 6 \n               \
    \                     then \"Six\" \n                                    else\
    \ if x == 7 \n                                        then \"Seven\" \n      \
    \                                  else if x == 8 \n                         \
    \                   then \"Eight\" \n                                        \
    \    else \"Nine\", x) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdl3c593y.jl:24\nin expression starting at\
    \ /tmp/tmpdl3c593y.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.4>\nby_length([])\n\
    </cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxf8my8o_.jl:24\nin expression starting at\
    \ /tmp/tmpxf8my8o_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse()\n    \n    arr = arr |> map((x -> \"One\"\
    ..\"Nine\"[x-1]))\n    \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, \n    by_length([])\n    by_length([2, 1])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dkf6dji.jl:26\nin expression starting at\
    \ /tmp/tmp1dkf6dji.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = arr .- 10\n    arr = arr .+ 10\n\
    \    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 8\n    arr = arr .+\
    \ 8\n    arr = arr .- 7\n    arr = arr .+ 7\n    arr = arr .- 6\n    arr = arr\
    \ .+ 6\n    arr = arr .- 5\n    arr = arr .+ 5\n    arr = arr .- 4\n    arr =\
    \ arr .+ 4\n    arr = arr .- 3\n    arr = arr .+ 3\n    arr = arr .- 2\n    arr\
    \ = arr .+ 2\n    arr = arr .- 1\n    arr = arr .+ 1\n    arr = arr .- 0\n   \
    \ arr = arr .+ 0\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnuloi65.jl:45\nin expression starting at\
    \ /tmp/tmpmnuloi65.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map((x) -> \"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if arr.size == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9y1uselt.jl:26\nin expression starting at\
    \ /tmp/tmp9y1uselt.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n   \
    \ arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    ..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers that are between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3lz_9rx.jl:32\nin expression starting at\
    \ /tmp/tmpi3lz_9rx.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo11s076y.jl:23\nin expression starting at\
    \ /tmp/tmpo11s076y.jl:23\n"
  stdout: ''
