language: jl
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else\
    \ \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\"\
    \ if x == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x ==\
    \ 8 \n        else \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array sorted in descending order. \nFor example, if the array is [4, 3,\
    \ 1, 2, 9], the function should return [9, 1, 2, 3, 4]. \nIf the array is [4,\
    \ 3, 1, 2, 9], the function should return [9, 1, 2, 3, 4].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbjk7jwq.jl:21\nin expression starting at\
    \ /tmp/tmpzbjk7jwq.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return Vector{String}() \n    else \n        arr =\
    \ arr |> sort() \n        arr = reverse(arr) \n        arr = arr |> map(x->\"\
    One\"..\"Nine\"[x-1]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfl2_v0t.jl:28\nin expression starting at\
    \ /tmp/tmppfl2_v0t.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpeezzd2vi.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpeezzd2vi.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpeezzd2vi.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeezzd2vi.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeezzd2vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeezzd2vi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpeezzd2vi.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeezzd2vi.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeezzd2vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeezzd2vi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpeezzd2vi.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeezzd2vi.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeezzd2vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeezzd2vi.jl:39\n "
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the array sorted in descending order by the\
    \ sum of each of the integers. For example:\n>>> by_sum([])\n[]\n>>> by_sum([1,\
    \ 2, 3, 4])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4,\
    \ 3, 2, 1])\n[4, 3, 2, 1]\n>>> by_sum([4, 3, 2, 1])\n[4, 3, 2, \nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrdnqrp6.jl:28\nin expression starting at\
    \ /tmp/tmpqrdnqrp6.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, \n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttnaoymj.jl:21\nin expression starting at\
    \ /tmp/tmpttnaoymj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr2 = copy(arr)\n    \n    arr2[arr2 .< 1] =\
    \ []\n    \n    arr2[arr2 .> 9] = []\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = reverse(arr2)\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 =\
    \ arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n\
    \    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2\
    \ = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr2 = arr2[arr2 .!= 0]\n    \n    arr2 = arr2[arr2 \nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuc2hf0z.jl:1\nin expression starting at /tmp/tmpwuc2hf0z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else\
    \ \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if\
    \ x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n\
    \        else \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfmi53vu.jl:21\nin expression starting at\
    \ /tmp/tmprfmi53vu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. For example:\n>>> square_sum([1,\
    \ 2, 3, 4])\n25\n>>> square_sum([-1, -2, -3, -4])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n\
    0\n>>> square_sum([0, 0])\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoft94ba.jl:32\nin expression starting at\
    \ /tmp/tmpwoft94ba.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse \n        arr = arr |> map((digit) -> \"One\" |> get!(digit) |> toString)\
    \ |> Vector{String}\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string where each character is capitalized.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqgh4tk9.jl:26\nin expression starting at\
    \ /tmp/tmpeqgh4tk9.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   return arr \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpuyptqt42.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpuyptqt42.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpuyptqt42.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyptqt42.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyptqt42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuyptqt42.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpuyptqt42.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyptqt42.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyptqt42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuyptqt42.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpuyptqt42.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyptqt42.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyptqt42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuyptqt42.jl:36\n "
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((digit) -> \"One\"..\"Nine\" |> get)\
    \ |> Vector{String}\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswubzlv_.jl:26\nin expression starting at\
    \ /tmp/tmpswubzlv_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. For example:\n>>> by_length([])\n\
    0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9,\
    \ -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18,\
    \ -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7,\
    \ -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>>\
    \ by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15,\
    \ -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2,\
    \ -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n\
    25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14,\
    \ -15, -16, -17, -18, -19, -20, -21, -22])\n25\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20,\
    \ -21, -22])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3, -6, -7, -8, -9, -10,\
    \ -12, -13, -14, -15, -\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wy8ggeq.jl:23\nin expression starting at\
    \ /tmp/tmp1wy8ggeq.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else if x == 2 \n        then \"Two\"\n        else if x == 3 \n    \
    \    then \"Three\"\n        else if x == 4 \n        then \"Four\"\n        else\
    \ if x == 5 \n        then \"Five\"\n        else if x == 6 \n        then \"\
    Six\"\n        else if x == 7 \n        then \"Seven\"\n        else if x == 8\
    \ \n        then \"Eight\"\n        else if x == 9 \n        then \"Nine\"\n \
    \       else x \n        end, arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order. For example, if the vector\
    \ is [5, 3, 1, 2, 4] then the output should be [\"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]. Ignore any numbers that are not between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0y58xz4u.jl:21\nin expression starting at\
    \ /tmp/tmp0y58xz4u.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \            else if x == 2 \n                    then \"Two\" \n            \
    \        else if x == 3 \n                        then \"Three\" \n          \
    \              else if x == 4 \n                            then \"Four\" \n \
    \                           else if x == 5 \n                                then\
    \ \"Five\" \n                                else if x == 6 \n               \
    \                     then \"Six\" \n                                    else\
    \ if x == 7 \n                                        then \"Seven\" \n      \
    \                                  else if x == 8 \n                         \
    \                   then \"Eight\" \n                                        \
    \    else \"Nine\", x) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdl3c593y.jl:24\nin expression starting at\
    \ /tmp/tmpdl3c593y.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.4>\nby_length([])\n\
    </cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxf8my8o_.jl:24\nin expression starting at\
    \ /tmp/tmpxf8my8o_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse()\n    \n    arr = arr |> map((x -> \"One\"\
    ..\"Nine\"[x-1]))\n    \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, \n    by_length([])\n    by_length([2, 1])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    by_length([2,\
    \ 1, 1, 4, 5, 8, \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dkf6dji.jl:26\nin expression starting at\
    \ /tmp/tmp1dkf6dji.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = arr .- 10\n    arr = arr .+ 10\n\
    \    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 8\n    arr = arr .+\
    \ 8\n    arr = arr .- 7\n    arr = arr .+ 7\n    arr = arr .- 6\n    arr = arr\
    \ .+ 6\n    arr = arr .- 5\n    arr = arr .+ 5\n    arr = arr .- 4\n    arr =\
    \ arr .+ 4\n    arr = arr .- 3\n    arr = arr .+ 3\n    arr = arr .- 2\n    arr\
    \ = arr .+ 2\n    arr = arr .- 1\n    arr = arr .+ 1\n    arr = arr .- 0\n   \
    \ arr = arr .+ 0\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnuloi65.jl:45\nin expression starting at\
    \ /tmp/tmpmnuloi65.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map((x) -> \"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if arr.size == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9y1uselt.jl:26\nin expression starting at\
    \ /tmp/tmp9y1uselt.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n   \
    \ arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    ..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers that are between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3lz_9rx.jl:32\nin expression starting at\
    \ /tmp/tmpi3lz_9rx.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo11s076y.jl:23\nin expression starting at\
    \ /tmp/tmpo11s076y.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" <= x && x <=\
    \ \"Nine\" ? x : \"\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jfn2uzs.jl:24\nin expression starting at\
    \ /tmp/tmp2jfn2uzs.jl:24\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    else \n        \n        arr\
    \ = sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr =\
    \ map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n        return\
    \ arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. For example:\n>>> square([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4,\
    \ 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2,\
    \ 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4,\
    \ 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49,\
    \ 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n\
    >>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4,\
    \ 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2,\
    \ 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4,\
    \ 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49,\
    \ 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n\
    >>> square([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2,\
    \ -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4,\
    \ 5, 8, 2, 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, 4, 5, 8, 2,\
    \ 3])\n[4, 16, 25, 36, 49, 64, 81]\n>>> square([2, -1, 0, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttdjhrd7.jl:33\nin expression starting at\
    \ /tmp/tmpttdjhrd7.jl:33\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return Vector{String}() \n    else \n        arr =\
    \ sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x],\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ For example,\n    \n    >>> by_sum(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3]))\n\
    \    25\n    \n    Ignore any strange numbers in the vector:\n    >>> by_sum(Vector{Int64}([-1,\
    \ 55]))\n    55\n    \n    Ignore any negative numbers:\n    >>> by_sum(Vector{Int64}([-1,\
    \ 1, 55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n    >>> by_sum(Vector{Int64}([1.1,\
    \ 55.55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n    >>> by_sum(Vector{Int64}([1.1,\
    \ 55.55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n    >>> by_sum(Vector{Int64}([1.1,\
    \ 55.55]))\n    55\n    \n    Ignore any numbers that are not integers:\n    >>>\
    \ by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n    \n    Ignore any numbers that\
    \ are not integers:\n    >>> by_sum(Vector{Int64}([1.1, 55.55]))\n    55\n   \
    \ \n    Ignore any numbers that are not integers:\n\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnjc6gty.jl:28\nin expression starting at\
    \ /tmp/tmptnjc6gty.jl:28\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nby_length([2,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn62wgiqz.jl:24\nin expression starting at\
    \ /tmp/tmpn62wgiqz.jl:24\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n    square([1,2,3]) should return 9\n    square([1,-2,3]) should return 9\n\
    \    square([1,-2,-3]) should return -9\n    square([1,-2,-3,4]) should return\
    \ -9\n    square([1,-2,-3,-4]) should return -9\n    square([1,-2,-3,-4,5]) should\
    \ return -9\n    square([1,-2,-3,-4,-5]) should return -9\n    square([1,-2,-3,-4,-5,6])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,7]) should return -9\n    square([1,-2,-3,-4,-5,-6,-7,8])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,9]) should return -9\n\
    \    square([1,-2,-3,-4,-5,-6,-7,-8,-9,10]) should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,11])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,12]) should\
    \ return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13]) should return\
    \ -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,14]) should return\
    \ -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15]) should return\
    \ -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,16]) should\
    \ return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-16,17])\
    \ should return -9\n    square([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71fl_1r4.jl:24\nin expression starting at\
    \ /tmp/tmp71fl_1r4.jl:24\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x])\
    \ |> Vector{String}\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpm9ak9cya.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpm9ak9cya.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpm9ak9cya.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm9ak9cya.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm9ak9cya.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm9ak9cya.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpm9ak9cya.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm9ak9cya.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm9ak9cya.jl:26\ntest set:\
    \ Error During "
  timestamp: 1659822355
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, \"1\", \"One\")\n\
    \    arr = replace(arr, \"2\", \"Two\")\n    arr = replace(arr, \"3\", \"Three\"\
    )\n    arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr, \"5\", \"Five\"\
    )\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr, \"7\", \"Seven\"\
    )\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr, \"9\", \"\
    Nine\")\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_fyzvppu.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp_fyzvppu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp_fyzvppu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_fyzvppu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_fyzvppu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_fyzvppu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp_fyzvppu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_fyzvppu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_fyzvppu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_fyzvppu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::String, ::String)\n  Closest candidates are:\n    replace"
  timestamp: 1659822355
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings that\
    \ represent each of the numbers in descending order. For example, if the input\
    \ vector is [2, 1, 4, 3, 6, 5, 8], the output vector should be [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\"]. Make sure to handle\
    \ edge cases like the empty vector and negative numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ava19ck.jl:28\nin expression starting at\
    \ /tmp/tmp3ava19ck.jl:28\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order\
    \ by the sum of its elements.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1b9ke50.jl:28\nin expression starting at\
    \ /tmp/tmps1b9ke50.jl:28\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" if x == 1 \n            else \"Two\" if x == 2 \n            else \"Three\"\
    \ if x == 3 \n            else \"Four\" if x == 4 \n            else \"Five\"\
    \ if x == 5 \n            else \"Six\" if x == 6 \n            else \"Seven\"\
    \ if x == 7 \n            else \"Eight\" if x == 8 \n            else \"Nine\"\
    , arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. For example:\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ff8254e.jl:24\nin expression starting at\
    \ /tmp/tmp3ff8254e.jl:24\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr \nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocf_vtn9.jl:35\nin expression starting at\
    \ /tmp/tmpocf_vtn9.jl:35\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order. For\
    \ example, \n    by_length([2, 1, 1, 4, 5, 8, 2, 3]) should return [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwkeime0.jl:28\nin expression starting at\
    \ /tmp/tmpjwkeime0.jl:28\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(i->\"One\"..\"Nine\"[i])\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpy4sk6jp9.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpy4sk6jp9.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpy4sk6jp9.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4sk6jp9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4sk6jp9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpy4sk6jp9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpy4sk6jp9.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4sk6jp9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4sk6jp9.jl:26\ntest set:\
    \ Error During "
  timestamp: 1659822355
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n  \
    \  arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. \nFor example, \n>>> square_sum([1,\
    \ 2, 3])\n25\n>>> square_sum([-1, -2, -3])\n0\n>>> square_sum([1, 2, -3, 4])\n\
    25\n>>> square_sum([-1, -2, -3, -4])\n0\n>>> square_sum([-1, -2, -3, -4, -5])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6])\n0\n>>> square_sum([-1, -2, -3, -4,\
    \ -5, -6, -7])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8])\n0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n25\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n25\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, \nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnaxxm2lj.jl:32\nin expression starting at\
    \ /tmp/tmpnaxxm2lj.jl:32\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n        arr\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpioq9nmqx.jl:28\nin expression starting at\
    \ /tmp/tmpioq9nmqx.jl:28\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if length(arr) == 0 \n        arr\n    else\n        arr\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfl3628cp.jl:26\nin expression starting at\
    \ /tmp/tmpfl3628cp.jl:26\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"\
    Nine\"[x], arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdzpit0xn.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpdzpit0xn.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpdzpit0xn.jl:27\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpdzpit0xn.jl:27\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpdzpit0xn.jl:36 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpdzpit0xn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdzpit0xn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpdzpit0xn.jl:27\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order. For example, if the input vector\
    \ is [4, 3, 6, 2, 9], the output vector should be [\"Nine\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]. Ignore any numbers that are not between 1 and 9.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz_ihka3.jl:24\nin expression starting at\
    \ /tmp/tmpnz_ihka3.jl:24\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    \n    arr = sort(arr)\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n    \
    \    else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else\
    \ \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\"\
    \ if x == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x ==\
    \ 8 \n        else \"Nine\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxsxbugo.jl:27\nin expression starting at\
    \ /tmp/tmplxsxbugo.jl:27\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if arr.length == 0 \n        return Vector{String}()\n    end\n    \n   \
    \ arr = arr |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"\
    Nine\"[x]) |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive, with the number \"One\" in the first\
    \ position and \"Nine\" in the last position. For example, if the input vector\
    \ is [1, 2, 3, 4, 5, 6, 7, 8, 9], the output should be [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\"].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpseo60jr4.jl:30\nin expression starting at\
    \ /tmp/tmpseo60jr4.jl:30\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map((&names(arr))) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the sum of the integers in the array.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax &(names(arr)) around /tmp/tmpycqqoluk.jl:24\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpycqqoluk.jl:1\nin expression starting\
    \ at /tmp/tmpycqqoluk.jl:1\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84vyfkvp.jl:32\nin expression starting at\
    \ /tmp/tmp84vyfkvp.jl:32\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ the numbers in reverse order. For example, if the input vector is [1, 2, 3,\
    \ 4], the output vector should be [\"4\", \"3\", \"2\", \"1\"].\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6uqa7z6.jl:36\nin expression starting at\
    \ /tmp/tmpn6uqa7z6.jl:36\n"
  stdout: ''
  timestamp: 1659822352
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers where\
    \ the integers are the length of the strings in the original vector. For example:\n\
    >>> by_length([\"a\", \"b\", \"c\", \"d\"])\n[3, 3]\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprm85j1jj.jl:28\nin expression starting at\
    \ /tmp/tmprm85j1jj.jl:28\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if arr.length == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywm5iz0e.jl:26\nin expression starting at\
    \ /tmp/tmpywm5iz0e.jl:26\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqgiz9i3t.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpqgiz9i3t.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpqgiz9i3t.jl:29 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpqgiz9i3t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpqgiz9i3t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk12rwjxp.jl:24\nin expression starting at\
    \ /tmp/tmpk12rwjxp.jl:24\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg5b5w1pu.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpg5b5w1pu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Int64, ::String)\n  Closest candidates are:\n    replace(!M"
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if isempty(arr)\n        Vector{String}()\n    else\n        arr\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_vy3ubc.jl:26\nin expression starting at\
    \ /tmp/tmpk_vy3ubc.jl:26\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, \"1\", \"One\")\n\
    \    arr = replace(arr, \"2\", \"Two\")\n    arr = replace(arr, \"3\", \"Three\"\
    )\n    arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr, \"5\", \"Five\"\
    )\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr, \"7\", \"Seven\"\
    )\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr, \"9\", \"\
    Nine\")\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string in the original vector is replaced by\
    \ the first character of the string. For example:\n>>> by_first_char([\"a\", \"\
    b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n>>> by_first_char([\"a\", \"\
    b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n>>> by_first_char([])\n[]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char([\"a\", \"b\", \"c\", \"d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\
    >>> by_first_char\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv93ccd0u.jl:32\nin expression starting at\
    \ /tmp/tmpv93ccd0u.jl:32\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}(undef,\
    \ 0)\n    \n    for i in 1:length(arr)\n        if arr[i] <= 9\n            arr3\
    \ .= arr[i]\n        else\n            arr3 .= by_length(arr2[i:])\n        end\n\
    \    end\n    \n    return arr3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphszo255r.jl:33\nin expression\
    \ starting at /tmp/tmphszo255r.jl:33\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if length(arr) == 0\n        Vector{String}()\n    else\n        arr\n  \
    \  end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrlm7ur8.jl:26\nin expression starting at\
    \ /tmp/tmpdrlm7ur8.jl:26\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n      \
    \  arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n\
    \        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"Five\"\
    ) \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr, 7, \"\
    Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers in the vector in descending order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplgbe8cyj.jl:36\nin expression starting at\
    \ /tmp/tmplgbe8cyj.jl:36\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uh2sj7n.jl:28\nin expression starting at\
    \ /tmp/tmp5uh2sj7n.jl:28\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwk71fr4p.jl:24\nin expression starting at\
    \ /tmp/tmpwk71fr4p.jl:24\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    else \n        \n        arr\
    \ = sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr =\
    \ map(x -> \"One\" if x == 1 \n            else \"Two\" if x == 2 \n         \
    \   else \"Three\" if x == 3 \n            else \"Four\" if x == 4 \n        \
    \    else \"Five\" if x == 5 \n            else \"Six\" if x == 6 \n         \
    \   else \"Seven\" if x == 7 \n            else \"Eight\" if x == 8 \n       \
    \     else \"Nine\", arr) \n        \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxqsrlti.jl:28\nin expression starting at\
    \ /tmp/tmpmxqsrlti.jl:28\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    \ if x == 1 \n        else \"Two\" if x == 2\n        else \"Three\" if x == 3\n\
    \        else \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else\
    \ \"Six\" if x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\"\
    \ if x == 8\n        else \"Nine\", arr)\n    \n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvig78a5.jl:23\nin expression starting at\
    \ /tmp/tmpgvig78a5.jl:23\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr)\
    \ \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the number of positive integers\
    \ in the array.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdjeqczor.jl:28\nin expression starting at\
    \ /tmp/tmpdjeqczor.jl:28\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg5b5w1pu.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpg5b5w1pu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Int64, ::String)\n  Closest candidates are:\n    replace(!M"
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo4kcs4pi.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo4kcs4pi.jl:1\n\
    in expression starting at /tmp/tmpo4kcs4pi.jl:1\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr)\n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers that are between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yvqn7yv.jl:28\nin expression starting at\
    \ /tmp/tmp1yvqn7yv.jl:28\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    if length(arr) == 0\n        return arr\n    end\n    \n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpla2dtupx.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpla2dtupx.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpla2dtupx.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpla2dtupx.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpla2dtupx.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpla2dtupx.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpla2dtupx.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpla2dtupx.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpla2dtupx.jl:32\ntest set:\
    \ Error During "
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the number of vowels in that string. \nThe vowels are \"\
    a\", \"e\", \"i\", \"o\", and \"u\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpon2ufh24.jl:28\nin expression starting at\
    \ /tmp/tmpon2ufh24.jl:28\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse() |> map((x) -> \"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    if arr.size == 0\n        arr\n    else\n        arr\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns a new array with the integers reversed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2et0o_xe.jl:28\nin expression starting at\
    \ /tmp/tmp2et0o_xe.jl:28\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0\n        return Vector{String}()\n    \n    arr = sort(arr)\n\
    \    \n    digits = Vector{String}()\n    \n    for i in arr\n        if i < 1\
    \ || i > 9\n            continue\n        \n        digits.push(names[i])\n  \
    \  end\n    \n    return reverse(digits)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddc886c_.jl:1\nin expression starting at /tmp/tmpddc886c_.jl:1\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given integer appears in the given array.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzkqeasz.jl:28\nin expression starting at\
    \ /tmp/tmpjzkqeasz.jl:28\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"\
    Nine\"[x]) |> Vector{String}\n    \n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp47deodet.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp47deodet.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp47deodet.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp47deodet.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp47deodet.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp47deodet.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp47deodet.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp47deodet.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp47deodet.jl:30\ntest set:\
    \ Error During "
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers squared. \nFor example, \n>>> by_length([])\n0\n>>> by_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuk7agr_u.jl:28\nin expression starting at\
    \ /tmp/tmpuk7agr_u.jl:28\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    else \n        \n        arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \        \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers that are\
    \ between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7el0lyyj.jl:29\nin expression starting at\
    \ /tmp/tmp7el0lyyj.jl:29\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr,\n        1 => \"\
    One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\"\
    ,\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n  \
    \      8 => \"Eight\",\n        9 => \"Nine\",\n        0 => \"Zero\",\n     \
    \   Inf => \"Infinity\",\n        -Inf => \"-Infinity\",\n    )\n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the array sorted in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjauvmlf3.jl:37\nin expression starting at\
    \ /tmp/tmpjauvmlf3.jl:37\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers from 1 to 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc271p4j_.jl:24\nin expression starting at\
    \ /tmp/tmpc271p4j_.jl:24\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each number between\
    \ 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwc3qejdg.jl:23\nin expression starting at\
    \ /tmp/tmpwc3qejdg.jl:23\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings that represent \nthe numbers from 1\
    \ to 9 inclusive, sorted in descending order.\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthlxjs2f.jl:21\nin expression starting at\
    \ /tmp/tmpthlxjs2f.jl:21\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg5b5w1pu.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpg5b5w1pu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Int64, ::String)\n  Closest candidates are:\n    replace(!M"
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprx8aqel9.jl:24\nin expression starting at\
    \ /tmp/tmprx8aqel9.jl:24\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort\n    \n    arr = reverse(arr)\n    \n    arr = arr |> map(x->\"\
    One\"..\"Nine\"[x-1], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjy5q1lhl.jl:28\nin expression starting at\
    \ /tmp/tmpjy5q1lhl.jl:28\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else\
    \ \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\"\
    \ if x == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x ==\
    \ 8 \n        else \"Nine\", arr)\n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string in the original vector is replaced by the first letter of\
    \ the string followed by the rest of the string. For example:\n>>> by_first_letter(\"\
    Hello World\")\n[\"Hell\", \"o World\"]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe0_iq9i.jl:21\nin expression starting at\
    \ /tmp/tmphe0_iq9i.jl:21\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnj137ev7.jl:23\nin expression starting at\
    \ /tmp/tmpnj137ev7.jl:23\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\n\
    \        arr |> filter(x->x>=1 && x<=9),\n        \"One\",\n        \"Two\",\n\
    \        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n\
    \        \"Seven\",\n        \"Eight\",\n        \"Nine\")\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in reverse order. For\
    \ example, if the input vector is [5, 6, 4, 3, 1] then the output vector should\
    \ be [\"5\", \"6\", \"4\", \"3\", \"1\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpquipnbzr.jl:38\nin expression starting at\
    \ /tmp/tmpquipnbzr.jl:38\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if length(arr) == 0 \n        arr = []\n    end\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([1, -1, 55])\nby_length([3, 6, 4, 1, 7, 8, 2, 5, 9])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6iius51.jl:25\nin expression starting at\
    \ /tmp/tmpu6iius51.jl:25\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1t39m118.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp1t39m118.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmp1t39m118.jl:21\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp1t39m118.jl:21\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1t39m118.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1t39m118.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1t39m118.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmp1t39m118.jl:21\n    [2]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp1t39m118.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1t39m118.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1t39m118.jl:28\ntest set:\
    \ Error "
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y396xri.jl:23\nin expression starting at\
    \ /tmp/tmp5y396xri.jl:23\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvgiot9o9.jl:28\nin expression starting at\
    \ /tmp/tmpvgiot9o9.jl:28\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns a new array that contains the same\
    \ integers but in reverse order. For example, if the input array is [2, 1, 4,\
    \ 3, 8, 5, 6], the output should be [6, 5, 4, 3, 8, 2, 1]. Do not use any built-in\
    \ functions (such as reverse).\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpisokqk60.jl:28\nin expression starting at\
    \ /tmp/tmpisokqk60.jl:28\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. For example:\n>>> square_sum([1, 2, 3, 4])\n\
    25\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvmvjbq0.jl:24\nin expression starting at\
    \ /tmp/tmpqvmvjbq0.jl:24\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \            else if x == 2 \n                    then \"Two\" \n            \
    \        else if x == 3 \n                        then \"Three\" \n          \
    \              else if x == 4 \n                            then \"Four\" \n \
    \                           else if x == 5 \n                                then\
    \ \"Five\" \n                                else if x == 6 \n               \
    \                     then \"Six\" \n                                    else\
    \ if x == 7 \n                                        then \"Seven\" \n      \
    \                                  else if x == 8 \n                         \
    \                   then \"Eight\" \n                                        \
    \    else \"Nine\" , arr) \n        return arr \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. For example:\n>>> square([4, 9, 16, 25])\n[16, 49,\
    \ 256, 625]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1xsbcw7.jl:24\nin expression starting at\
    \ /tmp/tmpn1xsbcw7.jl:24\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    else \n        \n        arr\
    \ = sort(arr)\n        \n        arr = reverse(arr)\n        \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n        return\
    \ arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector. \nFor\
    \ example, \n>>> sum([1, 2, 3, 4])\n10\nWrite a function that takes a vector of\
    \ integers and returns the product of the integers in the vector. \nFor example,\
    \ \n>>> product([1, 2, 3, 4])\n24\nWrite a function that takes a vector of integers\
    \ and returns the largest integer in the vector. \nFor example, \n>>> max([1,\
    \ 2, 3, 4])\n4\nWrite a function that takes a vector of integers and returns the\
    \ smallest integer in the vector. \nFor example, \n>>> min([1, 2, 3, 4])\n1\n\
    Write a function that takes a vector of integers and returns the number of integers\
    \ in the vector. \nFor example, \n>>> len([1, 2, 3, 4])\n4\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the integers\
    \ in the vector are sorted in ascending order. \nFor example, \n>>> sorted([1,\
    \ 2, 3, 4])\n[1, 2, 3, 4]\nWrite a function that takes a vector of integers and\
    \ returns a vector of integers where the integers in the vector are sorted in\
    \ descending order. \nFor example, \n>>> sorted([1, 2, 3, 4], reverse=True)\n\
    [4, 3, 2, 1]\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers in the vector are sorted in ascending order and\
    \ where the integers in the vector are sorted in descending order. \nFor example,\
    \ \n>>> sorted([1, 2, 3, 4], reverse=true)\n[4, 3, 2, 1]\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the integers\
    \ in the vector are sorted in ascending order and where the integers in the vector\
    \ are sorted in descending order and where the integers in the vector are sorted\
    \ in ascending order. \nFor example, \n>>> sorted([1, 2, 3, 4], reverse=true,\
    \ key=lambda x: (x > 3, x < 4))\n[4, 3, 2, 1]\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers where the integers in the vector\
    \ are sorted in ascending order and where the integers in the vector are sorted\
    \ in descending order and where the integers in the vector are sorted in ascending\
    \ order. \nFor example, \n>>> sorted([1, 2, 3, 4], reverse=true, key=lambda x:\
    \ (x > 3, x < 4), reverse=True)\n[4, 3, 2, 1]\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers where the integers in the vector\
    \ are sorted in ascending order and where the integers in the vector are sorted\
    \ in descending order and where the integers in the vector are sorted in descending\
    \ order. \nFor example, \n>>> sorted([1, 2, 3, 4], reverse=true, key=lambda x:\
    \ (x > 3, x < 4), reverse\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwri7_ndn.jl:33\nin expression starting at\
    \ /tmp/tmpwri7_ndn.jl:33\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqbei6mpf.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpqbei6mpf.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqbei6mpf.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqbei6mpf.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqbei6mpf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpqbei6mpf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqbei6mpf.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqbei6mpf.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqbei6mpf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpqbei6mpf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpqbei6mpf.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqbei6mpf.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqbei6mpf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpqbei6mpf.jl:39\n  Test threw exception\n  Expres"
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers in the vector in descending order.\
    \ For example, if the vector is [4, 2, 9, 1, 3, 6, 0, 5], the function should\
    \ return [\"Five\", \"Six\", \"Nine\", \"Four\", \"Three\", \"Two\", \"One\"]\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk1ejfvm.jl:36\nin expression starting at\
    \ /tmp/tmpdk1ejfvm.jl:36\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings where each string\
    \ is the name of a number between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgadznlm.jl:28\nin expression starting at\
    \ /tmp/tmphgadznlm.jl:28\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the same vector but with the integers\
    \ replaced by their corresponding names from \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthz5luz8.jl:28\nin expression starting at\
    \ /tmp/tmpthz5luz8.jl:28\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n    arr3 = arr2.map(x\
    \ => name(x))\n    \n    return arr3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5u208g42.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp5u208g42.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5u208g42.jl:24\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5u208g42.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5u208g42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5u208g42.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp5u208g42.jl:24\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5u208g42.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5u208g42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5u208g42.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp5u208g42.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5u208g42.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5u208g42.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5u208g42.jl:36\n  Test threw exception\n  Expression:\
    \ can"
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6v5t03s.jl:28\nin expression starting at\
    \ /tmp/tmpj6v5t03s.jl:28\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo4kcs4pi.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo4kcs4pi.jl:1\n\
    in expression starting at /tmp/tmpo4kcs4pi.jl:1\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfrcknvv.jl:28\nin expression starting at\
    \ /tmp/tmpzfrcknvv.jl:28\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9eh77ohz.jl:24\nin expression starting at\
    \ /tmp/tmp9eh77ohz.jl:24\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqgiz9i3t.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpqgiz9i3t.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpqgiz9i3t.jl:29 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpqgiz9i3t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpqgiz9i3t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822356
- exit_code: -1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr2 = arr\n    \n    for i in arr\n        if\
    \ i < 1 || i > 9\n            arr2 = arr2[-i]\n        else\n            arr2\
    \ = arr2[arr2 .!= i]\n        end\n    end\n    \n    arr2 = reverse(arr2)\n \
    \   \n    arr3 = arr2\n    \n    for i in arr3\n        arr3 = arr3[arr3 .!= i]\n\
    \    end\n    \n    arr3 = arr3[arr3 .!= 1]\n    \n    return arr3\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp9ol34oqk.jl:49\n  Expression: candidate([2,
    1, 1, 4, 5, 8, 2, 3]) == ["Eight", "Five", "Four", "Three", "Two", "Two", "One",
    "One"]\n   Evaluated: String[] == ["Eight", "Five", "Four", "Three", "Two", "Two",
    "One", "One"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ol34oqk.jl:49 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ol34oqk.jl:48\ntest set: Error
    During Test at /tmp/tmp9ol34oqk.jl:51\n  Test threw exception\n  Expression: candidate([1,
    -1, 55]) == ["One"]\n  BoundsError\n  Stacktrace:\n   [1] getindex\n     @ ./number.jl:98
    [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp9ol34oqk.jl:26\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9ol34oqk.jl:51 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9ol34oqk.jl:48\n'''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array sorted in descending order by the sum of its elements.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp907s4bhy.jl:24\nin expression starting at\
    \ /tmp/tmp907s4bhy.jl:24\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map((digit) -> \"One\"..\"\
    Nine\"[digit]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ For example:\n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    25\n>>> by_length([-1, 0, 1])\n1\n>>> by_length([-1, 1, 0])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1,\
    \ 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n1\n>>> by_length([-1, 1, 0, 1])\n\
    1\n>>> by_length([-\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx5fz9x9.jl:28\nin expression starting at\
    \ /tmp/tmpkx5fz9x9.jl:28\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n \
    \   return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function called by_length\
    \ that sorts the integers that are between 1 and 9 inclusive,\nreverses the resulting\
    \ array, and then replace each digit by its corresponding name from\n\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvx5rriv.jl:24\nin expression starting at\
    \ /tmp/tmpxvx5rriv.jl:24\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n      \
    \  arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n\
    \        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"Five\"\
    ) \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr, 7, \"\
    Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the number of integers that are\
    \ between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnto_nou.jl:36\nin expression starting at\
    \ /tmp/tmpbnto_nou.jl:36\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns a new array\
    \ where each element in the new array is the product of all the numbers in the\
    \ original array except the number itself.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp933_vn3u.jl:28\nin expression starting at\
    \ /tmp/tmp933_vn3u.jl:28\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if arr.length == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ between 1 and 9 inclusive in descending order. For example, if the input vector\
    \ is [2, 1, 4, 3, 8, 5, 6, 7], the output vector should be [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzs3ffvej.jl:26\nin expression starting at\
    \ /tmp/tmpzs3ffvej.jl:26\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map((x) -> \"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x]\n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpts3idkyo.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpts3idkyo.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpts3idkyo.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpts3idkyo.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpts3idkyo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpts3idkyo.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpts3idkyo.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpts3idkyo.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpts3idkyo.jl:27\ntest set:\
    \ Error During "
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse() |> map((digit) -> \"One\"..\"Nine\"[digit])\
    \ |> Vector{String}\n    \n    if arr == []\n        arr\n    else\n        arr\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array in reverse sorted order. \nFor example,\
    \ \n>>> by_length([])\n[]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([1,\
    \ -1, 55])\n[\"One\"]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbldh27e.jl:28\nin expression starting at\
    \ /tmp/tmpnbldh27e.jl:28\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqgiz9i3t.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpqgiz9i3t.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpqgiz9i3t.jl:29 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpqgiz9i3t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpqgiz9i3t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse() |> collect{|x| \n        x % 10 == 0 ? \"\
    One\" : \n        x % 10 == 1 ? \"Two\" : \n        x % 10 == 2 ? \"Three\" :\
    \ \n        x % 10 == 3 ? \"Four\" : \n        x % 10 == 4 ? \"Five\" : \n   \
    \     x % 10 == 5 ? \"Six\" : \n        x % 10 == 6 ? \"Seven\" : \n        x\
    \ % 10 == 7 ? \"Eight\" : \n        x % 10 == 8 ? \"Nine\" : \n        \"\"\n\
    \    }\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers from 1 to 9 inclusive, with the number \"One\" at the beginning\
    \ of the string, \"Two\" at the second position, and so on. For example, if the\
    \ input vector is [1, 2, 3, 4], the output vector should be [\"One\", \"Two\"\
    , \"Three\", \"Four\"].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ss77mpt.jl:20\nin expression starting at\
    \ /tmp/tmp6ss77mpt.jl:20\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    \n    arr = sort(arr)\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0uz3gtm.jl:31\nin expression starting at\
    \ /tmp/tmpq0uz3gtm.jl:31\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}()\n    \n    for\
    \ n in arr2\n        if n <= 9\n            arr3 += [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n - 1]\n      \
    \  else\n            arr3 += [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"\
    Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\
    ][n - 10]\n        end\n    end\n    \n    return arr3\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the array\
    \ sorted in descending order by the absolute value of the first element. For example:\n\
    >>> by_abs([3, -4, 1, -5, 2])\n[5, 4, 3, 2, 1]\n>>> by_abs([])\n[]\n>>> by_abs([-3,\
    \ -4, 1, -5, 2])\n[-5, -4, -3, -2, -1]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3])\n\
    [-6, -5, -4, -3, -2, -1, 3]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4])\n[-7,\
    \ -6, -5, -4, -3, -2, -1, 3, 4]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8,\
    \ 5])\n[-8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5]\n>>> by_abs([-3, -4, 1, -5, 2,\
    \ -6, 3, -7, 4, -8, 5, -9, 6])\n[-9, -8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5,\
    \ 6]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8, 5, -9, 6, -10])\n[-10, -9,\
    \ -8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5, 6, 7]\n>>> by_abs([-3, -4, 1, -5, 2,\
    \ -6, 3, -7, 4, -8, 5, -9, 6, -10, 7])\n[-10, -9, -8, -7, -6, -5, -4, -3, -2,\
    \ -1, 3, 4, 5, 6, 7, 8]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8, 5, -9,\
    \ 6, -10, 7, -9])\n[-9, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 3, 4, 5, 6, 7,\
    \ 8, 9]\n>>> by_abs([-3, -4, 1, -5, 2, -6, 3, -7, 4, -8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkge6fz8x.jl:39\nin expression starting at\
    \ /tmp/tmpkge6fz8x.jl:39\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2q1286v.jl:21\nin expression starting at\
    \ /tmp/tmpb2q1286v.jl:21\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9eh77ohz.jl:24\nin expression starting at\
    \ /tmp/tmp9eh77ohz.jl:24\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0hvbsi8.jl:24\nin expression starting at\
    \ /tmp/tmpg0hvbsi8.jl:24\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array in reverse order.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ab1h5kn.jl:24\nin expression starting at\
    \ /tmp/tmp7ab1h5kn.jl:24\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector. \nFor example, \n>>> sum([1, 2, 3, 4])\n\
    10\n>>> sum([1, 2, 3, 0])\n0\n>>> sum([1, 2, 3, -1])\n-1\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n\
    5\n>>> sum([1, 2, 3, 5])\n5\n>>> sum([1, 2, 3, 5])\n5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyj_od_wn.jl:24\nin expression starting at\
    \ /tmp/tmpyj_od_wn.jl:24\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if arr.length == 0 \n        return Vector{String}() \n    else \n      \
    \  \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n        \n\
    \        arr = map(x -> \"One\" if x == 1 \n            else if x == 2 \n    \
    \            \"Two\" \n            else if x == 3 \n                \"Three\"\
    \ \n            else if x == 4 \n                \"Four\" \n            else if\
    \ x == 5 \n                \"Five\" \n            else if x == 6 \n          \
    \      \"Six\" \n            else if x == 7 \n                \"Seven\" \n   \
    \         else if x == 8 \n                \"Eight\" \n            else if x ==\
    \ 9 \n                \"Nine\" \n            else \n                \"\" \n  \
    \          , arr)\n        \n        return arr\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the array\
    \ sorted in descending order by the absolute value of the integers. For example:\n\
    >>> by_abs([-2, -1, 0, 1, 2])\n[-1, 0, 1, 2]\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1qgrjhw.jl:28\nin expression starting at\
    \ /tmp/tmpv1qgrjhw.jl:28\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n   \
    \ arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    ..\"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given number appears in the given array. For example, given [1, 1,\
    \ 1, 2, 2, 3], return 3.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqdqip0uj.jl:32\nin expression starting at\
    \ /tmp/tmpqdqip0uj.jl:32\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x],\
    \ arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"\
    [x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x ->\
    \ \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr =\
    \ map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n \
    \       arr = map(x -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, \n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcilpsly7.jl:36\nin expression starting at\
    \ /tmp/tmpcilpsly7.jl:36\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n   \
    \ return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdx7gofmh.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpdx7gofmh.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: x not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdx7gofmh.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx7gofmh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx7gofmh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdx7gofmh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: x not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdx7gofmh.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx7gofmh.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx7gofmh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdx7gofmh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: x not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdx7gofmh.jl:21\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx7gofmh.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx7gofmh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdx7gofmh.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ x not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /"
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2q1286v.jl:21\nin expression starting at\
    \ /tmp/tmpb2q1286v.jl:21\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((digit) -> \"One\" |> getfield(digit,\
    \ :name) |> toString) \n        arr \n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm05tkxyz.jl:27\nin expression starting at\
    \ /tmp/tmpm05tkxyz.jl:27\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \            else if x == 2 \n                    then \"Two\" \n            \
    \        else if x == 3 \n                        then \"Three\" \n          \
    \              else if x == 4 \n                            then \"Four\" \n \
    \                           else if x == 5 \n                                then\
    \ \"Five\" \n                                else if x == 6 \n               \
    \                     then \"Six\" \n                                    else\
    \ if x == 7 \n                                        then \"Seven\" \n      \
    \                                  else if x == 8 \n                         \
    \                   then \"Eight\" \n                                        \
    \    else \"Nine\" \n                            end,arr) \n        arr \n   \
    \ end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in the vector in descending order. For example, if the input vector is [5, 2,\
    \ 7, 3, 6, 4, 8], the output vector should be [\"Eight\", \"Five\", \"Six\", \"\
    Four\", \"Three\", \"Two\", \"One\"]. Your function should ignore any numbers\
    \ that are not between 1 and 9.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57p29mv3.jl:24\nin expression starting at\
    \ /tmp/tmp57p29mv3.jl:24\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers between 1 and 9 inclusive in descending order.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqh53vg_7.jl:36\nin expression starting at\
    \ /tmp/tmpqh53vg_7.jl:36\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the array\
    \ in reverse order but with each digit replaced by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu59f6iwj.jl:24\nin expression starting at\
    \ /tmp/tmpu59f6iwj.jl:24\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    else \n        arr = arr |>\
    \ sort() \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"\
    Nine\"[x-1], arr)\n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings that represent \nthe numbers from 1\
    \ to 9 inclusive, sorted in descending order.\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfkxj2cg.jl:29\nin expression starting at\
    \ /tmp/tmpdfkxj2cg.jl:29\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\")[x]\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp913by39m.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp913by39m.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching (::var\"#1#2\")(::Char, ::Char, ::Char, ::Char, ::Char, ::Char, ::Char,\
    \ ::Char)\n  Closest candidates are:\n    (::var\"#1#2\")(::Any) at /tmp/tmp913by39m.jl:24\n\
    \  Stacktrace:\n   [1] (::Base.var\"#4#5\"{var\"#1#2\"})(a::NTuple{8, Char})\n\
    \     @ Base ./generator.jl:36\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] collect(itr::Base.Generator{Base.Iterators.Zip{NTuple{8, String}}, Base.var\"\
    #4#5\"{var\"#1#2\"}})\n     @ Base ./array.jl:724\n   [4] map\n     @ ./abstractarray.jl:2966\
    \ [inlined]\n   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp913by39m.jl:24\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp913by39m.jl:33 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp913by39m.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp913by39m.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching (::var\"#1#2\")(::Char, ::Char, ::Char, ::Char, ::Char, ::Char, ::Char,\
    \ ::Char)\n  Closest candidates are:\n    (::var\"#1#2\")(::Any) at /tmp/tmp913by39m.jl:24\n\
    \  Stacktrace:\n   [1] (::Base.var\"#4#5\"{var\"#1#2\"})(a::NTuple{8, Char})\n\
    \     @ Base ./generator.jl:36\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] collect(itr::Base.Generator{Base.Iterators.Zip{NTuple{8, String}}, Base.var\"\
    #4#5\"{var\"#1#2\"}})\n     @ Base ./array.jl:724\n   [4] map\n     @ ./abstractarray.jl:2966\
    \ [inlined]\n   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp913by39m.jl:24\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp913by39m.jl:34 [inlined]\n\
    \   [8] macro expansion\n"
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr)\
    \ \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nxih591.jl:28\nin expression starting at\
    \ /tmp/tmp3nxih591.jl:28\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0\n        return Vector{String}()\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqk2cswbo.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqk2cswbo.jl:1\n\
    in expression starting at /tmp/tmpqk2cswbo.jl:1\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return Vector{String}() \n    else \n        arr =\
    \ arr |> sort() \n        arr = reverse(arr) \n        arr = arr |> map(x->\"\
    One\"..\"Nine\"[x-1], arr) \n        return arr \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4czeowv8.jl:28\nin expression starting at\
    \ /tmp/tmp4czeowv8.jl:28\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2q1286v.jl:21\nin expression starting at\
    \ /tmp/tmpb2q1286v.jl:21\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return Vector{String}() \n    else \n     \
    \   \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n        \n\
    \        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n     \
    \   \n        return arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkotkyzoh.jl:33\nin expression starting at\
    \ /tmp/tmpkotkyzoh.jl:33\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vfc47se.jl:28\nin expression starting at\
    \ /tmp/tmp8vfc47se.jl:28\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdr_3loe.jl:36\nin expression starting at\
    \ /tmp/tmpcdr_3loe.jl:36\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n   \
    \ return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdx7gofmh.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpdx7gofmh.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: x not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdx7gofmh.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx7gofmh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx7gofmh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdx7gofmh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: x not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdx7gofmh.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx7gofmh.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx7gofmh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdx7gofmh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: x not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdx7gofmh.jl:21\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx7gofmh.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx7gofmh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdx7gofmh.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ x not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /"
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in descending order.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa_ek7lo.jl:28\nin expression starting at\
    \ /tmp/tmpwa_ek7lo.jl:28\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplomce5at.jl:28\nin expression starting at\
    \ /tmp/tmplomce5at.jl:28\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the integers\
    \ squared. For example:\n>>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n25\n>>> by_length([-1, 55])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>>\
    \ by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1,\
    \ 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length([-1, 55, 2, 3])\n\
    0\n>>> by_length([-1, 55, 2, 3])\n0\n>>> by_length\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpr_99hy.jl:23\nin expression starting at\
    \ /tmp/tmpnpr_99hy.jl:23\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return Vector{String}() \n    else \n        arr =\
    \ sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x],\
    \ arr) \n        arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"\
    [x], arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x ->\
    \ \"Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr =\
    \ map(x -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n \
    \       arr = map(x -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the array in reverse order. \nFor example,\
    \ \n    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nshould return \n    [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n     \
    \ If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n\
    \    \n      If the array has any strange number ignore it:\n    >>> by_length([1,\
    \ -1, 55])\n    [\"One\"]\n    \n</text>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b68jfwa.jl:36\nin expression starting at\
    \ /tmp/tmp3b68jfwa.jl:36\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg5b5w1pu.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpg5b5w1pu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Int64, ::String)\n  Closest candidates are:\n    replace(!M"
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n\
    \        else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else\
    \ \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if\
    \ x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n\
    \        else \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfmi53vu.jl:21\nin expression starting at\
    \ /tmp/tmprfmi53vu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr2 = arr\n    \n    arr2 = arr2[arr2 .<= 9]\n\
    \    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = reverse(arr2)\n    \n   \
    \ arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 =\
    \ arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2\
    \ .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n\
    \    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n\
    \    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2\
    \ = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2\
    \ .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n\
    \    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n\
    \    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2\
    \ = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2\
    \ .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n\
    \    \n    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n\
    \    arr2 = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2\
    \ = arr2[arr2 .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2\
    \ .>= 1]\n    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr2 .>= 1]\n\
    \    \n    arr2 = arr2[arr2 .<= 9]\n    \n    arr2 = arr2[arr\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxreiax0.jl:1\nin expression starting at /tmp/tmpzxreiax0.jl:1\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nfjz3ph.jl:28\nin expression starting at\
    \ /tmp/tmp9nfjz3ph.jl:28\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return Vector{String}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd8nnybd8.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd8nnybd8.jl:1\n\
    in expression starting at /tmp/tmpd8nnybd8.jl:1\n"
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5iu07g5a.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp5iu07g5a.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #1#2\")(x::Int64)\n      @ Main /tmp/tmp5iu07g5a.jl:24\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp5iu07g5a.jl:24\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp5iu07g5a.jl:33 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp5iu07g5a.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5iu07g5a.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    ...\n\
    \  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators"
  timestamp: 1659822364
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers in the vector in descending\
    \ order. For example, if the vector is [5, 3, 8, 2, 1] then the output should\
    \ be [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"]. Make sure to include \"One\" at the beginning of the output\
    \ vector. Make sure to include \"Nine\" at the end of the output vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwy_09j09.jl:28\nin expression starting at\
    \ /tmp/tmpwy_09j09.jl:28\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr)\n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. For example:\n>>> sum_squares([4, 9, 16, 25])\n490\n>>> sum_squares([-4,\
    \ 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>>\
    \ sum_squares([-4, 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16,\
    \ 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4, 9, 16, 25, -4,\
    \ 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25, -4, 9, 16,\
    \ 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4, 9, 16, 25, -4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16,\
    \ 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_squares([-4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_squares([4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4,\
    \ 9, 16, 25, -4, 9, 16, 25, -\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4obw634.jl:28\nin expression starting at\
    \ /tmp/tmpf4obw634.jl:28\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if arr.length == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nby_length([])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the array sorted in descending order.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmple7s52i9.jl:26\nin expression starting at\
    \ /tmp/tmple7s52i9.jl:26\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr2 = arr\n    \n    if arr2 == []\n        return arr2\n    end\n    \n\
    \    arr3 = arr2\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n    arr6\
    \ = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9 = arr8\n\
    \    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n  \
    \  \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n   \
    \ \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n    \n\
    \    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n    \n \
    \   arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n  \
    \  arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n   \
    \ arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n    arr31\
    \ = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n    arr34 =\
    \ arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37 = arr36\n\
    \    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 = arr39\n \
    \   \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n  \
    \  \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n   \
    \ \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n    \n\
    \    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n    \n \
    \   arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n  \
    \  arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0lmkjeap.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0lmkjeap.jl:1\n\
    in expression starting at /tmp/tmp0lmkjeap.jl:1\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" if x == 1 \n        else \"Two\" if x == 2\n        else \"Three\" if x\
    \ == 3\n        else \"Four\" if x == 4\n        else \"Five\" if x == 5\n   \
    \     else \"Six\" if x == 6\n        else \"Seven\" if x == 7\n        else \"\
    Eight\" if x == 8\n        else \"Nine\", arr)\n    \n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n5iuuae.jl:24\nin expression starting at\
    \ /tmp/tmp7n5iuuae.jl:24\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <=\
    \ x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return arr\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers in the vector\
    \ in descending order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bagyzi_.jl:31\nin expression starting at\
    \ /tmp/tmp1bagyzi_.jl:31\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr2 = arr\n    arr2 = arr2[arr2 .>= 1 .& arr2 .<= 9]\n    arr2 = arr2[arr2\
    \ .> 0]\n    \n    arr3 = arr2\n    arr3 = reverse(arr3)\n    \n    arr4 = arr3\n\
    \    arr4 = arr4 .- arr4 .% 10\n    \n    arr5 = arr4\n    arr5 = arr5 .- arr5\
    \ .% 10\n    \n    arr6 = arr5\n    arr6 = arr6 .- arr6 .% 10\n    \n    arr7\
    \ = arr6\n    arr7 = arr7 .- arr7 .% 10\n    \n    arr8 = arr7\n    arr8 = arr8\
    \ .- arr8 .% 10\n    \n    arr9 = arr8\n    arr9 = arr9 .- arr9 .% 10\n    \n\
    \    arr10 = arr9\n    arr10 = arr10 .- arr10 .% 10\n    \n    arr11 = arr10\n\
    \    arr11 = arr11 .- arr11 .% 10\n    \n    arr12 = arr11\n    arr12 = arr12\
    \ .- arr12 .% 10\n    \n    arr13 = arr12\n    arr13 = arr13 .- arr13 .% 10\n\
    \    \n    arr14 = arr13\n    arr14 = arr14 .- arr14 .% 10\n    \n    arr15 =\
    \ arr14\n    arr15 = arr15 .- arr15 .% 10\n    \n    arr16 = arr15\n    arr16\
    \ = arr16 .- arr16 .% 10\n    \n    arr17 = arr16\n    arr17 = arr17 .- arr17\
    \ .% 10\n    \n    arr18 = arr17\n    arr18 = arr18 .- arr18 .% 10\n    \n   \
    \ arr19 = arr18\n    arr19 = arr19 .- arr19 .% 10\n    \n    arr20 = arr19\n \
    \   arr20 = arr20 .- arr20 .% 10\n    \n    arr21 = arr20\n    arr21 = arr21 .-\
    \ arr21 .% 10\n    \n    arr22 = arr21\n    arr22 = arr22 .- arr22 .% 10\n   \
    \ \n    arr23 = arr22\n    arr23 = arr23 .- arr23 .% 10\n    \n    arr24 = arr23\n\
    \    arr24 = arr24 .- arr24\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4jk94255.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4jk94255.jl:1\n\
    in expression starting at /tmp/tmp4jk94255.jl:1\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpod1jd2dn.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpod1jd2dn.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpod1jd2dn.jl:24\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpod1jd2dn.jl:24\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpod1jd2dn.jl:33 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpod1jd2dn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpod1jd2dn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpod1jd2dn.jl:24\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1t39m118.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp1t39m118.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmp1t39m118.jl:21\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp1t39m118.jl:21\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1t39m118.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1t39m118.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1t39m118.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmp1t39m118.jl:21\n    [2]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp1t39m118.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1t39m118.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1t39m118.jl:28\ntest set:\
    \ Error "
  timestamp: 1659822358
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return Vector{String}() \n    else \n        arr\
    \ = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"\
    Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string where each character\
    \ is replaced by its corresponding letter from the alphabet. For example, \"hello\"\
    \ becomes \"hEllo\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_q3r19z.jl:28\nin expression starting at\
    \ /tmp/tmp7_q3r19z.jl:28\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers.\
    \ For example:\n>>> sum_square([4, 9, 16, 25])\n490\n>>> sum_square([-4, 9, 16,\
    \ 25])\n-490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_square([-4,\
    \ 9, 16, 25, -4, 9, 16, 25])\n-490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25,\
    \ -4, 9, 16, 25])\n490\n>>> sum_square([-4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16,\
    \ 25, -4, 9, 16, 25])\n490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_square([-4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n\
    490\n>>> sum_square([4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25,\
    \ -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n>>> sum_square([-4,\
    \ 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9,\
    \ 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25, -4, 9, 16, 25])\n490\n\
    >>> sum_square([4, 9, 16, 25, -4, 9, 16, 25, -4, \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufx9z81f.jl:36\nin expression starting at\
    \ /tmp/tmpufx9z81f.jl:36\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\
    \ 1, \"One\")\n    \n    arr = replace(arr, 2, \"Two\")\n    \n    arr = replace(arr,\
    \ 3, \"Three\")\n    \n    arr = replace(arr, 4, \"Four\")\n    \n    arr = replace(arr,\
    \ 5, \"Five\")\n    \n    arr = replace(arr, 6, \"Six\")\n    \n    arr = replace(arr,\
    \ 7, \"Seven\")\n    \n    arr = replace(arr, 8, \"Eight\")\n    \n    arr = replace(arr,\
    \ 9, \"Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a0r00l5.jl:44\nin expression starting at\
    \ /tmp/tmp_a0r00l5.jl:44\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. For example:\n>>> by_length([])\n0\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5,\
    \ -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1,\
    \ 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n\
    >>> by_length([-1, 1, -4, -5, -8, -2, -3])\n-5\n>>> by_length\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpymnw60cy.jl:24\nin expression starting at\
    \ /tmp/tmpymnw60cy.jl:24\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" |> get(x) || \"\
    Two\" |> get(x) || \"Three\" |> get(x) || \"Four\" |> get(x) || \"Five\" |> get(x)\
    \ || \"Six\" |> get(x) || \"Seven\" |> get(x) || \"Eight\" |> get(x) || \"Nine\"\
    \ |> get(x), arr) \n        arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=sorting,arrays,julia |>\nI like using sortperm:\n<code>\njulia> sortperm(1:9)\n\
    10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=sorting,arrays,julia |>\nI like using sortperm:\n<code>\n\
    julia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n\
    \ 2\n 1\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using sortperm:\n\
    <code>\njulia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n\
    \ 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=2 |>\n\
    <code>\njulia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n\
    \ 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=1 |>\n\
    <code>\njulia> sortperm(1:9)\n10-element Array{Int64,1}:\n 9\n 8\n 7\n 6\n 5\n\
    \ 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\njulia> sortperm(1:9)\n10-element Array\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fve6u_w.jl:28\nin expression starting at\
    \ /tmp/tmp9fve6u_w.jl:28\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr)\n        return arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. For example:\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([-1,\
    \ -2, -3, -4])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8])\n-36\n>>>\
    \ square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9])\n-36\n>>> square_sum([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, 9, 10])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10, 11])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9,\
    \ 10, 11, 12])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13, 14])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13, 14, 15])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n-36\n>>> square_sum([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n-36\n>>>\
    \ square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20])\n-36\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n-36\n>>> square_sum([-1, -2, -3, -4,\
    \ -\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fs3ersx.jl:28\nin expression starting at\
    \ /tmp/tmp1fs3ersx.jl:28\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg5b5w1pu.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpg5b5w1pu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Int64, ::String)\n  Closest candidates are:\n    replace(!M"
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \            else if x == 2 \n                    then \"Two\" \n            \
    \        else if x == 3 \n                        then \"Three\" \n          \
    \              else if x == 4 \n                            then \"Four\" \n \
    \                           else if x == 5 \n                                then\
    \ \"Five\" \n                                else if x == 6 \n               \
    \                     then \"Six\" \n                                    else\
    \ if x == 7 \n                                        then \"Seven\" \n      \
    \                                  else if x == 8 \n                         \
    \                   then \"Eight\" \n                                        \
    \    else \"Nine\" \n                    else x, arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of\
    \ integers and returns the array in reverse order. For example:\n>>> by_length([])\n\
    []\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1, 4, 5, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vijojzu.jl:24\nin expression starting at\
    \ /tmp/tmp3vijojzu.jl:24\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map((x) -> \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr |> filter((x) ->\
    \ x != \"\")\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9ph7ra1.jl:22\nin expression starting at\
    \ /tmp/tmpu9ph7ra1.jl:22\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    if length(arr) == 0\n        arr = []\n    end\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1,\
    \ -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nFor example, \n>>>\
    \ sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5x9rgd8.jl:28\nin expression starting at\
    \ /tmp/tmpn5x9rgd8.jl:28\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    return arr if arr.length==0\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpc43pnntf.jl:18 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc43pnntf.jl:20\n\
    in expression starting at /tmp/tmpc43pnntf.jl:20\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr,1:9,\"One\"\
    )\n    arr = replace(arr,10:19,\"Two\")\n    arr = replace(arr,20:29,\"Three\"\
    )\n    arr = replace(arr,30:41,\"Four\")\n    arr = replace(arr,42:51,\"Five\"\
    )\n    arr = replace(arr,52:61,\"Six\")\n    arr = replace(arr,62:71,\"Seven\"\
    )\n    arr = replace(arr,72:81,\"Eight\")\n    arr = replace(arr,82:91,\"Nine\"\
    )\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpo4732q4v.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpo4732q4v.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::UnitRange{Int64}, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpo4732q4v.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo4732q4v.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo4732q4v.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpo4732q4v.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::UnitRange{Int64}, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpo4732q4v.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo4732q4v.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo4732q4v.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpo4732q4v.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::UnitRange{Int64}, ::String)\n  Close"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.3>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w3hblxr.jl:24\nin expression starting at\
    \ /tmp/tmp0w3hblxr.jl:24\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \    else if x == 2 \n        else \"Two\" if x == 3 \n        else \"Three\"\
    \ if x == 4 \n        else \"Four\" if x == 5 \n        else \"Five\" if x ==\
    \ 6 \n        else \"Six\" if x == 7 \n        else \"Seven\" if x == 8 \n   \
    \     else \"Eight\" if x == 9 \n        else \"Nine\", arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings that represent each of the\
    \ integers \nin the vector in reverse order. For example, if the vector is [2,\
    \ 1, 4, 3, 8, 5, 6, 7], the function should return [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt3hi57ze.jl:24\nin expression starting at\
    \ /tmp/tmpt3hi57ze.jl:24\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <=\
    \ x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_xthh1nm.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp_xthh1nm.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #1#2\")(x::Int64)\n      @ Main /tmp/tmp_xthh1nm.jl:27\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp_xthh1nm.jl:27\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_xthh1nm.jl:36 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_xthh1nm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp_xthh1nm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    ...\n\
    \  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators"
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqgiz9i3t.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpqgiz9i3t.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpqgiz9i3t.jl:29 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpqgiz9i3t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpqgiz9i3t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\"\
    \ if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6\
    \ \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n   \
    \     else \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ For example:\n>>> sum([1, 2, 3])\n9\n>>> sum([1, 2, 3])^2\n9\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesvlrj_0.jl:21\nin expression starting at\
    \ /tmp/tmpesvlrj_0.jl:21\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = arr |> sort() |> reverse() |> map((x) -> \"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    if arr.length == 0\n        arr\n    else\n        arr\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of integers and returns the same\
    \ vector but with the integers replaced by their corresponding names from \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojjgknjh.jl:26\nin expression starting at\
    \ /tmp/tmpojjgknjh.jl:26\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers that are between 1 and\
    \ 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj07hhrr.jl:28\nin expression starting at\
    \ /tmp/tmpdj07hhrr.jl:28\n"
  stdout: ''
  timestamp: 1659822364
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers from 1 to 9 inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrjif9q3.jl:28\nin expression starting at\
    \ /tmp/tmprrjif9q3.jl:28\n"
  stdout: ''
  timestamp: 1659822364
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an array of integers and returns\
    \ the array sorted in descending order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0lbasw6.jl:24\nin expression starting at\
    \ /tmp/tmpt0lbasw6.jl:24\n"
  stdout: ''
  timestamp: 1659822364
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+\
    \ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n   \
    \ arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n\
    \    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+\
    \ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n   \
    \ arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n\
    \    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+\
    \ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n   \
    \ arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n\
    \    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+\
    \ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr\
    \ .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr =\
    \ arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr = arr .+ 1\n    arr\
    \ = arr .+ 1\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprl_46y8x.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprl_46y8x.jl:1\n\
    in expression starting at /tmp/tmprl_46y8x.jl:1\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings where each string is the name of the integer in the vector that is\
    \ less than or equal to 100.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35qfduys.jl:28\nin expression starting at\
    \ /tmp/tmp35qfduys.jl:28\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n    arr3 = arr2.map(x\
    \ => name(x))\n    \n    return arr3\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings. Each string in the returned vector is the name of a number between\
    \ 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pcfvv8q.jl:28\nin expression starting at\
    \ /tmp/tmp5pcfvv8q.jl:28\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in that vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7xt8nvo.jl:36\nin expression starting at\
    \ /tmp/tmpg7xt8nvo.jl:36\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x\
    \ && x <= \"Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers. If the vector is empty, return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefepf62w.jl:32\nin expression starting at\
    \ /tmp/tmpefepf62w.jl:32\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else\
    \ \"Two\" if x == 2 else \"Three\" if x == 3 else \"Four\" if x == 4 else \"Five\"\
    \ if x == 5 else \"Six\" if x == 6 else \"Seven\" if x == 7 else \"Eight\" if\
    \ x == 8 else \"Nine\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprndcc7_e.jl:21\nin expression starting at\
    \ /tmp/tmprndcc7_e.jl:21\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x->name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the sum of the integers squared. For example:\n\
    >>> square_sum([1, 2, 3])\n9\n>>> square_sum([-1, -2, -3])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0, 0])\n0\n>>> square_sum([0,\
    \ 0])\n0\n>>> square_sum([0, 0])\n0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qn3bs85.jl:28\nin expression starting at\
    \ /tmp/tmp6qn3bs85.jl:28\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n      \
    \  arr = replace(arr, 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n\
    \        arr = replace(arr, 4, \"Four\") \n        arr = replace(arr, 5, \"Five\"\
    ) \n        arr = replace(arr, 6, \"Six\") \n        arr = replace(arr, 7, \"\
    Seven\") \n        arr = replace(arr, 8, \"Eight\") \n        arr = replace(arr,\
    \ 9, \"Nine\") \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10rbh0ji.jl:36\nin expression starting at\
    \ /tmp/tmp10rbh0ji.jl:36\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n  \
    \  arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr\
    \ = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr =\
    \ replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr,\
    \ 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg5b5w1pu.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpg5b5w1pu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpg5b5w1pu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5b5w1pu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5b5w1pu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg5b5w1pu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Int64, ::String)\n  Closest candidates are:\n    replace(!M"
  timestamp: 1659822357
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n    \
    \        else \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n    \
    \        else \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n    \
    \        else \"Eight\" if x == 8 \n            else \"Nine\", arr) \n       \
    \ return arr \nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes an\
    \ array of integers and returns the number of integers that are less than or equal\
    \ to 9. For example:\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n2\n>>>\
    \ count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n\
    >>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n\
    0\n>>> count_less_than_9([2, 1, 1, 4, 5, 8, 2, 3])\n0\n>>> count_less_than_9([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg31qn2w9.jl:24\nin expression starting at\
    \ /tmp/tmpg31qn2w9.jl:24\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n   \
    \ arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0jvanwkw.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp0jvanwkw.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #1#2\")(x::Int64)\n      @ Main /tmp/tmp0jvanwkw.jl:28\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp0jvanwkw.jl:28\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0jvanwkw.jl:37 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp0jvanwkw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0jvanwkw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    ...\n\
    \  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr2 = arr\n    arr2 = arr2[arr2 .< 10]\n    arr2 = arr2[arr2 .> 0]\n   \
    \ arr2 = reverse(arr2)\n    arr2 = arr2[arr2 .< 9]\n    arr2 = arr2[arr2 .> 0]\n\
    \    \n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 9]\n    arr2\
    \ = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 10]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .< 11]\n    arr2 = arr2[arr2 .> 0]\n    \n  \
    \  arr2 = arr2[arr2 .< 12]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2\
    \ .< 13]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 14]\n    arr2\
    \ = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 15]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .< 16]\n    arr2 = arr2[arr2 .> 0]\n    \n  \
    \  arr2 = arr2[arr2 .< 17]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2\
    \ .< 18]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 19]\n    arr2\
    \ = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 20]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .< 21]\n    arr2 = arr2[arr2 .> 0]\n    \n  \
    \  arr2 = arr2[arr2 .< 22]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2\
    \ .< 23]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 24]\n    arr2\
    \ = arr2[arr2 .> 0]\n    \n    arr2 = arr2[arr2 .< 25]\n    arr2 = arr2[arr2 .>\
    \ 0]\n    \n    arr2 = arr2[arr2 .< 26]\n    arr2 = arr\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf6xp5d0a.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf6xp5d0a.jl:1\n\
    in expression starting at /tmp/tmpf6xp5d0a.jl:1\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqgiz9i3t.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpqgiz9i3t.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpqgiz9i3t.jl:29 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpqgiz9i3t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpqgiz9i3t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpqgiz9i3t.jl:21\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822356
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n   \
    \ arr = sort(arr)\n    \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}(undef,\
    \ 0)\n    \n    for x in arr2\n        if x >= 1 && x <= 9\n            arr3 .=\
    \ push!(arr3, names(ByLength))[x]\n        end\n    end\n    \n    return arr3\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzv1lt0qv.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpzv1lt0qv.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: ByLength\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzv1lt0qv.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv1lt0qv.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv1lt0qv.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzv1lt0qv.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: ByLength not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzv1lt0qv.jl:32\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv1lt0qv.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv1lt0qv.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzv1lt0qv.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ ByLength not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpzv1lt0qv.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv1lt0qv.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv1lt0qv.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzv1lt0qv.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: ByLength\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::V"
  timestamp: 1659822367
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" <= x && x <=\
    \ \"Nine\" ? x : \"\", arr)\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive, with the number 0 replaced by \"\
    Zero\", the number 1 replaced by \"One\", and so on. For example, if the input\
    \ vector is [1, 2, 3, 8, 5, 6, 4, 9], the output vector should be [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Zero\"]. Do not hard-code the replacement strings. Use a loop to iterate over\
    \ the input vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbefcejxb.jl:24\nin expression starting at\
    \ /tmp/tmpbefcejxb.jl:24\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .-\
    \ 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr\
    \ .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr =\
    \ arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr\
    \ = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n   \
    \ arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n    arr = arr .- 9\n\
    \    arr = arr .- \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo4kcs4pi.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo4kcs4pi.jl:1\n\
    in expression starting at /tmp/tmpo4kcs4pi.jl:1\n"
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    if length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr)\n\
    \        \n        arr = reverse(arr)\n        \n        arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n        return arr\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns a new array where each element is the sum of the previous two elements\
    \ in the array. For example, given [1,2,3,4,5], the output should be [3,7,11,15].\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwjox2ei.jl:32\nin expression starting at\
    \ /tmp/tmpgwjox2ei.jl:32\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0\n        return Vector{String}()\n    end\n    \n    arr =\
    \ sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"\
    Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. \nFor example, \n>>> square_sum([1,\
    \ 2, 3])\n25\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1uu22af.jl:31\nin expression starting at\
    \ /tmp/tmpb1uu22af.jl:31\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ arr.length == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map((x) -> \"One\"..\"Nine\"\
    [x]) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqpec3x0.jl:28\nin expression starting at\
    \ /tmp/tmphqpec3x0.jl:28\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" if x == 1 \n        else \"Two\" if x == 2\n        else \"Three\" if x\
    \ == 3\n        else \"Four\" if x == 4\n        else \"Five\" if x == 5\n   \
    \     else \"Six\" if x == 6\n        else \"Seven\" if x == 7\n        else \"\
    Eight\" if x == 8\n        else \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqi50mh4p.jl:24\nin expression starting at\
    \ /tmp/tmpqi50mh4p.jl:24\n"
  stdout: ''
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    if length(arr) == 0\n        return Vector{String}()\n\
    \    end\n    \n    arr = reverse(arr)\n    \n    digits = Vector{String}(\"\"\
    )\n    \n    for x in arr\n        push!(digits, name_by_digit(x))\n    end\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=juli\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkd0i5ula.jl:36\nin expression starting at\
    \ /tmp/tmpkd0i5ula.jl:36\n"
  stdout: ''
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the sum of the integers in the array.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30wuwpf8.jl:28\nin expression starting at\
    \ /tmp/tmp30wuwpf8.jl:28\n"
  stdout: ''
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpod1jd2dn.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpod1jd2dn.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpod1jd2dn.jl:24\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpod1jd2dn.jl:24\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpod1jd2dn.jl:33 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpod1jd2dn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpod1jd2dn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpod1jd2dn.jl:24\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_l"
  timestamp: 1659822365
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr\
    \ = sort(arr)\n    arr = reverse(arr)\n    arr = map(x -> \"One\" <= x && x <=\
    \ \"Nine\" ? x : \"\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf25a1dgj.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpf25a1dgj.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #1#2\")(x::Int64)\n      @ Main /tmp/tmpf25a1dgj.jl:21\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpf25a1dgj.jl:21\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpf25a1dgj.jl:29 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpf25a1dgj.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpf25a1dgj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    ...\n\
    \  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators"
  timestamp: 1659822368
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if\
    \ length(arr) == 0 \n        return [] \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1], arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers in the vector in descending order. For example,\
    \ if the vector is [5, 3, 6, 2, 8], the function should return [\"Eight\", \"\
    Five\", \"Six\", \"Two\", \"Three\", \"Two\", \"One\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sd62925.jl:28\nin expression starting at\
    \ /tmp/tmp9sd62925.jl:28\n"
  stdout: ''
  timestamp: 1659822366
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty,\
    \ return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array\
    \ has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n    [\"One\"\
    ]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\
    \ \"1\", \"One\")\n    arr = replace(arr, \"2\", \"Two\")\n    arr = replace(arr,\
    \ \"3\", \"Three\")\n    arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr,\
    \ \"5\", \"Five\")\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr,\
    \ \"7\", \"Seven\")\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr,\
    \ \"9\", \"Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.0>\n\
    by_length([])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9854vbf.jl:36\nin expression starting at\
    \ /tmp/tmpn9854vbf.jl:36\n"
  stdout: ''
  timestamp: 1659822366
