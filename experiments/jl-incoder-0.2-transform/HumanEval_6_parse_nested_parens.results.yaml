language: jl
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max_size = paren_array_size\n    paren_array_max_size = 0\n \
    \   for paren_array_index in paren_array\n        paren_array_size = length(paren_array[paren_array_index])\n\
    \        if paren_array_size > paren_array_max_size\n            paren_array_max_size\
    \ = paren_array_size\n        end\n    end\n    paren_array_max_size\nend\n</cell>\n\
    <text>\nPart 3: Write a function that takes a string and returns the number of\
    \ occurrences of a substring within that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv2kgofm.jl:21\nin expression starting at\
    \ /tmp/tmpvv2kgofm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_depth = zeros(paren_array_size,\
    \ Int64)\n    for paren_array_index in range(paren_array_size)\n        if paren_array[paren_array_index]\
    \ != \"(\"\n            paren_array_depth[paren_array_index] = paren_array_depth[paren_array_index-1]\n\
    \        else\n            paren_array_depth[paren_array_index] = paren_array_depth[paren_array_index-1]\
    \ + 1\n        end\n    end\n    return paren_array_depth\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm383fbep.jl:22\nin expression starting at\
    \ /tmp/tmpm383fbep.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    \ \")\n    paren_string = paren_string.strip(\"\\n\")\n    paren_string = paren_string.strip(\"\
    \\r\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\f\")\n    paren_string = paren_string.strip(\"\
    \\a\")\n    paren_string = paren_string.strip(\"\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\n    paren_string = paren_string.strip(\"\\v\")\n    paren_string = paren_string.strip(\"\
    \\f\")\n    paren_string = paren_string.strip(\"\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\f\")\n    paren_string = paren_string.strip(\"\
    \\a\")\n    paren_string = paren_string.strip(\"\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\n    paren_string = paren_string.strip(\"\\v\")\n    paren_string = paren_string.strip(\"\
    \\f\")\n    paren_string = paren_string.strip(\"\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\f\")\n    paren_string = paren_string.strip(\"\
    \\a\")\n    paren_string = paren_string.strip(\"\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\n    paren_string = paren_string.strip(\"\\v\")\n    paren_string = paren_string.strip(\"\
    \\f\")\n    paren_string = paren_string.strip(\"\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\f\")\n    paren_string = paren_string.strip(\"\
    \\a\")\n    paren_string = paren_string.strip(\"\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmbmio51.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmbmio51.jl:1\n\
    in expression starting at /tmp/tmpxmbmio51.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp5glu1go3.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp5glu1go3.jl:39\nin expression starting at /tmp/tmp5glu1go3.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpll0s7ls4.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpll0s7ls4.jl:1\n\
    in expression starting at /tmp/tmpll0s7ls4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    \ \")\n    paren_string = paren_string.strip(\"\\n\")\n    paren_string = paren_string.strip(\"\
    \\r\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\f\")\n    paren_string = paren_string.strip(\"\
    \\a\")\n    paren_string = paren_string.strip(\"\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string =\
    \ paren_string.strip(\"\\\\t\")\n    paren_string = paren_string.strip(\"\\\\\
    v\")\n    paren_string = paren_string.strip(\"\\\\f\")\n    paren_string = paren_string.strip(\"\
    \\\\a\")\n    paren_string = paren_string.strip(\"\\\\e\")\n    paren_string =\
    \ paren_string.strip(\"\\\\\\n\")\n    paren_string = paren_string.strip(\"\\\\\
    \")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string = paren_string.strip(\"\
    \\\\v\")\n    paren_string = paren_string.strip(\"\\\\f\")\n    paren_string =\
    \ paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\\\\\
    e\")\n    paren_string = paren_string.strip(\"\\\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\\\e\")\n    paren_string = paren_string.strip(\"\\\\\\n\")\n    paren_string\
    \ = paren_string.strip(\"\\\\\")\n    paren_string = paren_string.strip(\"\\\\\
    t\")\n    paren_string = paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\
    \\\\f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string =\
    \ paren_string.strip(\"\\\\e\")\n    paren_string = paren_string.strip(\"\\\\\\\
    n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string = paren_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp45shlqcz.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp45shlqcz.jl:51\n\
    in expression starting at /tmp/tmp45shlqcz.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppa6uymk1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppa6uymk1.jl:1\n\
    in expression starting at /tmp/tmppa6uymk1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4g94c_eh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4g94c_eh.jl:1\n\
    in expression starting at /tmp/tmp4g94c_eh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    \ \")\n    paren_string = paren_string.strip(\"\\n\")\n    paren_string = paren_string.strip(\"\
    \\r\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\f\")\n    paren_string = paren_string.strip(\"\
    \\a\")\n    paren_string = paren_string.strip(\"\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string =\
    \ paren_string.strip(\"\\\\t\")\n    paren_string = paren_string.strip(\"\\\\\
    v\")\n    paren_string = paren_string.strip(\"\\\\f\")\n    paren_string = paren_string.strip(\"\
    \\\\a\")\n    paren_string = paren_string.strip(\"\\\\e\")\n    paren_string =\
    \ paren_string.strip(\"\\\\\\n\")\n    paren_string = paren_string.strip(\"\\\\\
    \")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string = paren_string.strip(\"\
    \\\\v\")\n    paren_string = paren_string.strip(\"\\\\f\")\n    paren_string =\
    \ paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\\\\\
    e\")\n    paren_string = paren_string.strip(\"\\\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\\\e\")\n    paren_string = paren_string.strip(\"\\\\\\n\")\n    paren_string\
    \ = paren_string.strip(\"\\\\\")\n    paren_string = paren_string.strip(\"\\\\\
    t\")\n    paren_string = paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\
    \\\\f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string =\
    \ paren_string.strip(\"\\\\e\")\n    paren_string = paren_string.strip(\"\\\\\\\
    n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string = paren_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp45shlqcz.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp45shlqcz.jl:51\n\
    in expression starting at /tmp/tmp45shlqcz.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpkt8mcd0y.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpkt8mcd0y.jl:40\nin expression starting at /tmp/tmpkt8mcd0y.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n \
    \   paren_string = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnx5_qg7i.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnx5_qg7i.jl:1\n\
    in expression starting at /tmp/tmpnx5_qg7i.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4g94c_eh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4g94c_eh.jl:1\n\
    in expression starting at /tmp/tmp4g94c_eh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"{}[]()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpg4ns5tvg.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpg4ns5tvg.jl:40\nin expression starting at /tmp/tmpg4ns5tvg.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4g94c_eh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4g94c_eh.jl:1\n\
    in expression starting at /tmp/tmp4g94c_eh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\" \")\n    paren_string = paren_string.strip(\"\
    \\n\")\n    paren_string = paren_string.strip(\"\\r\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\v\")\n    paren_string = paren_string.strip(\"\
    \\f\")\n    paren_string = paren_string.strip(\"\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj0sj8774.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj0sj8774.jl:1\n\
    in expression starting at /tmp/tmpj0sj8774.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_levels = zeros(paren_array_size,\
    \ 1)\n    for paren_array_level in paren_array\n        paren_array_levels[paren_array_level]\
    \ += 1\n    end\n    paren_array_levels = paren_array_levels[paren_array_levels\
    \ > 0]\n    return paren_array_levels\nend\n</cell>\n<text>\nPart 2: Implement\
    \ a function to count the number of times a given character appears in a given\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5g37k9x.jl:19\nin expression starting at\
    \ /tmp/tmpo5g37k9x.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp09w2jb6u.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp09w2jb6u.jl:39\nin expression starting at /tmp/tmp09w2jb6u.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpax1u6war.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpax1u6war.jl:1\n\
    in expression starting at /tmp/tmpax1u6war.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x != \"\"]\n\
    \    paren_array = [x for x in paren_array if x != 0]\n    paren_array = [x for\
    \ x in paren_array if x != -1]\n    paren_array = [x for x in paren_array if x\
    \ != -2]\n    paren_array = [x for x in paren_array if x != -3]\n    paren_array\
    \ = [x for x in paren_array if x != -4]\n    paren_array = [x for x in paren_array\
    \ if x != -5]\n    paren_array = [x for x in paren_array if x != -6]\n    paren_array\
    \ = [x for x in paren_array if x != -7]\n    paren_array = [x for x in paren_array\
    \ if x != -8]\n    paren_array = [x for x in paren_array if x != -9]\n    paren_array\
    \ = [x for x in paren_array if x != -10]\n    paren_array = [x for x in paren_array\
    \ if x != -11]\n    paren_array = [x for x in paren_array if x != -12]\n    paren_array\
    \ = [x for x in paren_array if x != -13]\n    paren_array = [x for x in paren_array\
    \ if x != -14]\n    paren_array = [x for x in paren_array if x != -15]\n    paren_array\
    \ = [x for x in paren_array if x != -16]\n    paren_array = [x for x in paren_array\
    \ if x != -17]\n    paren_array = [x for x in paren_array if x != -18]\n    paren_array\
    \ = [x for x in paren_array if x != -19]\n    paren_array = [x for x in paren_array\
    \ if x != -20]\n    paren_array = [x for x in paren_array if x != -21]\n    paren_array\
    \ = [x for x in paren_array if x != -22]\n    paren_array = [x for x in paren_array\
    \ if x != -23]\n    paren_array = [x for x in paren_array if x != -24]\n    paren_array\
    \ = [x for x in paren_array if x != -25]\n    paren_array = [x for x in paren_array\
    \ if x != -26]\n    paren_array = [x for x in paren_array if x != -27]\n    paren_array\
    \ = [x for x in paren_array if x != -28]\n    paren_array = [x for x in paren_array\
    \ if x != -29]\n    paren_array = [x for x in paren_array if x != -30]\n    paren_array\
    \ = [\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm96at14.jl:1\nin expression starting at /tmp/tmpmm96at14.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_levels = Vector{Int64}()\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsz_aidqx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsz_aidqx.jl:1\n\
    in expression starting at /tmp/tmpsz_aidqx.jl:1\n"
  stdout: ''
