name: HumanEval_139_special_factorial
language: jl
prompt: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>>\
  \ special_factorial(4)\n    288\n\n    The function will receive an integer as input\
  \ and should return the special\n    factorial of this integer.\n    \"\"\"\nfunction\
  \ special_factorial(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
  \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
  \t@test(candidate(1) == 1)\nend\n"
completions: ["    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 7: Write a function that calculates the factorial\
    \ of a number using recursion.", "    if n == 0\n        1\n    else\n       \
    \ n * (special_factorial(n - 1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The factorial of a number is the product of all positive integers less than\
    \ or equal to it.\n    For example:\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n\
    \    1\n    >>> factorial(4)\n    24\n    >>> factorial(10)\n    3628800\n\"\"\
    \"", "    if n == 0 \n        1\n    else \n        special_factorial(n - 1) *\
    \ n\nend\n</cell>\n<code language=julia-1.0>\n@assert special_factorial(4) ==\
    \ 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a number using recursion.", "    if n == 0\n        1\n    else\n       \
    \ n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    factorial(n::Int64)", "    if n < 0\n        error(\"factorial function\
    \ only accepts positive integers\")\n    else\n        factorial(n) * (n - 1)!\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if n == 0\n        1\n\
    \    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64", "    if n == 0\n        1\n  \
    \  else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 4\nWrite a function that calculates the binomial coefficient\
    \ $n!/r!$, where $n$ and $r$ are positive integers. For example:", "    if n ==\
    \ 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.3>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.3>\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n * (special_factorial(n - 1))\n    end\nend\n</cell>\n<code language=julia-1.1>",
  "    if n < 0\n        error(\"The factorial of a negative number is not defined\"\
    )\n    elseif n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"The factorial of a number\
    \ is the product of all positive integers less than or equal to it.\n    For example:\n\
    \    >>> factorial(5)\n    120\n\"\"\"", "    if n == 0 \n        1 \n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the binomial coefficient $n!/r!$, where $n$ and $r$ are positive\
    \ integers. Your function should receive two integers as inputs and should return\
    \ the binomial coefficient.", "    if n == 0 \n        1 \n    else \n       \
    \ special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe factorial of a number n is defined as:\nfactorial(n) = n!\nwhere n\
    \ > 0", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        factorial(n) * special_factorial(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n == 0\n        1\n    else\n        special_factorial(n - 1) * n\n   \
    \ end\nend\n</cell>\n<text>\nExercise 7: Write a function that calculates the\
    \ factorial of a number. \nThe function should receive an integer as input and\
    \ should return the factorial of this integer.", "    if n == 0 \n        1\n\
    \    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.4>\n@time factorial(100000);\n</cell>\n<code\
    \ language=julia-1.4>\n@time special_factorial(100000);\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the factorial of a given number using recursion.",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n\
    \        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0 \n        1\n    else\n     \
    \   n * special_factorial(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.", "    if n\
    \ == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The factorial of a number is the product of its\
    \ factorials.", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n\
    \ - 1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a number using recursion.", "    if n == 0\n        1\n    else\n       \
    \ n * special_factorial(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nspecial_factorial(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a number using recursion.", "  \
    \  if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that receives a positive integer\
    \ as input and returns the factorial of this integer.", "    if n == 0\n     \
    \   1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test\nspecial_factorial(4)\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that calculates the factorial of a given number. Your function\
    \ should receive an integer as input and should return the factorial of this integer.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n   \
    \     n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\nThe factorial of a number is the product of all the numbers from 1 to that\
    \ number.\nFor example:\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * ", "    if n == 0\n    \
    \    1\n    else\n        factorial(n) * special_factorial(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\n# Let's test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0 \n        1 \n    else \n \
    \       special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    # Test the function \nspecial_factorial(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a given number. \nThe function should\
    \ receive an integer as input and should return the factorial of this integer.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</", " \
    \   if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n   \
    \     n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise 2: Write a\
    \ function that calculates the factorial of a number using recursion.", "    if\
    \ n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The factorial of a number is the\
    \ product of its factorials.", "    if n <= 1\n    then 1\n    else n * special_factorial(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe factorial of a number\
    \ n is defined as:\n    factorial(n) = n!\n    where n > 0", "    if n == 0 \n\
    \        1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number given as an input parameter. \nThe\
    \ function should receive a number as input parameter and should return the factorial\
    \ of this number.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.", "    if n == 0 \n        1\n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\n       \
    \ 1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n < 0\n        error(\"Negative factorial\
    \ not allowed\")\n    else if n == 0\n        1\n    else\n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<text>\nExercise: Write a function that calculates the\
    \ factorial of a number using recursion.", "    if n == 0 \n        1\n    else\
    \ \n        special_factorial(n-1) * n\nend\n</cell>\n<text>\nThe factorial function\
    \ will receive an integer as input and should return the factorial of this integer.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n < 0\n        error(\"factorial function only accepts positive\
    \ integers\")\n    else\n        return factorial(n) * factorial(n-1) * factorial(n-2)\
    \ * factorial(n-3) * factorial(n-4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n <= 1\n        1\n    else\n      \
    \  n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that calculates the factorial of a given number using recursion.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\n    else\n  \
    \      n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise 6\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\n\
    \        1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    factorial_series(n::Int64)::Float64\n    \n\
    \    Calculates the factorial series up to n.\n    \n    For example:\n    >>>\
    \ factorial_series(4)\n    2432902008176640000\n    \n    The function will receive\
    \ an integer as input and should return the factorial\n    series of this integer.\n\
    \    \"\"\"", "    if n < 0\n        error(\"Negative factorial is not defined\"\
    )\n    elseif n == 0\n        1\n    else\n        special_factorial(n - 1) *\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\nThe factorial of\
    \ a number is the product of all positive integers less than or equal to it.\n\
    For example:\n    factorial(5) = factorial(4) * 5 * factorial(3)\n    factorial(4)\
    \ = factorial(3) * 4\n    factorial(3) = factorial(2) * 3\n    factorial(2) =\
    \ factorial(1)\n    factorial(1) = 1\n    factorial(0) = 1\n    factorial(-1)\
    \ = error\n\"\"\"", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function with some\
    \ examples\n@test special_factorial(4) == 288\n@test special_factorial(5) == 1040\n\
    @test special_factorial(6) == 720\n@test special_factorial(7) == 5040\n@test special_factorial(8)\
    \ == 40320\n@test special_factorial(9) == 362880\n@test special_factorial(10)\
    \ == 3628800\n@test special_factorial(11) == 39916800\n@test special_factorial(12)\
    \ == 479001600\n@test special_factorial(13) == 6227020800\n@test special_factorial(14)\
    \ == 87178291200\n@test special_factorial(15) == 1307674368000\n@test special_factorial(16)\
    \ == 20922789888000\n@test special_factorial(17) == 355687428096000\n@test special_factorial(18)\
    \ == 6402373705728000\n@test special_factorial(19) == 121645100408832000\n@test\
    \ special_factorial(20) == 2432902008176640000\n@test special_factorial(21) ==\
    \ 51090942171709440000\n@test special_factorial(22) == 1124000727777607680000\n\
    @test special_factorial(23) == 25852016738884976640000\n@test special_factorial(24)\
    \ == 620448401733239439360000\n@test special_factorial(25) == 15511210043330985984000000\n\
    @test special_factorial(26) == 403291461126605635584000000\n@test special_factorial(27)\
    \ == 10888869450418352160768000000\n@test special_factorial(28) == 304888344611713860501504000000\n\
    @test special_factorial(29) == 8841761993739701954543616000000\n@test special_factorial(30)\
    \ == 265252859812191058636308480000000\n@test special_factorial(31) == 8222838654177922817725562880000000\n\
    @test special_factorial(32) == 263130836933693530167218012160000000\n@test special_factorial(33)\
    \ == 8683317618811886495518194401280000000\n@test special_factorial(34) == 33624155039443916860763693808400000000",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0\n        1\n    else\n        n *\
    \ (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 0 \n        1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <code language=julia-1.5>\n# TEST special_factorial (5b)\n@test special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 5\nWrite a function that computes the factorial\
    \ of a given number using recursion.", "    if n <= 1\n        1\n    else\n \
    \       n * special_factorial(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0\n        1\n    else\n \
    \       factorial(n) * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number.\
    \ Your function should receive an integer as input and should return the factorial\
    \ of this integer.", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ factorial of a number using recursion.", "    if n < 0\n        error(\"factorial\
    \ function only accepts positive integers\")\n    end\n    if n == 0\n       \
    \ return 1\n    end\n    return factorial(n) * factorial(n-1)\nend\n</cell>\n\
    <text>\nExercise 2: Write a function that calculates the factorial of a number\
    \ using recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\
    \ \n        1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if n == 0\n\
    \        1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0\n        1\n    else\n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<text>\nExercise 7: Write a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n * special_factorial(n - 1)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that calculates the factorial of a given number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! *\
    \ (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a number using recursion.", "    if n == 0 \n        1\n    else \n     \
    \   special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1\n    else\n        special_factorial(n - 1) * n\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n\
    \ - 1))\nend\n</cell>\n<code language=julia-1.5>\n# Exercise: Write a function\
    \ that calculates the factorial of a given number\n# using the factorial function\
    \ defined above. ", "    if n == 0\n        1\n    else\n        factorial(n)\
    \ * special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    The factorial of a number n is defined as:\n    factorial(n) = n!\n    where n\
    \ > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n\
    \        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nThe factorial of a number is the product of all the numbers from 1 to\
    \ that number.\nFor example:\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    \"\"\"", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n\
    \    Computes the factorial series up to n.\n    \n    For example:\n    >>> factorial_series(4)\n\
    \    2432902008176640000\n    \n    The function will receive an integer as input\
    \ and should return the factorial\n    series of this integer.\n    \"\"\"", " \
    \   if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)::Int64",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a number given\
    \ as an input.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number. Your function should receive an integer as input and should\
    \ return the factorial of this integer.", "    if n == 0 \n        1\n    else\
    \ if n == 1 \n        1\n    else if n == 2 \n        2\n    else if n == 3 \n\
    \        6\n    else if n == 4 \n        24\n    else if n == 5 \n        120\n\
    \    else if n == 6 \n        720\n    else if n == 7 \n        5040\n    else\
    \ if n == 8 \n        40320\n    else if n == 9 \n        362880\n    else if\
    \ n == 10 \n        3628800\n    else if n == 11 \n        39916800\n    else\
    \ if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n \
    \   else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        263130836933693530167218012160000000\n    else if n == 33 \n        8683317618811886495518194401280000000\n\
    \    else if n == 34 \n        295232799039604140847618609643520000000\n    else\
    \ if ", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n\
    \    \n    Calculates the factorial series up to n.\n    \n    For example:\n\
    \    >>> factorial_series(4)\n    2432902008176640000\n    \n    The function\
    \ will receive an integer as input and should return the factorial\n    series\
    \ of this integer.\n    \"\"\"", "    if n == 0 \n        1 \n    else \n    \
    \    special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.1>\n\"\
    \"\"\nThe factorial of a number is the product of all positive integers less than\
    \ or equal to that number. \nThe factorial of a number n is defined as:\n    factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that receives a positive integer as input\
    \ and returns the factorial of this integer.", "    if n == 0\n        1\n   \
    \ else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Exercise 1\n\"\"\"\nWrite a function that returns the factorial of a given integer.\n\
    \"\"\"", "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ...\
    \ * 1!\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ compute the factorial of a given number using recursion.", "    if n == 0 \n\
    \        1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    The function special_factorial is defined in the cell above. Let's test it with\
    \ the function factorial:", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n# Exercise 2\n\"\"\"\nWrite a function\
    \ that calculates the factorial of a given number\n\"\"\"", "    if n == 0\n \
    \       1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.", "    if n\
    \ == 0\n        1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n\
    \    \n    Calculates the factorial series up to n.\n    \n    For example:\n\
    \    >>> factorial_series(4)\n    2432902008176640000\n    \n    The function\
    \ will receive an integer as input and should return the factorial\n    series\
    \ of this integer.\n    \"\"\"", "    if n < 0\n        error(\"The factorial\
    \ of a negative number is not defined\")\n    elseif n == 0\n        1\n    else\n\
    \        factorial(n) * special_factorial(n - 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that calculates the factorial of a given number.\
    \ \nThe function should receive an integer as input and should return the factorial\
    \ of this integer.", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        1\n\
    \    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)", "    if n == 0\n\
    \        1\n    else\n        factorial(n) * special_factorial(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n <= 1\n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        factorial(n) *\
    \ (n - 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the factorial of a given number. \nThe function should receive an integer as\
    \ input and should return the factorial of this integer.", "    if n == 0 \n \
    \       1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if n == 0\n        1\n    else\n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n      \
    \  1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number given as a parameter. \nThe function should receive a number as parameter\
    \ and should return the factorial of this number.", "    if n == 0 \n        1\n\
    \    else if n == 1 \n        1\n    else if n == 2 \n        2\n    else if n\
    \ == 3 \n        6\n    else if n == 4 \n        24\n    else if n == 5 \n   \
    \     120\n    else if n == 6 \n        720\n    else if n == 7 \n        5040\n\
    \    else if n == 8 \n        40320\n    else if n == 9 \n        362880\n   \
    \ else if n == 10 \n        3628800\n    else if n == 11 \n        39916800\n\
    \    else if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n\
    \    else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        263130836933693530167218012160000000\n    else if n == 33 \n        8683317618811886495518194401280000000\n\
    \    else if n == 34 \n        295232799039604140847618609643520000000\n    else\
    \ if ", "    if n < 0\n        error(\"Negative factorial not allowed\")\n   \
    \ else\n        factorial = 1\n        for i in 1..n\n            factorial *=\
    \ i\n        end\n        return factorial\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"The factorial of a number is the product of its factorials.", "    if n\
    \ == 0 \n        1\n    else\n        special_factorial(n-1) * n\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number using recursion.", "    if n == 0\n        1\n    else\n      \
    \  n * (special_factorial(n-1))\n    end\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that will compute the factorial of a given number using recursion.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.1>", "    if n == 0\n        1\n\
    \    else\n        factorial(n) * (n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that calculates the binomial coefficient $n!/r!$, where $n$ and $r$ are positive\
    \ integers. Recall that $n! = n \\times n$ and $r! = n \\times r$.", "    if n\
    \ == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0\n        1\n    else\n \
    \       n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that calculates the factorial of a number. \nThe function should\
    \ receive an integer as input and should return the factorial of this integer.",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\n# Let's test the function\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a number given as an input argument.", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.", "    if n\
    \ == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the binomial\
    \ coefficient $n!/r!$, where $n$ and $r$ are positive integers. For example:",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n@time\
    \ special_factorial(100000);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the factorial of a given number using recursion.", "    if n == 0\
    \ \n        1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function with different inputs\n@test special_factorial(4)\
    \ == 288\n@test special_factorial(5) == 720\n@test special_factorial(6) == 5040\n\
    @test special_factorial(7) == 40320\n@test special_factorial(8) == 362880\n@test\
    \ special_factorial(9) == 3628800\n@test special_factorial(10) == 39916800\n@test\
    \ special_factorial(11) == 479001600\n@test special_factorial(12) == 6227020800\n\
    @test special_factorial(13) == 87178291200\n@test special_factorial(14) == 1307674368000\n\
    @test special_factorial(15) == 20922789888000\n@test special_factorial(16) ==\
    \ 355687428096000\n@test special_factorial(17) == 6402373705728000\n@test special_factorial(18)\
    \ == 121645100408832000\n@test special_factorial(19) == 2432902008176640000\n\
    @test special_factorial(20) == 51090942171709440000\n@test special_factorial(21)\
    \ == 1124000727777607680000\n@test special_factorial(22) == 25852016738884976640000\n\
    @test special_factorial(23) == 620448401733239439360000\n@test special_factorial(24)\
    \ == 15511210043330985984000000\n@test special_factorial(25) == 403291461126605635584000000\n\
    @test special_factorial(26) == 10888869450418352160768000000\n@test special_factorial(27)\
    \ == 304888344611713860501504000000\n@test special_factorial(28) == 8841761993739701954543616000000\n\
    @test special_factorial(29) == 265252859812191058636308480000000\n@test special_factorial(30)\
    \ == 8222838654177922817725562880000000\n@test special_factorial(31) == 263130836933693530167218012160000000\n\
    @test special_factorial(32) == 82228386541779228177255628800000000\n@test special_factorial(33)\
    \ == 2631308369336935301672180121600000000\n@test special_factorial(34) == 82228386541779228177",
  "    if n == 0\n        1\n    else\n        factorial(n) * special_factorial(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n   \
    \     n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given integer $n$. Make sure to include a\
    \ base case for $n=0$.", "    if n == 0\n        1\n    else\n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number. Your function should receive an integer as input and should\
    \ return the factorial of this integer.", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n<text>\n\
    The function factorial is defined in the file factorial.jl", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    factorial(n::Int64)", "    if n == 0\n\
    \        1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number given as an input argument.", "  \
    \  if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number. \nThe function should receive an integer as input and should\
    \ return the factorial of this integer.", "    if n == 0 \n        1 \n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The factorial of a number n is defined as:\n    factorial(n) = n!\n    where\
    \ n > 0", "    if n == 0 \n        1\n    else \n        special_factorial(n -\
    \ 1) * n\nend\n</cell>\n<text>\nExercise 10\nWrite a function that calculates\
    \ the factorial of a given number using recursion.", "    if n == 0\n        1\n\
    \    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@assert special_factorial(4) == 288\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.",
  "    if n < 0 \n        error(\"The factorial of a negative number is not defined\"\
    )\n    else if n == 0 \n        1\n    else \n        special_factorial(n-1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The factorial of a number\
    \ n is defined as:\n    factorial(n) = n!\n    where n > 0", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)::Int64", "    if n\
    \ == 0 \n        1\n    else if n == 1 \n        1\n    else if n == 2 \n    \
    \    2\n    else if n == 3 \n        6\n    else if n == 4 \n        24\n    else\
    \ if n == 5 \n        120\n    else if n == 6 \n        720\n    else if n ==\
    \ 7 \n        5040\n    else if n == 8 \n        40320\n    else if n == 9 \n\
    \        362880\n    else if n == 10 \n        3628800\n    else if n == 11 \n\
    \        39916800\n    else if n == 12 \n        479001600\n    else if n == 13\
    \ \n        6227020800\n    else if n == 14 \n        87178291200\n    else if\
    \ n == 15 \n        1307674368000\n    else if n == 16 \n        20922789888000\n\
    \    else if n == 17 \n        355687428096000\n    else if n == 18 \n       \
    \ 6402373705728000\n    else if n == 19 \n        121645100408832000\n    else\
    \ if n == 20 \n        2432902008176640000\n    else if n == 21 \n        51090942171709440000\n\
    \    else if n == 22 \n        1124000727777607680000\n    else if n == 23 \n\
    \        25852016738884976640000\n    else if n == 24 \n        620448401733239439360000\n\
    \    else if n == 25 \n        15511210043330985984000000\n    else if n == 26\
    \ \n        403291461126605635584000000\n    else if n == 27 \n        10888869450418352160768000000\n\
    \    else if n == 28 \n        304888344611713860501504000000\n    else if n ==\
    \ 29 \n        8841761993739701954543616000000\n    else if n == 30 \n       \
    \ 265252859812191058636308480000000\n    else if n == 31 \n        8222838654177922817725562880000000\n\
    \    else if n == 32 \n        1764607523034234453948881504640000000\n    else\
    \ if n == 33 \n        35184372088827622046094844400000000\n    else if n == 34\
    \ \n        70368744177664802867746397291200000000", "    if n == 0\n        1\n\
    \    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nThe factorial of a number is the product of all the numbers from 1 to\
    \ that number.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n\
    \ - 1))\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)::Int64",
  "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n \
    \   end\nend\n</cell>\n<text>\nThe function factorial is defined as:\n    factorial(n)\
    \ = n!", "    if n == 0 \n        1 \n    else \n        special_factorial(n -\
    \ 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)",
  "    if n == 0\n        1\n    else\n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)", " \
    \   if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n  \
    \  end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ factorial of a number using recursion.", "    if n == 0 \n        1\n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n@time special_factorial(10000);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0\n        1\n    else\n \
    \       n * (special_factorial(n - 1))\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    # Test the function with some examples\n@test special_factorial(4) == 288\n@test\
    \ special_factorial(5) == 1040\n@test special_factorial(10) == 3628800\n@test\
    \ special_factorial(15) == 1507334400\n@test special_factorial(20) == 3628800\n\
    @test special_factorial(25) == 1040\n@test special_factorial(30) == 720\n@test\
    \ special_factorial(35) == 5040\n@test special_factorial(40) == 40320\n@test special_factorial(45)\
    \ == 120\n@test special_factorial(50) == 720\n@test special_factorial(55) == 5040\n\
    @test special_factorial(60) == 40320\n@test special_factorial(65) == 120\n@test\
    \ special_factorial(70) == 720\n@test special_factorial(75) == 5040\n@test special_factorial(80)\
    \ == 40320\n@test special_factorial(85) == 120\n@test special_factorial(90) ==\
    \ 720\n@test special_factorial(95) == 5040\n@test special_factorial(100) == 40320\n\
    @test special_factorial(105) == 120\n@test special_factorial(110) == 720\n@test\
    \ special_factorial(115) == 5040\n@test special_factorial(120) == 40320\n@test\
    \ special_factorial(125) == 120\n@test special_factorial(130) == 720\n@test special_factorial(135)\
    \ == 5040\n@test special_factorial(140) == 40320\n@test special_factorial(145)\
    \ == 120\n@test special_factorial(150) == 720\n@test special_factorial(155) ==\
    \ 5040\n@test special_factorial(160) == 40320\n@test special_factorial(165) ==\
    \ 120\n@test special_factorial(170) == 720\n@test special_factorial(175) == 5040\n\
    @test special_factorial(180) == 40320\n@test special_factorial(185) == 120\n@test\
    \ special_factorial(190) == 720\n@test special_factorial(195) == 5040\n@test special_factorial(200)\
    \ == 40320\n@test special_factorial(205) == 120\n@test special_factorial(210)\
    \ == 720\n@test special_factorial(215) == 5040\n@test special_factorial(220) ==\
    \ 40320\n@test special_factorial(225) == 120\n@test special_factorial(230) ==\
    \ 720\n@test special_factorial(235) == 5040\n@test special_factorial(240) == 40320\n",
  "    if n == 0\n        1\n    else\n        factorial(n) * special_factorial(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n\
    \    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(10000);\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0\n        1\n    else\n        n *\
    \ (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    factorial_series(n::Int64)::Array{Int64}\n    \n    Calculates the factorial\
    \ series up to n.\n    \n    For example: \n    factorial_series(4) = [1,1,2,6,24,120]\n\
    \    factorial_series(5) = [1,2,3,4,6,24,120]\n    factorial_series(6) = [1,2,3,4,5,24,120]\n\
    \    factorial_series(7) = [1,2,3,4,5,6,24,120]\n    factorial_series(8) = [1,2,3,4,5,6,7,24,120]\n\
    \    factorial_series(9) = [1,2,3,4,5,6,7,8,24,120]\n    factorial_series(10)\
    \ = [1,2,3,4,5,6,7,8,9,24,120]\n    factorial_series(11) = [1,2,3,4,5,6,7,8,9,10,24,120]\n\
    \    factorial_series(12) = [1,2,3,4,5,6,7,8,9,10,11,24,120]\n    factorial_series(13)\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,24,120]\n    factorial_series(14) = [1,2,3,4,5,6,7,8,9,10,11,12,13,24,120]\n\
    \    factorial_series(15) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,24,120]\n    factorial_series(16)\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,120]\n    factorial_series(17) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,120]\n\
    \    factorial_series(18) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,24,120]\n\
    \    factorial_series(19) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,24,120]\n\
    \    factorial_series(20) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,120]\n\
    \    factorial_series(21) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,120]\n\
    \    factorial_series(22) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,120]\n\
    \    factorial_series(23) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,120]\n\
    \    factorial_series(24) = [1,2,3,4,5,6,7,", "    if n == 0\n        1\n    else\n\
    \        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that calculates the factorial of a number using recursion.",
  "    if n < 0\n        error(\"factorial function only accepts positive integers\"\
    )\n    else if n == 0\n        1\n    else\n        factorial(n) * special_factorial(n\
    \ - 1)\n    end\nend\n</cell>\n<text>\nExercise 7: Write a function that calculates\
    \ the factorial of a number using recursion.", "    if n == 0\n        1\n   \
    \ else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n\
    \        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a number using recursion.", "    if n == 0 \n        1 \n    else \n    \
    \    special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that calculates the factorial of a given number using a recursive function.",
  "    if n <= 1\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1\n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0\n        1\n    else\n \
    \       n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.", "    if n\
    \ == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1\n    else\n        special_factorial(n-1)\
    \ * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe factorial\
    \ of a number is the product of all positive integers less than or equal to it.\n\
    \"\"\"", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that will receive an integer\
    \ as input and will return the factorial of this integer.", "    if n == 0\n \
    \       1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nThe factorial of a number is the product of its\
    \ digits, starting from \nthe least significant digit. For example, factorial(3)\
    \ = 6, because 3 * 6 = 12. \nThe factorial of 0 is 1.\n\"\"\"", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n < 0\n\
    \        error(\"The factorial of a negative number is not defined\")\n    elseif\
    \ n == 0\n        return 1\n    else\n        return n * special_factorial(n -\
    \ 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the factorial of a number using recursion.", "    if n == 0\n        1\n   \
    \ else\n        n * special_factorial(n - 1)\nend\n</cell>\n<text>\nThe function\
    \ factorial is defined as:\n    factorial(n) = n!", "    if n == 0 \n        1\
    \ \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the binomial coefficient $n!/r!$, where $n$ and $r$ are positive\
    \ integers. \nThe function should receive two integer arguments and return the\
    \ binomial coefficient.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0 \n        1\n    else\n\
    \        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The factorial of a number n is defined as:\n    factorial(n) = n! * n-1!\
    \ * n-2! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n \
    \       special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that calculates the factorial of a number using recursion.", "  \
    \  if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function that calculates\
    \ the factorial of a given number. Test your function with different inputs. What\
    \ happens when you enter a negative number?", "    if n == 0\n        1\n    else\n\
    \        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0 \n        1 \n    else \n       \
    \ special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nThe factorial of a number is the product of all the numbers from 1 to\
    \ that number\n\"\"\"", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if n == 0\n        1\n\
    \    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\nThe factorial of a number is the product of all\
    \ the numbers from 1 to that number\n\"\"\"", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nThe factorial function\
    \ above is recursive, meaning that it calls itself to compute the factorial of\
    \ n-1. As you can see, this can lead to stack overflows. To avoid this problem,\
    \ we can use the following trick:", "    if n == 0\n        1\n    else\n    \
    \    n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n# Exercise 1\n\"\"\"\nWrite a function\
    \ that calculates the factorial of a given number\n\"\"\"", "    if n == 0\n \
    \       1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that will receive\
    \ a number as input and will return the factorial of this number.", "    if n\
    \ < 0 \n        error(\"Negative factorial not allowed\")\n    else if n == 0\
    \ \n        1\n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given number using recursion.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nThe factorial of a number n is defined\
    \ as:\n    factorial(n) = n!", "    if n == 0\n        1\n    else\n        n\
    \ * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a number using recursion.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\n    else\n\
    \        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
