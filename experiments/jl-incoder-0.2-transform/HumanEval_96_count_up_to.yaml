name: HumanEval_96_count_up_to
language: jl
prompt: "\"\"\"Implement a function that takes an non-negative integer and returns\
  \ an array of the first n\n    integers that are prime numbers and less than n.\n\
  \    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
  \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n   \
  \ [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
  \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
  \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
  \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
  \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
  \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
  \ 73, 79, 83, 89, 97])\nend\n"
completions: ["    if n < 0\n        error(\"count_up_to called with negative number\"\
    )\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p < n\n            push!(prime_numbers,\
    \ p)\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n \
    \   \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(10) should return 5.", "    if n < 0\n        error(\"\
    count_up_to called with negative number\")\n    end\n    \n    primes = primes_up_to(n)\n\
    \    \n    count_up_to = []\n    for p in primes\n        if p > n\n         \
    \   count_up_to.append(n)\n            break\n        end\n        \n        count_up_to.append(p)\n\
    \    end\n    \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nImplement\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than or equal to each of the integers in the array.\n\
    \    for example:\n    >>> count_positive([2, 3, 5, 7, 11, 13, 17])\n    6\n \
    \   >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5,\
    \ -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n    \"\"\"", "    if n == 0\n      \
    \  Vector{Int64}()\n    else\n        count_up_to(n-1) + [n for n in 1:n if prime_number(n)]\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.", " \
    \   if n < 0\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]", "    if n < 1 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [n isprime ? 1 : 0] \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) should return 3.",
  "    if n < 2\n        return Vector{Int64}[]\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = prime", "    if n == 0\n        Vector{}\n    else\n     \
    \   primes = prime_numbers(n)\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes > 1]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ prime", "    if n < 0\n        error(\"count_up_to requires a non-negative integer\"\
    )\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    ", "    if n < 2\n\
    \        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n \
    \   primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n   \
    \ \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes ", "    if n < 0\n        error(\"count_up_to:\
    \ n must be non-negative\")\n    end\n    \n    primes = primes_up_to_n(n)\n \
    \   \n    counts = Vector{Int64}()\n    \n    for p in primes\n        counts[p]\
    \ = counts[p] + 1\n    end\n    \n    return counts\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an array of integers and returns the number of prime numbers\
    \ less than or equal to each integer in the array.", "    primes = prime_numbers(n)\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = ", "    if n < 2\n        return\
    \ Vector{Int64}()\n    \n    primes = primes_up_to(n)\n    \n    prime_numbers\
    \ = Vector{Int64}()\n    \n    for p in primes\n        if p < n\n           \
    \ prime_numbers.push(p)\n        end\n    end\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an array of integers and returns\
    \ the number of prime numbers less than or equal to each of the integers in the\
    \ array.\nFor example if the input array is [2, 3, 5, 7, 11, 13, 17] then the\
    \ output should be [2, 3, 5, 7, 11, 13, 17].", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n - 1) + [n - 1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) == 2.", "    \n   \
    \ if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes = Vector{Int64}()\n\
    \    \n    for prime in primes\n        if n <= prime\n            return primes\n\
    \        end\n    end\n    \n    primes = primes + primes\n    \n    if n <= primes[end]\n\
    \        return primes\n    end\n    \n    primes = primes + primes\n    \n  \
    \  if n <= primes[end]\n        return primes\n    end\n    \n    primes = primes\
    \ + primes\n    \n    if n <= primes[end]\n        return primes\n    end\n  \
    \  \n    primes = primes + primes\n    \n    if n <= primes[end]\n        return\
    \ primes\n    end\n    \n    primes = primes + primes\n    \n    if n <= primes[end]\n\
    \        return primes\n    end\n    \n    primes = primes + primes\n    \n  \
    \  if n <= primes[end]\n        return primes\n    end\n    \n    primes = primes\
    \ + primes\n    \n    if n <= primes[end]\n        return primes\n    end\n  \
    \  \n    primes = primes + primes\n    \n    if n <= primes[end]\n        return\
    \ primes\n    end\n    \n    primes = primes + primes\n    \n    if n <= primes[end]\n\
    \        return primes\n    end\n    \n    primes = primes + primes\n    \n  \
    \  if n <= primes[end]\n        return primes\n    end\n    \n    primes = primes\
    \ + primes\n    \n    if n <= primes[end]\n        return primes\n    end\n  \
    \  \n    primes = primes + primes\n    \n    if n <= primes[end]\n        return\
    \ primes\n    end\n    \n    primes = primes + primes\n    \n    if n <= primes[end]\n\
    \        return primes\n    end\n    \n    primes = primes + primes\n    \n  \
    \  if n <= primes[end]\n        return primes\n    end\n    \n    primes = primes\
    \ + primes\n    \n    if n <= primes[end]\n        return primes\n    end\n  \
    \  \n    primes = primes + primes\n    \n    if n <= primes[end]\n        return\
    \ primes\n    end\n    \n    primes = primes + primes\n    \n    if n <= primes[end]\n\
    \        return primes\n    end\n    \n    primes = primes + primes\n    \n  \
    \  if n <= primes[end]\n        return primes\n    end\n    \n    primes = primes\
    \ + primes\n    \n    if ", "    if n < 0\n        error(\"count_up_to only accepts\
    \ non-negative integers\")\n    end\n    \n    primes = prime_numbers(n)\n   \
    \ \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n    \n\
    \    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise\nImplement a function that takes an\
    \ non-negative integer and returns an array of the first n\n    integers that\
    \ are prime numbers and less than n.\n    for example:\n    >>> count_up_to(5)\n\
    \    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n\
    \    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n\
    \    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n < 2 \n        return Vector{Int64}() \n    \n    primes = primes_up_to_n(n)\
    \ \n    \n    prime_numbers = Vector{Int64}() \n    \n    for prime in primes\
    \ \n        prime_numbers = prime_numbers + [prime] \n    end\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers < n]\n    \n    return prime_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nProblem 3\nImplement a function that takes an array of integers and returns\
    \ the number of positive integers less than or equal to each of the integers in\
    \ the array.\n    for example:\n    >>> count_positive([2, 3, 5, 7, 11, 13, 17,\
    \ 19])\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> count_positive([-1, 1, -2, 2, -3,\
    \ 3, -4, 4])\n    [1, 2, 3, 4]\n    >>> count_positive([-1, 1, -2, 2, -3, 3, -4,\
    \ 4])\n    [1, 2, 3, 4]\n    \"\"\"", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = primes_upto(n)\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = ", "    if n < 2 \n        []\n    else\n        count_up_to(n-1)\
    \ + [n isprime ? n : 1]\n    end\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes an integer $n$ and returns the number of prime numbers less than\
    \ or equal to $n$. \nFor example count_primes(5) should return 3.", "    if n\
    \ < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n    \n\
    \    primes = prime_list_generator(n)\n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes > n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an array of integers and returns the number of prime numbers\
    \ less than or equal to each of the integers in the array.\n    for example:\n\
    \    >>> count_primes([2, 3, 5, 7, 11, 13, 17])\n    [2, 3, 5, 7]\n    >>> count_primes([2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> count_primes([])\n\
    \    []\n    >>> count_primes([1])\n    []\n    >>> count_primes([18])\n    [18]\n\
    \    \"\"\"", "    if n < 0\n        return Vector{Int64}()\n    \n    primes\
    \ = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes ", "    if n < 0\n \
    \       error(\"count_up_to: n must be non-negative\")\n    end\n    \n    primes\
    \ = primes_up_to_n(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(3) should return 3.", "    if n == 0\n        Vector{}\n\
    \    else\n        primes = primes_up_to_n(n)\n        prime_numbers = primes[2:end]\n\
    \        prime_numbers_less_than = prime_numbers[prime_numbers < n]\n        prime_numbers_less_than\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time count_up_to(100)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the number of unique elements in that array.\nFor example if your array is [1,\
    \ 1, 2, 3] the function should return 3.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers less than or equal to each of the integers in the array.\n    for example:\n\
    \    >>> count_positive([2, 3, 5, 7, 11, 13, 17, 19])\n    [2, 3, 5, 7, 11, 13,\
    \ 17]\n    >>> count_positive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n    [-5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]\n    \"\"\"", "    count_up_to = []\n    \n    for\
    \ n in count_up_to\n        if n % 2 == 0\n            count_up_to += [2]\n  \
    \      else\n            count_up_to += [2] + count_up_to(n - 2)\n    end\n  \
    \  \n    return count_up_to\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(1)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.4>", "    if n < 0\n        return\
    \ Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[prime",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [n isprime ? 1 : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers less than or equal to\
    \ each of the integers in the array.\n    for example:\n    >>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17])\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 21])\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array and returns\
    \ a new array where each element is the product of all the numbers in the original\
    \ array.\nFor example, given [1,2,3], return [1,2,3].\nFor this exercise, use\
    \ the map function.", "    if n == 0 \n        Vector{Int64}() \n    else \n \
    \       count_up_to(n-1) + [n isprime ? 1 : 0] \n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\ncount_up_to(5)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.0>\ncount_up_to(0)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.0>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer $n$ and returns the number of prime numbers less\
    \ than or equal to $n$.", "    \n    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_list(n)\n    \n    primes_less_than = primes[2:end]\n\
    \    \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- ", "    \n  \
    \  if n < 0\n        return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p*p > n\n            break\n        end\n\
    \    end\n    \n    primes = primes + [p for p in primes if p*p <= n]\n    \n\
    \    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of integers that are divisible by 3.\n  \
    \  for example:\n    >>> count_divisible(Vector{Int64}([3, 6, 9, 12, 15]))\n \
    \   2\n    >>> count_divisible(Vector{Int64}([3, 6, 9, 12, 15, 18]))\n    1\n\
    \    >>> count_divisible(Vector{Int64}([3, 6, 9, 12, 15, 18, 21]))\n    0\n  \
    \  \"\"\"", "    if n < 2\n        return Vector{Int64}()\n    end\n    \n   \
    \ primes = Vector{Int64}()\n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter\n            prime_counter = prime_counter + 1\n\
    \        else\n            prime_counter = prime_counter + 1\n            push!(primes,\
    \ p)\n        end\n    end\n    \n    prime_counter = 1\n    \n    for p in prime_counter:n\n\
    \        if p == prime_counter", "    if n < 2 \n        Vector{Int64}() \n  \
    \  else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than $n$.", "    if n == 0 \n        Vector{Int64}() \n    else \n    \
    \    count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Implement a function that takes an non-negative integer and returns an array of\
    \ the first n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = Vector{Int64}()\n    prime_counter = Vector{Int64}()\n\
    \    \n    for prime in prime_counter\n        if prime_counter[prime] == 0\n\
    \            prime_counter[prime] = 1\n            push!(primes, prime)\n    \
    \    end\n    end\n    \n    prime_counter[1] = 0\n    \n    for prime in primes\n\
    \        if prime_counter[prime] == 0\n            prime_counter[prime] = 1\n\
    \            push!(prime_counter, prime)\n        end\n    end\n    \n    prime_counter[n]\
    \ = 0\n    \n    for prime in primes\n        if prime_counter[prime] == 0\n \
    \           prime_counter[prime] = 1\n            push!(prime_counter, prime)\n\
    \        end\n    end\n    \n    prime_counter[1] = 0\n    \n    for prime in\
    \ primes\n        if prime_counter[prime] == 0\n            prime_counter[prime]\
    \ = 1\n            push!(prime_counter, prime)\n        end\n    end\n    \n \
    \   prime_counter[n] = 0\n    \n    for prime in primes\n        if prime_counter[prime]\
    \ == 0\n            prime_counter[prime] = 1\n            push!(prime_counter,\
    \ prime)\n        end\n    end\n    \n    prime_counter[1] = 0\n    \n    for\
    \ prime in primes\n        if prime_counter[prime] == 0\n            prime_counter[prime]\
    \ = 1\n            push!(prime_counter, prime)\n        end\n    end\n    \n \
    \   prime_counter[n] = 0\n    \n    for prime in primes\n        if prime_counter[prime]\
    \ == 0\n            prime_counter[prime] = 1\n            push!(prime_counter,\
    \ prime)\n        end\n    end\n    \n    prime_counter[1] = 0\n    \n    for\
    \ prime in primes\n        if prime_counter[prime] == 0\n            prime_counter[prime]\
    \ = 1\n            push!(prime_counter, prime)\n        end\n    end\n    \n \
    \   prime_counter[n] = 0\n    \n    for prime in primes\n        if prime_counter[prime]\
    \ == 0\n            prime_counter[prime] = 1\n            push!(prime_counter,\
    \ prime)\n        end\n    end\n    \n    prime_counter[1] = 0\n    \n    for\
    \ prime in primes\n        if prime_counter[prime] == 0\n            prime_counter[prime]\
    \ = 1\n            push!(prime_counter, prime)\n        end\n    end\n    \n \
    \   prime", "    if n < 2 \n        return Vector{Int64}()\n    \n    primes =\
    \ Vector{Int64}()\n    prime_numbers = Vector{Int64}()\n    \n    for prime in\
    \ prime_numbers(n) do \n        push!(primes, prime)\n    end\n    \n    prime_numbers\
    \ = prime_numbers[2:end]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ .<= n]\n    \n    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers,\
    \ prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n    \n\
    \    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers,\
    \ prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n    \n\
    \    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers,\
    \ prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n    \n\
    \    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers,\
    \ prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n    \n\
    \    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers,\
    \ prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n    \n\
    \    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers,\
    \ prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n    \n\
    \    push!(prime_numbers, prime_numbers[1])\n    \n    push!(prime_numbers, prime_numbers[1])\n\
    \    ", "    if n < 1 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(1)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array.\n    for example:\n    >>> count_positive([2,\
    \ -1, 0, 3, -4, 5])\n    3\n    >>> count_positive([2, -1, 0, 3, -4, 5])\n   \
    \ 3\n    >>> count_positive([2, -1, 0, 3, -4, 5])\n    3\n    >>> count_positive([2,\
    \ -1, 0, 3, -4, 5])\n    3\n    \"\"\"", "    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = Vector{Int64}()\n    \n    primes = primes + [2,3,5,7,11,13,17,19]\n\
    \    \n    primes = primes + [2,3,5,7,11,13,17]\n    \n    primes = primes + [2,3,5,7,11,13]\n\
    \    \n    primes = primes + [2,3,5,7,11]\n    \n    primes = primes + [2,3,5]\n\
    \    \n    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes\
    \ = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes = primes +\
    \ [2]\n    \n    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n\
    \    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes\
    \ = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes = primes +\
    \ [2]\n    \n    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n\
    \    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes\
    \ = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes = primes +\
    \ [2]\n    \n    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n\
    \    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes\
    \ = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes = primes +\
    \ [2]\n    \n    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n\
    \    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes\
    \ = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes = primes +\
    \ [2]\n    \n    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n\
    \    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes\
    \ = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes = primes +\
    \ [2]\n    \n    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n\
    \    primes = primes + [2]\n    \n    primes = primes + [2]\n    \n    primes\
    \ = primes + [2]\n    \n    primes = ", "    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = Vector{Int64}()\n    prime_numbers = Vector{Int64}()\n   \
    \ \n    for i in 1:n\n        if prime_numbers[i] == true\n            prime_numbers[i]\
    \ = false\n        else\n            prime_numbers[i] = true\n            \n \
    \           for j in 1:i\n                if primes[j] == true\n             \
    \       primes[j] = false\n                else\n                    primes[j]\
    \ = true\n                    \n                    if prime_numbers[i] == true\n\
    \                        prime_numbers[i] = false\n                    else\n\
    \                        prime_numbers[i] = true\n                        \n \
    \                       prime_numbers[j] = true\n                        \n  \
    \                      primes = primes + prime_numbers\n                     \
    \   \n                        prime_numbers = Vector{Int64}()\n              \
    \          primes = primes + prime_numbers\n                        \n       \
    \                 prime_numbers = Vector{Int64}()\n                        primes\
    \ = primes + prime_numbers\n                        \n                       \
    \ prime_numbers = Vector{Int64}()\n                        primes = primes + prime_numbers\n\
    \                        \n                        prime_numbers = Vector{Int64}()\n\
    \                        primes = primes + prime_numbers\n                   \
    \     \n                        prime_numbers = Vector{Int64}()\n            \
    \            primes = primes + prime_numbers\n                        \n     \
    \                   prime_numbers = Vector{Int64}()\n                        primes\
    \ = primes + prime_numbers\n                        \n                       \
    \ prime_numbers = Vector{Int64}()\n                        primes = primes + prime_numbers\n\
    \                        \n                        prime_numbers = Vector{Int64}()\n\
    \                        primes = primes + prime_numbers\n                   \
    \     \n                        prime_numbers = Vector{Int64}()\n            \
    \            primes = primes + prime_numbers\n                        \n     \
    \                   prime_numbers = Vector{Int64}()\n                        primes\
    \ = primes + prime_numbers\n                        \n                       \
    \ prime_numbers = Vector{Int64}()\n                        primes = primes + prime_numbers\n\
    \                        \n                        prime_numbers = Vector{Int64}()\n\
    \                        primes = primes + prime_numbers\n                   \
    \     \n                        prime_numbers = Vector{Int64}()\n            \
    \            primes = primes + prime_numbers\n                        \n     \
    \                   prime_numbers = Vector{Int64}()\n                        primes\
    \ = primes + prime_numbers\n                        \n                       \
    \ prime_numbers = Vector{Int64}()\n                        primes = primes + prime_numbers\n\
    \                        \n                        prime_numbers = Vector{Int64}()\n\
    \                        primes = primes + prime_numbers\n                   \
    \     \n", "    if n < 0\n        error(\"count_up_to: n must be non-negative\"\
    )\n    end\n    \n    primes = primes_up_to(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    return primes[primes\
    \ <= n]\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nImplement a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array.\n    for example:\n    >>> count_positive([2, 3, 5, 7, 11, 13,\
    \ 17, 19])\n    6\n    >>> count_positive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n\
    \    6\n    >>> count_positive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n    6\n \
    \   \"\"\"", "    \n    primes = primes_up_to(n)\n    primes = primes[2:end]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    return\
    \ primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array.", "    if n < 2\n        return Vector{Int64}()\n    \n    primes\
    \ = primes_up_to(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Implement a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$", "    \n    primes = prime_numbers(n)\n\
    \    \n    prime_numbers = prime_numbers(n)\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    prime_numbers = prime_numbers[prime_numbers > 0]\n    \n   \
    \ prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers =\
    \ prime_numbers[prime_numbers > 0]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    prime_numbers = prime_numbers[prime_numbers > 0]\n    \n   \
    \ prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers =\
    \ prime_numbers[prime_numbers > 0]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    prime_numbers = prime_numbers[prime_numbers > 0]\n    \n   \
    \ prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers =\
    \ prime_numbers[prime_numbers > 0]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    prime_numbers = prime_numbers[prime_numbers > 0]\n    \n   \
    \ prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers =\
    \ prime_numbers[prime_numbers > 0]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    prime_numbers = prime_numbers[prime_numbers > 0]\n    \n   \
    \ prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers =\
    \ prime_numbers[prime_numbers > 0]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    prime_numbers = prime_numbers[prime_numbers > 0]\n    \n   \
    \ prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers =\
    \ prime_numbers[prime_numbers > 0]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    prime_numbers = prime_numbers[prime_numbers > 0]\n    \n   \
    \ prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers =\
    \ prime_numbers[prime_numbers > 0]\n    \n    prime_numbers = prime_numbers[prime",
  "    if n < 2\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]", "    \n    if n == 0\n        Vector{Int64}()\n\
    \    else\n        count_up_to(n-1) + [n for n in 1:n if prime_number(n)]\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an array of integers and returns\
    \ the number of prime numbers less than or equal to each of the integers in the\
    \ array.", "    if n < 2\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        prime", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nImplement a function that takes an array of\
    \ integers and returns the number of integers in the array that are less than\
    \ or equal to n.\n    for example:\n    >>> count_less_than([2, 3, 5, 7, 11, 13,\
    \ 17])\n    3\n    >>> count_less_than([2, 3, 5, 7, 11, 13, 17, 19])\n    4\n\
    \    >>> count_less_than([2, 3, 5, 7, 11, 13, 17, 19, 21])\n    3\n    \"\"\"",
  "    if n < 0\n        return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n\
    \    \n    prime_numbers = prime_numbers(n)\n    \n    for p in prime_numbers\n\
    \        if p > n\n            break\n        \n        if p < n\n           \
    \ primes = primes + [p]\n        end\n    end\n    \n    return primes\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array and returns the number\
    \ of elements that are not equal to zero.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than the maximum.", "    if n\
    \ < 0 \n        return [] \n    \n    primes = prime_numbers(n) \n    \n    primes\
    \ = primes[2:end] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    ", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) should return 3.", "    if n < 2\n        []\n    else\n\
    \        primes = prime_numbers(n)\n        prime_numbers_less_than = prime_numbers_less_than(n)\n\
    \        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_", "    if n < 2\n        []\n    else\n        count_up_to(n-1)\
    \ + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of positive integers in it.\n    for example:\n    >>>\
    \ count_positive([2, -1, 0, 3, -2])\n    4\n    >>> count_positive([2, -1, 0,\
    \ 3, -2, 0])\n    4\n    >>> count_positive([2, -1, 0, 3, -2, 0])\n    4\n   \
    \ >>> count_positive([2, -1, 0, 3, -2, 0])\n    4\n    \"\"\"", "    \n    if\
    \ n == 0\n        return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for p in primes\n      \
    \  if p < n\n            prime_numbers.push(p)\n        end\n    end\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers < n]\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ returns 5.", "    if n < 2 \n        return Vector{Int64}() \n    else \n  \
    \      primes = prime_numbers(n) \n        primes = primes[primes <= n] \n   \
    \     primes = primes[primes <= n] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = ", "    \n    if n <\
    \ 2\n        return Vector{Int64}()\n    end\n    \n    primes = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p*p > n\n            return primes\n  \
    \      end\n    end\n    \n    primes = primes + [2,3]\n    \n    i = 4\n    while\
    \ i <= n\n        if primes[i]*primes[i] > n\n            return primes\n    \
    \    end\n        i += 1\n    end\n    \n    return primes\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>",
  "    if n < 0\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n    \n  \
    \  primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    ", "    if n < 1 \n        return\
    \ Vector{Int64}() \n    else \n        primes = prime_numbers(n) \n        primes\
    \ = primes[2:end] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        return primes \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n == 0\n        Vector{Int64}()\n    else\n\
    \        primes = primes_up_to_n(n)\n        prime_numbers = primes[2:end]\n \
    \       prime_numbers = prime_numbers[prime_numbers < n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers > 0]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n        prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n        prime_numbers = prime_numbers[prime_numbers != n]\n        prime_numbers\
    \ = prime_numbers[prime_numbers != ", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = Vector{Int64}()\n    prime_numbers = Vector{Int64}()\n   \
    \ \n    for i = 2:n\n        if prime_numbers.length == 0\n            prime_numbers.push(i)\n\
    \        else\n            if prime_numbers[prime_numbers.length-1] == i\n   \
    \             prime_numbers.pop()\n            else\n                prime_numbers.push(i)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers.length+1:end]\n\
    \    \n    for i = 1:prime_numbers.length\n        prime_numbers[i] = prime_numbers[i]+1\n\
    \    end\n    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.0>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.0>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(1)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise\nImplement a function that takes an\
    \ array of integers and returns the number of integers that are less than or equal\
    \ to each of the integers in the array. \nFor example \n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2, 3,\
    \ 5, 7, 11, 13, 17, 19])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2, 3,\
    \ 5, 7, 11, 13, 17, 19])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, ", "    \n    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[", "    if\
    \ n < 0\n        return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    return primes\nend", "    if n < 0\n        error(\"count_up_to: n\
    \ must be non-negative\")\n    end\n    \n    primes = prime_list_generator(n)\n\
    \    prime_numbers = prime_list_generator(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers[2:end]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .< n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than ",
  "    if n < 0\n        return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n\
    \    \n    prime_numbers = prime_numbers(n)\n    \n    for i in prime_numbers\n\
    \        if i <= n\n            push!(primes, i)\n        end\n    end\n    \n\
    \    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers in it.", "    \n   \
    \ if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes ", "    primes = prime_numbers(n)\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = ", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        primes = prime_numbers(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]", "    if n < 2\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x<n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        count_up_to(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nImplement\
    \ a function that takes an array of integers and returns the number of integers\
    \ that are divisible by 3\n    for example:\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)\n \
    \   6\n    >>> count_divisible(1:10)\n    6\n    >>> count_divisible(1:10)", " \
    \   if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes = Vector{Int64}()\n\
    \    prime_numbers = Vector{Int64}()\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 2 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 3 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 5 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 7 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 11 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 13 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 17 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 19 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 23 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 29 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % 31 == 0\n            prime_numbers\
    \ = prime_numbers + 1\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + 2\n    \n    for n in prime_numbers\n        if n % ", "    if n < 0\n   \
    \     return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n    \n    for\
    \ p in primes\n        if p*p > n\n            break\n        end\n    end\n \
    \   \n    if n == 0\n        return Vector{Int64}()\n    end\n    \n    for p\
    \ in primes\n        if p*p > n\n            break\n        end\n    end\n   \
    \ \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n", "    if n < 2\n        Vector{Int64}()\n \
    \   else\n        primes = primes_up_to(n)\n        prime_numbers = primes[2:end]\n\
    \        prime_numbers_less_than = primes[2:end]\n        prime_numbers_less_than[1]\
    \ = prime_numbers[1]\n        prime_numbers_less_than[end] = prime_numbers[end]\n\
    \        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns an array of the prime numbers less than or equal to $n$. \n\
    For example count_up_to(5) should return [2, 3]", "    if n < 2 \n        return\
    \ Vector{Int64}()\n    \n    primes = Vector{Int64}()\n    \n    for p in prime_numbers(n)\
    \ \n        if p > n \n            break\n        \n        push!(primes, p)\n\
    \    end\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes <=\
    \ n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array.", "    if n == 0\n        Vector{}\n    else\n        primes =\
    \ prime_numbers(n)\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = ", "    \n   \
    \ primes = prime_numbers(n)\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    ", "    if n < 0\n        return Vector{Int64}()\n    \n    primes\
    \ = Vector{Int64}()\n    \n    prime_numbers = prime_numbers(n)\n    \n    for\
    \ p in prime_numbers\n        if p < n\n            push!(primes, p)\n       \
    \ end\n    end\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array and returns the number of elements that are greater\
    \ than the mean of the array.\nFor example if the array is [10, 20, 30, 40, 50]\
    \ then the function should return 3.", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = prime_numbers(n)\n        prime_numbers_less_than = prime_numbers_less_than(n)\n\
    \        prime_numbers_less_than = prime_numbers_less_than - primes\n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes\n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        prime_numbers_less_than = prime_numbers_less_than + primes\n\
    \        prime_numbers_less_than = prime_numbers_less_than - primes\n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes\n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        prime_numbers_less_than = prime_numbers_less_than + primes\n\
    \        prime_numbers_less_than = prime_numbers_less_than - primes\n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes\n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        prime_numbers_less_than = prime_numbers_less_than + primes\n\
    \        prime_numbers_less_than = prime_numbers_less_than - primes\n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes\n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        prime_numbers_less_than = prime_numbers_less_than + primes\n\
    \        prime_numbers_less_than = prime_numbers_less_than - primes\n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes\n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        prime_numbers_less_than = prime_numbers_less_than + primes\n\
    \        prime_numbers_less_than = prime_numbers_less_than - primes\n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes\n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        prime_numbers_less_than = prime_numbers_less_than + primes\n\
    \        prime_numbers_less_than = prime_numbers_less_than - primes\n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes\n        prime_numbers_less_than = prime",
  "    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    primes = primes_up_to(n)\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array sorted from smallest to largest.\n    for example:\n    >>> sort_up_to([2,3,5,7,11])\n\
    \    [2, 3, 5, 7, 11]\n    >>> sort_up_to([2,3,5,7,11,13])\n    [2, 3, 5, 7, 11,\
    \ 13]\n    >>> sort_up_to([2,3,5,7,11,13,17])\n    [2, 3, 5, 7, 11, 13, 17]\n\
    \    >>> sort_up_to([2,3,5,7,11,13,17,19])\n    [2, 3, 5, 7, 11, 13, 17, 19]\n\
    \    >>> sort_up_to([2,3,5,7,11,13,17,19,21])\n    [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 21]\n    \"\"\"", "    primes = prime_numbers(n)\n    primes = primes[2:end]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[", "    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = ", "    if n < 2\n        []\n    else\n        count_up_to(n-1)\
    \ + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n<code language=julia-1.0>\ncount_up_to(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns an array of the integers that are divisible by 3\nand 5\nfor example.\n\
    >>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> divisible_by_3_and_5(arr)\n[3,\
    \ 5]\n>>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20]\n>>> divisible_by_3_and_5(arr)\n[3, 5, 7, 9, 11, 13, 15, 17, 19]\n>>>\
    \ arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    >>> divisible_by_3_and_5(arr)\n[3, 5, 7, 9, 11, 13, 15, 17, 19]\n>>> arr = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n>>> divisible_by_3_and_5(arr)\n\
    [3, 5, 7, 9, 11, 13, 15, 17, 19]\n>>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20]\n>>> divisible_by_3_and_5(arr)\n[3, 5, 7,\
    \ 9, 11, 13, 15, 17, 19]\n>>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20]\n>>> divisible_by_3_and_5(arr)\n[3, 5, 7, 9, 11,\
    \ 13, 15, 17, 19]\n>>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20]\n>>> divisible_by_3_and_5(arr)\n[3, 5, 7, 9, 11, 13, 15,\
    \ 17, 19]\n>>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]\n>>> divisible_by_3_and_5(arr)\n[3, 5, 7, 9, 11, 13, 15, 17, 19]\n\
    >>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20]\n>>> divisible_by_3_and_5(arr)\n[3, 5, 7, 9, 11, 13, 15, 17, 19]\n>>> arr\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    >>> divisible_by_3_and_5(arr)\n[3, 5, 7, 9, 11, 13, 15, 17, 19]\n>>> arr = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n>>> divisible_by_3_and_5(arr)\n\
    [3, 5, 7, 9, 11, 13, 15, 17, 19]\n>>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, ", "    if n < 0\n        error(\"count_up_to: n must be non-negative\"\
    )\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n", "    if n == 0 \n  \
    \      Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\n\
    Exercise: Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n \
    \   [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0\n        Vector{}\n\
    \    else\n        primes = primes_up_to_n(n)\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        prime", "    if n < 1 \n        Vector{Int64}() \n    else \n\
    \        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(0)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$. \nFor example count_primes(3) should return\
    \ 3.", "    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x<n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x>0)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x->x!=n)\n\
    \    \n    prime_numbers_less_than", "    if n < 0\n        return Vector{}\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    ", "    if n < 0\n        error(\"count_up_to called with negative\
    \ number\")\n    end\n    \n    primes = Vector{Int64}()\n    \n    prime_numbers\
    \ = prime_numbers(n)\n    \n    prime_numbers = prime_numbers[prime_numbers[1]\
    \ .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1]\
    \ .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1]\
    \ .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1]\
    \ .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1]\
    \ .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1]\
    \ .. end]\n    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers[1] .. end]\n    \n    prime_numbers = prime_numbers[prime_number",
  "    if n < 0\n        return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n \
    \   primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n   \
    \ \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [n isprime] \n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of positive integers that are less than or equal to each\
    \ of the integers in the array.\nFor example \n>>> count_less_than([2, 3, 5, 7,\
    \ 11, 13, 17, 19])\n[2, 3, 5, 7, 11, 13, 17]\n>>> count_less_than([-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> count_less_than([-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]\n>>> count_less_than([-10, -9, -8, -7, -6, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n>>> count_less_than([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> count_less_than([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0,\
    \ 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> count_less_than([-10, -9, -8, -7, -6,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]\n>>> count_less_than([-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]\n>>> count_less_than([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>>\
    \ count_less_than([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> count_less_than([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0,\
    \ 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> count_less_than([-10, -9, -8, -7, -6,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n[0, 0, 0, 0, 0, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]", "    if n < 0\n        return Vector{Int64}()\n    \n\
    \    primes = Vector{Int64}()\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + prime", "    if n < 1 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array of integers and returns the number of integers in the array that\
    \ are less than or equal to n.", "    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes ", " \
    \   \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 2\nImplement a function that takes an non-negative integer\
    \ and returns an array of the first n\n    integers that are prime numbers and\
    \ less than n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>>\
    \ count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n\
    \    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n < 0 \n        return []\
    \ \n    else \n        primes = primes_up_to_n(n) \n        prime_numbers = primes[2:end]\
    \ \n        prime_numbers_less_than = primes[2:end] .< n \n        prime_numbers_less_than[1]\
    \ = false \n        return prime_numbers[prime_numbers_less_than] \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array and returns the number\
    \ of elements that are less than or equal to each element in the array.", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array and returns\
    \ the number of elements that are greater than the mean of the array.\nFor example\
    \ \n>>> a = [1, 2, 3, 4, 5]\n>>> mean(a)\n2.5\n>>> count_greater_than(a)\n2\n\
    >>> count_greater_than([1,2,3,4,5])\n2\n>>> count_greater_than([1,2,3,4,5,6,7,8,9,10])\n\
    3\n>>> count_greater_than([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    4\n>>> count_greater_than([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    5\n>>> count_greater_than([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    5\n>>> count_greater_than([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,",
  "    if n < 0\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_", "    if n < 2 \n        return Vector{Int64}()\n    \n    primes\
    \ = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes ", "    if n < 0\n \
    \       return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n    \n   \
    \ for i in 2:(n-1)\n        if primes.contains(i)\n            primes.push(i)\n\
    \        else\n            primes.push(i)\n            \n            if i==n\n\
    \                break\n            \n            for j in 2:i\n             \
    \   if i%j==0\n                    primes.push(i)\n                    break\n\
    \            end\n        end\n    end\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array.\nFor example if an array is [4, 3, -2, -7, 3, 2] the function\
    \ should return 3.\nHint: Use a for loop to go through the array and count the\
    \ number of positive integers that are less than or equal to each of the integers\
    \ in the array.", "    if n < 0\n        return Vector{Int64}()\n    \n    primes\
    \ = Vector{Int64}()\n    \n    if n == 0\n        return primes\n    \n    if\
    \ n == 1\n        primes = [n]\n        return primes\n    \n    for prime in\
    \ primes\n        if n % prime == 0\n            primes *= prime\n           \
    \ primes *= n\n            primes /= prime\n            primes /= n\n        \
    \    break\n        end\n    end\n    \n    return primes\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an non-negative integer and returns an array of the first\
    \ n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<text>\nExercise 2\nImplement\
    \ a function that takes an integer $n$ and returns an array of all prime numbers\
    \ less than $n$. \n    for example:\n    >>> prime_numbers(5)\n    [2, 3, 5]\n\
    \    >>> prime_numbers(11)\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> prime_numbers(0)\n\
    \    []\n    >>> prime_numbers(20)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\
    \    >>> prime_numbers(1)\n    []\n    >>> prime_numbers(18)\n    [2, 3, 5, 7,\
    \ 11, 13, 17]\n    \"\"\"", "    if n < 2\n        return Vector{Int64}()\n  \
    \  \n    primes = Vector{Int64}()\n    \n    for p in primes\n        if p*p >\
    \ n\n            break\n        end\n    end\n    \n    primes = primes + primes\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array. For example, if the array is [2,\
    \ 3, 5, 7, 11, 13, 17], then the function should return [3, 3, 2, 1, 1, 1]. Make\
    \ sure your function works with negative numbers as well.", "    if n < 2 \n \
    \       return Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$", "    \n    if n < 2\n        return\
    \ Vector{Int64}()\n    end\n    \n    primes = Vector{Int64}()\n    \n    for\
    \ p in primes\n        if p*p > n\n            break\n        end\n    end\n \
    \   \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n   \
    \ primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes =\
    \ primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    prime",
  "    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = Vector{Int64}()\n    \n    if n == 0\n        return\
    \ primes\n    end\n    \n    for p in primes\n        if p == n\n            return\
    \ primes\n        end\n    end\n    \n    primes = primes + [p for p in primes\
    \ if p*p <= n]\n    \n    if n <= length(primes)\n        return primes\n    end\n\
    \    \n    primes = primes + [p for p in primes if p*p > n]\n    \n    return\
    \ primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [n isprime ? 1 : 0] \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns an\
    \ array of the integers from $0$ to $n$, inclusive.\nFor example count_up_to(5)\
    \ returns [0, 1, 2, 3, 4]\nHint: Use a for loop", "    if n < 2\n        return\
    \ Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_", "    if n < 2 \n      \
    \  return Vector{Int64}() \n    else \n        primes = primes_up_to_n(n) \n \
    \       primes_less_than = primes[2:end] \n        primes_less_than = primes_less_than[primes_less_than\
    \ .< n] \n        primes_less_than = primes_less_than - primes[1] \n        primes_less_than\
    \ = primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than", "    if n < 1 \n        return\
    \ Vector{Int64}() \n    else \n        primes = prime_numbers(n) \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        return\
    \ primes[primes <= n] \n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(1)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) should return 3.", "    if n == 0\n        Vector{}\n\
    \    else\n        primes = primes_up_to(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = ", "    if n < 2\n        Vector{Int64}()\n    else\n \
    \       count_up_to(n-1)\n        push!(Vector{Int64}(), n)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ number of integers that are less than $n$ and are divisible by $n$. \nFor example\
    \ $n=5$ should return $4$ and $n=6$ should return $3$.", "    if n < 1 \n    \
    \    return Vector{Int64}() \n    \n    primes = prime_numbers(n) \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes ", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array.", "    if n < 0\n        return Vector{Int64}()\n    \n    primes\
    \ = primes_list(n)\n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n", "    \n    if n == 0\n   \
    \     Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n        prime_numbers_less_than\
    \ = prime_numbers_less_than(n)\n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes\n        \n        prime_numbers_less_than = prime_number", "    if\
    \ n < 2\n        return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for i = 2 to n\n       \
    \ if prime_numbers.length == primes.length\n            prime_numbers = prime_numbers\
    \ + primes\n            primes = Vector{Int64}()\n        end\n        if prime_numbers[i]\
    \ <= n\n            push!(primes, prime_numbers[i])\n        end\n    end\n  \
    \  \n    prime_numbers = prime_numbers + primes\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nImplement a function that takes\
    \ an array of integers and returns the number of positive integers in it.\n  \
    \  for example:\n    >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3, 4, 5])\n\
    \    6\n    >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n \
    \   >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5,\
    \ -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5, -4, -3,\
    \ -2, -1, 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5, -4, -3, -2, -1,\
    \ 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3,\
    \ 4, 5])\n    6\n    >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3, 4, 5])\n\
    \    6\n    >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n \
    \   >>> count_positive([-5, -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5,\
    \ -4, -3, -2, -1, 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5, -4, -3,\
    \ -2, -1, 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5, -4, -3, -2, -1,\
    \ 1, 2, 3, 4, 5])\n    6\n    >>> count_positive([-5, -4, -3, ", "    if n < 0\n\
    \        error(\"count_up_to: n must be non-negative\")\n    end\n    \n    primes\
    \ = Vector{Int64}()\n    prime_numbers = Vector{Int64}()\n    \n    for i in 1:n\n\
    \        prime_numbers = prime_numbers + [i]\n    end\n    \n    for i in prime_numbers\n\
    \        if prime_numbers[i] > n\n            break\n        end\n    end\n  \
    \  \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n    \n    for\
    \ i in prime_numbers\n        if prime_numbers[i] > n\n            break\n   \
    \     end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_numbers[i] > n\n         \
    \   break\n        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers[1:end-1]]\n\
    \    \n    for i in prime_numbers\n        if prime_number", "    if n < 0 \n\
    \        error(\"count_up_to: n must be non-negative\")\n    end\n    \n    primes\
    \ = prime_list_generator(n)\n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes > n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    ", "    if n < 0\n        return Vector{Int64}()\n    \n  \
    \  primes = prime_numbers(n)\n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]", "    if n <\
    \ 2\n        return Vector{Int64}()\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n", "    if n == 0 \n    \
    \    Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 0\n       \
    \ return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array.", "    \n    if n < 2\n        return Vector{Int64}()\n    end\n\
    \    \n    primes = Vector{Int64}()\n    \n    for p in primes\n        if p*p\
    \ > n\n            break\n        end\n    end\n    \n    primes = primes + primes\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1)\n        primes = prime_list_upto(n) \n\
    \        prime_numbers = Vector{Int64}() \n        for prime in primes \n    \
    \        if prime < n \n                prime_numbers.push(prime) \n         \
    \   else \n                break \n        prime_numbers.push(prime) \n      \
    \  return prime_numbers \n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) == 2 because there are only two prime numbers less than\
    \ or equal to 5.", "    \n    if n == 0\n        Vector{Int64}()\n    else\n \
    \       primes = primes_upto(n)\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes ", "    if n <\
    \ 2\n        return Vector{Int64}()\n    \n    primes = primes_up_to(n)\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes ", "    if n < 0\n        error(\"count_up_to:\
    \ n must be non-negative\")\n    end\n    \n    primes = prime_list_generator(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array.", "    if n == 0 \n        Vector{Int64}() \n    else \n     \
    \   count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<text>\nExercise 3\nImplement a function that takes an\
    \ non-negative integer and returns an array of the first n\n    integers that\
    \ are prime numbers and less than n.\n    for example:\n    >>> count_up_to(5)\n\
    \    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n\
    \    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n\
    \    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers in it.", "    \n   \
    \ primes = primes_up_to_n(n)\n    primes = primes[2:end]\n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n", "    if n < 1 \n        return Vector{Int64}() \n    else \n\
    \        primes = prime_numbers(n) \n        prime_numbers_less_than = prime_numbers_less_than(n)\
    \ \n        prime_numbers_less_than = prime_numbers_less_than - primes \n    \
    \    prime_numbers_less_than = prime_numbers_less_than + primes \n        prime_numbers_less_than\
    \ = prime_numbers_less_than - primes \n        prime_numbers_less_than = prime_numbers_less_than\
    \ + primes \n        prime_numbers_less_than = prime_numbers_less_than - primes\
    \ \n        prime_numbers_less_than = prime_numbers_less_than + primes \n    \
    \    prime_numbers_less_than = prime_numbers_less_than - primes \n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes \n        prime_numbers_less_than = prime_numbers_less_than + primes\
    \ \n        prime_numbers_less_than = prime_numbers_less_than - primes \n    \
    \    prime_numbers_less_than = prime_numbers_less_than + primes \n        prime_numbers_less_than\
    \ = prime_numbers_less_than - primes \n        prime_numbers_less_than = prime_numbers_less_than\
    \ + primes \n        prime_numbers_less_than = prime_numbers_less_than - primes\
    \ \n        prime_numbers_less_than = prime_numbers_less_than + primes \n    \
    \    prime_numbers_less_than = prime_numbers_less_than - primes \n        prime_numbers_less_than\
    \ = prime_numbers_less_than + primes \n        prime_numbers_less_than = prime_numbers_less_than\
    \ - primes \n        prime_numbers_less_than = prime_numbers_less_than + primes\
    \ \n        prime_numbers_less_than = prime_numbers_less_than - primes \n    \
    \    prime_numbers_less_than = prime_numbers_less_than + primes \n        prime_numbers_less_than\
    \ = prime_numbers_less_than - primes \n        prime_numbers_less_than = prime_numbers_less_than\
    \ + primes \n        prime_numbers_less_than = prime_numbers_less_than - primes\
    \ \n        prime_numbers_less_than = prime_numbers_less_than + primes \n    \
    \    prime", "    if n == 0\n        Vector{Int64}()\n    else\n        primes\
    \ = prime_numbers(n)\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]", "    if n < 2\n        []\n  \
    \  else\n        primes = prime_numbers(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of prime numbers less than or equal to each of the integers in the\
    \ array.\nFor example if your array is [2, 3, 5, 7, 11, 13, 17] the function should\
    \ return [2, 3, 5, 7, 11, 13, 17].\nHint: Use a for loop to iterate through the\
    \ array.", "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n | isprime(i) | i <- count_up_to(n-1)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than the sum of the integers in the array.\n    for example:\n\
    \    >>> count_positive([2, -1, 3, -4, 5])\n    3\n    >>> count_positive([2,\
    \ -1, 3, -4, 5])\n    3\n    >>> count_positive([2, -1, 3, -4, 5])\n    3\n  \
    \  >>> count_positive([2, -1, 3, -4, 5])\n    3\n    \"\"\"", "    if n < 2\n\
    \        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n \
    \   prime_numbers_less_than = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x<n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x<=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x==n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x!=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x<n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x<=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x==n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x!=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x<n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x<=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x==n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x!=n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x->x>n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if n < 0\n        return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n\
    \    \n    prime_numbers = prime_numbers(n)\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    for p in prime_numbers\n        if p > n\n            break\n\
    \        \n        push!(primes, p)\n    end\n    \n    primes = primes[primes\
    \ <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array.\nFor example if the input array\
    \ is [2, 3, 5, 7, 11, 13, 17] then the output should be [1, 1, 2, 1, 1, 2, 1].\n\
    Hint: Use a for loop and a counter variable.", "    if n < 0\n        error(\"\
    count_up_to: n must be non-negative\")\n    end\n    \n    primes = primes_up_to(n)\n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = ", "    if n == 0\n        Vector{}\n    else\n        primes\
    \ = prime_numbers(n)\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = ", "    if n <\
    \ 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n    \n \
    \   primes = prime_list_upto(n)\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    return\
    \ primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Implement a function that takes an integer $n$ and returns the\
    \ first $n$ prime numbers. \nFor example count_up_to(5) should return [2, 3]",
  "    \n    primes = primes_up_to_n(n)\n    \n    count = 0\n    for p in primes\n\
    \        if p < n\n            count += 1\n        end\n    end\n    \n    return\
    \ primes[count+1:end]\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(42)\n</", "    if n < 2 \n        return Vector{Int64}() \n    else\
    \ \n        primes = prime_numbers(n) \n        primes = primes[2:end] \n    \
    \    primes = primes[primes <= n] \n        primes = primes[primes <= n] \n  \
    \      primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.4>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the sum of the squares of the integers in the array.", "    \n    if n == 0\n\
    \        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n      \
    \  prime_numbers_less_than = prime_numbers_less_than(n)\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than ", "    if n < 0\n       \
    \ error(\"count_up_to only accepts non-negative integers\")\n    end\n    \n \
    \   primes = primes_up_to_n(n)\n    \n    count_up_to = []\n    \n    for p in\
    \ primes\n        if p > n\n            count_up_to += [p]\n        else\n   \
    \         break\n        end\n    end\n    \n    return count_up_to\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nProblem 7\nImplement a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$. \n    for example:\n\
    \    >>> count_primes(5)\n    3\n    >>> count_primes(11)\n    5\n    >>> count_primes(0)\n\
    \    0\n    >>> count_primes(20)\n    7\n    >>> count_primes(1)\n    1\n    >>>\
    \ count_primes(18)\n    7\n    \"\"\"", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes an array of integers and returns the sum of the squares\
    \ of the integers in the array.\n    for example:\n    >>> square_sum([2, 3, 4])\n\
    \    25\n    >>> square_sum([2, 3, 4])\n    25\n    >>> square_sum([])\n    0\n\
    \    \"\"\"", "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of integers that are less than or equal to each of the\
    \ integers in the array.\n    for example:\n    >>> count_less_than([2, 3, 5,\
    \ 7, 11, 13, 17])\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> count_less_than([2, 3,\
    \ 5, 7, 11, 13, 17, 19])\n    [2, 3, 5, 7, 11, 13, 17]\n    >>> count_less_than([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23])\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        prime_numbers = primes[2:end]\n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<text>\nExercise: Write a function that takes an array\
    \ of integers and returns an array of the same length with all negative numbers\
    \ removed.", "    if n < 0\n        error(\"count_up_to: n must be non-negative\"\
    )\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array and returns the number\
    \ of elements that are not equal to each element in the array.", "    \n    primes\
    \ = primes_up_to_n(n)\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[prime", "    if n < 0\n        error(\"count_up_to requires a non-negative\
    \ integer\")\n    end\n    \n    primes = Vector{Int64}()\n    prime_numbers =\
    \ prime_numbers(n)\n    \n    for p in prime_numbers\n        if p > n\n     \
    \       push!(primes, p)\n        end\n    end\n    \n    primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nProblem 7\nImplement\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n < 0\n        error(\"count_up_to only\
    \ accepts non-negative integers\")\n    end\n    \n    primes = primes_list(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for prime in primes\n  \
    \      if prime > n\n            error(\"count_up_to only accepts non-negative\
    \ integers\")\n        end\n        \n        prime_numbers = push!(prime_numbers,\
    \ prime)\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers < n]\n\
    \    \n    return prime_numbers\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of positive integers\
    \ in the array.\nFor example count_positive([1,2,3]) should return 3.\nFor example\
    \ count_positive([1,-2,3]) should return 2.", "    if n < 2\n        []\n    else\n\
    \        primes = prime_numbers(n)\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = primes[primes <= n]\n        primes = primes[primes <= n]\n   \
    \     primes = prime", "    if n < 2\n        return Vector{Int64}()\n    end\n\
    \    \n    primes = primes_up_to_n(n)\n    \n    primes_less_than = primes[2:end]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ ", "    if n\
    \ < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n    \n\
    \    primes = Vector{Int64}()\n    \n    for p in primes\n        if p*p > n\n\
    \            push!(primes, p)\n        end\n    end\n    \n    primes = primes[2:end]\n\
    \    \n    count = 0\n    \n    for p in primes\n        if n % p == 0\n     \
    \       push!(primes, p)\n            count += 1\n        end\n    end\n    \n\
    \    primes = primes[2:end]\n    \n    push!(primes, n)\n    \n    return primes\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the numbers\
    \ in the array. \nFor example if the input array is [5, 7, 11, 13, 17] then the\
    \ output should be [1, 1, 2, 1, 1, 1]", "    if n < 1 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ primes = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n", "    primes\
    \ = prime_list_generator()\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = ", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array of numbers and returns the sum of the squares of the numbers\
    \ in the array.\n    for example:\n    >>> square_sum([1,2,3,4])\n    25\n   \
    \ >>> square_sum([1,2,3])\n    6\n    >>> square_sum([])\n    0.0\n    \"\"\"",
  "    if n < 0 \n        return Vector{Int64}() \n    \n    primes = primes_up_to_n(n)\
    \ \n    \n    prime_numbers = Vector{Int64}() \n    \n    for p in primes \n \
    \       if p > n \n            prime_numbers = prime_numbers + [p] \n        else\
    \ \n            break \n    \n    return prime_numbers \nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n == 0\n        Vector{}\n    else\n  \
    \      primes = prime_numbers(n)\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = ", "    if n < 0\n        return Vector{Int64}()\n    \n    primes\
    \ = primes_up_to(n)\n    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than\
    \ = primes_less_than.filter(x -> x < n)\n    \n    primes_less_than = primes_less_than.filter(x\
    \ -> x % 2 != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x\
    \ % 3 != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x % 5 !=\
    \ 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x % 7 != 0)\n\
    \    \n    primes_less_than = primes_less_than.filter(x -> x % 11 != 0)\n    \n\
    \    primes_less_than = primes_less_than.filter(x -> x % 13 != 0)\n    \n    primes_less_than\
    \ = primes_less_than.filter(x -> x % 17 != 0)\n    \n    primes_less_than = primes_less_than.filter(x\
    \ -> x % 19 != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x\
    \ % 23 != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x % 29\
    \ != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x % 31 != 0)\n\
    \    \n    primes_less_than = primes_less_than.filter(x -> x % 37 != 0)\n    \n\
    \    primes_less_than = primes_less_than.filter(x -> x % 41 != 0)\n    \n    primes_less_than\
    \ = primes_less_than.filter(x -> x % 43 != 0)\n    \n    primes_less_than = primes_less_than.filter(x\
    \ -> x % 47 != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x\
    \ % 51 != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x % 55\
    \ != 0)\n    \n    primes_less_than = primes_less_than.filter(x -> x % 59 != 0)\n\
    \    \n    primes_less_than = primes_less_than.filter(x -> x % 63 != 0)\n    \n\
    \    primes_less_than = primes_less_than.filter(x -> x % 67 != 0)\n    \n    primes_less_than\
    \ = primes_less_than.filter(x -> ", "    if n < 1 \n        return Vector{Int64}()\
    \ \n    \n    primes = prime_numbers(n) \n    \n    primes = primes[2:end] \n\
    \    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes <=\
    \ n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes ", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        primes = prime_numbers(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]", "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n\
    \ - 1)\n        push!(count_up_to(n - 1), 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array and returns the number of unique\
    \ elements in the array.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should return 4.\nFor example count_unique([1,\
    \ 1, 2, 3]) should return 4.\nFor example count_unique([1, 1, 2, 3]) should return\
    \ 4.\nFor example count_unique([1, 1, 2, 3]) should ", "    if n == 0\n      \
    \  Vector{}\n    else\n        primes = primes_up_to_n(n)\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        prime", "    if n == 0\n        Vector{Int64}()\n    else\n \
    \       primes = prime_numbers(n)\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns an array of the integers from $0$ to $n$, inclusive.", "   \
    \ if n == 0\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        prime", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        count_up_to(n-1) + [n isprime ? 1 : 0]\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of integers less than $n$ that are prime numbers.\nFor example count_primes(5)\
    \ == 3.\nHint: use the function count_up_to to implement the function.", "   \
    \ if n < 0 \n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    primes = prime_list_generator(n)\n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nImplement a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$.", "    if n < 1 \n  \
    \      Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$. \nFor example count_primes(5) should\
    \ return 3.", "    if n < 0\n        error(\"count_up_to only accepts non-negative\
    \ integers\")\n    end\n    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[", "    if\
    \ n < 2\n        []\n    else\n        count_up_to(n-1) + [n isprime ? 1 : 0]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ and returns the number of elements that are not equal to each element in the\
    \ array.\nFor example if the array is [1, 1, 2, 3] the function should return\
    \ 3.\nFor example if the array is [1, 1, 2, 3] the function should return 3.",
  "    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    primes = Vector{Int64}()\n    \n    for p in primes\n        if p*p\
    \ > n\n            break\n        end\n    end\n    \n    primes = primes + primes\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n", "    \n    if n < 0\n        error(\"count_up_to:\
    \ n must be non-negative\")\n    end\n    \n    primes = prime_numbers(n)\n  \
    \  \n    counts = Vector{Int64}()\n    \n    for p in primes\n        if p > n\n\
    \            push!(counts, p)\n        else\n            push!(counts, p + 1)\n\
    \        end\n    end\n    \n    return counts\nend\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(0)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer $n$ and returns the number of prime numbers less\
    \ than or equal to $n$.", "    if n < 2\n        return Vector{Int64}[]\n    \n\
    \    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]", "    count_up_to\
    \ = []\n    if n <= 0\n        count_up_to\n    else\n        for i in 2:(n-1)\n\
    \            if isprime(i)\n                count_up_to\n            else\n  \
    \              count_up_to = [i] + count_up_to\n            end\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ == 3 because there are 3 prime numbers less than or equal to 5.", "    if n\
    \ == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= ", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = prime_numbers(n)\n        prime_numbers_less_than = prime_numbers_less_than(n)\n\
    \        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime", "    if n < 0 \n        error(\"count_up_to: n must\
    \ be non-negative\")\n    end\n    \n    primes = primes_up_to_n(n)\n    \n  \
    \  primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n\
    \    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n", "    if n < 1 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an non-negative integer and returns an array of the first\
    \ n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = primes_up_to_n(n)\n        prime_numbers = primes[2:end]\n \
    \       prime_numbers_less_than = prime_numbers[prime_numbers < n]\n        prime_numbers_less_than\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an integer $n$ and returns the first\
    \ $n$ prime numbers. \nFor example count_primes(5) should return [2, 3] since\
    \ 5 is the smallest prime number less than or equal to 5.\nHint: use the function\
    \ primes_up_to_n(n) defined above.", "    if n < 2\n        []\n    else\n   \
    \     primes = prime_numbers(n)\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code language=julia-1.3>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(0)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example if $n=10$ then your function should\
    \ return $5$.", "    if n < 2\n        return Vector{Int64}[]\n    end\n    \n\
    \    primes = Vector{Int64}[]\n    \n    for i in 2:n\n        if primes.contains(i)\n\
    \            continue\n        \n        primes = primes + i\n        \n     \
    \   if primes.contains(n)\n            primes = primes + n\n        end\n    end\n\
    \    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ should return 3.", "    if n < 0 \n        return [] \n    else if n == 0 \n\
    \        return Vector{Int64}() \n    else \n        primes = prime_numbers(n)\
    \ \n        prime_numbers_less_than = prime_numbers_less_than(n) \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n] \n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_", "    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than = primes[primes..end]\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x -> x !=\
    \ n)\n    \n    return prime_numbers_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of prime numbers\
    \ less than or equal to the length of the array.", "    if n < 2\n        return\
    \ Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_", "    if n < 0\n       \
    \ return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]", "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than the\
    \ largest integer in the array.\n    for example:\n    >>> count_positive([2,\
    \ 5, 3, -4, 0, 0])\n    4\n    >>> count_positive([2, 5, 3, -4, 0, 0])\n    0\n\
    \    >>> count_positive([2, 5, 3, -4, 0, 0])\n    0\n    \"\"\"", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) + [n isprime\
    \ ? 1 : 0] \n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(1)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nImplement a function that takes\
    \ an integer $n$ and returns the number of prime numbers less than or equal to\
    \ $n$.\n    for example:\n    >>> count_primes(5)\n    2\n    >>> count_primes(11)\n\
    \    3\n    >>> count_primes(0)\n    0\n    >>> count_primes(20)\n    3\n    >>>\
    \ count_primes(1)\n    1\n    >>> count_primes(18)\n    2\n    \"\"\"", "    if\
    \ n < 0\n        return Vector{}\n    \n    primes = prime_numbers(n)\n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    ", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array and returns the number\
    \ of elements that are not equal to zero.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n - 1) + [n - 1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of prime numbers\
    \ less than or equal to the length of the array.\n    for example:\n    >>> count_primes([2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n    6\n    >>> count_primes([2, 3, 5, 7, 11, 13,\
    \ 17])\n    5\n    >>> count_primes([2, 3, 5, 7, 11, 13, 17, 19])\n    6\n   \
    \ >>> count_primes([])\n    0\n    >>> count_primes([1])\n    1\n    \"\"\"",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of positive integers that are less than the \n    length\
    \ of the array.\n    for example:\n    >>> count_positive([2, -1, 0, 3, -4, 5])\n\
    \    3\n    >>> count_positive([2, -1, 0, 3, -4, 5])\n    3\n    >>> count_positive([2,\
    \ -1, 0, 3, -4, 5])\n    3\n    \"\"\"", "    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>", "    if n < 2 \n        return [] \n    \n    primes\
    \ = prime_numbers(n) \n    \n    primes = primes[2:end] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    ", "    if n == 0 \n        Vector{Int64}() \n    else \n      \
    \  count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(0)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.0>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(18)\n</cell>\n<code language=julia-1.0>",
  "    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x -> x !=\
    \ 0)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x ->\
    \ x != 1)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 2)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 3)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 4)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 5)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 6)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 7)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 8)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 9)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 10)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 11)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 12)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 13)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 14)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 15)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 16)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 17)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 18)\n    \n    prime_numbers_less_than", "    if n < 0\n        error(\"\
    count_up_to called with negative number\")\n    end\n    if n == 0\n        return\
    \ []\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the number of prime numbers less than or equal to each\
    \ number in the array."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
