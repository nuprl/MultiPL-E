language: jl
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzw8erldn.jl:15\nin expression starting at\
    \ /tmp/tmpzw8erldn.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpla1yyt5a.jl:11\nin expression starting at\
    \ /tmp/tmpla1yyt5a.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]\n\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpopr9p480.jl:12\nin expression starting at\
    \ /tmp/tmpopr9p480.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\n\
    We can also filter by substrings, for example, by checking if one string contains\
    \ another substring. Let's see how we can do that.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_vshs_f.jl:12\nin expression starting at\
    \ /tmp/tmpu_vshs_f.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplcqukkue.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplcqukkue.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplcqukkue.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplcqukkue.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:19 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3: Filter a list of strings based on a regular expression\nWrite a function\
    \ that filters a list of strings based on a regular expression. \nThe function\
    \ should return a list of strings that match the regular expression. \nThe function\
    \ should ignore case when matching.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3bsxdne0.jl:19\nin expression starting at\
    \ /tmp/tmp3bsxdne0.jl:19\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for those that contain all given substrings\n\
    e.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8uxc_7p.jl:11\nin expression starting at\
    \ /tmp/tmpk8uxc_7p.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1t7ctsa1.jl:15\nin expression starting at\
    \ /tmp/tmp1t7ctsa1.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi304qgls.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpi304qgls.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: remove!\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpi304qgls.jl:13\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi304qgls.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi304qgls.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpi304qgls.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: remove!\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpi304qgls.jl:13\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi304qgls.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi304qgls.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpi304qgls.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: remove! not defined\n  Stacktrace:\n   [1]\
    \ filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main\
    \ /tmp/tmpi304qgls.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi304qgls.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxcq1wlt5.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxcq1wlt5.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpxcq1wlt5.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcq1wlt5.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcq1wlt5.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxcq1wlt5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpxcq1wlt5.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcq1wlt5.jl:17 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2csd7v7.jl:12\nin expression starting at\
    \ /tmp/tmpg2csd7v7.jl:12\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input list\
    \ of strings only for ones that do not contain given substring\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"bacd\", \"cde\", \"array\"]\n</text>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_c40ecg.jl:12\nin expression starting at\
    \ /tmp/tmpu_c40ecg.jl:12\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring()\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgr2u78ee.jl:19\nin expression starting at\
    \ /tmp/tmpgr2u78ee.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplcqukkue.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplcqukkue.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplcqukkue.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplcqukkue.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:19 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwnnsajcn.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpwnnsajcn.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpwnnsajcn.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwnnsajcn.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwnnsajcn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwnnsajcn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpwnnsajcn.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwnnsajcn.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9o5je9x.jl:11\nin expression starting at\
    \ /tmp/tmpa9o5je9x.jl:11\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters an\
    \ input list of strings only for ones that do not contain given substring\n  \
    \  >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlz7f1lw.jl:13\nin expression starting at\
    \ /tmp/tmpjlz7f1lw.jl:13\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring!\n\
    Modify an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for ones that contain given substring\nModify\
    \ an input list of strings only for one\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshk012rs.jl:13\nin expression starting at\
    \ /tmp/tmpshk012rs.jl:13\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of strings and a substring and returns the list of strings that\
    \ do not contain that substring. Test your function with some test cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc94hry86.jl:12\nin expression starting at\
    \ /tmp/tmpc94hry86.jl:12\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the string occurs in the string. For example, if the string is \"abcabc\", the\
    \ function should return 3.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblxk8pzy.jl:19\nin expression starting at\
    \ /tmp/tmpblxk8pzy.jl:19\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a string with only the first letter capitalized.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp446k_rqo.jl:11\nin expression starting at\
    \ /tmp/tmp446k_rqo.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .==.)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters a string for substrings containing only a given character.\
    \ For example, filter_by_character([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\") should return [\"abc\", \"bacd\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_lt9v27.jl:9\nin expression starting at /tmp/tmpo_lt9v27.jl:9\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0l5xrg9.jl:19\nin expression starting at\
    \ /tmp/tmpm0l5xrg9.jl:19\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wzl08n3.jl:11\nin expression starting at\
    \ /tmp/tmp5wzl08n3.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    e.g. filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\nshould\
    \ return [\"abc\", \"bacd\"]\nHint: use filter_by_substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfprfrovd.jl:11\nin expression starting at\
    \ /tmp/tmpfprfrovd.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwnnsajcn.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpwnnsajcn.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpwnnsajcn.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwnnsajcn.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwnnsajcn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwnnsajcn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpwnnsajcn.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwnnsajcn.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttgl1qxf.jl:11\nin expression starting at\
    \ /tmp/tmpttgl1qxf.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6tudpv0.jl:11\nin expression starting at\
    \ /tmp/tmpb6tudpv0.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn18uoais.jl:11\nin expression starting at\
    \ /tmp/tmpn18uoais.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters an input list of strings only\
    \ for those that contain given substring\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4l64tksf.jl:19\nin expression starting at\
    \ /tmp/tmp4l64tksf.jl:19\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9y2d1upy.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp9y2d1upy.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9y2d1upy.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y2d1upy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9y2d1upy.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9y2d1upy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9y2d1upy.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y2d1upy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/shar"
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns all strings that contain\
    \ the substring. \nWrite a second function that takes a vector of strings and\
    \ a substring and returns the strings that do not contain the substring. \nWrite\
    \ a third function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a fourth function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a fifth function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a sixth function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a seventh function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a eighth function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a ninth function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a tenth function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a eleventh function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a twelfth function that takes a vector of strings and a substring and returns\
    \ the strings that contain the substring and do not contain the substring. \n\
    Write a thirteenth function that takes a vector of strings and a substring and\
    \ returns the strings that contain the substring and do not contain the substring.\
    \ \nWrite a fourteenth function that takes a vector of strings and a substring\
    \ and returns the strings that contain the substring and do not contain the substring.\
    \ \nWrite a fifteenth function that takes a vector of strings and a substring\
    \ and returns the strings that contain the substring and do not contain the substring.\
    \ \nWrite a sixteenth function that takes a vector of strings and a substring\
    \ and returns the strings that contain the substring and do not contain the substring.\
    \ \nWrite a seventeenth function that takes a vector of strings and a substring\
    \ and returns the strings that contain the substring and do not contain the substring.\
    \ \nWrite a eighteenth function that takes a vector of strings and a substring\
    \ and returns the strings that contain the substring and do not contain the substring.\
    \ \nWrite a nineteenth \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpregum9a8.jl:11\nin expression starting at\
    \ /tmp/tmpregum9a8.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a string with all the characters in lowercase and\
    \ with spaces replaced by underscores.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4yuwdnf.jl:12\nin expression starting at\
    \ /tmp/tmph4yuwdnf.jl:12\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfv14p6sp.jl:11\nin expression starting at\
    \ /tmp/tmpfv14p6sp.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"i\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"l\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"o\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65cdndlb.jl:18\nin expression starting at\
    \ /tmp/tmp65cdndlb.jl:18\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters input list of strings only for those that contain given\
    \ substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprb0gmeuo.jl:12\nin expression starting at\
    \ /tmp/tmprb0gmeuo.jl:12\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame for rows that contain\
    \ a given substring\nWrite a function that filters a DataFrame for rows that contain\
    \ a given substring. For example, given the following DataFrame:\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8rye8sz.jl:19\nin expression starting at\
    \ /tmp/tmpb8rye8sz.jl:19\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"t\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"u\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"v\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ga3vs7t.jl:13\nin expression starting at\
    \ /tmp/tmp5ga3vs7t.jl:13\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filtering\
    \ by substring\nWrite a function that filters an input list of strings only for\
    \ ones that contain given substring\nWrite a test that checks that your function\
    \ works as expected\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\nWrite a test that checks that\
    \ your function works as expected\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgjz47yk.jl:12\nin expression starting at\
    \ /tmp/tmpwgjz47yk.jl:12\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a list of all characters that are not in the given\
    \ string. For example, given \"abc\", it should return [\"b\", \"c\", \"d\"].\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1jj3cdr.jl:11\nin expression starting at\
    \ /tmp/tmpd1jj3cdr.jl:11\n"
  stdout: ''
  timestamp: 1659822818
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_fbf6sh.jl:11\nin expression starting at\
    \ /tmp/tmpz_fbf6sh.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"ba\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeq1tjht9.jl:18\nin expression starting at\
    \ /tmp/tmpeq1tjht9.jl:18\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3: Filtering by substrings\nWrite a function that filters an\
    \ input list of strings only for ones that contain given substrings\ne.g. filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\")\nshould return [\"\
    abc\", \"bacd\", \"array\"]\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx99yqdqt.jl:17\nin expression starting at\
    \ /tmp/tmpx99yqdqt.jl:17\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a boolean indicating whether it contains only letters.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6f_e0ia.jl:11\nin expression starting at\
    \ /tmp/tmpk6f_e0ia.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplcqukkue.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplcqukkue.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplcqukkue.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplcqukkue.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:19 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x,substring), strings)\n    \n \
    \   return strings\nend\n</cell>\n<text>\nExercise 3: Filtering by substring\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n    [\"bacd\", \"cde\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\"\
    )\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"bacd\")\n    [\"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14edijno.jl:13\nin expression starting at\
    \ /tmp/tmp14edijno.jl:13\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_vnltel.jl:11\nin expression starting at\
    \ /tmp/tmp0_vnltel.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0s8__fjx.jl:17\nin expression starting at\
    \ /tmp/tmp0s8__fjx.jl:17\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and a vector of substrings and returns a vector of strings that only\
    \ contain substrings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi99vehxq.jl:18\nin expression starting at\
    \ /tmp/tmpi99vehxq.jl:18\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a boolean indicating whether that string is a valid\
    \ Julia identifier. \nThe function should return false for invalid identifiers\
    \ and true for valid identifiers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkk1gag1.jl:11\nin expression starting at\
    \ /tmp/tmptkk1gag1.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9y2d1upy.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp9y2d1upy.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9y2d1upy.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y2d1upy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9y2d1upy.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9y2d1upy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9y2d1upy.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y2d1upy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/shar"
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, substring .== 1)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters input list for strings that do not contain given substring\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    f\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"i\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    k\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"n\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1b36e6tg.jl:11\nin expression starting at\
    \ /tmp/tmp1b36e6tg.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a substring\
    \ that appears at least twice in a row. For example, given [\"abc\", \"bacd\"\
    , \"cde\", \"array\", \"ab\", \"ab\", \"ab\"], return [\"abc\", \"bacd\", \"array\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5i8l6a0b.jl:12\nin expression starting at\
    \ /tmp/tmp5i8l6a0b.jl:12\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(substring,x), strings)\n    \n \
    \   return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpckumg13r.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpckumg13r.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpckumg13r.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpckumg13r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpckumg13r.jl:20\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpckumg13r.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpckumg13r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpckumg13r.jl:21\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpckumg13r.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpckumg13r.jl:17\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1378xplo.jl:11\nin expression starting at\
    \ /tmp/tmp1378xplo.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list of strings only\
    \ for ones that do not contain given substring\nThe opposite of filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24dk45ts.jl:11\nin expression starting at\
    \ /tmp/tmp24dk45ts.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for those that contain given\
    \ substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n    []\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawz6pyum.jl:13\nin expression starting at\
    \ /tmp/tmpawz6pyum.jl:13\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters strings by length\nHint: use filter_by_substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jv0a0qr.jl:11\nin expression starting at\
    \ /tmp/tmp7jv0a0qr.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822818
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(substring,x),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings containing only the strings that contain the\
    \ substring. \nFor example, if the input vector is [\"abc\", \"bacd\", \"cde\"\
    , \"array\"] and the substring is \"a\", then the output vector should be [\"\
    abc\", \"bacd\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hzbg3m2.jl:15\nin expression starting at\
    \ /tmp/tmp5hzbg3m2.jl:15\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter by substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4r3r8ek.jl:11\nin expression starting at\
    \ /tmp/tmpq4r3r8ek.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822818
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822818
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should return a new\
    \ DataFrame containing only rows that contain the given substring. \nThe function\
    \ should take as input a DataFrame and a substring as strings and return a DataFrame\
    \ containing only rows that contain the given substring.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0v7vfa76.jl:12\nin expression starting at\
    \ /tmp/tmp0v7vfa76.jl:12\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = copy(strings)\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaovtvtge.jl:19\nin expression starting at\
    \ /tmp/tmpaovtvtge.jl:19\n"
  stdout: ''
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgn3iuwmm.jl:12\nin expression starting at\
    \ /tmp/tmpgn3iuwmm.jl:12\n"
  stdout: ''
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9y2d1upy.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp9y2d1upy.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9y2d1upy.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y2d1upy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9y2d1upy.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9y2d1upy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9y2d1upy.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y2d1upy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/shar"
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvliklde5.jl:11\nin expression starting at\
    \ /tmp/tmpvliklde5.jl:11\n"
  stdout: ''
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ba\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"cde\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"array\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"ba\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptsbdyfby.jl:19\nin expression starting at\
    \ /tmp/tmptsbdyfby.jl:19\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes a list of strings\
    \ and a substring and returns all strings that contain that substring. Test your\
    \ function with different inputs.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgt485ce0.jl:11\nin expression starting at\
    \ /tmp/tmpgt485ce0.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if contains(s,\
    \ substring)\n            delete!(s, substring)\n        end\n    end\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a substring and returns the number of strings\
    \ that satisfy the filter. For example, given [\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", the function should return 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudrvb7tx.jl:19\nin expression starting at\
    \ /tmp/tmpudrvb7tx.jl:19\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomg5lof7.jl:13\nin expression starting at\
    \ /tmp/tmpomg5lof7.jl:13\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxcq1wlt5.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxcq1wlt5.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpxcq1wlt5.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcq1wlt5.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcq1wlt5.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxcq1wlt5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpxcq1wlt5.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcq1wlt5.jl:17 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfy8lti6q.jl:13\nin expression starting at\
    \ /tmp/tmpfy8lti6q.jl:13\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns a string with all the characters in\
    \ lowercase and uppercase removed. \nFor example, if the input string is \"Hello\
    \ World\", the output should be \"hEllo wOrlD\".\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ng_bd5i.jl:19\nin expression starting at\
    \ /tmp/tmp8ng_bd5i.jl:19\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\nNow let's\
    \ filter our input list of strings by the substrings we already have in our dictionary.\
    \ We'll use filter_by_substring() to do this.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaz_h5aj3.jl:12\nin expression starting at\
    \ /tmp/tmpaz_h5aj3.jl:12\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpm8k2d446.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpm8k2d446.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::Vector{String}, ::String)\n  Closest candidates are:\n  \
    \  delete!(!Matched::IdDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at ~/.conda/envs/polyglot/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpm8k2d446.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8k2d446.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm8k2d446.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm8k2d446.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::Vector{String}, ::String)\n  Closest candidates are:\n  \
    \  delete!(!Matched::IdDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at ~/.conda/envs/polyglot/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpm8k2d446.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8k2d446.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level "
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomg5lof7.jl:13\nin expression starting at\
    \ /tmp/tmpomg5lof7.jl:13\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a substring and returns the number of times the substring occurs in the input\
    \ list. Test it on a list of strings that contains only \"a\" and \"b\". Test\
    \ it on a list of strings that contains \"a\", \"b\", \"c\" and \"d\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_981r5h.jl:18\nin expression starting at\
    \ /tmp/tmp1_981r5h.jl:18\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the substring.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8yzg8bq.jl:12\nin expression starting at\
    \ /tmp/tmpi8yzg8bq.jl:12\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .==)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for those that contain given\
    \ substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\"\
    )\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"e\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"g\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"h\")\n    []\n    >>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"i\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"j\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvb0n1mtc.jl:9\nin expression starting at /tmp/tmpvb0n1mtc.jl:9\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomg5lof7.jl:13\nin expression starting at\
    \ /tmp/tmpomg5lof7.jl:13\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a regular expression. \nThe function should take two arguments:\
    \ a string and a regular expression. \nThe function should return a list of strings\
    \ that match the regular expression. \nThe function should ignore case. \nThe\
    \ function should ignore leading and trailing whitespace. \nThe function should\
    \ ignore leading and trailing punctuation. \nThe function should ignore leading\
    \ and trailing digits. \nThe function should ignore leading and trailing alphanumeric\
    \ characters. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing digits. \nThe function should ignore leading and\
    \ trailing alphanumeric characters. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore leading and trailing punctuation. \n\
    The function should ignore leading and trailing digits. \nThe function should\
    \ ignore leading and trailing alphanumeric characters. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing digits. \nThe\
    \ function should ignore leading and trailing alphanumeric characters. \nThe function\
    \ should ignore leading and trailing whitespace. \nThe function should ignore\
    \ leading and trailing punctuation. \nThe function should ignore leading and trailing\
    \ digits. \nThe function should ignore leading and trailing alphanumeric characters.\
    \ \nThe function should ignore leading and trailing whitespace. \nThe function\
    \ should ignore leading and trailing punctuation. \nThe function should ignore\
    \ leading and trailing digits. \nThe function should ignore leading and trailing\
    \ alphanumeric characters. \nThe function should ignore leading and trailing whitespace.\
    \ \nThe function should ignore leading and trailing punctuation. \nThe function\
    \ should ignore leading and trailing digits. \nThe function should ignore leading\
    \ and trailing alphanumeric characters. \nThe function should ignore leading and\
    \ trailing whitespace. \nThe function should ignore leading and trailing punctuation.\
    \ \nThe function should ignore leading and trailing digits. \nThe function should\
    \ ignore leading and trailing alphanumeric characters. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing digits. \nThe\
    \ function should ignore leading and trailing alphanumeric characters. \nThe function\
    \ should ignore leading and trailing whitespace. \nThe function should ignore\
    \ leading and trailing punctuation. \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpta8066lv.jl:12\nin expression starting at\
    \ /tmp/tmpta8066lv.jl:12\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and a substring and returns a vector of strings that only contain\
    \ the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne1uzj43.jl:13\nin expression starting at\
    \ /tmp/tmpne1uzj43.jl:13\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, substring .== true)]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefdjx630.jl:10\nin expression starting at\
    \ /tmp/tmpefdjx630.jl:10\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttgl1qxf.jl:11\nin expression starting at\
    \ /tmp/tmpttgl1qxf.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that do not contain the substring. Test it on\
    \ some examples:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3jx5qat.jl:19\nin expression starting at\
    \ /tmp/tmpv3jx5qat.jl:19\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the substring.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8luhu2h.jl:12\nin expression starting at\
    \ /tmp/tmpm8luhu2h.jl:12\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters strings by a regular expression\n\
    The function should take two arguments: a list of strings and a regular expression\n\
    The function should return a list of strings that match the regular expression\n\
    The function should ignore case when matching strings\nThe function should ignore\
    \ whitespace when matching strings\nThe function should ignore non-printable characters\
    \ when matching strings\nThe function should ignore non-ASCII characters when\
    \ matching strings\nThe function should ignore non-printable characters when matching\
    \ strings\nThe function should ignore non-ASCII characters when matching strings\n\
    The function should ignore non-printable characters when matching strings\nThe\
    \ function should ignore non-ASCII characters when matching strings\nThe function\
    \ should ignore non-printable characters when matching strings\nThe function should\
    \ ignore non-ASCII characters when matching strings\nThe function should ignore\
    \ non-printable characters when matching strings\nThe function should ignore non-ASCII\
    \ characters when matching strings\nThe function should ignore non-printable characters\
    \ when matching strings\nThe function should ignore non-ASCII characters when\
    \ matching strings\nThe function should ignore non-printable characters when matching\
    \ strings\nThe function should ignore non-ASCII characters when matching strings\n\
    The function should ignore non-printable characters when matching strings\nThe\
    \ function should ignore non-ASCII characters when matching strings\nThe function\
    \ should ignore non-printable characters when matching strings\nThe function should\
    \ ignore non-ASCII characters when matching strings\nThe function should ignore\
    \ non-printable characters when matching strings\nThe function should ignore non-ASCII\
    \ characters when matching strings\nThe function should ignore non-printable characters\
    \ when matching strings\nThe function should ignore non-ASCII characters when\
    \ matching strings\nThe function should ignore non-printable characters when matching\
    \ strings\nThe function should ignore non-ASCII characters when matching strings\n\
    The function should ignore non-printable characters when matching strings\nThe\
    \ function should ignore non-ASCII characters when matching strings\nThe function\
    \ should ignore non-printable characters when matching strings\nThe function should\
    \ ignore non-ASCII characters when matching strings\nThe function should ignore\
    \ non-printable characters when matching strings\nThe function should ignore non-ASCII\
    \ characters when matching strings\nThe function should ignore non-printable characters\
    \ when matching strings\nThe function should ignore non-ASCII characters when\
    \ matching strings\nThe function should ignore non-printable characters when matching\
    \ strings\nThe function should ignore non-ASCII \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_4wv1yi.jl:19\nin expression starting at\
    \ /tmp/tmp8_4wv1yi.jl:19\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for those that contain given substring\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\
    \    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ab\")\n    [\"abc\", \"bacd\", \"array\"]\n   \
    \ >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n \
    \   [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"bc\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"d\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8l4z9_6.jl:11\nin expression starting at\
    \ /tmp/tmpv8l4z9_6.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplcqukkue.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplcqukkue.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplcqukkue.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplcqukkue.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:19 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2: filter_by_substring()\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substring\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmpah8lv.jl:17\nin expression starting at\
    \ /tmp/tmpsmpah8lv.jl:17\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter an\
    \ input list of strings only for ones that do not contain given substring\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49izuptt.jl:13\nin expression starting at\
    \ /tmp/tmp49izuptt.jl:13\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxcq1wlt5.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxcq1wlt5.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpxcq1wlt5.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcq1wlt5.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcq1wlt5.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxcq1wlt5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpxcq1wlt5.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcq1wlt5.jl:17 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that filters an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1nqh61i.jl:11\nin expression starting at\
    \ /tmp/tmpz1nqh61i.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"ab\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"ba\")\n    [\"abc\", \"bacd\", \"cde\", \"array\"]\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n\
    \    [\"abc\", \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"cd\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"de\")\n    [\"abc\", \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"array\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnb4nxclr.jl:12\nin expression starting at\
    \ /tmp/tmpnb4nxclr.jl:12\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_qedjsj.jl:13\nin expression starting at\
    \ /tmp/tmp3_qedjsj.jl:13\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_not_substring([],\
    \ \"a\")\n[]\n>>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n[\"cde\", \"array\"]\n>>> filter_by_not_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\"]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne1hx1b4.jl:11\nin expression starting at\
    \ /tmp/tmpne1hx1b4.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings containing only the strings that contain the substring. Test your\
    \ function with some example strings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj1jy8mu.jl:19\nin expression starting at\
    \ /tmp/tmpsj1jy8mu.jl:19\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9o5je9x.jl:11\nin expression starting at\
    \ /tmp/tmpa9o5je9x.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and a vector of strings as inputs and returns a vector containing the number\
    \ of times the strings in the first vector appear in the second vector. For example,\
    \ given the following input:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxu1ut3a0.jl:11\nin expression starting at\
    \ /tmp/tmpxu1ut3a0.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x,substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that filters an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dh60a9l.jl:11\nin expression starting at\
    \ /tmp/tmp2dh60a9l.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplri2zb3k.jl:11\nin expression starting at\
    \ /tmp/tmplri2zb3k.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<text>\nExercise 9: filter_by_substring\nWrite\
    \ a function that filters an input list of strings only for ones that contain\
    \ given substring\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\"\
    , \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4ubk9he.jl:13\nin expression starting at\
    \ /tmp/tmpz4ubk9he.jl:13\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(substring,x), strings)\n    \n \
    \   return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpckumg13r.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpckumg13r.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpckumg13r.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpckumg13r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpckumg13r.jl:20\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpckumg13r.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpckumg13r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpckumg13r.jl:21\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpckumg13r.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpckumg13r.jl:17\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gf24wg_.jl:13\nin expression starting at\
    \ /tmp/tmp4gf24wg_.jl:13\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], \"\
    a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_egi7u4j.jl:11\nin expression starting at\
    \ /tmp/tmp_egi7u4j.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyfxbv_pu.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpyfxbv_pu.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::Bool)\n  Closest\
    \ candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)}, ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2318\n\
    \    findall(!Matched::Function, ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2317\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpyfxbv_pu.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyfxbv_pu.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyfxbv_pu.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpyfxbv_pu.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::Bool)\n  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2318\n    findall(!Matched::Function,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2317\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    ...\n \
    \ Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpyfxbv_pu.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyfxbv_pu.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf"
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuse0_xcl.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpuse0_xcl.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpuse0_xcl.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuse0_xcl.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuse0_xcl.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuse0_xcl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  type String has no\
    \ field contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpuse0_xcl.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuse0_xcl.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuse0_xcl.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuse0_xcl.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  type String has no field contains\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpuse0_xcl.jl:12\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpuse0_xcl.jl:27 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.co"
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk10m78fu.jl:13\nin expression starting at\
    \ /tmp/tmpk10m78fu.jl:13\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters input list for\
    \ strings that do not contain given substring\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7bhyzbdy.jl:12\nin expression starting at\
    \ /tmp/tmp7bhyzbdy.jl:12\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filtering by substring\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substring\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\"\
    , \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppf2on_od.jl:11\nin expression starting at\
    \ /tmp/tmppf2on_od.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only those strings that contain the substring. Test your function with some\
    \ example strings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpascoa687.jl:12\nin expression starting at\
    \ /tmp/tmpascoa687.jl:12\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgn3iuwmm.jl:12\nin expression starting at\
    \ /tmp/tmpgn3iuwmm.jl:12\n"
  stdout: ''
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as arguments\
    \ and returns a vector of the same length with all strings containing all strings\
    \ in the first vector. For example, if the first vector is [\"a\", \"b\", \"c\"\
    ] and the second vector is [\"a\", \"b\", \"c\", \"d\"], then the function should\
    \ return [\"a\", \"b\", \"c\", \"d\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4qji1u7.jl:13\nin expression starting at\
    \ /tmp/tmpv4qji1u7.jl:13\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain given substring\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\
    \    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ab\")\n    [\"abc\", \"bacd\", \"array\"]\n   \
    \ >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n \
    \   [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"bacd\")\n    [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdca\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaab\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaaba\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaab\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaaba\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaabaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaabaaa\")\n    []\n    >>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92cay1uv.jl:11\nin expression starting at\
    \ /tmp/tmp92cay1uv.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxv_z8fa.jl:19\nin expression starting at\
    \ /tmp/tmpaxv_z8fa.jl:19\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters strings by their length. \n\
    For example, given a list of strings:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11rym0qt.jl:19\nin expression starting at\
    \ /tmp/tmp11rym0qt.jl:19\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an input list of strings only for those that\
    \ contain all given substrings\ne.g. filter_by_all_substrings([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\"\
    , \"array\"]\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq56omnzq.jl:15\nin expression starting at\
    \ /tmp/tmpq56omnzq.jl:15\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if string.contains(substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5gmtfpk.jl:18\nin expression starting at\
    \ /tmp/tmpz5gmtfpk.jl:18\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8oiketab.jl:12\nin expression starting at\
    \ /tmp/tmp8oiketab.jl:12\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpm8k2d446.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpm8k2d446.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::Vector{String}, ::String)\n  Closest candidates are:\n  \
    \  delete!(!Matched::IdDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at ~/.conda/envs/polyglot/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpm8k2d446.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8k2d446.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm8k2d446.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm8k2d446.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching delete!(::Vector{String}, ::String)\n  Closest candidates are:\n  \
    \  delete!(!Matched::IdDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at ~/.conda/envs/polyglot/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpm8k2d446.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8k2d446.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level "
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(substring(x),\
    \ x), strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), \nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3w_70wwz.jl:72\nin expression starting at\
    \ /tmp/tmp3w_70wwz.jl:72\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptudl2m1r.jl:19\nin expression starting at\
    \ /tmp/tmptudl2m1r.jl:19\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, x -> contains(x, substring))]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings containing only the strings that contain the substring. \nFor example,\
    \ given [\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", the function should return\
    \ [\"abc\", \"bacd\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx790ygmj.jl:11\nin expression starting at\
    \ /tmp/tmpx790ygmj.jl:11\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88buiopz.jl:76\nin expression starting at\
    \ /tmp/tmp88buiopz.jl:76\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoh97rdm9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoh97rdm9.jl:1\n\
    in expression starting at /tmp/tmpoh97rdm9.jl:1\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that filters input strings based on whether they\
    \ contain given substrings\nHint: Use filter_by_substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjb3yg32.jl:18\nin expression starting at\
    \ /tmp/tmpcjb3yg32.jl:18\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    e.g. filter_by_not_containing([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhblfqis.jl:12\nin expression starting at\
    \ /tmp/tmprhblfqis.jl:12\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], \"\
    a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_egi7u4j.jl:11\nin expression starting at\
    \ /tmp/tmp_egi7u4j.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a new string where all occurrences of \"a\" have\
    \ been replaced by \"b\".\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdjgcfiz0.jl:12\nin expression starting at\
    \ /tmp/tmpdjgcfiz0.jl:12\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(substring,x), strings)\n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpki_my9u2.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpki_my9u2.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki_my9u2.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki_my9u2.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpki_my9u2.jl:19\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki_my9u2.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki_my9u2.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpki_my9u2.jl:20\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpki_my9u2.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpki_my9u2.jl:16\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain all given substrings\n\
    e.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeg2fxru5.jl:11\nin expression starting at\
    \ /tmp/tmpeg2fxru5.jl:11\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptltl3tf9.jl:13\nin expression starting at\
    \ /tmp/tmptltl3tf9.jl:13\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\ne.g. filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpov5ial9a.jl:13\nin expression starting at\
    \ /tmp/tmpov5ial9a.jl:13\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpls8vwg5b.jl:15\nin expression starting at\
    \ /tmp/tmpls8vwg5b.jl:15\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    substring = lowercase(substring)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1y2du1l_.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1y2du1l_.jl:1\n\
    in expression starting at /tmp/tmp1y2du1l_.jl:1\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gf24wg_.jl:13\nin expression starting at\
    \ /tmp/tmp4gf24wg_.jl:13\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings containing only those\
    \ strings that end with a given suffix. For example, given [\"abc\", \"bacd\"\
    , \"cde\", \"array\", \"abd\"], return [\"abc\", \"bacd\", \"array\"].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz71jw6vh.jl:11\nin expression starting at\
    \ /tmp/tmpz71jw6vh.jl:11\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]\n\
    >>> \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq01mrab4.jl:11\nin expression starting at\
    \ /tmp/tmpq01mrab4.jl:11\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgn3iuwmm.jl:12\nin expression starting at\
    \ /tmp/tmpgn3iuwmm.jl:12\n"
  stdout: ''
  timestamp: 1659822820
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters input strings\
    \ based on whether they contain any of a list of substrings.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwb0f1mdr.jl:19\nin expression starting at\
    \ /tmp/tmpwb0f1mdr.jl:19\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3: Filter a\
    \ list for strings that do not contain given substring\nWrite a function that\
    \ filters a list for strings that do not contain given substring. For example,\
    \ given a list of strings:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphszj0302.jl:19\nin expression starting at\
    \ /tmp/tmphszj0302.jl:19\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the number of times the substring appears in the string.\
    \ For example, if the input string is \"abcabc\", the output should be 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj68op4tf.jl:12\nin expression starting at\
    \ /tmp/tmpj68op4tf.jl:12\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for those that contain all given substrings\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\")\n[\"abc\", \"bacd\"\
    , \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\", \"b\", \"c\", \"d\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\")\n[\"abc\", \"bacd\"\
    , \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    )\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63z8cvc6.jl:19\nin expression starting at\
    \ /tmp/tmp63z8cvc6.jl:19\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    d\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    i\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    n\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"c\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplq42z28p.jl:11\nin expression starting at\
    \ /tmp/tmplq42z28p.jl:11\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nThis function\
    \ filters an input list of strings only for ones that contain given substring\n\
    The function filter_by_substring() takes in two arguments:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wtv5x5p.jl:11\nin expression starting at\
    \ /tmp/tmp_wtv5x5p.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0igf4jw.jl:13\nin expression starting at\
    \ /tmp/tmph0igf4jw.jl:13\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgfa2g0um.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgfa2g0um.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfa2g0um.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgfa2g0um.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgfa2g0um.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfa2g0um.jl:18 [inlined]\n\
    \   [4] macro"
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ all given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\", \"array\"\
    ]\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1j6pa6ue.jl:13\nin expression starting at\
    \ /tmp/tmp1j6pa6ue.jl:13\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of times the string appears\
    \ in the input string. \nFor example, the string \"abcabc\" appears 3 times in\
    \ the input string. \nThe string \"abcabc\" appears 4 times in the input string.\
    \ \nThe string \"abcabc\" appears 0 times in the input string. \nThe string \"\
    abcabc\" appears 0 times in the input string. \nThe string \"abcabc\" appears\
    \ 0 times in the input string. \nThe string \"abcabc\" appears 0 times in the\
    \ input string. \nThe string \"abcabc\" appears 0 times in the input string. \n\
    The string \"abcabc\" appears 0 times in the input string. \nThe string \"abcabc\"\
    \ appears 0 times in the input string. \nThe string \"abcabc\" appears 0 times\
    \ in the input string. \nThe string \"abcabc\" appears 0 times in the input string.\
    \ \nThe string \"abcabc\" appears 0 times in the input string. \nThe string \"\
    abcabc\" appears 0 times in the input string. \nThe string \"abcabc\" appears\
    \ 0 times in the input string. \nThe string \"abcabc\" appears 0 times in the\
    \ input string. \nThe string \"abcabc\" appears 0 times in the input string. \n\
    The string \"abcabc\" appears 0 times in the input string. \nThe string \"abcabc\"\
    \ appears 0 times in the input string. \nThe string \"abcabc\" appears 0 times\
    \ in the input string. \nThe string \"abcabc\" appears 0 times in the input string.\
    \ \nThe string \"abcabc\" appears 0 times in the input string. \nThe string \"\
    abcabc\" appears 0 times in the input string. \nThe string \"abcabc\" appears\
    \ 0 times in the input string. \nThe string \"abcabc\" appears 0 times in the\
    \ input string. \nThe string \"abcabc\" appears 0 times in the input string. \n\
    The string \"abcabc\" appears 0 times in the input string. \nThe string \"abcabc\"\
    \ appears 0 times in the input string. \nThe string \"abcabc\" appears 0 times\
    \ in the input \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_75zarq9.jl:19\nin expression starting at\
    \ /tmp/tmp_75zarq9.jl:19\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru0sf94o.jl:12\nin expression starting at\
    \ /tmp/tmpru0sf94o.jl:12\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters strings by a substring that occurs at the beginning of\
    \ the string. For example, given [\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    , the function should return [\"abc\", \"bacd\", \"array\"].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6nik64dp.jl:19\nin expression starting at\
    \ /tmp/tmp6nik64dp.jl:19\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter\
    \ a list of strings by a predicate function\nWrite a predicate function filter_by_predicate\
    \ that filters a list of strings based on a predicate function p (that takes an\
    \ element of the list and returns true or false).\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3p_9ti2e.jl:13\nin expression starting at\
    \ /tmp/tmp3p_9ti2e.jl:13\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplcqukkue.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplcqukkue.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplcqukkue.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplcqukkue.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:19 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 5\nWrite a function that filters input strings\
    \ based on whether they contain any of a list of substrings.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89arbgra.jl:12\nin expression starting at\
    \ /tmp/tmp89arbgra.jl:12\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter(x->contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns a new string with all the\
    \ characters in lowercase and all the characters in uppercase.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpauluoh4i.jl:15\nin expression starting at\
    \ /tmp/tmpauluoh4i.jl:15\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,substring),\
    \ strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if contains(strings[i], substring)\n            i += 1\n        else\n\
    \            deleteat!(strings, i)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes an input list of strings and a substring and returns a list of all strings\
    \ in the input list that contain the substring.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61bm4224.jl:22\nin expression starting at\
    \ /tmp/tmp61bm4224.jl:22\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1378xplo.jl:11\nin expression starting at\
    \ /tmp/tmp1378xplo.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters input list for strings that contain a given\
    \ substring and are longer than a given length. \nFor example, filter_by_length_and_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 2) should return [\"abc\", \"bacd\"\
    , \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8xv_oi8.jl:15\nin expression starting at\
    \ /tmp/tmpu8xv_oi8.jl:15\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings that only contain substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qxwebyv.jl:11\nin expression starting at\
    \ /tmp/tmp5qxwebyv.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplcqukkue.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmplcqukkue.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplcqukkue.jl:17\ntest set:\
    \ Error During Test at /tmp/tmplcqukkue.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplcqukkue.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplcqukkue.jl:19 [inlined]\n\
    \   [4] macro"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filtering\
    \ by substrings\nWrite a function that filters an input list of strings only for\
    \ ones that contain given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\"\
    , \"array\"]\nHint: use filter_by_substring\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyuji_o3u.jl:11\nin expression starting at\
    \ /tmp/tmpyuji_o3u.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Set()\n    for string in strings\n        if\
    \ string.contains(substring)\n            push!(filtered_strings, string)\n  \
    \      end\n    end\n    \n    return collect(filtered_strings)\nend\n</cell>\n\
    <text>\nExercise 3: Filtering by substrings\nWrite a function that filters an\
    \ input list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substrings\nWrite a function that filters an input list of strings only for\
    \ ones that do not contain given substrings\nWrite a function that filters an\
    \ input list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg69iw4w8.jl:18\nin expression starting at\
    \ /tmp/tmpg69iw4w8.jl:18\n"
  stdout: ''
  timestamp: 1659822827
