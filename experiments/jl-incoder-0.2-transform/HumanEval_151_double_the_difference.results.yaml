language: jl
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeekkfxdo.jl:28\nin expression starting at\
    \ /tmp/tmpeekkfxdo.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5t0y1qz.jl:28\nin expression starting at\
    \ /tmp/tmpm5t0y1qz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i * i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9znkff9d.jl:30\nin expression starting at\
    \ /tmp/tmp9znkff9d.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkpowhah5.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkpowhah5.jl:1\n\
    in expression starting at /tmp/tmpkpowhah5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if type(i) == Int\n                sum += i\n\
    \            elseif type(i) == Float64\n                sum += i*i\n         \
    \   else\n                throw(ArgumentError(\"Input must be a list of integers\
    \ or floats\"))\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdtupo0w.jl:32\nin expression starting at\
    \ /tmp/tmpvdtupo0w.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvib9604a.jl:25\nin expression starting at\
    \ /tmp/tmpvib9604a.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptuo8k7ks.jl:29\nin expression starting at\
    \ /tmp/tmptuo8k7ks.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i > 0\n                sum += i * i\n \
    \           else\n                sum += i\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the product of the numbers in the vector. \nIf the vector is empty,\
    \ return 1.\nIf the vector has only one number, return that number.\nIf the vector\
    \ has two numbers, return the product of the two numbers.\nIf the vector has more\
    \ than two numbers, return the product of the two numbers and the sum of the other\
    \ numbers.\nFor example, if the vector is [4, 3, 2], the function should return\
    \ 24.\nIf the vector is [-4, 3, 2], the function should return -24.\nIf the vector\
    \ is [4, 3, -2, 2], the function should return -14.\nIf the vector is [4, 3, -2,\
    \ -2, 4], the function should return -64.\nIf the vector is [4, 3, -2, -2, -2,\
    \ 4], the function should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2,\
    \ 4], the function should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2,\
    \ -2, 4], the function should return -96.\nIf the vector is [4, 3, -2, -2, -2,\
    \ -2, -2, -2, 4], the function should return -96.\nIf the vector is [4, 3, -2,\
    \ -2, -2, -2, -2, -2, -2, 4], the function should return -96.\nIf the vector is\
    \ [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should return -96.\n\
    If the vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should\
    \ return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ 4], the function should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should return -96.\nIf the\
    \ vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4], the\
    \ function should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should return -96.\nIf the\
    \ vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4],\
    \ the function should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should return -96.\n\
    If the vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, 4], the \nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnn79qz1.jl:29\nin expression starting at\
    \ /tmp/tmpjnn79qz1.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if type(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i * i \n        return sum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprig_gyw2.jl:29\nin expression starting at\
    \ /tmp/tmprig_gyw2.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0\n            sum += i * i\n\
    \        else\n            sum += i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdl6g2391.jl:26\nin expression starting at\
    \ /tmp/tmpdl6g2391.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k970_fj.jl:28\nin expression starting at\
    \ /tmp/tmp0k970_fj.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          else \n                sum -= i\n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95z388u3.jl:29\nin expression starting at\
    \ /tmp/tmp95z388u3.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ numbers and returns the product of the numbers in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\nFor example, given [5, 3, -2, 7,\
    \ 1, 9], return 120.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnf4zj4g.jl:29\nin expression starting at\
    \ /tmp/tmpwnf4zj4g.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n    for i\
    \ in lst \n        if isodd(i) \n            sum += i * i \n        else \n  \
    \          sum += i \n    return sum \nend \nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpnrfm3rh_.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnrfm3rh_.jl:1\n\
    in expression starting at /tmp/tmpnrfm3rh_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the product of all the numbers in the vector. \nIf the\
    \ vector is empty, return 0.\nIf the vector has only one number, return that number.\n\
    If the vector has two numbers, return the product of the two numbers.\nIf the\
    \ vector has three or more numbers, return the product of the numbers in the vector\
    \ in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyifsz7lk.jl:28\nin expression starting at\
    \ /tmp/tmpyifsz7lk.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvz09ca6.jl:29\nin expression starting at\
    \ /tmp/tmpmvz09ca6.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofb2ptoy.jl:29\nin expression starting at\
    \ /tmp/tmpofb2ptoy.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i)\n                sum += i\n\
    \            else \n                sum += i * i\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm9umbnw.jl:29\nin expression starting at\
    \ /tmp/tmpnm9umbnw.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x > 0\n            sum +=\
    \ x\n        else\n            sum -= x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list as an argument and returns\
    \ the number of elements in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7luiuts7.jl:27\nin expression starting at\
    \ /tmp/tmp7luiuts7.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
    \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpti_e1x94.jl:25\nin expression starting at\
    \ /tmp/tmpti_e1x94.jl:25\n"
  stdout: ''
