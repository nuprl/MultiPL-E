name: HumanEval_30_get_positive
language: jl
prompt: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
  \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
  \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
  \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
completions: ["    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\nget_negative",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_positive([-1, 2, -4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of positive numbers in a list.\nHint:\
    \ Use filter and length.", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x >= 0, l)\n    return positive\nend", "   \
    \ positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.3>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns all\
    \ numbers in the list that are divisible by 3\nHint: use filter", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x >= 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x >= 0, l)\n    return positive\nend", "   \
    \ positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.4>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x >= 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.4>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x >= 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.4>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ sum of the elements of a list.\nWrite a function that returns the product of\
    \ the elements of a list.\nWrite a function that returns the maximum of the elements\
    \ of a list.\nWrite a function that returns the minimum of the elements of a list.\n\
    Write a function that returns the absolute value of a number.", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive numbers in the list.\n\
    \    >>> get_positive_count([-1, 2, -4, 5, 6])\n    3\n    >>> get_positive_count([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    7\n    \"\"\"", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x >= 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.3>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x >= 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.4>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.3>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<text>\nget_negative", "    positive = filter(x -> x > 0, l)\n \
    \   return positive\nend", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.4>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x >= 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the list.\n>>> sum([1,\
    \ 2, 3, 4])\n10\n>>> sum([1, 2, -3, 4])\n-4\n>>> sum([-1, 2, -3, 4])\n4\n>>> sum([-1,\
    \ 2, -3, 4, 5])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6])\n-5\n>>> sum([-1, 2, -3, 4,\
    \ -5, 6, 7])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8])\n-5\n>>> sum([-1, 2, -3,\
    \ 4, -5, 6, -7, 8, -9])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10])\n-5\n\
    >>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11])\n-5\n>>> sum([-1, 2, -3, 4,\
    \ -5, 6, -7, 8, -9, 10, -11, 12])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9,\
    \ 10, -11, 12, 13])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12,\
    \ 13, 14])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, 13, 14,\
    \ 15])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, 13, 14, 15,\
    \ 16])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, 13, 14, 15,\
    \ 16, 17])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, 13, 14,\
    \ 15, 16, 17, 18])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10,\
    \ -11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6,\
    \ -7, 8, -9, 10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n-5\n>>> sum([-1,\
    \ 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\
    \ 22])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23])\n-5\n>>> sum([-1, 2, -3, 4, -5, 6, -7, 8, -9, ",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of numbers and returns the sum of the\
    \ numbers in the list.\nWrite a function that takes a list of numbers and returns\
    \ the product of the numbers in the list.\nWrite a function that takes a list\
    \ of numbers and returns the maximum of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the minimum of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the number of positive\
    \ numbers in the list.\nWrite a function that takes a list of numbers and returns\
    \ the number of negative numbers in the list.\nWrite a function that takes a list\
    \ of numbers and returns the number of zeros in the list.\nWrite a function that\
    \ takes a list of numbers and returns the number of numbers in the list that are\
    \ even.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are odd.\nWrite a function that takes a list of\
    \ numbers and returns the number of numbers in the list that are divisible by\
    \ 3.\nWrite a function that takes a list of numbers and returns the number of\
    \ numbers in the list that are divisible by 5.\nWrite a function that takes a\
    \ list of numbers and returns the number of numbers in the list that are divisible\
    \ by 7.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 11.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 15.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 17.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 21.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 25.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 29.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 31.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 35.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 40.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 45.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 50.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 55.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 60.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 65.\nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are divisible by 70.\nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are divisible\
    \ by 75.\nWrite a function that takes a list of numbers and returns the number\
    \ of ", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.3>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.3>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that returns the number of\
    \ positive numbers in a list.\n    >>> get_positive_count([-1, 2, -4, 5, 6])\n\
    \    3\n    >>> get_positive_count([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    6\n    \"\"\"", "    positive = filter(x -> x >= 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.4>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns only negative numbers in the list.\n>>> get_negative([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, 6]\n>>> get_negative([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [-5, -3, -3, 9, 123, 1]\n\"\"\"", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.4>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x >= 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x >= 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.3>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x >= 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>\n\
    get_positive([-1, 2, -4, 5, 6])\n</cell>\n<code language=julia-1.5>\nget_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers in the list.\n    >>> sum([1, 2, 3])\n \
    \   6\n    >>> sum([1, 2, -4, 5])\n    10\n    >>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10])\n    10\n    \"\"\"", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of positive numbers in a list.", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.4>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.4>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
