name: HumanEval_30_get_positive
language: jl
prompt: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
  \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
  \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
  \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
completions: ["    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\nget_negative",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_positive([-1, 2, -4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of positive numbers in a list.\nHint:\
    \ Use filter and length.", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x >= 0, l)\n    return positive\nend", "   \
    \ positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.3>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
