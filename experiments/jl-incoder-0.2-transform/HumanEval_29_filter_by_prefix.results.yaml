language: jl
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter\
    \ a DataFrame for rows that match a condition\nWrite a function that filters a\
    \ DataFrame for rows that match a condition. For example, suppose you have a DataFrame\
    \ with columns id and name, and you want to filter out all rows that have a name\
    \ that starts with \"A\". You could write a function like this:\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2lehhli.jl:21\nin expression starting at\
    \ /tmp/tmpd2lehhli.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo76guru2.jl:15\nin expression starting at\
    \ /tmp/tmpo76guru2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> startswith(x, prefix), strings)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(String[], String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtcgqtmb.jl:21\nin expression starting at\
    \ /tmp/tmpqtcgqtmb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters a vector of strings based on whether they start with\
    \ a given prefix.\nHint: use the filter_by_prefix function you wrote in exercise\
    \ 2.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwo9abgdp.jl:21\nin expression starting at\
    \ /tmp/tmpwo9abgdp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\
    \ \n        return strings\n    end\n    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if startswith(string, prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpdome17s5.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpdome17s5.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: remove!\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpdome17s5.jl:19\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdome17s5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdome17s5.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslzmvfvj.jl:11\nin expression starting at\
    \ /tmp/tmpslzmvfvj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"q\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_29ji524.jl:19\nin expression starting at\
    \ /tmp/tmp_29ji524.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bcd\", \"cde\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"\
    bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"e\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"h\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"k\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"n\")\n[\"abc\", \"bcd\", \"cde\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrlfaqxn.jl:21\nin expression starting at\
    \ /tmp/tmprrlfaqxn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkm3xsrvu.jl:11\nin expression starting at\
    \ /tmp/tmpkm3xsrvu.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter( x -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_j_6g43n.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp_j_6g43n.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_j_6g43n.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_j_6g43n.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters strings by a regular expression.\nThe function should take two arguments:\
    \ a string and a regular expression. The function should return a list of strings\
    \ that match the regular expression. \nThe function should ignore case. \nThe\
    \ function should ignore non-matching characters. \nThe function should ignore\
    \ empty strings. \nThe function should ignore non-alphanumeric characters. \n\
    The function should ignore non-matching characters. \nThe function should ignore\
    \ non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bepndy5.jl:11\nin expression starting at\
    \ /tmp/tmp4bepndy5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96ej4kd0.jl:19\nin expression starting at\
    \ /tmp/tmp96ej4kd0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"bcd\", \"cde\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"\
    bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"f\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"i\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"l\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmw6biabh.jl:21\nin expression starting at\
    \ /tmp/tmpmw6biabh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings )\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppoeqd7iz.jl:15\nin expression starting at\
    \ /tmp/tmppoeqd7iz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8qxp42h.jl:19\nin expression starting at\
    \ /tmp/tmpi8qxp42h.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> startswith(x, prefix), strings)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qfllcry.jl:21\nin expression starting at\
    \ /tmp/tmp4qfllcry.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix) == true\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqcqf4w1.jl:21\nin expression starting at\
    \ /tmp/tmpkqcqf4w1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp83ihyfca.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp83ihyfca.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83ihyfca.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83ihyfca.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"aby\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"abxyz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngnxtabr.jl:19\nin expression starting at\
    \ /tmp/tmpngnxtabr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings only for those that\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzw_zg2u.jl:19\nin expression starting at\
    \ /tmp/tmpqzw_zg2u.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a list of strings only for those that\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i6qyy3v.jl:19\nin expression starting at\
    \ /tmp/tmp1i6qyy3v.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters out the elements of a list that do not\
    \ start with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn41au84y.jl:19\nin expression starting at\
    \ /tmp/tmpn41au84y.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptw5pie8p.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmptw5pie8p.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptw5pie8p.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptw5pie8p.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822579
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> startswith(prefix, x), strings)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings that start with a given prefix.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphv49_6lu.jl:21\nin expression starting at\
    \ /tmp/tmphv49_6lu.jl:21\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9l6vx0hv.jl:21\nin expression starting at\
    \ /tmp/tmp9l6vx0hv.jl:21\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4f913beh.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp4f913beh.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4f913beh.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4f913beh.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822579
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphz47p2mq.jl:11\nin expression starting at\
    \ /tmp/tmphz47p2mq.jl:11\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a prefix and that removes the prefix from the string. For\
    \ example, if the prefix is \"a\" and the input string is \"abca\", the output\
    \ should be \"bc\".\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4nhb_7t.jl:19\nin expression starting at\
    \ /tmp/tmps4nhb_7t.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n \
    \   \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n  \
    \  \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n   \
    \ \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n \
    \   strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n  \
    \  strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n   \
    \ strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings =\
    \ filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x)\
    \ -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x) ->\
    \ startswith(String(x), prefix), strings)\n    \n    strings = filter((x) -> startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter((x) -> startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n \
    \   \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n  \
    \  \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n   \
    \ \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n \
    \   strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n  \
    \  strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n   \
    \ strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings =\
    \ filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x)\
    \ -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x) ->\
    \ startswith(String(x), prefix), strings)\n    \n    strings = filter((x) -> startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter((x) -> startswith(String(x), prefix),\
    \ strings)\n    \n\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp66wf690.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp66wf690.jl:1\n\
    in expression starting at /tmp/tmpp66wf690.jl:1\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu4dzrbct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpu4dzrbct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu4dzrbct.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu4dzrbct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu4dzrbct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659822579
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3: Filtering by prefix\nWrite\
    \ a function that filters an input list of strings only for ones that start with\
    \ a given prefix.\nFor example, given a list of strings:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfi3m7eq.jl:21\nin expression starting at\
    \ /tmp/tmpbfi3m7eq.jl:21\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp83ihyfca.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp83ihyfca.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83ihyfca.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83ihyfca.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters strings by a prefix, but only if the prefix is at the\
    \ start of the string. For example, filter_by_prefix_if_start([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\") should return [\"abc\", \"array\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwelextp.jl:21\nin expression starting at\
    \ /tmp/tmpqwelextp.jl:21\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    Write a function that filters an input list of strings only for ones that start\
    \ with a given prefix.\nThe function should return a copy of the input list with\
    \ the filtered strings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbi8mmam2.jl:19\nin expression starting at\
    \ /tmp/tmpbi8mmam2.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[beginswith(strings, prefix)]\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp5qkyjoll.jl:16\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    beginswith not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp5qkyjoll.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp5qkyjoll.jl:16 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp5qkyjoll.jl:15\ntest set: Error During Test at
    /tmp/tmp5qkyjoll.jl:17\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    beginswith not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp5qkyjoll.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp5qkyjoll.jl:17 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp5qkyjoll.jl:15\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters input strings based on whether they start with a given prefix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccidrauf.jl:13\nin expression starting at\
    \ /tmp/tmpccidrauf.jl:13\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments: the list of strings and the regular expression.\
    \ The function should return a new list of strings where the strings that match\
    \ the regular expression are removed.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwx6dy1ag.jl:19\nin expression starting at\
    \ /tmp/tmpwx6dy1ag.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter_by_prefix(filter(x -> startswith(prefix, x), strings), prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjg98j8rw.jl:19\nin expression starting at\
    \ /tmp/tmpjg98j8rw.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter_by_prefix(strings, prefix, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a prefix and suffix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnpztftv.jl:10\nin expression starting at\
    \ /tmp/tmpqnpztftv.jl:10\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdce\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpebd5nn.jl:21\nin expression starting at\
    \ /tmp/tmpgpebd5nn.jl:21\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for those that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabd\")\n[\"\
    abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabdc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcdcdeabdca\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdcab\")\n[\"abc\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdcabd\"\
    )\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabd\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovurpi16.jl:19\nin expression starting at\
    \ /tmp/tmpovurpi16.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings based on whether they end with\
    \ a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2c1wm20j.jl:19\nin expression starting at\
    \ /tmp/tmp2c1wm20j.jl:19\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a regular expression. For example, given a list of strings [\"abc\"\
    , \"bcd\", \"cde\", \"array\"], filter_by_regex([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"^a.*\") should return [\"abc\", \"array\"].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb65w43rp.jl:21\nin expression starting at\
    \ /tmp/tmpb65w43rp.jl:21\n"
  stdout: ''
  timestamp: 1659822577
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"f\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"q\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"b\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6yacf1k.jl:19\nin expression starting at\
    \ /tmp/tmpx6yacf1k.jl:19\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(prefix, x), strings)\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuruag8zv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpuruag8zv.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuruag8zv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuruag8zv.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822582
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpgwon8x9u.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpgwon8x9u.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpgwon8x9u.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgwon8x9u.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgwon8x9u.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659822582
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3: filter_by_prefix\n\
    Write a function that filters an input list of strings only for ones that start\
    \ with a given prefix.\nThis function should return a vector of strings that start\
    \ with the given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2weuq3il.jl:19\nin expression starting at\
    \ /tmp/tmp2weuq3il.jl:19\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0wvqjr3x.jl:25\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type String has no field starts_with\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp0wvqjr3x.jl:12\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0wvqjr3x.jl:25 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0wvqjr3x.jl:23\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659822582
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zu29f1h.jl:19\nin expression starting at\
    \ /tmp/tmp4zu29f1h.jl:19\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu4dzrbct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpu4dzrbct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu4dzrbct.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu4dzrbct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu4dzrbct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659822579
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<text>\nExercise 9\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"bcdz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdez\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefgh\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghi\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghij\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghijk\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghijkl\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"cdefghijklm\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cdefghijklmn\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"cdefghijkl\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbw0frv1.jl:10\nin expression starting at\
    \ /tmp/tmpfbw0frv1.jl:10\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"b\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd62diu55.jl:19\nin expression starting at\
    \ /tmp/tmpd62diu55.jl:19\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L, prefix)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7f_oytf.jl:13\nin expression starting at\
    \ /tmp/tmpp7f_oytf.jl:13\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings where\
    \ all strings that start with a given prefix are removed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1ljkk26.jl:21\nin expression starting at\
    \ /tmp/tmpz1ljkk26.jl:21\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\nWrite\
    \ a function that filters an input list of strings only for ones that start with\
    \ a given prefix.\nThis function should return a vector of strings only.\nThe\
    \ function should take as input a list of strings and a prefix.\nThe function\
    \ should return a list of strings only.\nThe function should return an empty vector\
    \ if there are no strings that start with the given prefix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8s5ucbam.jl:21\nin expression starting at\
    \ /tmp/tmp8s5ucbam.jl:21\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters a list\
    \ of strings based on whether they start with a given prefix.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp237lb6ri.jl:19\nin expression starting at\
    \ /tmp/tmp237lb6ri.jl:19\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ filters strings by a prefix, but only if the prefix is at the beginning of the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqqgwebn.jl:21\nin expression starting at\
    \ /tmp/tmplqqgwebn.jl:21\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwqhb48j.jl:10\nin expression starting at\
    \ /tmp/tmpxwqhb48j.jl:10\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(string, prefix) returns a new list containing only the strings\
    \ that start with the prefix string. For example:\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxw9flt9.jl:19\nin expression starting at\
    \ /tmp/tmpyxw9flt9.jl:19\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n\
    \        return strings\n    end\n    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters a list of\
    \ strings only for those that end with a given suffix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphg1ri_me.jl:25\nin expression starting at\
    \ /tmp/tmphg1ri_me.jl:25\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9_32toc.jl:21\nin expression starting at\
    \ /tmp/tmpw9_32toc.jl:21\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzj69egf7.jl:19\nin expression starting at\
    \ /tmp/tmpzj69egf7.jl:19\n"
  stdout: ''
  timestamp: 1659822580
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659822580
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822584
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a regular expression.\nThe function should take two arguments: the\
    \ list of strings and the regular expression. The function should return a list\
    \ of strings that match the regular expression.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7nbvluz5.jl:21\nin expression starting at\
    \ /tmp/tmp7nbvluz5.jl:21\n"
  stdout: ''
  timestamp: 1659822582
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    prefix_length = length(prefix)\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    strings\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that filters an input list of strings\
    \ only for ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"\
    abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n\
    [\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"arrays\")\n[]\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf8td6ir9.jl:21\nin expression starting at\
    \ /tmp/tmpf8td6ir9.jl:21\n"
  stdout: ''
  timestamp: 1659822582
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a prefix and suffix.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto5mmoev.jl:16\nin expression starting at\
    \ /tmp/tmpto5mmoev.jl:16\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n\
    \        return strings\n    end\n    \n    strings = filter_by_prefix(strings,\
    \ prefix[1:prefix_length])\n    \n    if prefix_length < length(strings)\n   \
    \     strings = filter_by_prefix(strings, prefix[prefix_length+1:end])\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlbv1npz.jl:23\nin expression starting at\
    \ /tmp/tmptlbv1npz.jl:23\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe79cvvy6.jl:21\nin expression starting at\
    \ /tmp/tmpe79cvvy6.jl:21\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv40k5ksa.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpv40k5ksa.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv40k5ksa.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv40k5ksa.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ strings by a prefix, but only if the prefix is at the start of the string.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0n26jg9x.jl:21\nin expression starting at\
    \ /tmp/tmp0n26jg9x.jl:21\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    prefix_length = len(prefix)\n  \
    \  \n    for string in strings\n        if string.starts_with(prefix)\n      \
    \      strings = filter!(x -> x != string, strings)\n        end\n    end\n  \
    \  \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0mbzk381.jl:26\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    len not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp0mbzk381.jl:11\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp0mbzk381.jl:26 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp0mbzk381.jl:25\ntest set: Error During Test at
    /tmp/tmp0mbzk381.jl:27\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    len not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp0mbzk381.jl:11\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp0mbzk381.jl:27 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp0mbzk381.jl:25\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87bljzhv.jl:19\nin expression starting at\
    \ /tmp/tmp87bljzhv.jl:19\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter(x->startswith(x, prefix), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s2zt_dp.jl:13\nin expression starting at\
    \ /tmp/tmp_s2zt_dp.jl:13\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    Write a function that filters an input list of strings only for ones that start\
    \ with a given prefix.\nHint: Use filter_by_prefix\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg4aj3sv6.jl:19\nin expression starting at\
    \ /tmp/tmpg4aj3sv6.jl:19\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[2:end]\n    strings = strings[strings[2:end] .== \"\
    _\"]\n    strings = strings[strings[2:end] .== \"-\"]\n    strings = strings[strings[2:end]\
    \ .== \".\"]\n    strings = strings[strings[2:end] .== \"-\"]\n    strings = strings[strings[2:end]\
    \ .== \"_\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgdlh4zm.jl:1\nin expression starting at /tmp/tmptgdlh4zm.jl:1\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings based on whether they start with a given prefix.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51pxfy5c.jl:21\nin expression starting at\
    \ /tmp/tmp51pxfy5c.jl:21\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a regular expression.\nThe\
    \ function should take two arguments: a string and a regular expression. The function\
    \ should return a list of strings that match the regular expression. \nThe function\
    \ should return an empty list if the input list is empty.\nThe function should\
    \ return an empty list if the input list contains no strings that match the regular\
    \ expression. \nThe function should return an empty list if the input list contains\
    \ strings that do not match the regular expression. \nThe function should return\
    \ a list of strings that match the regular expression. \nThe function should return\
    \ a list of strings that do not match the regular expression. \nThe function should\
    \ return a list of strings that match the regular expression and a list of strings\
    \ that do not match the regular expression. \nThe function should return a list\
    \ of strings that match the regular expression and a list of strings that do not\
    \ match the regular expression. \nThe function should return a list of strings\
    \ that match the regular expression and a list of strings that do not match the\
    \ regular expression. \nThe function should return a list of strings that match\
    \ the regular expression and a list of strings that do not match the regular expression.\
    \ \nThe function should return a list of strings that match the regular expression\
    \ and a list of strings that do not match the regular expression. \nThe function\
    \ should return a list of strings that match the regular expression and a list\
    \ of strings that do not match the regular expression. \nThe function should return\
    \ a list of strings that match the regular expression and a list of strings that\
    \ do not match the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression and a list of strings that do not\
    \ match the regular expression. \nThe function should return a list of strings\
    \ that match the regular expression and a list of strings that do not match the\
    \ regular expression. \nThe function should return a list of strings that match\
    \ the regular expression and a list of strings that do not match the regular expression.\
    \ \nThe function should return a list of strings that match the regular expression\
    \ and a list of strings that do not match the regular expression. \nThe function\
    \ should return a list of strings that match the regular expression and a list\
    \ of strings that do not match the regular expression. \nThe function should return\
    \ a list of strings that match the regular expression and a list of strings that\
    \ do not match the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression and a list of strings that do not\
    \ match the regular expression. \nThe function should return a list of strings\
    \ that match the regular expression and a list of strings that do not match the\
    \ regular expression. \nThe function should return a list of strings that match\
    \ the regular expression and a list of strings that do not match the regular expression.\
    \ \nThe function should return a list of strings that match the regular expression\
    \ and a list of strings that do not match the regular expression. \nThe function\
    \ should return a list of strings that match the regular expression and a list\
    \ of strings that do not match the regular expression. \nThe function should return\
    \ a list of strings that match the regular expression and a list of strings that\
    \ \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovr187w1.jl:19\nin expression starting at\
    \ /tmp/tmpovr187w1.jl:19\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_0d_1551.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp_0d_1551.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0d_1551.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0d_1551.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a predicate that returns\
    \ true if the string starts with a given prefix.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpputt_4hy.jl:19\nin expression starting at\
    \ /tmp/tmpputt_4hy.jl:19\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix([], \"a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtiky1x5.jl:19\nin expression starting at\
    \ /tmp/tmpjtiky1x5.jl:19\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoe3kyakg.jl:21\nin expression starting at\
    \ /tmp/tmpoe3kyakg.jl:21\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a list of strings based on whether they\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp334kxft4.jl:19\nin expression starting at\
    \ /tmp/tmp334kxft4.jl:19\n"
  stdout: ''
  timestamp: 1659822583
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa29nmg4u.jl:21\nin expression starting at\
    \ /tmp/tmpa29nmg4u.jl:21\n"
  stdout: ''
  timestamp: 1659822585
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659822580
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1u_pj3s0.jl:21\nin expression starting at\
    \ /tmp/tmp1u_pj3s0.jl:21\n"
  stdout: ''
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a regular expression. \n\
    The function should take two arguments: a list of strings, and a regular expression.\n\
    The function should return a list of strings that match the regular expression.\
    \ \nThe function should ignore case when matching.\nThe function should ignore\
    \ leading and trailing whitespace.\nThe function should ignore leading and trailing\
    \ punctuation.\nThe function should ignore leading and trailing digits.\nThe function\
    \ should ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgfmxz_k.jl:19\nin expression starting at\
    \ /tmp/tmphgfmxz_k.jl:19\n"
  stdout: ''
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} is just a\
    \ wrapper for filter_by_prefix(L, \"prefix\")\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjv7tijxs.jl:19\nin expression starting at\
    \ /tmp/tmpjv7tijxs.jl:19\n"
  stdout: ''
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that removes all the strings that end with a given\
    \ suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lhuynm4.jl:19\nin expression starting at\
    \ /tmp/tmp1lhuynm4.jl:19\n"
  stdout: ''
  timestamp: 1659822585
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659822584
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x ->\
    \ startswith(String(x), prefix), strings)\n    \n    if prefix_length == 0\n \
    \       strings\n    else\n        filter(x -> startswith(String(x), prefix),\
    \ strings)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ strings based on whether they end with a given suffix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwi07dma.jl:19\nin expression starting at\
    \ /tmp/tmpwwi07dma.jl:19\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv40k5ksa.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpv40k5ksa.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv40k5ksa.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv40k5ksa.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters strings by a regular expression. For example, given the\
    \ following input:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cw1z9_m.jl:19\nin expression starting at\
    \ /tmp/tmp3cw1z9_m.jl:19\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a regular expression.\nThe function should take two arguments: the\
    \ list of strings and the regular expression. The function should return a filtered\
    \ list of strings.\nThe function should return an empty list if the regular expression\
    \ is empty or if the list of strings is not iterable.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7dwkqyk.jl:21\nin expression starting at\
    \ /tmp/tmpv7dwkqyk.jl:21\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lfsysdw.jl:21\nin expression starting at\
    \ /tmp/tmp3lfsysdw.jl:21\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgy8udit.jl:19\nin expression starting at\
    \ /tmp/tmpwgy8udit.jl:19\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3: Filtering\
    \ by suffix\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"xyz\")\n[]\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplau52u1j.jl:19\nin expression starting at\
    \ /tmp/tmplau52u1j.jl:19\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(String[], String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yguny2e.jl:15\nin expression starting at\
    \ /tmp/tmp3yguny2e.jl:15\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0wvqjr3x.jl:25\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type String has no field starts_with\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp0wvqjr3x.jl:12\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0wvqjr3x.jl:25 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0wvqjr3x.jl:23\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659822582
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix) == true\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9l08p0x.jl:21\nin expression starting at\
    \ /tmp/tmpu9l08p0x.jl:21\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> startswith(x, prefix), strings)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qfllcry.jl:21\nin expression starting at\
    \ /tmp/tmp4qfllcry.jl:21\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter( string\
    \ -> startswith(string, prefix), strings)\n    \n    if prefix_length > 0\n  \
    \      strings = filter( string -> startswith(string, prefix), strings)\n    end\n\
    \    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659822584
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a prefix and returns a vector of\
    \ strings that start with the prefix. For example, given [\"abc\", \"bcd\", \"\
    cde\", \"array\", \"abd\"], prefix \"a\", the function should return [\"abc\"\
    , \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdhyxrbe.jl:19\nin expression starting at\
    \ /tmp/tmpvdhyxrbe.jl:19\n"
  stdout: ''
  timestamp: 1659822586
- exit_code: 0
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659822584
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter_by_prefix(\n        map(x => x == prefix, strings),\n        prefix\n\
    \    )\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp4dxt6l9t.jl:18\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    x not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp4dxt6l9t.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4dxt6l9t.jl:18 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4dxt6l9t.jl:17\ntest set: Error During Test at
    /tmp/tmp4dxt6l9t.jl:19\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    x not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp4dxt6l9t.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4dxt6l9t.jl:19 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4dxt6l9t.jl:17\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659822588
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpg2bpg4dr.jl:15\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    start not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpg2bpg4dr.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpg2bpg4dr.jl:15 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpg2bpg4dr.jl:14\ntest set: Error During Test at
    /tmp/tmpg2bpg4dr.jl:16\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    start not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpg2bpg4dr.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpg2bpg4dr.jl:16 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpg2bpg4dr.jl:14\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} is just a wrapper around filter_by_prefix(L,\
    \ \"prefix\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlxpissg.jl:11\nin expression starting at\
    \ /tmp/tmpmlxpissg.jl:11\n"
  stdout: ''
  timestamp: 1659822587
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a regular expression.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_c_prhi.jl:21\nin expression starting at\
    \ /tmp/tmpu_c_prhi.jl:21\n"
  stdout: ''
  timestamp: 1659822587
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp83ihyfca.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp83ihyfca.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83ihyfca.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83ihyfca.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayed\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_6snyzr.jl:10\nin expression starting at\
    \ /tmp/tmpw_6snyzr.jl:10\n"
  stdout: ''
  timestamp: 1659822587
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter( x ->\
    \ startswith(x, prefix), strings)\n    \n    if prefix_length == 0\n        return\
    \ strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_length == 1\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length ==\
    \ 2\n        return strings\n    \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    \n    if prefix_length == 3\n        return strings\n    \n  \
    \  strings = filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length\
    \ == 4\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_length == 5\n        return strings\n\
    \    \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_length == 6\n        return strings\n    \n    strings = filter( x ->\
    \ startswith(x, prefix), strings)\n    \n    if prefix_length == 7\n        return\
    \ strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_length == 8\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length ==\
    \ 9\n        return strings\n    \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    \n    if prefix_length == 10\n        return strings\n    \n \
    \   strings = filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length\
    \ == 11\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_length == 12\n        return strings\n\
    \    \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_length == 13\n        return strings\n    \n    strings = filter( x ->\
    \ startswith(x, prefix), strings)\n    \n    if prefix_length == 14\n        return\
    \ strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_length == 15\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length ==\
    \ 16\n        return strings\n    \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    \n    if prefix_length == 17\n        return strings\n    \n \
    \   strings = filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length\
    \ == 18\n        return strings\n    \n    string\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuqg_6qj.jl:1\nin expression starting at /tmp/tmpeuqg_6qj.jl:1\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_len = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters strings by a prefix and suffix.\nHint: Use filter_by_prefix\
    \ and filter_by_suffix to solve this exercise.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaa3hhb08.jl:21\nin expression starting at\
    \ /tmp/tmpaa3hhb08.jl:21\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.\nin expression starting at /tmp/tmprlteim1j.jl:21\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmprlteim1j.jl:25\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type String has no field starts_with\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmprlteim1j.jl:12\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmprlteim1j.jl:25 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmprlteim1j.jl:23\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659822590
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> startswith(prefix,\
    \ x), strings )\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe2e7gdv.jl:15\nin expression starting at\
    \ /tmp/tmpfe2e7gdv.jl:15\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x,prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkb5zpyo.jl:11\nin expression starting at\
    \ /tmp/tmpdkb5zpyo.jl:11\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(x, prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<text>\nfilter_by_prefix([], \"\
    a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9le9x2l3.jl:12\nin expression starting at\
    \ /tmp/tmp9le9x2l3.jl:12\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ a list of strings based on whether they contain a given substring.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn0q5wl4.jl:21\nin expression starting at\
    \ /tmp/tmpbn0q5wl4.jl:21\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt043renr.jl:21\nin expression starting at\
    \ /tmp/tmpt043renr.jl:21\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a prefix\
    \ and suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwqi1vb3.jl:11\nin expression starting at\
    \ /tmp/tmpbwqi1vb3.jl:11\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters a given list of strings only for those that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"b\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"c\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"e\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"f\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"q\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"r\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"s\")\n\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu16cn6ys.jl:19\nin expression starting at\
    \ /tmp/tmpu16cn6ys.jl:19\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::AbstractVector, prefix::AbstractString)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6j5n25j9.jl:10\nin expression starting at\
    \ /tmp/tmp6j5n25j9.jl:10\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rwlbmhy.jl:19\nin expression starting at\
    \ /tmp/tmp1rwlbmhy.jl:19\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings_filtered << string\n        end\n    end\n    \n    return strings_filtered\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyz1gcki.jl:21\nin expression starting at\
    \ /tmp/tmpsyz1gcki.jl:21\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplscx0472.jl:12\nin expression starting at\
    \ /tmp/tmplscx0472.jl:12\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a regular expression. For example, given a list of strings:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpseawnatf.jl:21\nin expression starting at\
    \ /tmp/tmpseawnatf.jl:21\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_0d_1551.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp_0d_1551.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0d_1551.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0d_1551.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7t5g_3q.jl:76\nin expression starting at\
    \ /tmp/tmpw7t5g_3q.jl:76\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a given list of strings only for those\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xn6dih1.jl:19\nin expression starting at\
    \ /tmp/tmp9xn6dih1.jl:19\n"
  stdout: ''
  timestamp: 1659822589
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfuktdi5d.jl:11\nin expression starting at\
    \ /tmp/tmpfuktdi5d.jl:11\n"
  stdout: ''
  timestamp: 1659822590
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_0d_1551.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp_0d_1551.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0d_1551.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0d_1551.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu4dzrbct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpu4dzrbct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu4dzrbct.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu4dzrbct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu4dzrbct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659822579
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"h\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"i\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"j\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"k\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    l\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"r\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16plcipd.jl:19\nin expression starting at\
    \ /tmp/tmp16plcipd.jl:19\n"
  stdout: ''
  timestamp: 1659822590
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqcsfonq.jl:21\nin expression starting at\
    \ /tmp/tmpdqcsfonq.jl:21\n"
  stdout: ''
  timestamp: 1659822590
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu4dzrbct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpu4dzrbct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu4dzrbct.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu4dzrbct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu4dzrbct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659822579
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2: Filtering by substrings\nWrite a function that filters an input list\
    \ of strings only for ones that contain a given substring.\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_substring([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[]\n>>> filter_by_substring([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abde\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdef\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdefg\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdefgh\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghi\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghij\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijk\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijkl\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklm\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklmn\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklmno\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklmno\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxa7yetis.jl:19\nin expression starting at\
    \ /tmp/tmpxa7yetis.jl:19\n"
  stdout: ''
  timestamp: 1659822590
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} \n    \n \
    \   strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpid02rw6h.jl:15\nin expression starting at\
    \ /tmp/tmpid02rw6h.jl:15\n"
  stdout: ''
  timestamp: 1659822590
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L, prefix) -> Vector{String}\n\
    Filter an input list of strings only for ones that start with a given prefix.\n\
    This function returns a new vector instead of modifying the input list.\nThe input\
    \ list L can be any iterable object.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwzvsrav.jl:11\nin expression starting at\
    \ /tmp/tmpbwzvsrav.jl:11\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters input strings based on whether they end with a given suffix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78pzw9ma.jl:11\nin expression starting at\
    \ /tmp/tmp78pzw9ma.jl:11\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    prefix_len = len(prefix)\n    \n\
    \    for s in strings\n        if startswith(s, prefix)\n            strings =\
    \ filter!(s => startswith(s, prefix), strings)\n        end\n    end\n    \n \
    \   return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} is similar to filter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}, except that it returns a new vector instead\
    \ of modifying the original vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmoqpbbl.jl:21\nin expression starting at\
    \ /tmp/tmptmoqpbbl.jl:21\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.\nin expression starting at /tmp/tmprlteim1j.jl:21\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmprlteim1j.jl:25\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type String has no field starts_with\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmprlteim1j.jl:12\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmprlteim1j.jl:25 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmprlteim1j.jl:23\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659822590
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpu4dzrbct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpu4dzrbct.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpu4dzrbct.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu4dzrbct.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu4dzrbct.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659822579
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpews5nldt.jl:15\nin expression starting at\
    \ /tmp/tmpews5nldt.jl:15\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(prefix)\
    \ && i < length(strings)\n        if prefix[i] != strings[i]\n            i +=\
    \ 1\n        else\n            i += 1\n        end\n    end\n    \n    if i ==\
    \ length(strings)\n        push!(strings, \"\")\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqynywd5e.jl:26\nin expression starting at\
    \ /tmp/tmpqynywd5e.jl:26\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"abdce\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnti6l547.jl:21\nin expression starting at\
    \ /tmp/tmpnti6l547.jl:21\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5dx6t2y.jl:16\nin expression starting at\
    \ /tmp/tmpu5dx6t2y.jl:16\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a given list of strings only for those\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4i7r53o6.jl:10\nin expression starting at\
    \ /tmp/tmp4i7r53o6.jl:10\n"
  stdout: ''
  timestamp: 1659822591
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = L\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bazysls.jl:12\nin expression starting at\
    \ /tmp/tmp9bazysls.jl:12\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprt201mld.jl:21\nin expression starting at\
    \ /tmp/tmprt201mld.jl:21\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(x,prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> startswith(x,prefix), L)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dudkix3.jl:11\nin expression starting at\
    \ /tmp/tmp4dudkix3.jl:11\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp83ihyfca.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp83ihyfca.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83ihyfca.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83ihyfca.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter(x ->\
    \ startswith(String(x), prefix), strings)\n    \n    if prefix_length == 0\n \
    \       return strings\n    else\n        \n        prefix_strings = filter_by_prefix(strings,\
    \ prefix[1:prefix_length])\n        \n        return prefix_strings + [prefix[prefix_length+1:]]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bc\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(prefix_length + 1):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7febnm_t.jl:19\n\
    in expression starting at /tmp/tmp7febnm_t.jl:19\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"cde\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\",\
    \ \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"abc\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"\
    , \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"abc\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"\
    , \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"abc\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13npvcpl.jl:19\nin expression starting at\
    \ /tmp/tmp13npvcpl.jl:19\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> startswith(x, prefix), strings)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_prefix([],\
    \ \"a\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"abdc\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdce\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcef\"\
    )\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefg\")\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\"\
    )\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\"\
    )\nfilter_by_\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6v8ah7mb.jl:21\nin expression starting at\
    \ /tmp/tmp6v8ah7mb.jl:21\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix) == true\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a regular expression. \nThe function should\
    \ take two arguments: the list of strings and the regular expression. \nThe function\
    \ should return a list of strings that match the regular expression. \nThe function\
    \ should ignore case. \nThe function should ignore the case of the regular expression.\
    \ \nThe function should ignore the case of the strings. \nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\
    \ \nThe function should ignore the case of the regular expression and ignore the\
    \ case of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxb9zs61a.jl:21\nin expression starting at\
    \ /tmp/tmpxb9zs61a.jl:21\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yoj80uh.jl:10\nin expression starting at\
    \ /tmp/tmp0yoj80uh.jl:10\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt043renr.jl:21\nin expression starting at\
    \ /tmp/tmpt043renr.jl:21\n"
  stdout: ''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_len = length(prefix)\n    \n    strings = filter(x -> startswith(String(x),\
    \ prefix), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(vector, prefix)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpge0k3lz8.jl:15\nin expression starting at\
    \ /tmp/tmpge0k3lz8.jl:15\n"
  stdout: ''
  timestamp: 1659822592
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuo0w1z9h.jl:11\nin expression starting at\
    \ /tmp/tmpuo0w1z9h.jl:11\n"
  stdout: ''
  timestamp: 1659822593
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter(x->startswith(prefix, x), strings)\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpngapr52u.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpngapr52u.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngapr52u.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngapr52u.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvs2_cjl.jl:21\nin expression starting at\
    \ /tmp/tmpyvs2_cjl.jl:21\n"
  stdout: ''
  timestamp: 1659822593
- exit_code: -1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822588
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"xyz\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[]\n>>> filter_by_suffix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"bcdcd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdc\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdcd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdcdc\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdcdcd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdcdcdc\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdcdcdcd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdcdcdcdc\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdcdcdcdcd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdcdcdcdcdc\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu99d_dq4.jl:19\nin expression starting at\
    \ /tmp/tmpu99d_dq4.jl:19\n"
  stdout: ''
  timestamp: 1659822593
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqol265zn.jl:11\nin expression starting at\
    \ /tmp/tmpqol265zn.jl:11\n"
  stdout: ''
  timestamp: 1659822593
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(l, p) returns a new list with all the elements of l that start\
    \ with the prefix p.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20851fy3.jl:19\nin expression starting at\
    \ /tmp/tmp20851fy3.jl:19\n"
  stdout: ''
  timestamp: 1659822593
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a regular expression. For example, given a list of strings \"abc\"\
    , \"bcd\", \"cde\", \"array\", and a regular expression \"^a.*\", the function\
    \ should return [\"abc\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcue8fzfc.jl:21\nin expression starting at\
    \ /tmp/tmpcue8fzfc.jl:21\n"
  stdout: ''
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = filter( string\
    \ -> startswith(string, prefix), strings)\n    \n    if prefix_length == 0\n \
    \       return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 1\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 2\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 3\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 4\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 5\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 6\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 7\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 8\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 9\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 10\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 11\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 12\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 13\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 14\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 15\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 16\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 17\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 18\n        return strings\n    \n    string\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4wz097c.jl:1\nin expression starting at /tmp/tmp_4wz097c.jl:1\n"
  stdout: ''
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter((x) -> startswith(prefix, x), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy5dfgxmf.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpy5dfgxmf.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5dfgxmf.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5dfgxmf.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    Write a function that filters an input list of strings only for ones that start\
    \ with a given prefix.\nFor example, given a list of strings:\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_d6q9cb.jl:19\nin expression starting at\
    \ /tmp/tmp4_d6q9cb.jl:19\n"
  stdout: ''
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter( x -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsqkq_lb.jl:12\nin expression starting at\
    \ /tmp/tmplsqkq_lb.jl:12\n"
  stdout: ''
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter!()\nfilter!() modifies the input list in-place and returns the modified\
    \ list. filter!() modifies the input list in-place and returns the modified list.\
    \ filter!() modifies the input list in-place and returns the modified list.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphropwp34.jl:10\nin expression starting at\
    \ /tmp/tmphropwp34.jl:10\n"
  stdout: ''
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp233_cm9y.jl:21\nin expression starting at\
    \ /tmp/tmp233_cm9y.jl:21\n"
  stdout: ''
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_0d_1551.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp_0d_1551.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0d_1551.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0d_1551.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822585
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a predicate that returns true if the string starts with a\
    \ given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70ice12a.jl:11\nin expression starting at\
    \ /tmp/tmp70ice12a.jl:11\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings = filter!(x -> startswith(prefix, x), strings)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} is similar\
    \ to filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}, except\
    \ that it does not modify the original input list L. Instead, it returns a new\
    \ list L2 that contains the elements of L that start with the prefix prefix. For\
    \ example, filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\") returns\
    \ [\"abc\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgmc7z8f6.jl:21\nin expression starting at\
    \ /tmp/tmpgmc7z8f6.jl:21\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bcd\", \"cde\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"abc\",\
    \ \"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"de\")\n[\"abc\", \"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>>\
    \ filter_by_\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5760at0.jl:19\nin expression starting at\
    \ /tmp/tmpt5760at0.jl:19\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_len = length(prefix)\n    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    if prefix_len == 0\n        return strings\n    else\n\
    \        \n        prefix_strings = filter(x->startswith(prefix, x), strings)\n\
    \        \n        prefix_strings = filter(x->endswith(prefix, x), prefix_strings)\n\
    \        \n        return prefix_strings\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bc\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code language=julia-1.5\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwooe5wm.jl:24\nin expression starting at\
    \ /tmp/tmpbwooe5wm.jl:24\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[\"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"j\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"k\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"l\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"m\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    n\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtsizqsm.jl:21\nin expression starting at\
    \ /tmp/tmpvtsizqsm.jl:21\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e8zpbab.jl:11\nin expression starting at\
    \ /tmp/tmp9e8zpbab.jl:11\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qcofqr_.jl:19\nin expression starting at\
    \ /tmp/tmp9qcofqr_.jl:19\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofjaapr4.jl:21\nin expression starting at\
    \ /tmp/tmpofjaapr4.jl:21\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzap1l11u.jl:19\nin expression starting at\
    \ /tmp/tmpzap1l11u.jl:19\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"xyz\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abcz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"abbcz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbcz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczzzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abbbczzzzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abbbczzzzzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8il6eli0.jl:10\nin expression starting at\
    \ /tmp/tmp8il6eli0.jl:10\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abz\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdz\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdez\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdef\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdefg\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdefgh\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdefghi\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdefghij\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdefghijk\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdefghijkl\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cdefghijklm\"\
    )\n[]\n>>> filter_by_suffix\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jgnf87h.jl:21\nin expression starting at\
    \ /tmp/tmp4jgnf87h.jl:21\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a prefix and suffix.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjebknv0u.jl:19\nin expression starting at\
    \ /tmp/tmpjebknv0u.jl:19\n"
  stdout: ''
  timestamp: 1659822595
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings_filtered << string\n        end\n    end\n    \n    return strings_filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpgephusv6.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpgephusv6.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main\
    \ /tmp/tmpgephusv6.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgephusv6.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgephusv6.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659822597
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter( x -> startswith(prefix, x),\
    \ strings )\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpser08syz.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpser08syz.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpser08syz.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpser08syz.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\n\
    Write a function that filters an input list of strings only for ones that start\
    \ with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpfnnehk.jl:19\nin expression starting at\
    \ /tmp/tmpzpfnnehk.jl:19\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter( x -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a regular expression. \nThe function should\
    \ take two arguments: a list of strings, and a regular expression. \nThe function\
    \ should return a list of strings that match the regular expression. \nThe function\
    \ should ignore case. \nThe function should ignore non-matching strings. \nThe\
    \ function should ignore empty strings. \nThe function should ignore strings that\
    \ do not match the regular expression. \nThe function should ignore strings that\
    \ do not start with the prefix. \nThe function should ignore strings that do not\
    \ end with the suffix. \nThe function should ignore strings that do not contain\
    \ any of the characters in the regular expression. \nThe function should ignore\
    \ strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that do not contain any of the characters in the regular expression.\
    \ \nThe function should ignore strings that do not contain any of the characters\
    \ in the regular expression. \nThe function should ignore strings that do not\
    \ contain any of the characters in the regular expression. \nThe function should\
    \ ignore strings that \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7vbmeeq.jl:12\nin expression starting at\
    \ /tmp/tmpq7vbmeeq.jl:12\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters through a list of strings and only keeps those that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr25_7mb.jl:16\nin expression starting at\
    \ /tmp/tmpxr25_7mb.jl:16\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    \    \n    strings = filter((string) -> startswith(string, prefix), strings)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmqx3kbpe.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmqx3kbpe.jl:1\n\
    in expression starting at /tmp/tmpmqx3kbpe.jl:1\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters out the strings that end with a given\
    \ suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfl9jkoz.jl:19\nin expression starting at\
    \ /tmp/tmppfl9jkoz.jl:19\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters strings by a prefix and suffix.\nFor example, filter_by_prefix_and_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", \"array\") should return [\"abc\"\
    , \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsifnuc0y.jl:21\nin expression starting at\
    \ /tmp/tmpsifnuc0y.jl:21\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter_by_prefix(strings, prefix, \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpk422t2tc.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpk422t2tc.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_prefix(::Vector{String}, ::String,\
    \ ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpk422t2tc.jl:7\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpk422t2tc.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk422t2tc.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk422t2tc.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpk422t2tc.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_prefix(::Vector{String},\
    \ ::String, ::String)\n  Closest candidates are:\n    filter_by_prefix(::Vector{String},\
    \ ::String) at /tmp/tmpk422t2tc.jl:7\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpk422t2tc.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk422t2tc.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk422t2tc.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659822598
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmproaketka.jl:11\nin expression starting at\
    \ /tmp/tmproaketka.jl:11\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cuiug42.jl:12\nin expression starting at\
    \ /tmp/tmp7cuiug42.jl:12\n"
  stdout: ''
  timestamp: 1659822596
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter(x->startswith(prefix, x), strings)\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpngapr52u.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpngapr52u.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngapr52u.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngapr52u.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659822594
- exit_code: 1
  program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_len = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(strings_filtered, string)\n        end\n    end\n    \n    return\
    \ strings_filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters a list of strings only for those that end with a given\
    \ suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwkwvigg.jl:21\nin expression starting at\
    \ /tmp/tmphwkwvigg.jl:21\n"
  stdout: ''
  timestamp: 1659822596
