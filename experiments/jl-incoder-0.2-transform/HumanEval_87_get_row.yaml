name: HumanEval_87_get_row
language: jl
prompt: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which\
  \ is similar to matrix, however, unlike matrices,\n    each row may contain a different\
  \ number of columns.\n    Given lst, and integer x, find integers x in the list,\n\
  \    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially\
  \ by rows in ascending order.\n    Also, sort coordinates of the row by columns\
  \ in descending order.\n    \n    Examples:\n    >>> get_row([[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1, 4), (1, 0), (2,\
  \ 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[], [1], [1, 2,\
  \ 3]], 3)\n    [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
  \ x::Int64)::Vector{Tuple{Int64, Int64}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
  \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0),\
  \ (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
  \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
completions: ["    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n \
    \   \n    rows = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n   \
    \ \n    for i = 1:length(lst)\n        columns = columns + lst[i][end]\n    end\n\
    \    \n    columns = sort(columns)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = (i-1, columns[i])\n    end\n\
    \    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    rows = sort(collect(enumerate(lst)))\n    \n\
    \    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    \n    rows = sort(rows, by=x->x[20])\n\
    \    \n    rows = sort(rows, by=x->x[21])\n    \n    rows = sort(rows, by=x->x[22])\n\
    \    \n    rows = sort(rows, by=x->x[23])\n    \n    rows = sort(rows, by=x->x[24])\n\
    \    \n    rows = sort(rows, by=x->x[25])\n    \n    rows = sort(rows, by=x->x[26])\n\
    \    \n    rows = sort(rows, by=x->x[27])\n    \n    rows = sort(rows, by=x->x[28])\n\
    \    \n    rows = sort(rows, by=x->x[29])\n    \n    rows = sort(rows, by=x->x[30])\n\
    \    \n    rows = sort(rows, by=x->x[31])\n    \n    rows = sort(rows, by=x->x[32])\n\
    \    \n    rows = sort(rows, by=x->x[33])\n    \n    rows = sort(rows, by=x->x[34])\n\
    \    \n    rows = sort(rows, by=x->x[35])\n    \n    rows = sort(rows, by=x->x[36])\n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n\
    \    \n    for row in lst\n        \n        columns = Vector{Int64}()\n     \
    \   \n        for element in row\n            push!(columns, element)\n      \
    \  end\n        \n        push!(rows, (length(columns), maximum(columns)))\n \
    \   end\n    \n    rows = sort(rows)\n    \n    columns = Vector{Int64}()\n  \
    \  \n    for row in rows\n        \n        push!(columns, row[1])\n    end\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    coords\
    \ = Vector{Tuple{Int64, Int64}}()\n    \n    for row in rows\n        \n     \
    \   push!(coords, (row[1], columns[row[2]]))\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    return rows\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        coords[i] = ((rows[i],\
    \ cols[i]))\n    end\n    \n    coords = sort(coords)\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2],\
    \ rev=true)\n    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    \n    for row\
    \ in rows\n        coords = push!(coords, Tuple{row[1], row[2]})\n    end\n  \
    \  \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst\
    \ = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    coords = zeros(Int, length(rows))\n    \n    for i = 1:length(rows)\n   \
    \     coords[i] = (i-1, rows[i])\n    end\n    \n    coords = sort(coords)\n \
    \   \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = ((rows[i], cols[i]))\n    end\n    \n\
    \    return coords\nend", "    \n    rows = sort(collect(1:length(lst)))\n   \
    \ cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->x)\n    \n    rows = sort(rows, by=x->x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n", "    \n    lst = sort(lst)\n    \n\
    \    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + 1\n        \n        lst = sort(lst[i])\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + 1\n        \n        lst[i] = sort(lst[i])\n        \n        lst[i] = lst[i][1:end-1]\n\
    \        \n        lst[i] = sort(lst[i])\n        \n        lst[i] = lst[i][2:end]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
