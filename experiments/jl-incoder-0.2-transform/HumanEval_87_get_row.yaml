name: HumanEval_87_get_row
language: jl
prompt: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which\
  \ is similar to matrix, however, unlike matrices,\n    each row may contain a different\
  \ number of columns.\n    Given lst, and integer x, find integers x in the list,\n\
  \    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially\
  \ by rows in ascending order.\n    Also, sort coordinates of the row by columns\
  \ in descending order.\n    \n    Examples:\n    >>> get_row([[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1, 4), (1, 0), (2,\
  \ 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[], [1], [1, 2,\
  \ 3]], 3)\n    [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
  \ x::Int64)::Vector{Tuple{Int64, Int64}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
  \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0),\
  \ (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
  \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
completions: ["    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n \
    \   \n    rows = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n   \
    \ \n    for i = 1:length(lst)\n        columns = columns + lst[i][end]\n    end\n\
    \    \n    columns = sort(columns)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = (i-1, columns[i])\n    end\n\
    \    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    rows = sort(collect(enumerate(lst)))\n    \n\
    \    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    \n    rows = sort(rows, by=x->x[20])\n\
    \    \n    rows = sort(rows, by=x->x[21])\n    \n    rows = sort(rows, by=x->x[22])\n\
    \    \n    rows = sort(rows, by=x->x[23])\n    \n    rows = sort(rows, by=x->x[24])\n\
    \    \n    rows = sort(rows, by=x->x[25])\n    \n    rows = sort(rows, by=x->x[26])\n\
    \    \n    rows = sort(rows, by=x->x[27])\n    \n    rows = sort(rows, by=x->x[28])\n\
    \    \n    rows = sort(rows, by=x->x[29])\n    \n    rows = sort(rows, by=x->x[30])\n\
    \    \n    rows = sort(rows, by=x->x[31])\n    \n    rows = sort(rows, by=x->x[32])\n\
    \    \n    rows = sort(rows, by=x->x[33])\n    \n    rows = sort(rows, by=x->x[34])\n\
    \    \n    rows = sort(rows, by=x->x[35])\n    \n    rows = sort(rows, by=x->x[36])\n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n\
    \    \n    for row in lst\n        \n        columns = Vector{Int64}()\n     \
    \   \n        for element in row\n            push!(columns, element)\n      \
    \  end\n        \n        push!(rows, (length(columns), maximum(columns)))\n \
    \   end\n    \n    rows = sort(rows)\n    \n    columns = Vector{Int64}()\n  \
    \  \n    for row in rows\n        \n        push!(columns, row[1])\n    end\n\
    \    \n    columns = sort(columns)\n    \n    rows = sort(rows)\n    \n    coords\
    \ = Vector{Tuple{Int64, Int64}}()\n    \n    for row in rows\n        \n     \
    \   push!(coords, (row[1], columns[row[2]]))\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    return rows\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        coords[i] = ((rows[i],\
    \ cols[i]))\n    end\n    \n    coords = sort(coords)\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2],\
    \ rev=true)\n    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    \n    for row\
    \ in rows\n        coords = push!(coords, Tuple{row[1], row[2]})\n    end\n  \
    \  \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst\
    \ = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    coords = zeros(Int, length(rows))\n    \n    for i = 1:length(rows)\n   \
    \     coords[i] = (i-1, rows[i])\n    end\n    \n    coords = sort(coords)\n \
    \   \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = ((rows[i], cols[i]))\n    end\n    \n\
    \    return coords\nend", "    \n    rows = sort(collect(1:length(lst)))\n   \
    \ cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->x)\n    \n    rows = sort(rows, by=x->x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n", "    \n    lst = sort(lst)\n    \n\
    \    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + 1\n        \n        lst = sort(lst[i])\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n        \n  \
    \      lst = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst\
    \ = sort(lst)\n        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n\
    \        \n        lst = sort(lst)\n        \n        lst = sort(lst)\n      \
    \  \n        lst = sort(lst)\n        \n        lst = sort(lst)\n", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + 1\n        \n        lst[i] = sort(lst[i])\n        \n        lst[i] = lst[i][1:end-1]\n\
    \        \n        lst[i] = sort(lst[i])\n        \n        lst[i] = lst[i][2:end]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n", "    if lst == []\n   \
    \     []\n    elseif x == 1\n        []\n    else\n        lst = sort(lst)\n \
    \       lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], ", "    if lst == []\n        []\n\
    \    else\n        lst = sort(lst)\n        lst = sort(lst, by=x->x[x], rev=true)\n\
    \        lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x],\
    \ rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst,\
    \ by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n     \
    \   lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x],\
    \ rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst,\
    \ by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n     \
    \   lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x],\
    \ rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst,\
    \ by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n     \
    \   lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x],\
    \ rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst,\
    \ by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n     \
    \   lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x],\
    \ rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst,\
    \ by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n     \
    \   lst = sort(lst, by=x->x[x], rev=true)\n        lst = sort(lst, by=x->x[x],\
    \ rev=true)\n        lst = sort(lst, by=x->x[x], rev=true)\n        ", "    \n\
    \    rows = sort(collect(enumerate(lst)))\n    \n    rows = rows[rows[2] .< x]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    return rows\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n   \
    \ rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows\
    \ = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    columns\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        columns\
    \ = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n    \n\
    \    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        \n        rows = rows + 1\n        \n        row_coords = zeros(Int,\
    \ length(row))\n        \n        for (i,val) in enumerate(row)\n            \n\
    \            if val == x\n                row_coords[i] = i\n            end\n\
    \        end\n        \n        row_coords = sort(row_coords)\n        \n    \
    \    row_coords = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(row_coords)\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        row_coords = reverse(", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = rows[rows[2] .< x]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1] .< rows[2]",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + 1\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst\
    \ = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    columns = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n    \
    \    columns = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n\
    \    \n    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end-x+1:end]\n    end\n    \n    return\
    \ collect(zip(rows, cols))\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,row) in enumerate(rows)\n        for (c,col)\
    \ in enumerate(cols)\n            if lst[row][c] == x\n                coords[i,c]\
    \ = (i,c)\n            end\n        end\n    end\n    \n    coords = coords[sortperm(coords[:,1]),\
    \ :]\n    coords = coords[sortperm(coords[:,2]), :]\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        cols[i]\
    \ = row.index(x)\n        rows[i] = i\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for (i,row) in enumerate(lst)\n        coords[i] = rows[row], cols[cols[i]]\n\
    \    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n   \
    \ rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows\
    \ = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    columns\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        columns\
    \ = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n    \n\
    \    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.3>", "  \
    \  \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end-x+1:end]\n    end\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    for i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n\
    \    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst =\
    \ sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n     \
    \   coords[i] = rows[i], lst[i][x]\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if lst == []\n      \
    \  []\n    else\n        lst = sort(lst)\n        rows = map(i -> i, lst)\n  \
    \      rows = sort(rows)\n        cols = map(i -> i, lst)\n        cols = sort(cols)\n\
    \        rows = sort(rows)\n        cols = sort(cols)\n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        coords[i] = rows[i]\n\
    \    end\n    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = rows[i], lst[i][x]\n   \
    \ end\n    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        columns = columns + lst[i][end]\n  \
    \  end\n    \n    columns = sort(columns)\n    \n    return Tuple{Int64, Int64}(rows,\
    \ columns)\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    return rows\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst\
    \ = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n     \
    \   coords[i] = (i-1, rows[i])\n    end\n    \n    coords = sort(coords)\n   \
    \ \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows\
    \ = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    lst = sort(lst)\n    \n\
    \    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols = cols\
    \ + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        for j = 1:length(cols)\n            coords[i, j] = (i-1, j-1)\n     \
    \   end\n    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    for i\
    \ = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows =\
    \ zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i\
    \ = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n\
    \    end\n    \n    return [(i, j) for i = 1:length(lst), j = 1:length(lst[i]),\
    \ \n        abs(rows - i) == abs(cols - j)]\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        coords[i] = (i-1, cols) + tuple((rows[i], lst[i][x]))\n\
    \    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if lst == []\n        []\n    elseif x == 0\n        []\n    else\n      \
    \  lst = sort(lst)\n        rows = zeros(Int, length(lst))\n        for (i, row)\
    \ in enumerate(lst)\n            rows[i] = row\n        end\n        rows = sort(rows)\n\
    \        cols = zeros(Int, length(lst))\n        for (j, row) in enumerate(rows)\n\
    \            cols[j] = find(row == x)[1]\n        end\n        cols = sort(cols)\n\
    \        coords = zeros(Int, length(lst))\n        for (j, row) in enumerate(rows)\n\
    \            for (k, v) in enumerate(cols)\n                coords[j][k] = (i\
    \ + 1) * length(cols) + v\n            end\n        end\n        coords = sort(coords)\n\
    \        return coords\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = reverse(rows)\n    \n    columns = sort(collect(enumerate(rows[end][1])))\n\
    \    \n    columns = reverse(columns)\n    \n    coords = zeros(length(rows),\
    \ length(columns))\n    \n    for (i,row) in enumerate(rows)\n        for (c,col)\
    \ in enumerate(columns)\n            if row[1] == col[1]\n                coords[i,\
    \ c] = (c,i)\n            end\n        end\n    end\n    \n    coords = sort(coords,\
    \ by=x->x[1])\n    \n    coords = reverse(coords)\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int64, length(lst))\n    cols = zeros(Int64, length(lst))\n    \n  \
    \  for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols = cols\
    \ + lst[i][end-x+1:end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [rows, cols]\n    end\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    if lst == []\n        []\n    elseif\
    \ x == 0\n        []\n    else\n        lst[findfirst(x->x==x, lst)] |> sort\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + 1\n        \n        if\
    \ lst[i][x] == x\n            \n            cols = zeros(Int, length(lst[i]))\n\
    \            \n            for j = 1:length(lst[i])\n                cols = cols\
    \ + 1\n            end\n            \n            \n            \n           \
    \ \n            \n            \n            \n            \n            \n   \
    \         \n            \n            \n            \n            \n         \
    \   \n            \n            \n            \n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    lst = sort(lst)\n\
    \    \n    rows = length(lst)\n    \n    if rows == 0\n        return Vector{Tuple{Int64,\
    \ Int64}}()\n    end\n    \n    cols = lst[end][1]\n    \n    coords = Vector{Tuple{Int64,\
    \ Int64}}()\n    \n    for row in 1:rows\n        \n        coord = Tuple{Int64,\
    \ Int64}(0, row)\n        \n        if row == 1\n            \n            if\
    \ cols == x\n                push!(coords, coord)\n            else\n        \
    \        push!(coords, coord)\n            end\n            \n        else\n \
    \           \n            if cols > x\n                push!(coords, coord)\n\
    \            else\n                push!(coords, coord)\n            end\n   \
    \     end\n        \n    end\n    \n    coords = sort(coords)\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end-x+1:end]\n    end\n    \n    return collect(zip(rows, cols))\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for i = 1:length(rows)\n        coords[i, :] = [lst[rows[i],\
    \ cols[i]], lst[rows[i], cols[i]]]\n    end\n    \n    coords = sort!(coords,\
    \ by=x->x[1])\n    coords = sort!(coords, by=x->x[2])\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(rows))\n\
    \    \n    for i = 1:length(rows)\n        coords[i] = (i-1, rows[i])\n    end\n\
    \    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    rows = sort(collect(enumerate(lst)))\n    \n\
    \    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst\
    \ = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    columns = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n    \
    \    columns = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = (i-1, columns[i])\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i\
    \ = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows =\
    \ sort(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        columns = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n\
    \    \n    return zip(rows, columns)\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        \n        rows = rows + row\n        cols = cols + 1\n        \n    \
    \    if i == x\n            break\n        end\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for (i,row) in enumerate(lst)\n        \n        coords[i] = (i + 1, rows[row])\n\
    \        coords[i] = (i + 1, cols[cols[col]])\n        \n        if i == x\n \
    \           break\n        end\n    end\n    \n    coords = sort(coords)\n   \
    \ \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    if lst ==\
    \ []\n        []\n    elseif x == 0\n        []\n    else\n        lst[findfirst(x->x==x,\
    \ lst)].sort\n            \nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int64, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows\
    \ = sort(rows)\n    \n    columns = zeros(Int64, length(lst))\n    \n    for i\
    \ = 1:length(lst)\n        columns = columns + lst[i][end]\n    end\n    \n  \
    \  columns = sort(columns)\n    \n    return zip(rows, columns)\nend", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows\
    \ = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n    \n    for i =\
    \ 1:length(lst)\n        coords[i] = rows[i]\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows = rows +\
    \ row\n        cols = cols + i\n    end\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for (i,row)\
    \ in enumerate(lst)\n        coords[i] = findfirst(x->x==row, rows)\n    end\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows =\
    \ sort(collect(enumerate(lst)))\n    \n    rows = rows[rows[:,1] .< x]\n    \n\
    \    rows = rows[rows[:,2] .> x]\n    \n    return rows\nend", "    if length(lst.)\
    \ == 0 \n        return Vector{Tuple{Int64, Int64}}() \n    else \n        rows\
    \ = sort(collect(1:length(lst)))\n        columns = sort(collect(1:length(lst[rows])),\
    \ by=descending)\n        \n        rows = rows[rows .== x]\n        columns =\
    \ columns[columns .== x]\n        \n        return [(i, j) for (i, j) in zip(rows,\
    \ columns)]\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for (i,row) in enumerate(lst)\n        rows = rows + row\n        cols\
    \ = cols + i\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n  \
    \  \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = ",
  "    \n    lst = sort(lst)\n    \n    rows = length(lst)\n    \n    coords = Vector{Tuple{Int64,\
    \ Int64}}(undef, rows)\n    \n    for row in 1:rows\n        \n        row_coords\
    \ = Tuple{Int64, Int64}(0, row)\n        \n        for col in 1:length(lst[row])\n\
    \            \n            if lst[row][col] == x\n                \n         \
    \       coords[row] = row_coords\n                \n                break\n  \
    \          end\n        end\n    end\n    \n    coords = sort(coords, rev=true)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(enumerate(lst)))\n    \n    rows = reverse(rows)\n    \n\
    \    rows = sort(rows, by=x->x[1])\n    \n    rows = reverse(rows)\n    \n   \
    \ rows = sort(rows, by=x->x[2])\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = sort(rows, by=x->x[3])\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[6])\n   \
    \ \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[7])\n    \n\
    \    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[8])\n    \n   \
    \ rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[9])\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = sort(rows, by=x->x[10])\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = reverse(rows)\n  \
    \  \n    rows = sort(rows, by=x->x[13])\n    \n    rows = reverse(rows)\n    \n\
    \    rows = sort(rows, by=x->x[14])\n    \n    rows = reverse(rows)\n    \n  \
    \  rows = sort(rows, by=x->x[15])\n    \n    rows = reverse(rows)\n    \n    rows\
    \ = sort(rows, by=x->x[16])\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows, by=x->x[17])\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[19])\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[20])\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[21])\n    \n\
    \    rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[22])\n    \n  \
    \  rows = reverse(rows)\n    \n    rows = sort(rows, by=x->x[23])\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = sort(rows, by=x->x[24])\n    \n", "    \n\
    \    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = length(lst)\n\
    \    cols = lst[1].length\n    \n    coords = Vector{Tuple{Int64, Int64}}[]\n\
    \    \n    for row in 1:rows\n        \n        row_coords = Tuple{Int64, Int64}(0,\
    \ row)\n        \n        for col in 1:cols\n            \n            if lst[row][col]\
    \ == x\n                \n                push!(coords, row_coords)\n        \
    \        \n            end\n            \n        end\n        \n    end\n   \
    \ \n    sort(coords, rev=true)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = (i-1, cols[i])\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        rows = rows + 1\n        cols = cols + length(lst[row])\n    end\n  \
    \  \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for row in 1:length(lst)\n        coords[row] = ((rows\
    \ - row(rows)) * length(lst[row])) + (cols - row(cols))\n    end\n    \n    coords\
    \ = sort(coords)\n    \n    coords = coords[coords <= x]\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n \
    \   rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for (i,row) in enumerate(lst)\n        rows = rows + row\n        cols =\
    \ cols + length(lst.(row))\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        coords[i] = findfirst(x->x==row, rows)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = coords[2:end]\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = rows[i], lst[i][x]\n   \
    \ end\n    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=length, reverse=true)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for (c,col) in enumerate(cols)\n\
    \            if lst[row][c] == x\n                coords[i,c] = (c,row)\n    \
    \        end\n        end\n    end\n    \n    coords = coords[sortperm(coords[:,1]),\
    \ :]\n    coords = coords[sortperm(coords[:,2]), :]\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n \
    \   coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->x[19])\n\
    \    \n    rows = sort(rows, by=x->x[20])\n    \n    rows = sort(rows, by=x->x[21])\n\
    \    \n    rows = sort(rows, by=x->x[22])\n    \n    rows = sort(rows, by=x->x[23])\n\
    \    \n    rows = sort(rows, by=x->x[24])\n    \n    rows = sort(rows, by=x->x[25])\n\
    \    \n    rows = sort(rows, by=x->x[26])\n    \n    rows = sort(rows, by=x->x[27])\n\
    \    \n    rows = sort(rows, by=x->x[28])\n    \n    rows = sort(rows, by=x->x[29])\n\
    \    \n    rows = sort(rows, by=x->x[30])\n    \n    rows = sort(rows, by=x->x[31])\n\
    \    \n    rows = sort(rows, by=x->x[32])\n    \n    rows = sort(rows, by=x->x[33])\n\
    \    \n    rows = sort(rows, by=x->x[34])\n    \n    rows = sort(rows, by=x->x[35])\n\
    \    \n    rows = sort(rows, by=x->x[36])\n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n \
    \       rows = rows + 1\n        \n        lst = sort(lst)\n        \n       \
    \ lst = lst[lst[:, 1] == x]\n        \n        lst = sort(lst)\n        \n   \
    \     rows = rows + 1\n        \n        lst = lst[lst[:, 1] == x]\n        \n\
    \        lst = sort(lst)\n        \n        rows = rows + 1\n    end\n    \n \
    \   rows = sort(rows)\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = rows - 1\n    \n    lst = lst[rows, :]\n    \n    lst = sort(lst)\n\
    \    \n    rows = ", "    \n    rows = sort(collect(enumerate(lst)))\n    \n \
    \   rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end-x+1:end]\n    end\n    \n    return [(rows[i], cols[i])\
    \ for i in 1:length(lst)]\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n\
    \    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = Tuple(rows[i], cols[i])\n\
    \    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n \
    \       rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n     \
    \   coords[i] = Tuple(rows[i], i)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n \
    \   \n    rows = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n   \
    \ \n    for i = 1:length(lst)\n        columns = columns + lst[i][end]\n    end\n\
    \    \n    columns = sort(columns)\n    \n    return zip(rows, columns)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows\
    \ = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for i =\
    \ 1:length(lst)\n        columns = columns + lst[i][end]\n    end\n    \n    columns\
    \ = sort(columns)\n    \n    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n        rows =\
    \ rows + 1\n        cols = cols + length(lst[row])\n    end\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for row in rows\n        for col in cols\n            coords[row] =\
    \ coords[row] + col\n        end\n    end\n    \n    coords = sort(coords)\n \
    \   \n    coords = coords[coords <= length(lst, 1)]\n    \n    coords = coords[coords\
    \ <= x]\n    \n    coords = coords[coords <= length(lst)]\n    \n    coords =\
    \ coords[coords <= length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n\
    \    \n    coords = coords[coords <= length(lst)]\n    \n    coords = coords[coords\
    \ <= length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n    \n  \
    \  coords = coords[coords <= length(lst)]\n    \n    coords = coords[coords <=\
    \ length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n    \n    coords\
    \ = coords[coords <= length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n\
    \    \n    coords = coords[coords <= length(lst)]\n    \n    coords = coords[coords\
    \ <= length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n    \n  \
    \  coords = coords[coords <= length(lst)]\n    \n    coords = coords[coords <=\
    \ length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n    \n    coords\
    \ = coords[coords <= length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n\
    \    \n    coords = coords[coords <= length(lst)]\n    \n    coords = coords[coords\
    \ <= length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n    \n  \
    \  coords = coords[coords <= length(lst)]\n    \n    coords = coords[coords <=\
    \ length(lst)]\n    \n    coords = coords[coords <= length(lst)]\n    \n    coords\
    \ = coords[coords <= length(lst)]\n    \n    coords = coords[coord", "    \n \
    \   lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = rows[rows[2] .< rows[3]]\n    \n    columns = sort(collect(enumerate(rows[1])))\n\
    \    \n    columns = columns[columns[2] .< columns[3]]\n    \n    coords = zip(columns,\
    \ rows)\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n    coords =\
    \ coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n\
    \    \n    coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n    coords = coords[coords[2]\
    \ .< coords[3]]\n    \n    coords = coords[coords[2] .< coords[3]]\n    \n   \
    \ coords = coords[coords[2] .< coords[3]]\n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2],\
    \ rev=true)\n    \n    rows = sort(rows, by=x->x[1])\n    \n    return rows\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    return rows\nend", "    \n\
    \    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->x[19])\n\
    \    \n    rows = sort(rows, by=x->x[20])\n    \n    rows = sort(rows, by=x->x[21])\n\
    \    \n    rows = sort(rows, by=x->x[22])\n    \n    rows = sort(rows, by=x->x[23])\n\
    \    \n    rows = sort(rows, by=x->x[24])\n    \n    rows = sort(rows, by=x->x[25])\n\
    \    \n    rows = sort(rows, by=x->x[26])\n    \n    rows = sort(rows, by=x->x[27])\n\
    \    \n    rows = sort(rows, by=x->x[28])\n    \n    rows = sort(rows, by=x->x[29])\n\
    \    \n    rows = sort(rows, by=x->x[30])\n    \n    rows = sort(rows, by=x->x[31])\n\
    \    \n    rows = sort(rows, by=x->x[32])\n    \n    rows = sort(rows, by=x->x[33])\n\
    \    \n    rows = sort(rows, by=x->x[34])\n    \n    rows = sort(rows, by=x->x[35])\n\
    \    \n    rows = sort(rows, by=x->x[36])\n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n \
    \       rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    columns = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n    \
    \    columns = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n\
    \    \n    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.3>",
  "    if lst == []\n        []\n    elseif x == 0\n        []\n    elseif x == 1\n\
    \        lst[1]\n    elseif x == 2\n        lst[2]\n    elseif x == 3\n      \
    \  lst[3]\n    elseif x == 4\n        lst[4]\n    elseif x == 5\n        lst[5]\n\
    \    elseif x == 6\n        lst[6]\n    else\n        error(\"Invalid input\"\
    )\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    You are given\
    \ a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however,\
    \ unlike matrices,\n    each row may contain a different number of columns.\n\
    \    Given lst, and integer x, find integers x in the list,\n    and return list\
    \ of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate\
    \ - (row, columns), starting with 0.\n    Sort coordinates initially by rows in\
    \ ascending order.\n    Also, sort coordinates of the row by columns in descending\
    \ order.\n    \n    Examples:\n    >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[], [1], [1, 2, 3]], 3)\n\
    \    [(2, 2)]\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(lst)\
    \ == 0 \n        return Vector{Tuple{Int64, Int64}}() \n    else \n        rows\
    \ = sort(collect(enumerate(lst)), by=x->x[1])\n        columns = sort(collect(enumerate(reverse(rows))),\
    \ by=x->x[1])\n        rows = sort(rows, by=x->x[1])\n        columns = sort(columns,\
    \ by=x->x[1])\n        return zip(rows, columns)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = rows[i]\n    end\n    \n\
    \    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows\
    \ .== x]\n    cols = cols[cols .== x]\n    \n    rows = sort(rows)\n    cols =\
    \ sort(cols)\n    \n    rows = rows[rows .!= length(lst)]\n    cols = cols[cols\
    \ .!= length(lst[1])]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n  \
    \  \n    rows = rows[rows .!= length(lst)]\n    cols = cols[cols .!= length(lst[1])]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows\
    \ .!= length(lst)]\n    cols = cols[cols .!= length(lst[1])]\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows .!= length(lst)]\n\
    \    cols = cols[cols .!= length(lst[1])]\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = rows[rows .!= length(lst)]\n    cols = cols[cols\
    \ .!= length(lst[1])]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n  \
    \  \n    rows = rows[rows .!= length(lst)]\n    cols = cols[cols .!= length(lst[1])]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows\
    \ .!= length(lst)]\n    cols = cols[cols .!= length(lst[1])]\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows .!= length(lst)]\n\
    \    cols = cols[cols .!= length(lst[1])]\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = rows[rows .!= length(lst)]\n    cols = cols[cols\
    \ .!= length(lst[1])]\n    \n    rows = sort(rows)\n    cols = sort(cols)\n  \
    \  \n    rows = rows[rows .!= length(lst)]\n    cols = cols[cols .!= length(lst[1])]\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows\
    \ .!= length(lst)]\n    cols = cols[cols .!= length(lst[1])]\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows .!= length(lst)]\n\
    \    cols = cols[cols .!= length(lst[1])]\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64,\
    \ Int64}}()\n    \n    for row in lst\n        \n        columns = Vector{Int64}()\n\
    \        \n        for element in row\n            push!(columns, element)\n \
    \       end\n        \n        push!(rows, (length(columns), maximum(columns)))\n\
    \    end\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    columns = Vector{Int64}()\n    \n    for row in rows\n        \n        push!(columns,\
    \ row[1])\n    end\n    \n    columns = sort(columns)\n    \n    columns = reverse(columns)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[rows])),\
    \ by=length, reverse=true)\n    \n    coords = zeros(Int, length(rows) * length(cols))\n\
    \    \n    for row in rows\n        coords[row * length(cols) + cols] = row\n\
    \    end\n    \n    coords = coords[coords .!= 0]\n    \n    coords = coords[coords\
    \ .!= x]\n    \n    coords = coords[coords .!= length(coords)]\n    \n    coords\
    \ = coords[coords .!= length(coords)+1]\n    \n    coords = coords[coords .!=\
    \ length(coords)-1]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    if length(lst.data) == 0 \n\
    \        return Vector{Tuple{Int64, Int64}}() \n    else \n        rows = sort(collect(1:length(lst.data)))\n\
    \        cols = sort(collect(1:length(lst.data[rows[1]])))\n        \n       \
    \ coords = Vector{Tuple{Int64, Int64}}()\n        for r in rows \n           \
    \ for c in cols \n                if lst.data[r][c] == x \n                  \
    \  push!(coords, (r, c))\n                end\n            end\n        end\n\
    \        return coords\n    end\nend", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        columns = columns + lst[i][end]\n  \
    \  end\n    \n    columns = sort(columns)\n    \n    return zip(rows, columns)\n\
    end", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n \
    \   cols = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n     \
    \   \n        rows = rows + 1\n        cols = cols + length(lst[row])\n      \
    \  \n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords\
    \ = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n        \n  \
    \      coords[row] = ((rows - row(rows)), (cols - row(cols)))\n        \n    end\n\
    \    \n    coords = sort(coords)\n    \n    coords = coords[coords[1, 1] == x]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    return collect(zip(rows,\
    \ cols))\nend\n</cell>\n<code language=julia-1.3>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = ", "    \n    lst = sort(lst)\n\
    \    \n    rows = Vector{Tuple{Int64, Int64}}()\n    \n    for row in lst\n  \
    \      \n        row_sorted = sort(row)\n        \n        row_sorted = reverse(row_sorted)\n\
    \        \n        row_sorted = sort(row_sorted)\n        \n        row_sorted\
    \ = reverse(row_sorted)\n        \n        row_sorted = sort(row_sorted)\n   \
    \     \n        row_sorted = reverse(row_sorted)\n        \n        row_sorted\
    \ = sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n   \
    \     \n        row_sorted = sort(row_sorted)\n        \n        row_sorted =\
    \ reverse(row_sorted)\n        \n        row_sorted = sort(row_sorted)\n     \
    \   \n        row_sorted = reverse(row_sorted)\n        \n        row_sorted =\
    \ sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n     \
    \   \n        row_sorted = sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n\
    \        \n        row_sorted = sort(row_sorted)\n        \n        row_sorted\
    \ = reverse(row_sorted)\n        \n        row_sorted = sort(row_sorted)\n   \
    \     \n        row_sorted = reverse(row_sorted)\n        \n        row_sorted\
    \ = sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n   \
    \     \n        row_sorted = sort(row_sorted)\n        \n        row_sorted =\
    \ reverse(row_sorted)\n        \n        row_sorted = sort(row_sorted)\n     \
    \   \n        row_sorted = reverse(row_sorted)\n        \n        row_sorted =\
    \ sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n     \
    \   \n        row_sorted = sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n\
    \        \n        row_sorted = sort(row_sorted)\n        \n        row_sorted\
    \ = reverse(row_sorted)\n        \n        row_sorted = sort(row_sorted)\n   \
    \     \n        row_sorted = reverse(row_sorted)\n        \n        row_sorted\
    \ = sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n   \
    \     \n        row_sorted = sort(row_sorted)\n        \n        row_sorted =\
    \ reverse(row_sorted)\n        \n        row_sorted = sort(row_sorted)\n     \
    \   \n        row_sorted = reverse(row_sorted)\n        \n        row_sorted =\
    \ sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n     \
    \   \n        row_sorted = sort(row_sorted)\n        \n        row_sorted = reverse(row_sorted)\n",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows\
    \ = sort(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for i =\
    \ 1:length(lst)\n        columns = columns + lst[i][end]\n    end\n    \n    columns\
    \ = sort(columns)\n    \n    coords = zeros(Int, length(lst))\n    \n    for i\
    \ = 1:length(lst)\n        coords[i] = ((rows[i], columns[i]))\n    end\n    \n\
    \    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    \n    rows = sort(rows, by=x->x[20])\n\
    \    \n    rows = sort(rows, by=x->x[21])\n    \n    rows = sort(rows, by=x->x[22])\n\
    \    \n    rows = sort(rows, by=x->x[23])\n    \n    rows = sort(rows, by=x->x[24])\n\
    \    \n    rows = sort(rows, by=x->x[25])\n    \n    rows = sort(rows, by=x->x[26])\n\
    \    \n    rows = sort(rows, by=x->x[27])\n    \n    rows = sort(rows, by=x->x[28])\n\
    \    \n    rows = sort(rows, by=x->x[29])\n    \n    rows = sort(rows, by=x->x[30])\n\
    \    \n    rows = sort(rows, by=x->x[31])\n    \n    rows = sort(rows, by=x->x[32])\n\
    \    \n    rows = sort(rows, by=x->x[33])\n    \n    rows = sort(rows, by=x->x[34])\n\
    \    \n    rows = sort(rows, by=x->x[35])\n    \n    rows = sort(rows, by=x->x[36])\n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n\
    \    rows = sort(rows)\n    cols = sort(cols)\n    \n    return zip(rows, cols)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if lst == []\n        return Vector{Tuple{Int64,\
    \ Int64}}()\n    elseif x == 0\n        return Vector{Tuple{Int64, Int64}}(Tuple{0,\
    \ 0})\n    else\n        rows = sort(lst)\n        cols = sort(sort(lst)[:, 2:end])\n\
    \        \n        rows = sort(rows)\n        cols = sort(cols)\n        \n  \
    \      rows = sort(rows)\n        cols = sort(cols)\n        \n        rows =\
    \ sort(rows)\n        cols = sort(cols)\n        \n        rows = sort(rows)\n\
    \        cols = sort(cols)\n        \n        rows = sort(rows)\n        cols\
    \ = sort(cols)\n        \n        rows = sort(rows)\n        cols = sort(cols)\n\
    \        \n        rows = sort(rows)\n        cols = sort(cols)\n        \n  \
    \      rows = sort(rows)\n        cols = sort(cols)\n        \n        rows =\
    \ sort(rows)\n        cols = sort(cols)\n        \n        rows = sort(rows)\n\
    \        cols = sort(cols)\n        \n        rows = sort(rows)\n        cols\
    \ = sort(cols)\n        \n        rows = sort(rows)\n        cols = sort(cols)\n\
    \        \n        rows = sort(rows)\n        cols = sort(cols)\n        \n  \
    \      rows = sort(rows)\n        cols = sort(cols)\n        \n        rows =\
    \ sort(rows)\n        cols = sort(cols)\n        \n        rows = sort(rows)\n\
    \        cols = sort(cols)\n        \n        rows = sort(rows)\n        cols\
    \ = sort(cols)\n        \n        rows = sort(rows)\n        cols = sort(cols)\n\
    \        \n        rows = sort(rows)\n        cols = sort(cols)\n        \n  \
    \      rows = sort(rows)\n        cols = sort(cols)\n        \n        rows =\
    \ sort(rows)\n        cols = sort(cols)\n        \n        rows = sort(rows)\n\
    \        cols = sort(cols)\n        \n        rows = sort(rows)\n        cols\
    \ = sort(cols)\n        \n        rows = sort(rows)\n        cols = sort(cols)\n\
    \        \n        rows = sort(rows)\n        cols = sort(cols)\n        \n  \
    \      rows = sort(rows)\n        cols = sort(cols)\n        \n        rows =\
    \ sort(rows)\n        cols = sort(cols)\n        \n        rows = sort(rows)\n\
    \        cols = sort(cols)\n        \n        rows = sort(rows)\n        cols\
    \ = sort(cols)\n        \n        rows = sort(rows)\n        cols = sort(cols)\n\
    \        \n        rows = sort(rows)\n        cols = sort(cols)\n        \n  \
    \      rows = sort(rows)\n        cols = sort(cols)\n        \n        rows =\
    \ sort(rows)\n        cols = sort(cols)\n        \n        rows = sort(rows)\n\
    \        cols = sort(cols)\n        \n        rows = sort(rows)\n        cols\
    \ = sort(cols)\n        \n        rows = sort(rows)\n        cols = sort(cols)\n\
    \        \n        rows = sort(rows)\n        cols = sort(cols)\n        \n  \
    \      rows = sort(rows)\n        cols = sort(", "    if lst == []\n        return\
    \ Vector{Tuple{Int64, Int64}}()\n    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    return rows\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    return collect(zip(rows, cols))\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        rows = rows + row\n    end\n    \n    rows = sort(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for\
    \ (i,row) in enumerate(rows)\n        columns = columns + row[i]\n    end\n  \
    \  \n    columns = sort(columns)\n    \n    columns = reverse(columns)\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n   \
    \ rows = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n  \
    \      \n        rows = rows + row\n        \n    end\n    \n    rows = sort(rows)\n\
    \    \n    columns = zeros(Int, length(rows))\n    \n    for (i,row) in enumerate(rows)\n\
    \        \n        columns = columns + row\n        \n    end\n    \n    columns\
    \ = sort(columns)\n    \n    coords = zeros(Int, length(rows))\n    \n    for\
    \ (i,row) in enumerate(rows)\n        \n        coords[i] = (i-1, columns[i])\n\
    \        \n    end\n    \n    coords = sort(coords)\n    \n    coords = coords[2:end]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i\
    \ = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows =\
    \ sort(rows)\n    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = rows[i], lst[i][x]\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.3>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i\
    \ = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows =\
    \ sort(rows)\n    \n    columns = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        columns = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n\
    \    \n    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        \n\
    \        if row[x] == x\n            rows[i] = i\n            \n            for\
    \ (j,col) in enumerate(row)\n                \n                if col == x\n \
    \                   cols[j] = j\n                end\n            end\n      \
    \  end\n    end\n    \n    return Tuple{Int64, Int64}(sort(rows), sort(cols))\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n \
    \   rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for (i,row) in enumerate(lst)\n        \n        rows = rows + row\n    \
    \    cols = cols + 1\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64,\
    \ Int64}}()\n    \n    for row in lst\n        \n        columns = Vector{Int64}()\n\
    \        \n        for element in row\n            push!(columns, element)\n \
    \       end\n        \n        push!(rows, (row, columns))\n    end\n    \n  \
    \  rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    columns = sort(collect(eachcol(lst)))\n\
    \    \n    columns = reverse(columns)\n    \n    rows = sort(rows)\n    \n   \
    \ rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = ", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows ==\
    \ x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n   \
    \ rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols\
    \ != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols\
    \ = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows !=\
    \ x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n   \
    \ rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols\
    \ != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols\
    \ = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows !=\
    \ x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n   \
    \ rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols\
    \ != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols\
    \ = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows !=\
    \ x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n   \
    \ rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols\
    \ != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols\
    \ = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows !=\
    \ x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n   \
    \ rows = rows[cols != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols\
    \ != x]\n    cols = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols\
    \ = cols[rows != x]\n    \n    rows = rows[cols != x]\n    cols = cols[rows !=\
    \ x]\n    \n    rows = rows[cols != x]", "    \n    lst = sort(lst)\n    \n  \
    \  rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols = cols\
    \ + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = (i-1, cols) + tuple((rows[i], i))\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    return [(rows,\
    \ cols)]\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        coords[i] = Tuple(rows[i],\
    \ i)\n    end\n    \n    coords = sort(coords)\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n        \n  \
    \      rows = rows + 1\n        \n        lst = sort(lst[row])\n        \n   \
    \     columns = zeros(Int, length(lst))\n        \n        for col in 1:length(lst)\n\
    \            \n            columns = columns + 1\n            \n            if\
    \ lst[col] == x\n                \n                return [(row, columns)]\n \
    \           \n            end\n            \n        end\n        \n    end\n\
    \    \n    return []\nend", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n \
    \       rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n\
    \    columns = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n    \
    \    columns = columns + lst[i][end]\n    end\n    \n    columns = sort(columns)\n\
    \    \n    return zip(rows, columns)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if lst == []\n        []\n    elseif length(lst) == 1\n        []\n    elseif\
    \ length(lst) == length(lst[1])\n        lst[1]\n    else\n        lst[1][findfirst(x->x==lst[1],\
    \ 1:length(lst[1]))]\n    end\nend", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        coords[i] = Tuple(rows[i],\
    \ i)\n    end\n    \n    coords = sort(coords)\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    if lst == []\n        []\n    elseif\
    \ x == 1\n        []\n    else\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = ", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    return rows\nend", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][i]\n\
    \        cols = cols + lst[i][1:i-1]\n    end\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = ((rows[i] == x) ? i : -1)\n    end\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   return coords\nend", "    \n    rows = sort(collect(enumerate(lst)))\n   \
    \ \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->x[19])\n\
    \    \n    rows = sort(rows, by=x->x[20])\n    \n    rows = sort(rows, by=x->x[21])\n\
    \    \n    rows = sort(rows, by=x->x[22])\n    \n    rows = sort(rows, by=x->x[23])\n\
    \    \n    rows = sort(rows, by=x->x[24])\n    \n    rows = sort(rows, by=x->x[25])\n\
    \    \n    rows = sort(rows, by=x->x[26])\n    \n    rows = sort(rows, by=x->x[27])\n\
    \    \n    rows = sort(rows, by=x->x[28])\n    \n    rows = sort(rows, by=x->x[29])\n\
    \    \n    rows = sort(rows, by=x->x[30])\n    \n    rows = sort(rows, by=x->x[31])\n\
    \    \n    rows = sort(rows, by=x->x[32])\n    \n    rows = sort(rows, by=x->x[33])\n\
    \    \n    rows = sort(rows, by=x->x[34])\n    \n    rows = sort(rows, by=x->x[35])\n\
    \    \n    rows = sort(rows, by=x->x[36])\n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
