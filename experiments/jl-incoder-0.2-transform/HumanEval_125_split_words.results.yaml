language: jl
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words\
    \ = [w for w in words if w != \"?\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7l7bhpj.jl:59\nin expression starting at\
    \ /tmp/tmpd7l7bhpj.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg1tm723g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg1tm723g.jl:1\n\
    in expression starting at /tmp/tmpg1tm723g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if isempty(words)\n        return\
    \ words\n    else\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpi4z45up8.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi4z45up8.jl:1\n\
    in expression starting at /tmp/tmpi4z45up8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    words_split = Vector{String}()\n\
    \    words_split.push!(words)\n    \n    words_split = words_split[words_split\
    \ .!= \"\"]\n    \n    words_split = words_split[words_split .!= \",\"]\n    \n\
    \    words_split = words_split[words_split .!= \" \"]\n    \n    words_split =\
    \ words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqu2ichmw.jl:1\nin expression starting at /tmp/tmpqu2ichmw.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_split = []\n    \n  \
    \  for word in words\n        \n        if isempty(word)\n            words_split\
    \ = [word]\n        else\n            words_split = split(word)\n        end\n\
    \    end\n    \n    return words_split\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp_xguofqi.jl:35\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp_xguofqi.jl:28\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_xguofqi.jl:35 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_xguofqi.jl:34\ntest set: Error During Test at
    /tmp/tmp_xguofqi.jl:36\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp_xguofqi.jl:28\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_xguofqi.jl:36 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_xguofqi.jl:34\ntest set: Error During Test at
    /tmp/tmp_xguofqi.jl:37\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == length(words)\n        return words_split\n   \
    \ else\n        return words\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprl75pv67.jl:22\nin expression starting at\
    \ /tmp/tmprl75pv67.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnru6cfww.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnru6cfww.jl:1\n\
    in expression starting at /tmp/tmpnru6cfww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words)]\n    words_split = words_split[findall(x -> x == \"\"\
    , words_split)]\n    words_split = words_split[findall(x -> x == \"\", words)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz2xg5hiv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz2xg5hiv.jl:1\n\
    in expression starting at /tmp/tmpz2xg5hiv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \",\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \".\"]\n    words_split = words_split[words_split\
    \ .!= \",.\"]\n    words_split = words_split[words_split .!= \",,\"]\n    words_split\
    \ = words_split[words_split .!= \",.,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,\"]\n    words_split = words_split[words_split .!= \",,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,\"]\n\
    \    words_split = words_split[words_split .!= \",,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!=\
    \ \",,,,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \"\
    ,,,,,,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdji_wv8.jl:49\nin expression starting at\
    \ /tmp/tmppdji_wv8.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> !contains(x, \",\"), words)\n    words_without_commas_with_odd_order = filter(x\
    \ -> contains(x, \",\") && contains(x, \"a\") && contains(x, \"b\") && contains(x,\
    \ \"c\") && contains(x, \"d\") && contains(x, \"e\") && contains(x, \"f\"), words_without_commas)\n\
    \    words_without_commas_with_odd_order = sort(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_comm\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvgn26155.jl:40\nin expression starting at\
    \ /tmp/tmpvgn26155.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnru6cfww.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnru6cfww.jl:1\n\
    in expression starting at /tmp/tmpnru6cfww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[2], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[3], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[4], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[5], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[6], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[7], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[8], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[9], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[10], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[11], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[12], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpo4kq5n9i.jl:69\nin expression starting at /tmp/tmpo4kq5n9i.jl:69\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = Vector{String}(undef, 0)\n\
    \    for word in words\n        words_split = [word | words_split]\n    end\n\
    \    words_split\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpxy35lnmg.jl:26\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    no method matching |(::SubString{String}, ::Vector{String})\n  Closest candidates
    are:\n    |(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpxy35lnmg.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxy35lnmg.jl:26 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxy35lnmg.jl:25\ntest set: Error During Test at
    /tmp/tmpxy35lnmg.jl:27\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: no method matching |(::SubString{String},
    ::Vector{String})\n  Closest candidates are:\n    |(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpxy35lnmg.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxy35lnmg.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxy35lnmg.jl:25\ntest set: Error During Test at
    /tmp/tmpxy35lnmg.jl:28\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: no method matching |(::SubString{String},
    ::Vector{String})\n  Closest candidates are:\n    |(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpxy35lnmg.jl'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = []\n    for word in split(txt, \" \")\n        push!(words,\
    \ word)\n    end\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp8j_yshvc.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp8j_yshvc.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{Any} to an object of type \n\
    \    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8j_yshvc.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8j_yshvc.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8j_yshvc.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8j_yshvc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Any} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8j_yshvc.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8j_yshvc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8j_yshvc.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8j_yshvc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Any} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  St"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        words_split += split(word, \",\")\n    end\n \
    \   return words_split\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmeupgov_.jl:21\nin expression starting at\
    \ /tmp/tmpmeupgov_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc3x92o_.jl:1\nin expression starting at /tmp/tmptc3x92o_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprnahz3_g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprnahz3_g.jl:1\n\
    in expression starting at /tmp/tmprnahz3_g.jl:1\n"
  stdout: ''
