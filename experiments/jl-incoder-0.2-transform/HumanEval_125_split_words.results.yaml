language: jl
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words\
    \ = [w for w in words if w != \"?\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7l7bhpj.jl:59\nin expression starting at\
    \ /tmp/tmpd7l7bhpj.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg1tm723g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg1tm723g.jl:1\n\
    in expression starting at /tmp/tmpg1tm723g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if isempty(words)\n        return\
    \ words\n    else\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpi4z45up8.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi4z45up8.jl:1\n\
    in expression starting at /tmp/tmpi4z45up8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    words_split = Vector{String}()\n\
    \    words_split.push!(words)\n    \n    words_split = words_split[words_split\
    \ .!= \"\"]\n    \n    words_split = words_split[words_split .!= \",\"]\n    \n\
    \    words_split = words_split[words_split .!= \" \"]\n    \n    words_split =\
    \ words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[words_split\
    \ .!= \" \"]\n    \n    words_split = words_split[words_split .!= \" \"]\n   \
    \ \n    words_split = words_split[words_split .!= \" \"]\n    \n    words_split\
    \ = words_split[words_split .!= \" \"]\n    \n    words_split = words_split[\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqu2ichmw.jl:1\nin expression starting at /tmp/tmpqu2ichmw.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_split = []\n    \n  \
    \  for word in words\n        \n        if isempty(word)\n            words_split\
    \ = [word]\n        else\n            words_split = split(word)\n        end\n\
    \    end\n    \n    return words_split\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp_xguofqi.jl:35\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    Cannot `convert` an object of type \n    Vector{SubString{String}} to an object
    of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp_xguofqi.jl:28\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_xguofqi.jl:35 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_xguofqi.jl:34\ntest set: Error During Test at
    /tmp/tmp_xguofqi.jl:36\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: Cannot `convert` an object of type \n    Vector{SubString{String}}
    to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmp_xguofqi.jl:28\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_xguofqi.jl:36 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_xguofqi.jl:34\ntest set: Error During Test at
    /tmp/tmp_xguofqi.jl:37\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: Cannot `convert` an object of
    type \n    Vector{SubString{String}} to an object of type \n    Union{Int64, Vector{String}}\n  Closest
    candidates are:\n    convert(::Type{T}, !M'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == length(words)\n        return words_split\n   \
    \ else\n        return words\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprl75pv67.jl:22\nin expression starting at\
    \ /tmp/tmprl75pv67.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnru6cfww.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnru6cfww.jl:1\n\
    in expression starting at /tmp/tmpnru6cfww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x != \"\", words)]\n    words_split = words_split[findall(x -> x == \"\"\
    , words_split)]\n    words_split = words_split[findall(x -> x == \"\", words)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split[findall(x -> x == \"\", words_split)]\n\
    \    words_split = words_split[findall(x -> x == \"\", words_split)]\n    words_split\
    \ = words_split[findall(x -> x == \"\", words_split)]\n    words_split = words_split[findall(x\
    \ -> x == \"\", words_split)]\n    words_split = words_split[findall(x -> x ==\
    \ \"\", words_split)]\n    words_split = words_split\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz2xg5hiv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz2xg5hiv.jl:1\n\
    in expression starting at /tmp/tmpz2xg5hiv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = words_split[words_split .!= \"\"]\n    words_split = words_split[words_split\
    \ .!= \",\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= \".\"]\n    words_split = words_split[words_split\
    \ .!= \",.\"]\n    words_split = words_split[words_split .!= \",,\"]\n    words_split\
    \ = words_split[words_split .!= \",.,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,\"]\n    words_split = words_split[words_split .!= \",,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,\"]\n\
    \    words_split = words_split[words_split .!= \",,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!=\
    \ \",,,,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \"\
    ,,,,,,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdji_wv8.jl:49\nin expression starting at\
    \ /tmp/tmppdji_wv8.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> !contains(x, \",\"), words)\n    words_without_commas_with_odd_order = filter(x\
    \ -> contains(x, \",\") && contains(x, \"a\") && contains(x, \"b\") && contains(x,\
    \ \"c\") && contains(x, \"d\") && contains(x, \"e\") && contains(x, \"f\"), words_without_commas)\n\
    \    words_without_commas_with_odd_order = sort(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order = reverse(words_without_comm\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvgn26155.jl:40\nin expression starting at\
    \ /tmp/tmpvgn26155.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnru6cfww.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnru6cfww.jl:1\n\
    in expression starting at /tmp/tmpnru6cfww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[2], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[3], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[4], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[5], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[6], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[7], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[8], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[9], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[10], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[11], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[12], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpo4kq5n9i.jl:69\nin expression starting at /tmp/tmpo4kq5n9i.jl:69\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = Vector{String}(undef, 0)\n\
    \    for word in words\n        words_split = [word | words_split]\n    end\n\
    \    words_split\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpxy35lnmg.jl:26\n  Test threw
    exception\n  Expression: candidate("Hello world!") == ["Hello", "world!"]\n  MethodError:
    no method matching |(::SubString{String}, ::Vector{String})\n  Closest candidates
    are:\n    |(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpxy35lnmg.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxy35lnmg.jl:26 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxy35lnmg.jl:25\ntest set: Error During Test at
    /tmp/tmpxy35lnmg.jl:27\n  Test threw exception\n  Expression: candidate("Hello,world!")
    == ["Hello", "world!"]\n  MethodError: no method matching |(::SubString{String},
    ::Vector{String})\n  Closest candidates are:\n    |(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpxy35lnmg.jl:17\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxy35lnmg.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxy35lnmg.jl:25\ntest set: Error During Test at
    /tmp/tmpxy35lnmg.jl:28\n  Test threw exception\n  Expression: candidate("Hello
    world,!") == ["Hello", "world,!"]\n  MethodError: no method matching |(::SubString{String},
    ::Vector{String})\n  Closest candidates are:\n    |(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    split_words(txt::String)\n     @ Main /tmp/tmpxy35lnmg.jl'
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = []\n    for word in split(txt, \" \")\n        push!(words,\
    \ word)\n    end\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp8j_yshvc.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp8j_yshvc.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{Any} to an object of type \n\
    \    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8j_yshvc.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8j_yshvc.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8j_yshvc.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8j_yshvc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Any} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8j_yshvc.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8j_yshvc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8j_yshvc.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8j_yshvc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Any} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  St"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        words_split += split(word, \",\")\n    end\n \
    \   return words_split\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmeupgov_.jl:21\nin expression starting at\
    \ /tmp/tmpmeupgov_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc3x92o_.jl:1\nin expression starting at /tmp/tmptc3x92o_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprnahz3_g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprnahz3_g.jl:1\n\
    in expression starting at /tmp/tmprnahz3_g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        words_split = words_split ++ split(word, \",\"\
    )\n    end\n    words_split = words_split ++ [length(words)]\n    words_split\
    \ = words_split .- words_split[1]\n    words_split = words_split .- words_split[2]\n\
    \    words_split = words_split .- words_split[3]\n    words_split = words_split\
    \ .- words_split[4]\n    words_split = words_split .- words_split[5]\n    words_split\
    \ = words_split .- words_split[6]\n    words_split = words_split .- words_split[7]\n\
    \    words_split = words_split .- words_split[8]\n    words_split = words_split\
    \ .- words_split[9]\n    words_split = words_split .- words_split[10]\n    words_split\
    \ = words_split .- words_split[11]\n    words_split = words_split .- words_split[12]\n\
    \    words_split = words_split .- words_split[13]\n    words_split = words_split\
    \ .- words_split[14]\n    words_split = words_split .- words_split[15]\n    words_split\
    \ = words_split .- words_split[16]\n    words_split = words_split .- words_split[17]\n\
    \    words_split = words_split .- words_split[18]\n    words_split = words_split\
    \ .- words_split[19]\n    words_split = words_split .- words_split[20]\n    words_split\
    \ = words_split .- words_split[21]\n    words_split = words_split .- words_split[22]\n\
    \    words_split = words_split .- words_split[23]\n    words_split = words_split\
    \ .- words_split[24]\n    words_split = words_split .- words_split[25]\n    words_split\
    \ = words_split .- words_split[26]\n    words_split = words_split .- words_split[27]\n\
    \    words_split = words_split .- words_split[28]\n    words_split = words_split\
    \ .- words_split[29]\n    words_split = words_split .- words_split[30]\n    words_split\
    \ = words_split .- words_split[31]\n    words_split = words_split .- words_split[32]\n\
    \    words_split = words_split .- words_split[33]\n    words_split = words_split\
    \ .- words_split[34]\n    words_split = words_split .- words_split[35]\n    words_split\
    \ = words_split .- words_split[36]\n    words_split = words_split .- words_split[37]\n\
    \    words_split = words_split .\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"words_split\
    \ .\" at /tmp/tmp8xxkybdr.jl:57\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8xxkybdr.jl:57\n\
    in expression starting at /tmp/tmp8xxkybdr.jl:57\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnru6cfww.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnru6cfww.jl:1\n\
    in expression starting at /tmp/tmpnru6cfww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmba_ja6i.jl:59\nin expression starting at\
    \ /tmp/tmpmba_ja6i.jl:59\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    words_split = [word for word in words if !isempty(word)]\n    words_split\
    \ = sort(words_split)\n    words_split = words_split[words_split .!= \"\"]\n \
    \   words_split = words_split[words_split .!= \",\"]\n    words_split = words_split[words_split\
    \ .!= \".\"]\n    words_split = words_split[words_split .!= \",.\"]\n    words_split\
    \ = words_split[words_split .!= \",,\"]\n    words_split = words_split[words_split\
    \ .!= \",.,\"]\n    words_split = words_split[words_split .!= \",,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,\"]\n\
    \    words_split = words_split[words_split .!= \",,,,,,,\"]\n    words_split =\
    \ words_split[words_split .!= \",,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,\"]\n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \"\
    ,,,,,,,,,,,,,,,,,,\"]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,\"\
    ]\n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,\"]\n \
    \   words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,,,\"]\n  \
    \  words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,,,,,\"]\n \
    \   words_split = words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp23qiqneb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp23qiqneb.jl:1\n\
    in expression starting at /tmp/tmp23qiqneb.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    if length(words) == 0\n        return words\n    else\n        words\
    \ = split(txt, \",\")\n        words = [w for w in words if w != \"\"]\n     \
    \   if length(words) == 0\n            return words\n        else\n          \
    \  words = split(txt, \"-\")\n            words = [w for w in words if w != \"\
    \"]\n            if length(words) == 0\n                return words\n       \
    \     else\n                words = split(txt, \"_\")\n                words =\
    \ [w for w in words if w != \"\"]\n                if length(words) == 0\n   \
    \                 return words\n                else\n                    words\
    \ = split(txt, \":\")\n                    words = [w for w in words if w != \"\
    \"]\n                    if length(words) == 0\n                        return\
    \ words\n                    else\n                        words = split(txt,\
    \ \";\")\n                        words = [w for w in words if w != \"\"]\n  \
    \                      if length(words) == 0\n                            return\
    \ words\n                        else\n                            words = split(txt,\
    \ \"?\")\n                            words = [w for w in words if w != \"\"]\n\
    \                            if length(words) == 0\n                         \
    \       return words\n                            else\n                     \
    \           words = split(txt, \"!\")\n                                words =\
    \ [w for w in words if w != \"\"]\n                                if length(words)\
    \ == 0\n                                    return words\n                   \
    \             else\n                                    words = split(txt, \"\
    .\")\n                                    words = [w for w in words if w != \"\
    \"]\n                                    if length(words) == 0\n             \
    \                           return words\n                                   \
    \ else\n                                        words = split(txt, \",\")\n  \
    \                                      words = [w for w in words if w != \"\"\
    ]\n                                        if length(words) == 0\n           \
    \                                 return words\n                             \
    \           else\n                                            words = split(txt,\
    \ \";\")\n                                            words = [w for w in words\
    \ if w != \"\"]\n                                            if length(words)\
    \ == 0\n                                                return words\n       \
    \                                     else\n                                 \
    \               words = split(txt, \"?\")\n                                  \
    \              words = [w for w in words if w != \"\"]\n                     \
    \                           if length(words) == 0\n                          \
    \                          return words\n                                    \
    \            else\n                                                    words =\
    \ split(txt, \"!\")\n                                                    words\
    \ = [w for w in words if w != \"\"]\n                                        \
    \            if length(words) == 0\n                                         \
    \               return words\n                                               \
    \     else\n                                                        words = split(txt,\
    \ \".\")\n                                                        words = [w for\
    \ w in words if w != \"\"]\n                                                 \
    \       if length(words) == 0\n                                              \
    \              return words\n                                                \
    \        else\n                                                            words\
    \ = split(txt, \",\")\n                                                      \
    \      words = [w for w in words if w != \"\"]\n                             \
    \                               if length(words) == 0\n                      \
    \                                          return words\n                    \
    \                                        else\n                              \
    \                                  words = split(txt, \";\")\n               \
    \                                                 words = [w \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85yen9h7.jl:1\nin expression starting at /tmp/tmp85yen9h7.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif\
    \ txt == \"\\r\"\n        return Vector{String}(\"\\r\")\n    elseif txt == \"\
    \\t\"\n        return Vector{String}(\"\\t\")\n    elseif txt == \"\\r\\n\"\n\
    \        return Vector{String}(\"\\r\\n\")\n    elseif txt == \"\\t\\n\"\n   \
    \     return Vector{String}(\"\\t\\n\")\n    elseif txt == \"\\n\"\n        return\
    \ Vector{String}(\"\\n\")\n    elseif txt == \"\\r\"\n        return Vector{String}(\"\
    \\r\")\n    elseif txt == \"\\t\"\n        return Vector{String}(\"\\t\")\n  \
    \  elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\\r\\n\")\n    elseif\
    \ txt == \"\\t\\n\"\n        return Vector{String}(\"\\t\\n\")\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\r\"\
    \n        return Vector{String}(\"\\r\")\n    elseif txt == \"\\t\"\n        return\
    \ Vector{String}(\"\\t\")\n    elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\
    \\r\\n\")\n    elseif txt == \"\\t\\n\"\n        return Vector{String}(\"\\t\\\
    n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif\
    \ txt == \"\\r\"\n        return Vector{String}(\"\\r\")\n    elseif txt == \"\
    \\t\"\n        return Vector{String}(\"\\t\")\n    elseif txt == \"\\r\\n\"\n\
    \        return Vector{String}(\"\\r\\n\")\n    elseif txt == \"\\t\\n\"\n   \
    \     return Vector{String}(\"\\t\\n\")\n    elseif txt == \"\\n\"\n        return\
    \ Vector{String}(\"\\n\")\n    elseif txt == \"\\r\"\n        return Vector{String}(\"\
    \\r\")\n    elseif txt == \"\\t\"\n        return Vector{String}(\"\\t\")\n  \
    \  elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\\r\\n\")\n    elseif\
    \ txt == \"\\t\\n\"\n        return Vector{String}(\"\\t\\n\")\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif txt == \"\\r\"\
    \n        return Vector{String}(\"\\r\")\n    elseif txt == \"\\t\"\n        return\
    \ Vector{String}(\"\\t\")\n    elseif txt == \"\\r\\n\"\n        return Vector{String}(\"\
    \\r\\n\")\n    elseif txt == \"\\t\\n\"\n        return Vector{String}(\"\\t\\\
    n\")\n    elseif txt == \"\\n\"\n        return Vector{String}(\"\\n\")\n    elseif\
    \ txt == \"\\r\"\n        return Vector{\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4qosvew.jl:83\nin expression starting at\
    \ /tmp/tmpa4qosvew.jl:83\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter((x)\
    \ -> !contains(x, \",\"), words)\n    words_without_commas_without_spaces = filter((x)\
    \ -> !contains(x, \" \"), words_without_commas)\n    words_without_commas_without_spaces_without_comma\
    \ = filter((x) -> !contains(x, \",\"), words_without_commas_without_spaces)\n\
    \    words_without_commas_without_spaces_without_comma_without_space = filter((x)\
    \ -> !contains(x, \" \"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma\
    \ = filter((x) -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space\
    \ = filter((x) -> !contains(x, \" \"), words_without_commas_without_spaces_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter((x) -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter((x) -> !contains(x, \" \"), words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter((x) -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter((x) -> !contains(x, \" \"), words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter((x) -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo3j_ajc2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo3j_ajc2.jl:1\n\
    in expression starting at /tmp/tmpo3j_ajc2.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words_list = split(txt, \" \")\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\n    words_list = words_list[words_list.!=txt]\n\
    \    words_list = words_list[words_list.!=\",\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0hx0mwkx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hx0mwkx.jl:1\n\
    in expression starting at /tmp/tmp0hx0mwkx.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w\
    \ for w in words if w != \"_\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w\
    \ for w in words if w != \"_\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w\
    \ for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_gf6hrtg.jl:87\nin expression starting at\
    \ /tmp/tmp_gf6hrtg.jl:87\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    word = \"\"\n    for c in txt\n\
    \        if c == \",\"\n            push!(words, word)\n            word = \"\"\
    \n        else\n            word *= c\n        end\n    end\n    push!(words,\
    \ word)\n    return words\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer! I appreciate it. I tried running your code and I got this error\
    \ `ERROR: LoadError: UndefVarError: split_words not defined`\n<|/ c |>\n<| c |>\n\
    I added the function definition to the answer\n<|/ c |>\n<| c |>\nThanks again!\
    \ I added the function definition to the answer. I'm still getting an error though.\
    \ `ERROR: LoadError: UndefVarError: split_words not defined`\n<|/ c |>\n<| c |>\n\
    I added the function definition to the answer\n<|/ c |>\n<| c |>\nThanks again!\
    \ I added the function definition to the answer. I'm still getting an error though.\
    \ `ERROR: LoadError: UndefVarError: split_words not defined`\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe code below is based on your original code, but I added some comments\
    \ to explain what each line does. I hope it helps.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqygpu_5.jl:27\nin expression starting at\
    \ /tmp/tmpkqygpu_5.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n\
    \    for word in words\n        if !isempty(word)\n            words_split = words_split\
    \ ++ split(word, \",\")\n        end\n    end\n    \n    words_split = words_split\
    \ ++ [length(words)]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj59k0zeh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj59k0zeh.jl:1\n\
    in expression starting at /tmp/tmpj59k0zeh.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> x != \",\", words)\n    words_without_commas_with_odd_order = filter(x ->\
    \ x != \",\" && x != \" \", words_without_commas)\n    words_without_commas_with_odd_order_with_odd_order\
    \ = filter(x -> x != \",\" && x != \" \" && x != \" \", words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_odd_order_with_odd_order = filter(x\
    \ -> x != \",\" && x != \" \" && x != \" \" && x != \" \", words_without_commas_with_odd_order_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order\
    \ = filter(x -> x != \",\" && x != \" \" && x != \" \" && x != \" \" && x != \"\
    \ \", words_without_commas_with_odd_order_with_odd_order_with_odd_order)\n   \
    \ words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order\
    \ = filter(x -> x != \",\" && x != \" \" && x != \" \" && x != \" \" && x != \"\
    \ \" && x != \" \", words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order\
    \ = filter(x -> x != \",\" && x != \" \" && x != \" \" && x != \" \" && x != \"\
    \ \" && x != \" \" && x != \" \", words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order\
    \ = filter(x -> x != \",\" && x != \" \" && x != \" \" && x != \" \" && x != \"\
    \ \" && x != \" \" && x != \" \" && x != \" \", words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_odd_order_with_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3p18a2j_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3p18a2j_.jl:1\n\
    in expression starting at /tmp/tmp3p18a2j_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(words, \",\"\
    )\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n   \
    \ words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !isempty(x), words_split)]\n    words_split = words_split[findall(x\
    \ -> !isempty(x), words_split)]\n    words_split = words_split[findall(x -> !isempty(x),\
    \ words_split)]\n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    words_split = words_split[findall(x -> !isempty(x), words_split)]\n    words_split\
    \ = words_split[findall(x -> !ise\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu1vlurm.jl:44\nin expression starting at\
    \ /tmp/tmpyu1vlurm.jl:44\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = [w for w in words_split if w != \"\"]\n    words_split = [w for w in words_split\
    \ if w != \",\"]\n    words_split = [w for w in words_split if w != \" \"]\n \
    \   words_split = [w for w in words_split if w != \"\\n\"]\n    words_split =\
    \ [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponuu6247.jl:1\nin expression starting at /tmp/tmponuu6247.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_split = []\n    \n  \
    \  for word in words\n        \n        if isempty(word)\n            words_split\
    \ = [word]\n        else\n            words_split = split(word)\n        end\n\
    \    end\n    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"ab,c,d\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxk_ddu3d.jl:30\nin expression starting at\
    \ /tmp/tmpxk_ddu3d.jl:30\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \".\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg5e3xubv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg5e3xubv.jl:1\n\
    in expression starting at /tmp/tmpg5e3xubv.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words)\n    words_no_commas = filter(x -> !contains(x, \",\"), words_no_spaces)\n\
    \    words_no_commas_no_spaces = filter(x -> !contains(x, \" \"), words_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words_no_commas_no_spaces_no_commas)\n    words_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces = filter(x\
    \ -> !contains(x, \" \"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_no_commas_no_spaces_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposccnz72.jl:27\nin expression starting at\
    \ /tmp/tmposccnz72.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnru6cfww.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnru6cfww.jl:1\n\
    in expression starting at /tmp/tmpnru6cfww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    word = \"\"\n    for c in txt\n\
    \        if c == \" \" || c == \",\"\n            push!(words, word)\n       \
    \     word = \"\"\n        else\n            word *= c\n        end\n    end\n\
    \    push!(words, word)\n    return words\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj479wmw8.jl:27\nin expression starting at\
    \ /tmp/tmpj479wmw8.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split2 = split(txt, \",\")\n    words_split3 = split(txt, \",\")\n\
    \    words_split4 = split(txt, \",\")\n    words_split5 = split(txt, \",\")\n\
    \    words_split6 = split(txt, \",\")\n    words_split7 = split(txt, \",\")\n\
    \    words_split8 = split(txt, \",\")\n    words_split9 = split(txt, \",\")\n\
    \    words_split10 = split(txt, \",\")\n    words_split11 = split(txt, \",\")\n\
    \    words_split12 = split(txt, \",\")\n    words_split13 = split(txt, \",\")\n\
    \    words_split14 = split(txt, \",\")\n    words_split15 = split(txt, \",\")\n\
    \    words_split16 = split(txt, \",\")\n    words_split17 = split(txt, \",\")\n\
    \    words_split18 = split(txt, \",\")\n    words_split19 = split(txt, \",\")\n\
    \    words_split20 = split(txt, \",\")\n    words_split21 = split(txt, \",\")\n\
    \    words_split22 = split(txt, \",\")\n    words_split23 = split(txt, \",\")\n\
    \    words_split24 = split(txt, \",\")\n    words_split25 = split(txt, \",\")\n\
    \    words_split26 = split(txt, \",\")\n    words_split27 = split(txt, \",\")\n\
    \    words_split28 = split(txt, \",\")\n    words_split29 = split(txt, \",\")\n\
    \    words_split30 = split(txt, \",\")\n    words_split31 = split(txt, \",\")\n\
    \    words_split32 = split(txt, \",\")\n    words_split33 = split(txt, \",\")\n\
    \    words_split34 = split(txt, \",\")\n    words_split35 = split(txt, \",\")\n\
    \    words_split36 = split(txt, \",\")\n    words_split37 = split(txt, \",\")\n\
    \    words_split38 = split(txt, \",\")\n    words_split39 = split(txt, \",\")\n\
    \    words_split40 = split(txt, \",\")\n    words_split41 = split(txt, \",\")\n\
    \    words_split42 = split(txt, \",\")\n    words_split43 = split(txt, \",\")\n\
    \    words_split44 = split(txt, \",\")\n    words_split45 = split(txt, \",\")\n\
    \    words_split46 = split(txt, \",\")\n    words_split47 = split(txt, \",\")\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpry5vbzf2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpry5vbzf2.jl:1\n\
    in expression starting at /tmp/tmpry5vbzf2.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        words_split = words_split ++ split(word, \",\"\
    )\n    end\n    words_split = words_split ++ [length(words)]\n    words_split\
    \ = words_split .- words_split[end]\n    words_split = words_split .- words_split[end]\n\
    \    words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n    words_split = words_split\
    \ .- words_split[end]\n    words_split = words_split .- words_split[end]\n   \
    \ words_split = words_split .- words_split[end]\n\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjdt22lbw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjdt22lbw.jl:1\n\
    in expression starting at /tmp/tmpjdt22lbw.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    words_split = Vector{String}()\n\
    \    words_split.push!(words)\n    \n    words_split = words_split[words_split\
    \ .!= \"\"]\n    \n    if words_split.length == 1\n        return words_split\n\
    \    else\n        words_split = words_split[words_split .!= \",\"]\n        words_split\
    \ = words_split[words_split .!= \".\"]\n        words_split = words_split[words_split\
    \ .!= \" \"]\n        words_split = words_split[words_split .!= \"\"]\n      \
    \  \n        return words_split\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphs0lol7o.jl:32\nin expression starting at\
    \ /tmp/tmphs0lol7o.jl:32\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    words_without_commas = filter(x\
    \ -> x != \",\", words)\n    \n    words_without_commas = sort(words_without_commas)\n\
    \    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ !~ \" \"]\n    \n    words_without_commas = words_\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47sypl8y.jl:1\nin expression starting at /tmp/tmp47sypl8y.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = Vector{String}()\n    words_split.push!(words)\n\
    \    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt, \"\
    \ \"))\n    words_split.push!(split(txt, \".\"))\n    words_split.push!(split(txt,\
    \ \" .\"))\n    words_split.push!(split(txt, \"!\"))\n    words_split.push!(split(txt,\
    \ \" !\"))\n    words_split.push!(split(txt, \"?\"))\n    words_split.push!(split(txt,\
    \ \" ?\"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \" -\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \" (\"))\n    words_split.push!(split(txt,\
    \ \"[\"))\n    words_split.push!(split(txt, \"]\"))\n    words_split.push!(split(txt,\
    \ \" [\"))\n    words_split.push!(split(txt, \"{\"))\n    words_split.push!(split(txt,\
    \ \"}\"))\n    words_split.push!(split(txt, \" {\"))\n    words_split.push!(split(txt,\
    \ \"\\\"\"))\n    words_split.push!(split(txt, \"]\"))\n    words_split.push!(split(txt,\
    \ \" \\\"\"))\n    words_split.push!(split(txt, \"'\"))\n    words_split.push!(split(txt,\
    \ \" '\"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \" -\"))\n    words_split.push!(split(txt, \".\"))\n    words_split.push!(split(txt,\
    \ \" .\"))\n    words_split.push!(split(txt, \"!\"))\n    words_split.push!(split(txt,\
    \ \" !\"))\n    words_split.push!(split(txt, \"?\"))\n    words_split.push!(split(txt,\
    \ \" ?\"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \" -\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \" (\"))\n    words_split.push!(split(txt,\
    \ \"[\"))\n    words_split.push!(split(txt, \"]\"))\n    words_split.push!(split(txt,\
    \ \" [\"))\n    words_split.push!(split(txt, \"{\"))\n    words_split.push!(split(txt,\
    \ \"}\"))\n    words_split.push!(split(txt, \" {\"))\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1jkaykwc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jkaykwc.jl:1\n\
    in expression starting at /tmp/tmp1jkaykwc.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = Vector{String}()\n    words_split.push!(words)\n\
    \    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt, \"\
    \ \"))\n    words_split.push!(split(txt, \".\"))\n    words_split.push!(split(txt,\
    \ \"!\"))\n    words_split.push!(split(txt, \" \"))\n    words_split.push!(split(txt,\
    \ \"-\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt,\
    \ \" \"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"(\"))\n    words_split.push!(split(txt, \")\"))\n    words_split.push!(split(txt,\
    \ \",\"))\n    words_split.push!(split(txt, \" \"))\n    words_split.push!(split(txt,\
    \ \"-\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt,\
    \ \" \"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"(\"))\n    words_split.push!(split(txt, \")\"))\n    words_split.push!(split(txt,\
    \ \",\"))\n    words_split.push!(split(txt, \" \"))\n    words_split.push!(split(txt,\
    \ \"-\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt,\
    \ \" \"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"(\"))\n    words_split.push!(split(txt, \")\"))\n    words_split.push!(split(txt,\
    \ \",\"))\n    words_split.push!(split(txt, \" \"))\n    words_split.push!(split(txt,\
    \ \"-\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt,\
    \ \" \"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"(\"))\n    words_split.push!(split(txt, \")\"))\n    words_split.push!(split(txt,\
    \ \",\"))\n    words_split.push!(split(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeki5r137.jl:64\nin expression starting at\
    \ /tmp/tmpeki5r137.jl:64\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = words[words != \"\
    \"]\n        return words\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxxn99p7.jl:23\nin expression starting at\
    \ /tmp/tmpxxxn99p7.jl:23\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    .\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpvcsrx6l2.jl:58\nin expression starting at /tmp/tmpvcsrx6l2.jl:58\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == length(words)\n        return words_split\n   \
    \ else\n        return words\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_edsw_2.jl:22\nin expression starting at\
    \ /tmp/tmpd_edsw_2.jl:22\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split2 = split(txt, \",\")\n    words_split3 = split(txt, \",\")\n\
    \    words_split4 = split(txt, \",\")\n    words_split5 = split(txt, \",\")\n\
    \    words_split6 = split(txt, \",\")\n    words_split7 = split(txt, \",\")\n\
    \    words_split8 = split(txt, \",\")\n    words_split9 = split(txt, \",\")\n\
    \    words_split10 = split(txt, \",\")\n    words_split11 = split(txt, \",\")\n\
    \    words_split12 = split(txt, \",\")\n    words_split13 = split(txt, \",\")\n\
    \    words_split14 = split(txt, \",\")\n    words_split15 = split(txt, \",\")\n\
    \    words_split16 = split(txt, \",\")\n    words_split17 = split(txt, \",\")\n\
    \    words_split18 = split(txt, \",\")\n    words_split19 = split(txt, \",\")\n\
    \    words_split20 = split(txt, \",\")\n    words_split21 = split(txt, \",\")\n\
    \    words_split22 = split(txt, \",\")\n    words_split23 = split(txt, \",\")\n\
    \    words_split24 = split(txt, \",\")\n    words_split25 = split(txt, \",\")\n\
    \    words_split26 = split(txt, \",\")\n    words_split27 = split(txt, \",\")\n\
    \    words_split28 = split(txt, \",\")\n    words_split29 = split(txt, \",\")\n\
    \    words_split30 = split(txt, \",\")\n    words_split31 = split(txt, \",\")\n\
    \    words_split32 = split(txt, \",\")\n    words_split33 = split(txt, \",\")\n\
    \    words_split34 = split(txt, \",\")\n    words_split35 = split(txt, \",\")\n\
    \    words_split36 = split(txt, \",\")\n    words_split37 = split(txt, \",\")\n\
    \    words_split38 = split(txt, \",\")\n    words_split39 = split(txt, \",\")\n\
    \    words_split40 = split(txt, \",\")\n    words_split41 = split(txt, \",\")\n\
    \    words_split42 = split(txt, \",\")\n    words_split43 = split(txt, \",\")\n\
    \    words_split44 = split(txt, \",\")\n    words_split45 = split(txt, \",\")\n\
    \    words_split46 = split(txt, \",\")\n    words_split47 = split(txt, \",\")\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpry5vbzf2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpry5vbzf2.jl:1\n\
    in expression starting at /tmp/tmpry5vbzf2.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    -\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpq5r06z4v.jl:58\nin expression starting at /tmp/tmpq5r06z4v.jl:58\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \"-\")\n    words::Vector{String}\
    \ = split(txt, \";\")\n    words::Vector{String} = split(txt, \":\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \"/\")\n    words::Vector{String}\
    \ = split(txt, \"\\\\\")\n    words::Vector{String} = split(txt, \"'\")\n    words::Vector{String}\
    \ = split(txt, \"\\\"\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \"/\")\n    words::Vector{String}\
    \ = split(txt, \"\\\\\")\n    words::Vector{String} = split(txt, \"'\")\n    words::Vector{String}\
    \ = split(txt, \"\\\"\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \"/\")\n    words::Vector{String}\
    \ = split(txt, \"\\\\\")\n    words::Vector{String} = split(txt, \"'\")\n    words::Vector{String}\
    \ = split(txt, \"\\\"\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \"/\")\n    words::Vector{String}\
    \ = split(txt, \"\\\\\")\n    words::Vector{String} = split(txt, \"'\")\n    words::Vector{String}\
    \ = split(txt, \"\\\"\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \"/\")\n    words::Vector{String}\
    \ = split(txt, \"\\\\\")\n    words::Vector{String} = split(txt, \"'\")\n    words::Vector{String}\
    \ = split(txt, \"\\\"\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \"/\")\n    words::Vector{String}\
    \ = split(txt, \"\\\\\")\n    words::Vector{String} = split(txt, \"'\")\n    words::Vector{String}\
    \ = split(txt, \"\\\"\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplb117gpp.jl:58\nin expression starting at\
    \ /tmp/tmplb117gpp.jl:58\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words) == length(words_split)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"Hello world!\" which has spaces in it\n<|/\
    \ c |>\n<| c |>\nI added a version that handles spaces.\n<|/ c |>\n<| c |>\nI\
    \ added a version that handles spaces.\n<|/ c |>\n<| c |>\nI added a version that\
    \ handles spaces.\n<|/ c |>\n<| c |>\nI added a version that handles spaces.\n\
    <|/ c |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk89rmpa.jl:22\nin expression starting at\
    \ /tmp/tmpzk89rmpa.jl:22\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHI\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvah_806m.jl:29\nin expression starting at\
    \ /tmp/tmpvah_806m.jl:29\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = words_split[findall(words_split .!= \"\")] \n    words_split = words_split[findall(words_split\
    \ .!= \" \")]\n    words_split = words_split[findall(words_split .!= \",\")]\n\
    \    words_split = words_split[findall(words_split .!= \" ,\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" .,\")]\n    words_split = words_split[findall(words_split .!= \" .,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.,\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split .!= \" ,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split .!= \" ,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split .!= \" ,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split .!= \" ,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.,.\")]\n    words_split = words_split[findall(words_split .!= \" ,.,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.,.\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.,.\")]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7dbgo28c.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7dbgo28c.jl:1\n\
    in expression starting at /tmp/tmp7dbgo28c.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHI\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvah_806m.jl:29\nin expression starting at\
    \ /tmp/tmpvah_806m.jl:29\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprnahz3_g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprnahz3_g.jl:1\n\
    in expression starting at /tmp/tmprnahz3_g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    word_counts = Dict{String, Int64}()\n \
    \   for word in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = sort(word_counts, by=x->x[1])\n    word_counts = reverse(word_counts)\n\
    \    word_counts = filter(x -> x[1] % 2 == 1, word_counts)\n    word_counts =\
    \ map(x -> x[1], word_counts)\n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    word_counts = map(x -> x[1], word_counts)\n    word_counts = filter(x ->\
    \ x != 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n    word_counts\
    \ = filter(x -> x != 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n\
    \    word_counts = filter(x -> x != 0, word_counts)\n    word_counts = map(x ->\
    \ x[1], word_counts)\n    word_counts = filter(x -> x != 0, word_counts)\n   \
    \ word_counts = map(x -> x[1], word_counts)\n    word_counts = filter(x -> x !=\
    \ 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n    word_counts\
    \ = filter(x -> x != 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n\
    \    word_counts = filter(x -> x != 0, word_counts)\n    word_counts = map(x ->\
    \ x[1], word_counts)\n    word_counts = filter(x -> x != 0, word_counts)\n   \
    \ word_counts = map(x -> x[1], word_counts)\n    word_counts = filter(x -> x !=\
    \ 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n    word_counts\
    \ = filter(x -> x != 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n\
    \    word_counts = filter(x -> x != 0, word_counts)\n    word_counts = map(x ->\
    \ x[1], word_counts)\n    word_counts = filter(x -> x != 0, word_counts)\n   \
    \ word_counts = map(x -> x[1], word_counts)\n    word_counts = filter(x -> x !=\
    \ 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n    word_counts\
    \ = filter(x -> x != 0, word_counts)\n    word_counts = map(x -> x[1], word_counts)\n\
    \    word_counts = \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8g4yr0dp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8g4yr0dp.jl:1\n\
    in expression starting at /tmp/tmp8g4yr0dp.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = [w for w in words_split if w != \"\"]\n    words_split = [w for w in words_split\
    \ if w != \",\"]\n    words_split = [w for w in words_split if w != \" \"]\n \
    \   words_split = [w for w in words_split if w != \"\\t\"]\n    words_split =\
    \ [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jdilxmj.jl:1\nin expression starting at /tmp/tmp3jdilxmj.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    else\n        \n        words = split(txt, \",\"\
    )\n        \n        if length(words) == 0\n            return words\n       \
    \ else\n            \n            words = split(txt, \"-\")\n            \n  \
    \          if length(words) == 0\n                return words\n            else\n\
    \                \n                words = split(txt, \";\")\n               \
    \ \n                if length(words) == 0\n                    return words\n\
    \                else\n                    \n                    words = split(txt,\
    \ \"/\")\n                    \n                    if length(words) == 0\n  \
    \                      return words\n                    else\n              \
    \          \n                        words = split(txt, \"\\\\\")\n          \
    \              \n                        if length(words) == 0\n             \
    \               return words\n                        else\n                 \
    \           \n                            words = split(txt, \"&\")\n        \
    \                    \n                            if length(words) == 0\n   \
    \                             return words\n                            else\n\
    \                                \n                                words = split(txt,\
    \ \"|\")\n                                \n                                if\
    \ length(words) == 0\n                                    return words\n     \
    \                           else\n                                    \n     \
    \                               words = split(txt, \"#\")\n                  \
    \                  \n                                    if length(words) == 0\n\
    \                                        return words\n                      \
    \              else\n                                        \n              \
    \                          words = split(txt, \"$\")\n                       \
    \                 \n                                        if length(words) ==\
    \ 0\n                                            return words\n              \
    \                          else\n                                            \n\
    \                                            words = split(txt, \"%\")\n     \
    \                                       \n                                   \
    \         if length(words) == 0\n                                            \
    \    return words\n                                            else\n        \
    \                                        \n                                  \
    \              words = split(txt, \"^\")\n                                   \
    \             \n                                                if length(words)\
    \ == 0\n                                                    return words\n   \
    \                                             else\n                         \
    \                           \n                                               \
    \     words = split(txt, \"&\")\n                                            \
    \        \n                                                    if length(words)\
    \ == 0\n                                                        return words\n\
    \                                                    else\n                  \
    \                                      \n                                    \
    \                    words = split(txt, \"*\")\n                             \
    \                           \n                                               \
    \         if length(words) == 0\n                                            \
    \                return words\n                                              \
    \          else\n                                                            \n\
    \                                                            words = split(txt,\
    \ \"(\")\n                                                            \n     \
    \                                                       if length(words) == 0\n\
    \                                                                return words\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            words = split(txt, \")\")\n     \
    \                                                           \n               \
    \                                                 if length(words) == 0\n    \
    \                                                                return words\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words = split(txt, \"\
    +\")\n                                                                    \n \
    \                                                                   if length(words)\
    \ == 0\n                                                                     \
    \   return words\n                                                           \
    \         else\n                                                             \
    \           \n                                                               \
    \         words = split(txt, \"-\")\n                                        \
    \                                \n                                          \
    \                              if length(words) == 0\n                       \
    \                                                     return words\n         \
    \                                                               else\n       \
    \                                                                     \n     \
    \                                                                       words\
    \ = split(txt, \"/\")\n                                                      \
    \                      \n                                                    \
    \                        if length(words) == 0\n                             \
    \                                                   return words\n           \
    \                                                                 else\n     \
    \                                                                           \n\
    \                                                                            \
    \    words = split(txt, \"\\\\\")\n                                          \
    \                                      \n                                    \
    \                                            if length(words) == 0\n         \
    \                                                                           return\
    \ words\n                                                                \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0h0__i9.jl:69\nin expression starting at\
    \ /tmp/tmpm0h0__i9.jl:69\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1eu0pn5e.jl:1\nin expression starting at /tmp/tmp1eu0pn5e.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiucq51z8.jl:1\nin expression starting at /tmp/tmpiucq51z8.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    .\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w\
    \ for w in words if w != \"(\"]\n    words = [w for w in words if w != \")\"]\n\
    \    words = [w for w in words if w != \"[\"]\n    words = [w for w in words if\
    \ w != \"]\"]\n    words = [w for w in words if w != \"{\"]\n    words = [w for\
    \ w in words if w != \"}\"]\n    words = [w for w in words if w != \"|\"]\n  \
    \  words = [w for w in words if w != \"&\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"(\"]\n  \
    \  words = [w for w in words if w != \")\"]\n    words = [w for w in words if\
    \ w != \"[\"]\n    words = [w for w in words if w != \"]\"]\n    words = [w for\
    \ w in words if w != \"{\"]\n    words = [w for w in words if w != \"}\"]\n  \
    \  words = [w for w in words if w != \"|\"]\n    words = [w for w in words if\
    \ w != \"&\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"(\"]\n    words = [w for w in words if\
    \ w != \")\"]\n    words = [w for w in words if w != \"[\"]\n    words = [w for\
    \ w in words if w != \"]\"]\n    words = [w for w in words if w != \"{\"]\n  \
    \  words = [w for w in words if w != \"}\"]\n    words = [w for w in words if\
    \ w != \"|\"]\n    words = [w for w in words if w != \"&\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpmblltzgm.jl:58\nin expression starting at /tmp/tmpmblltzgm.jl:58\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    if length(words) == 2\n        return words\n    \n    if length(words)\
    \ == 3\n        return words\n    \n    if length(words) == 4\n        return\
    \ words\n    \n    if length(words) == 5\n        return words\n    \n    if length(words)\
    \ == 6\n        return words\n    \n    if length(words) == 7\n        return\
    \ words\n    \n    if length(words) == 8\n        return words\n    \n    if length(words)\
    \ == 9\n        return words\n    \n    if length(words) == 10\n        return\
    \ words\n    \n    if length(words) == 11\n        return words\n    \n    if\
    \ length(words) == 12\n        return words\n    \n    if length(words) == 13\n\
    \        return words\n    \n    if length(words) == 14\n        return words\n\
    \    \n    if length(words) == 15\n        return words\n    \n    if length(words)\
    \ == 16\n        return words\n    \n    if length(words) == 17\n        return\
    \ words\n    \n    if length(words) == 18\n        return words\n    \n    if\
    \ length(words) == 19\n        return words\n    \n    if length(words) == 20\n\
    \        return words\n    \n    if length(words) == 21\n        return words\n\
    \    \n    if length(words) == 22\n        return words\n    \n    if length(words)\
    \ == 23\n        return words\n    \n    if length(words) == 24\n        return\
    \ words\n    \n    if length(words) == 25\n        return words\n    \n    if\
    \ length(words) == 26\n        return words\n    \n    if length(words) == 27\n\
    \        return words\n    \n    if length(words) == 28\n        return words\n\
    \    \n    if length(words) == 29\n        return words\n    \n    if length(words)\
    \ == 30\n        return words\n    \n    if length(words) == 31\n        return\
    \ words\n    \n    if length(words) == 32\n        return words\n    \n    if\
    \ length(words) == 33\n        return words\n    \n    if length(words) == 34\n\
    \        return words\n    \n    if length(words) == 35\n        return words\n\
    \    \n    if length(words) == 36\n        return words\n    \n    if length(words)\
    \ == 37\n        return words\n    \n    if length(words) == 38\n        return\
    \ words\n    \n    if length(words) == 39\n        return words\n    \n    if\
    \ length(words) == 40\n        return words\n    \n    if length(words) == 41\n\
    \        return words\n    \n    if length(words) == 42\n        return words\n\
    \    \n    if length(words) == 43\n        return words\n    \n    if length(words)\
    \ == 44\n        return words\n    \n    if length(words) == 45\n        return\
    \ words\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40uiln_f.jl:1\nin expression starting at /tmp/tmp40uiln_f.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words_list = split(txt, \" \")\n    words_list = words_list[words_list.!ismissing]\n\
    \    words_list = words_list[words_list.!isna]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[words_list.!iszero]\n    words_list = words_list[words_list.!isinf]\n\
    \    words_list = words_list[word\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"words_list.!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu4y_tbvm.jl:15\n\
    in expression starting at /tmp/tmpu4y_tbvm.jl:15\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \"--\"]\n    words = words[words != \"\
    ---\"]\n    words = words[words != \"---\"]\n    words = words[words != \"--\"\
    ]\n    words = words[words != \"-\"]\n    words = words[words != \"--\"]\n   \
    \ words = words[words != \"---\"]\n    words = words[words != \"---\"]\n    words\
    \ = words[words != \"--\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"--\"]\n    words = words[words != \"---\"]\n    words = words[words !=\
    \ \"---\"]\n    words = words[words != \"--\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"--\"]\n    words = words[words != \"---\"]\n\
    \    words = words[words != \"---\"]\n    words = words[words != \"--\"]\n   \
    \ words = words[words != \"-\"]\n    words = words[words != \"--\"]\n    words\
    \ = words[words != \"---\"]\n    words = words[words != \"---\"]\n    words =\
    \ words[words != \"--\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"--\"]\n    words = words[words != \"---\"]\n    words = words[words !=\
    \ \"---\"]\n    words = words[words != \"--\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"--\"]\n    words = words[words != \"---\"]\n\
    \    words = words[words != \"---\"]\n    words = words[words != \"--\"]\n   \
    \ words = words[words != \"-\"]\n    words = words[words != \"--\"]\n    words\
    \ = words[words != \"---\"]\n    words = words[words != \"---\"]\n    words =\
    \ words[words != \"--\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"--\"]\n    words = words[words != \"---\"]\n    words = words[words !=\
    \ \"---\"]\n    words = words[words != \"--\"]\n    words = words[words != \"\
    -\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjve63kyt.jl:71\nin expression starting at\
    \ /tmp/tmpjve63kyt.jl:71\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    if all(w == \"\" for w in words)\n \
    \       return txt\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabmwnyme.jl:1\nin expression starting at /tmp/tmpabmwnyme.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words = [w for w in\
    \ words if w != \"\"]\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmput9x0q3l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmput9x0q3l.jl:1\n\
    in expression starting at /tmp/tmput9x0q3l.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    return\
    \ words\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6fpohk_.jl:21\nin expression starting at\
    \ /tmp/tmpw6fpohk_.jl:21\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == length(words)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnr5h39_w.jl:22\nin expression starting at\
    \ /tmp/tmpnr5h39_w.jl:22\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    words_split = split(words)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(words_split)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(words_split)\n   \
    \ \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(words_split)\n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphidpwblg.jl:1\nin expression starting at /tmp/tmphidpwblg.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0elle6rt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0elle6rt.jl:1\n\
    in expression starting at /tmp/tmp0elle6rt.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \"and\"]\n    words\
    \ = words[words != \"or\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"not\"]\n    words = words[words != \"but\"]\n    words = words[words !=\
    \ \"or\"]\n    words = words[words != \"and\"]\n    words = words[words != \"\
    but\"]\n    words = words[words != \"not\"]\n    words = words[words != \"but\"\
    ]\n    words = words[words != \"or\"]\n    words = words[words != \"and\"]\n \
    \   words = words[words != \"but\"]\n    words = words[words != \"not\"]\n   \
    \ words = words[words != \"but\"]\n    words = words[words != \"or\"]\n    words\
    \ = words[words != \"and\"]\n    words = words[words != \"but\"]\n    words =\
    \ words[words != \"not\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words !=\
    \ \"but\"]\n    words = words[words != \"not\"]\n    words = words[words != \"\
    but\"]\n    words = words[words != \"or\"]\n    words = words[words != \"and\"\
    ]\n    words = words[words != \"but\"]\n    words = words[words != \"not\"]\n\
    \    words = words[words != \"but\"]\n    words = words[words != \"or\"]\n   \
    \ words = words[words != \"and\"]\n    words = words[words != \"but\"]\n    words\
    \ = words[words != \"not\"]\n    words = words[words != \"but\"]\n    words =\
    \ words[words != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words\
    \ != \"but\"]\n    words = words[words != \"not\"]\n    words = words[words !=\
    \ \"but\"]\n    words = words[words != \"or\"]\n    words = words[words != \"\
    and\"]\n    words = words[words != \"but\"]\n    words = words[words != \"not\"\
    ]\n    words = words[words != \"but\"]\n    words = words[words != \"or\"]\n \
    \   words = words[words != \"and\"]\n    words = words[words != \"but\"]\n   \
    \ words = words[words != \"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7t0up_8.jl:71\nin expression starting at\
    \ /tmp/tmpn7t0up_8.jl:71\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \ \"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \" \"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \" \"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \" \"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \" \"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \" \"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \" \"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \" \"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \" \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4ab819i.jl:59\nin expression starting at\
    \ /tmp/tmpq4ab819i.jl:59\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"a\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in words if w != \"b\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"c\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"d\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in words if w != \"e\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"f\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"g\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in words if w != \"h\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"i\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"j\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in words if w != \"k\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"l\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"m\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in words if w != \"n\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"o\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"p\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp7utoc2tp.jl:116\nin expression starting at /tmp/tmp7utoc2tp.jl:116\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = push!(words_split, word)\n\
    \    end\n    \n    return words_split\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj44xmxiq.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpj44xmxiq.jl:30\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n   Evaluated: [\"Hello,world!\"] ==\
    \ [\"Hello\", \"world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj44xmxiq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj44xmxiq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj44xmxiq.jl:33\n  Expression: candidate(\"abcdef\") == 3\n\
    \   Evaluated: [\"abcdef\"] == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj44xmxiq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj44xmxiq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj44xmxiq.jl:34\n  Expression: candidate(\"aaabb\") == 2\n\
    \   Evaluated: [\"aaabb\"] == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj44xmxiq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj44xmxiq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj44xmxiq.jl:35\n  Expression: candidate(\"aaaBb\") == 1\n\
    \   Evaluated: [\"aaaBb\"] == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj44xmxiq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj44xmxiq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj44xmxiq.jl:36\n  Expression: candidate(\"\") == 0\n   Evaluated:\
    \ [\"\"] == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words = [w for w in\
    \ words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n  \
    \  \n    words = [w for w in words if w != \"abcdef\"]\n    \n    words = [w for\
    \ w in words if w != \"abcdefghijklmnopqrstuvwxyz\"]\n    \n    words = [w for\
    \ w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    \n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    \n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    \n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    \n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    \n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGH\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqm_lywuw.jl:41\nin expression starting at\
    \ /tmp/tmpqm_lywuw.jl:41\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \"and\"]\n    words\
    \ = words[words != \"or\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"not\"]\n    words = words[words != \"but\"]\n    words = words[words !=\
    \ \"or\"]\n    words = words[words != \"and\"]\n    words = words[words != \"\
    but\"]\n    words = words[words != \"not\"]\n    words = words[words != \"but\"\
    ]\n    words = words[words != \"or\"]\n    words = words[words != \"and\"]\n \
    \   words = words[words != \"but\"]\n    words = words[words != \"not\"]\n   \
    \ words = words[words != \"but\"]\n    words = words[words != \"or\"]\n    words\
    \ = words[words != \"and\"]\n    words = words[words != \"but\"]\n    words =\
    \ words[words != \"not\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words !=\
    \ \"but\"]\n    words = words[words != \"not\"]\n    words = words[words != \"\
    but\"]\n    words = words[words != \"or\"]\n    words = words[words != \"and\"\
    ]\n    words = words[words != \"but\"]\n    words = words[words != \"not\"]\n\
    \    words = words[words != \"but\"]\n    words = words[words != \"or\"]\n   \
    \ words = words[words != \"and\"]\n    words = words[words != \"but\"]\n    words\
    \ = words[words != \"not\"]\n    words = words[words != \"but\"]\n    words =\
    \ words[words != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words\
    \ != \"but\"]\n    words = words[words != \"not\"]\n    words = words[words !=\
    \ \"but\"]\n    words = words[words != \"or\"]\n    words = words[words != \"\
    and\"]\n    words = words[words != \"but\"]\n    words = words[words != \"not\"\
    ]\n    words = words[words != \"but\"]\n    words = words[words != \"or\"]\n \
    \   words = words[words != \"and\"]\n    words = words[words != \"but\"]\n   \
    \ words = words[words != \"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7t0up_8.jl:71\nin expression starting at\
    \ /tmp/tmpn7t0up_8.jl:71\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \"and\"]\n    words\
    \ = words[words != \"or\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"nor\"]\n    words = words[words != \"but\"]\n    words = words[words !=\
    \ \"or\"]\n    words = words[words != \"and\"]\n    words = words[words != \"\
    but\"]\n    words = words[words != \"nor\"]\n    words = words[words != \"but\"\
    ]\n    words = words[words != \"or\"]\n    words = words[words != \"and\"]\n \
    \   words = words[words != \"but\"]\n    words = words[words != \"nor\"]\n   \
    \ words = words[words != \"but\"]\n    words = words[words != \"or\"]\n    words\
    \ = words[words != \"and\"]\n    words = words[words != \"but\"]\n    words =\
    \ words[words != \"nor\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words !=\
    \ \"but\"]\n    words = words[words != \"nor\"]\n    words = words[words != \"\
    but\"]\n    words = words[words != \"or\"]\n    words = words[words != \"and\"\
    ]\n    words = words[words != \"but\"]\n    words = words[words != \"nor\"]\n\
    \    words = words[words != \"but\"]\n    words = words[words != \"or\"]\n   \
    \ words = words[words != \"and\"]\n    words = words[words != \"but\"]\n    words\
    \ = words[words != \"nor\"]\n    words = words[words != \"but\"]\n    words =\
    \ words[words != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words\
    \ != \"but\"]\n    words = words[words != \"nor\"]\n    words = words[words !=\
    \ \"but\"]\n    words = words[words != \"or\"]\n    words = words[words != \"\
    and\"]\n    words = words[words != \"but\"]\n    words = words[words != \"nor\"\
    ]\n    words = words[words != \"but\"]\n    words = words[words != \"or\"]\n \
    \   words = words[words != \"and\"]\n    words = words[words != \"but\"]\n   \
    \ words = words[words != \"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoabqboq.jl:71\nin expression starting at\
    \ /tmp/tmpuoabqboq.jl:71\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n  \
    \  \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n  \
    \  \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n  \
    \  \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n  \
    \  \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n  \
    \  \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n  \
    \  \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ k, v in word_counts[2:end]])\n    \n    word_counts = sort(word_counts)\n  \
    \  \n    word_counts = Dict([(k, v) for k, v in word_counts[2:end]])\n    \n \
    \   word_counts = sort(word_counts)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwkul1sp.jl:24\nin expression starting at\
    \ /tmp/tmpdwkul1sp.jl:24\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<,>.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1kr3u57.jl:20\nin expression starting at\
    \ /tmp/tmpc1kr3u57.jl:20\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \".\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"(\"]\n    \n    words = [w\
    \ for w in words if w != \")\"]\n    \n    words = [w for w in words if w != \"\
    [\"]\n    \n    words = [w for w in words if w != \"]\"]\n    \n    words = [w\
    \ for w in words if w != \"{\"]\n    \n    words = [w for w in words if w != \"\
    }\"]\n    \n    words = [w for w in words if w != \"|\"]\n    \n    words = [w\
    \ for w in words if w != \"\\\\\"]\n    \n    words = [w for w in words if w !=\
    \ \"^\"]\n    \n    words = [w for w in words if w != \"~\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"@\"]\n    \n    words = [w for w in words if w != \"#\"]\n    \n    words\
    \ = [w for w in words if w != \"$\"]\n    \n    words = [w for w in words if w\
    \ != \"%\"]\n    \n    words = [w for w in words if w != \"^\"]\n    \n    words\
    \ = [w for w in words if w != \"&\"]\n    \n    words = [w for w in words if w\
    \ != \"*\"]\n    \n    words = [w for w in words if w != \"+\"]\n    \n    words\
    \ = [w for w in words if w != \",\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words\
    \ = [w for w in words if w != \"(\"]\n    \n    words = [w for w in words if w\
    \ != \")\"]\n    \n    words = [w for w in words if w != \"[\"]\n    \n    words\
    \ = [w for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5laq8y_v.jl:60\nin expression starting at\
    \ /tmp/tmp5laq8y_v.jl:60\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = []\n    words = split(txt, \" \")\n    words = split(txt,\
    \ \",\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \",\")\n    words\
    \ = split(txt, \",\")\n    words = split(txt, \",\")\n    words = split(txt, \"\
    ,\")\n    words = split(txt, \",\")\n    words = split(txt, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyehdpxl.jl:81\nin expression starting at\
    \ /tmp/tmpyyehdpxl.jl:81\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if isempty(words)\n       \
    \ return words\n    else\n        \n        words_split = split(words)\n     \
    \   \n        if isempty(words_split)\n            return words\n        else\n\
    \            \n            words_split\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    split_words_regex(txt::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx95szfro.jl:31\nin expression starting at\
    \ /tmp/tmpx95szfro.jl:31\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc3x92o_.jl:1\nin expression starting at /tmp/tmptc3x92o_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return words\n    \n    words = [w for w in words if w != \"\"]\n\
    \    \n    if length(words) == 0 \n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0 \n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0 \n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0 \n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0 \n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0 \n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0 \n        return \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpetb10n4n.jl:1\nin expression starting at /tmp/tmpetb10n4n.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    for word in split(txt, \" \")\n\
    \        push!(words, word)\n    end\n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjytyy8va.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpjytyy8va.jl:26\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n   Evaluated: [\"Hello,world!\"] ==\
    \ [\"Hello\", \"world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjytyy8va.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjytyy8va.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjytyy8va.jl:29\n  Expression: candidate(\"abcdef\") == 3\n\
    \   Evaluated: [\"abcdef\"] == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjytyy8va.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjytyy8va.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjytyy8va.jl:30\n  Expression: candidate(\"aaabb\") == 2\n\
    \   Evaluated: [\"aaabb\"] == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjytyy8va.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjytyy8va.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjytyy8va.jl:31\n  Expression: candidate(\"aaaBb\") == 1\n\
    \   Evaluated: [\"aaaBb\"] == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjytyy8va.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjytyy8va.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjytyy8va.jl:32\n  Expression: candidate(\"\") == 0\n   Evaluated:\
    \ [\"\"] == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnru6cfww.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnru6cfww.jl:1\n\
    in expression starting at /tmp/tmpnru6cfww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    words_split = []\n    for word in\
    \ words\n        words_split = words_split ++ split(word)\n    end\n    \n   \
    \ return words_split\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a vector of strings\
    \ that each contain all the characters in the string in alphabetical order. \n\
    Examples\n>>> split_alphabetically(\"Hello world!\")\n[\"H\", \"e\", \"l\", \"\
    l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n>>> split_alphabetically(\"\
    Hello,world!\")\n[\"H\", \"e\", \"l\", \"l\", \"o\", \",\", \"w\", \"o\", \"r\"\
    , \"l\", \"d!\"]\n>>> split_alphabetically(\"abcdef\")\n[\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\"]\n>>> split_alphabetically(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n>>> split_alphabetically(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n>>> split_alphabetically(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n>>> split_alphabetically(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n>>> split_alphabetically(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp666cwnx9.jl:23\nin expression starting at\
    \ /tmp/tmp666cwnx9.jl:23\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        words_split = words_split ++ split(word,\"\
    ,\")\n    end\n    \n    words_split = words_split ++ [length(words)]\n    \n\
    \    words_split = words_split .- words_split[end]\n    \n    words_split = words_split\
    \ .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    \    \n    words_split = words_split .- words_split[end]\n    \n    words_split\
    \ = words_split .- words_split[end]\n    \n    words_split = words_split .- words_split[end]\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoe1zrgtl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoe1zrgtl.jl:1\n\
    in expression starting at /tmp/tmpoe1zrgtl.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    for word in split(txt)\n      \
    \  push!(words, word)\n    end\n    return words\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67gi7opa.jl:20\nin expression starting at\
    \ /tmp/tmp67gi7opa.jl:20\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \"\
    ,\")\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\"\
    )\n    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n\
    \    words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n  \
    \  words_split = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split\
    \ = split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split =\
    \ split(txt, \",\")\n    words_split = split(txt, \",\")\n    words_split = split(txt,\
    \ \",\")\n    words_split = split(txt, \",\")\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprnahz3_g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprnahz3_g.jl:1\n\
    in expression starting at /tmp/tmprnahz3_g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \"-\")\n    words::Vector{String}\
    \ = split(txt, \";\")\n    words::Vector{String} = split(txt, \":\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \":\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \"-\")\n    words::Vector{String}\
    \ = split(txt, \";\")\n    words::Vector{String} = split(txt, \":\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \":\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \"-\")\n    words::Vector{String}\
    \ = split(txt, \";\")\n    words::Vector{String} = split(txt, \":\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \":\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \"-\")\n    words::Vector{String}\
    \ = split(txt, \";\")\n    words::Vector{String} = split(txt, \":\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \"-\")\n    words::Vector{String} = split(txt, \";\")\n    words::Vector{String}\
    \ = split(txt, \":\")\n    words::Vector{String} = split(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu0dv_w73.jl:57\nin expression starting at\
    \ /tmp/tmpu0dv_w73.jl:57\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \",\"), words)\n    \n    words_without_commas = filter(x->!contains(x, \"-\"\
    ), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"!\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"?\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"(\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \")\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"[\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"]\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"{\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"|\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"\\\\\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"@\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"#\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"$\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"%\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"^\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"&\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"*\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"(\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \")\"), words_without_commas)\n    \n    words_without_commas = filter\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1urzxjqq.jl:48\nin expression starting at\
    \ /tmp/tmp1urzxjqq.jl:48\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \" \"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\\\
    t\"]\n    \n    if length(words) == 0\n        return words\n    \n    words =\
    \ [w for w in words if w != \"\\r\"]\n    \n    if length(words) == 0\n      \
    \  return words\n    \n    words = [w for w in words if w != \"\\f\"]\n    \n\
    \    if length(words) == 0\n        return words\n    \n    words = [w for w in\
    \ words if w != \"\\v\"]\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words = [w for w in words if w != \"\\a\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\\\
    e\"]\n    \n    if length(words) == 0\n        return words\n    \n    words =\
    \ [w for w in words if w != \"\\o\"]\n    \n    if length(words) == 0\n      \
    \  return words\n    \n    words = [w for w in words if w != \"\\i\"]\n    \n\
    \    if length(words) == 0\n        return words\n    \n    words = [w for w in\
    \ words if w != \"\\c\"]\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words = [w for w in words if w != \"\\o\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\\\
    i\"]\n    \n    if length(words) == 0\n        return words\n    \n    words =\
    \ [w for w in words if w != \"\\c\"]\n    \n    if length(words) == 0\n      \
    \  return words\n    \n    words = [w for w in words if w != \"\\o\"]\n    \n\
    \    if length(words) == 0\n        return words\n    \n    words = [w for w in\
    \ words if w != \"\\i\"]\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words = [w for w in words if w != \"\\c\"]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn6pt2hgq.jl:69\nin expression starting at /tmp/tmpn6pt2hgq.jl:69\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = [word for word in words_split if !isempty(word)]\n    words_split = [word\
    \ for word in words_split if !islower(word)]\n    words_split = [word for word\
    \ in words_split if !isupper(word)]\n    words_split = [word for word in words_split\
    \ if !isdigit(word)]\n    words_split = [word for word in words_split if !isspace(word)]\n\
    \    words_split = [word for word in words_split if !iscomma(word)]\n    words_split\
    \ = [word for word in words_split if !isdot(word)]\n    words_split = [word for\
    \ word in words_split if !isdash(word)]\n    words_split = [word for word in words_split\
    \ if !isparenthesis(word)]\n    words_split = [word for word in words_split if\
    \ !isbracket(word)]\n    words_split = [word for word in words_split if !isquote(word)]\n\
    \    words_split = [word for word in words_split if !isbackquote(word)]\n    words_split\
    \ = [word for word in words_split if !iscomma(word)]\n    words_split = [word\
    \ for word in words_split if !isdash(word)]\n    words_split = [word for word\
    \ in words_split if !isdot(word)]\n    words_split = [word for word in words_split\
    \ if !isparenthesis(word)]\n    words_split = [word for word in words_split if\
    \ !isbracket(word)]\n    words_split = [word for word in words_split if !isquote(word)]\n\
    \    words_split = [word for word in words_split if !isbackquote(word)]\n    words_split\
    \ = [word for word in words_split if !iscomma(word)]\n    words_split = [word\
    \ for word in words_split if !isdash(word)]\n    words_split = [word for word\
    \ in words_split if !isdot(word)]\n    words_split = [word for word in words_split\
    \ if !isparenthesis(word)]\n    words_split = [word for word in words_split if\
    \ !isbracket(word)]\n    words_split = [word for word in words_split if !isquote(word)]\n\
    \    words_split = [word for word in words_split if !isbackquote(word)]\n    words_split\
    \ = [word for word in words_split if !iscomma(word)]\n    words_split = [word\
    \ for word in words_split if !isdash(word)]\n    words_split = [word for word\
    \ in words_split if !isdot(word)]\n    words_split = [word for word in words_split\
    \ if !\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmprp0gist3.jl:48\nin expression starting at /tmp/tmprp0gist3.jl:48\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    if length(words) == 0\n        return words\n    else\n        words\
    \ = [w for w in words if w != \",\"]\n        if length(words) == 0\n        \
    \    return words\n        else\n            words = [w for w in words if w !=\
    \ \",\" and w != \"and\"]\n            if length(words) == 0\n               \
    \ return words\n            else\n                words = [w for w in words if\
    \ w != \"and\"]\n                if length(words) == 0\n                    return\
    \ words\n                else\n                    words = [w for w in words if\
    \ w != \"and\"]\n                    if length(words) == 0\n                 \
    \       return words\n                    else\n                        words\
    \ = [w for w in words if w != \"and\"]\n                        if length(words)\
    \ == 0\n                            return words\n                        else\n\
    \                            words = [w for w in words if w != \"and\"]\n    \
    \                        if length(words) == 0\n                             \
    \   return words\n                            else\n                         \
    \       words = [w for w in words if w != \"and\"]\n                         \
    \       if length(words) == 0\n                                    return words\n\
    \                                else\n                                    words\
    \ = [w for w in words if w != \"and\"]\n                                    if\
    \ length(words) == 0\n                                        return words\n \
    \                                   else\n                                   \
    \     words = [w for w in words if w != \"and\"]\n                           \
    \             if length(words) == 0\n                                        \
    \    return words\n                                        else\n            \
    \                                words = [w for w in words if w != \"and\"]\n\
    \                                            if length(words) == 0\n         \
    \                                       return words\n                       \
    \                     else\n                                                words\
    \ = [w for w in words if w != \"and\"]\n                                     \
    \           if length(words) == 0\n                                          \
    \          return words\n                                                else\n\
    \                                                    words = [w for w in words\
    \ if w != \"and\"]\n                                                    if length(words)\
    \ == 0\n                                                        return words\n\
    \                                                    else\n                  \
    \                                      words = [w for w in words if w != \"and\"\
    ]\n                                                        if length(words) ==\
    \ 0\n                                                            return words\n\
    \                                                        else\n              \
    \                                              words = [w for w in words if w\
    \ != \"and\"]\n                                                            if\
    \ length(words) == 0\n                                                       \
    \         return words\n                                                     \
    \       else\n                                                               \
    \ words = [w for w in words if w != \"and\"]\n                               \
    \                                 if length(words) == 0\n                    \
    \                                                return words\n              \
    \                                                  else\n                    \
    \                                                words = [w for w in words if\
    \ w != \"and\"]\n                                                            \
    \        if length(words) == 0\n                                             \
    \                           return words\n                                   \
    \                                 else\n                                     \
    \                                   words = [w for w in words if w != \"and\"\
    ]\n                                                                        if\
    \ length(words) == 0\n                                                       \
    \                     return words\n                                         \
    \                               else\n                                       \
    \                                     words = [w for w in words if w != \"and\"\
    ]\n                                                                          \
    \  if length(words) == 0\n                                                   \
    \                             return words\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpkykwglte.jl:23\nin expression starting at /tmp/tmpkykwglte.jl:23\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\",<.>/?\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\",<.>/?.,\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\",<.>/?.,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\",<.>/?.,.,\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\",<.>/?.,.,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\",<.\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83lyh071.jl:21\nin expression starting at\
    \ /tmp/tmp83lyh071.jl:21\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \"and\"]\n    \n    words = [w for w in words if w !=\
    \ \"or\"]\n    \n    words = [w for w in words if w != \"not\"]\n    \n    words\
    \ = [w for w in words if w != \"is\"]\n    \n    words = [w for w in words if\
    \ w != \"are\"]\n    \n    words = [w for w in words if w != \"was\"]\n    \n\
    \    words = [w for w in words if w != \"were\"]\n    \n    words = [w for w in\
    \ words if w != \"have\"]\n    \n    words = [w for w in words if w != \"has\"\
    ]\n    \n    words = [w for w in words if w != \"had\"]\n    \n    words = [w\
    \ for w in words if w != \"would\"]\n    \n    words = [w for w in words if w\
    \ != \"could\"]\n    \n    words = [w for w in words if w != \"should\"]\n   \
    \ \n    words = [w for w in words if w != \"will\"]\n    \n    words = [w for\
    \ w in words if w != \"would\"]\n    \n    words = [w for w in words if w != \"\
    did\"]\n    \n    words = [w for w in words if w != \"did\"]\n    \n    words\
    \ = [w for w in words if w != \"do\"]\n    \n    words = [w for w in words if\
    \ w != \"does\"]\n    \n    words = [w for w in words if w != \"did\"]\n    \n\
    \    words = [w for w in words if w != \"did\"]\n    \n    words = [w for w in\
    \ words if w != \"do\"]\n    \n    words = [w for w in words if w != \"does\"\
    ]\n    \n    words = [w for w in words if w != \"did\"]\n    \n    words = [w\
    \ for w in words if w != \"did\"]\n    \n    words = [w for w in words if w !=\
    \ \"do\"]\n    \n    words = [w for w in words if w != \"does\"]\n    \n    words\
    \ = [w for w in words if w != \"did\"]\n    \n    words = [w for w in words if\
    \ w != \"did\"]\n    \n    words = [w for w in words if w != \"do\"]\n    \n \
    \   \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__ufzzoy.jl:1\nin expression starting at /tmp/tmp__ufzzoy.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = words[words != \"\
    \"]\n        return words\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1r7u6vw3.jl:23\nin expression starting at\
    \ /tmp/tmp1r7u6vw3.jl:23\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> !contains(x, \",\"), words)\n    words_without_commas_no_whitespaces = filter(x\
    \ -> !contains(x, \" \"), words_without_commas)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces)\n  \
    \  words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_without_commas_no_whitespaces_no_comma)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces_no_comma)\n\
    \    words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_without_commas_no_whitespaces_no_comma)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces_no_comma)\n\
    \    words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_without_commas_no_whitespaces_no_comma)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces_no_comma)\n\
    \    words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_without_commas_no_whitespaces_no_comma)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces_no_comma)\n\
    \    words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_without_commas_no_whitespaces_no_comma)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces_no_comma)\n\
    \    words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_without_commas_no_whitespaces_no_comma)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces_no_comma)\n\
    \    words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_without_commas_no_whitespaces_no_comma)\n    words_without_commas_no_whitespaces_no_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_no_whitespaces_no_comma)\n\
    \    words_without_commas_no_whitespaces_no_comma = filter(x -> !contains(x, \"\
    \ \"), words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnojv19g.jl:33\nin expression starting at\
    \ /tmp/tmpxnojv19g.jl:33\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[2], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[3], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[4], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[5], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[6], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[7], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[8], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[9], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[10], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[11], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[12], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpo4kq5n9i.jl:69\nin expression starting at /tmp/tmpo4kq5n9i.jl:69\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9ovb751.jl:59\nin expression starting at\
    \ /tmp/tmpr9ovb751.jl:59\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9ovb751.jl:59\nin expression starting at\
    \ /tmp/tmpr9ovb751.jl:59\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    words::Vector{String} = split(txt,\
    \ \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp39o2zevb.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp39o2zevb.jl:56\n\
    in expression starting at /tmp/tmp39o2zevb.jl:56\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    end\n    \n    words_splitted = split(words, \"\
    ,\")\n    \n    if length(words_splitted) == 0\n        return words\n    end\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    if length(words_splitted) == 0\n        return words\n    end\n   \
    \ \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhdo0b30.jl:100\nin expression starting at\
    \ /tmp/tmpdhdo0b30.jl:100\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = Vector{String}()\n\
    \    \n    for word in words\n        words_splitted += split(word, \",\")\n \
    \   end\n    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_splitted)]\n\
    \    \n    words_splitted = words_splitted[findall(x -> !isempty(x), words_split\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9i6ll_is.jl:65\nin expression starting at\
    \ /tmp/tmp9i6ll_is.jl:65\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wpbt5nl.jl:87\nin expression starting at\
    \ /tmp/tmp_wpbt5nl.jl:87\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    if all(isspace(word) for word in words)\n        return words\n\
    \    \n    if all(iscomma(word) for word in words)\n        return words\n   \
    \ \n    if all(islower(word) for word in words)\n        return words\n    \n\
    \    if all(isupper(word) for word in words)\n        return words\n    \n   \
    \ if all(isdigit(word) for word in words)\n        return words\n    \n    if\
    \ all(isalpha(word) for word in words)\n        return words\n    \n    return\
    \ words\nend\n</cell>\n<code language=julia-1.4>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.4>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.4>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.4>\n\
    split_words(\"abc def\")\n</cell>\n<code language=julia-1.4>\nsplit_words(\"abc\
    \ def ghi\")\n</cell>\n<code language=julia-1.4>\nsplit_words(\"abc def ghi jkl\"\
    )\n</cell>\n<code language=julia-1.4>\nsplit_words(\"abc def ghi jkl mno\")\n\
    </cell>\n<code language=julia-1.4>\nsplit_words(\"abc def ghi jkl mno pqr\")\n\
    </cell>\n<code language=julia-1.4>\nsplit_words(\"abc def ghi jkl mno pqr stu\"\
    )\n</cell>\n<code language=julia-1.4>\nsplit_words(\"abc def ghi jkl mno pqr stu\
    \ vwx yz\")\n</cell>\n<code language=julia-1.4>\nsplit_words(\"abc def ghi jkl\
    \ mno pqr stu vwx yz 123\")\n</cell>\n<code language=julia-1.4>\nsplit_words(\"\
    abc def ghi jkl mno pqr stu vwx yz 123 456\")\n</cell>\n<code language=julia-1.4>\n\
    split_words(\"abc def ghi jkl mno pqr stu vwx yz 123 456 789\")\n</cell>\n<code\
    \ language=julia-1.4>\nsplit_words(\"abc def ghi jkl mno pqr stu vwx yz 123 456\
    \ 789 1011\")\n</cell>\n<code language=julia-1.4>\nsplit_words(\"abc def ghi jkl\
    \ mno pqr stu vwx yz 123 45\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bzv2meg.jl:39\nin expression starting at\
    \ /tmp/tmp9bzv2meg.jl:39\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        return words\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nI wanted to add my solution to this problem\
    \ that uses regular expressions to split words and then filters out empty strings\
    \ and converts them to lowercase:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiieof4tt.jl:22\nin expression starting at\
    \ /tmp/tmpiieof4tt.jl:22\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    if length(words) == 0\n        return words\n    \n    words = split(txt,\
    \ \",\")\n    words = [w for w in words if w != \"\"]\n    if length(words) ==\
    \ 0\n        return words\n    \n    words = split(txt, \"-\")\n    words = [w\
    \ for w in words if w != \"\"]\n    if length(words) == 0\n        return words\n\
    \    \n    words = split(txt, \"_\")\n    words = [w for w in words if w != \"\
    \"]\n    if length(words) == 0\n        return words\n    \n    words = split(txt,\
    \ \"-\")\n    words = [w for w in words if w != \"\"]\n    if length(words) ==\
    \ 0\n        return words\n    \n    words = split(txt, \",\")\n    words = [w\
    \ for w in words if w != \"\"]\n    if length(words) == 0\n        return words\n\
    \    \n    words = split(txt, \"_\")\n    words = [w for w in words if w != \"\
    \"]\n    if length(words) == 0\n        return words\n    \n    words = split(txt,\
    \ \"-\")\n    words = [w for w in words if w != \"\"]\n    if length(words) ==\
    \ 0\n        return words\n    \n    words = split(txt, \" \")\n    words = [w\
    \ for w in words if w != \"\"]\n    if length(words) == 0\n        return words\n\
    \    \n    words = split(txt, \",\")\n    words = [w for w in words if w != \"\
    \"]\n    if length(words) == 0\n        return words\n    \n    words = split(txt,\
    \ \"_\")\n    words = [w for w in words if w != \"\"]\n    if length(words) ==\
    \ 0\n        return words\n    \n    words = split(txt, \"-\")\n    words = [w\
    \ for w in words if w != \"\"]\n    if length(words) == 0\n        return words\n\
    \    \n    words = split(txt, \" \")\n    words = [w for w in words if w != \"\
    \"]\n    if length(words) == 0\n        return words\n    \n    words = split(txt,\
    \ \",\")\n    words = [w for w in words if w != \"\"]\n    if length(words) ==\
    \ 0\n        return words\n    \n    words = split(txt, \"_\")\n    words = [w\
    \ for w in words if w != \"\"]\n    if length(words) == 0\n        return words\n\
    \    \n    words = split(txt, \"-\")\n    words = [w for w in words if w != \"\
    \"]\n    if length(words) == 0\n        return words\n    \n    words = split(txt,\
    \ \" \")\n    words = [w for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpau_dkldw.jl:98\nin expression starting at\
    \ /tmp/tmpau_dkldw.jl:98\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0 \n  \
    \      return words\n    \n    words_split = split(words)\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6oks0o4.jl:1\nin expression starting at /tmp/tmpk6oks0o4.jl:1\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1\n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1bwki20.jl:1\nin expression starting at /tmp/tmpx1bwki20.jl:1\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if isempty(words)\n       \
    \ return words\n    end\n    \n    words = [w for w in words if w != \"\"]\n \
    \   \n    if isempty(words)\n        return words\n    end\n    \n    words =\
    \ [w for w in words if w != \",\"]\n    \n    if isempty(words)\n        return\
    \ words\n    end\n    \n    words = [w for w in words if w != \"-\"]\n    \n \
    \   if isempty(words)\n        return words\n    end\n    \n    words = [w for\
    \ w in words if w != \"_\"]\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = [w for w in words if w != \"!\"]\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    if isempty(words)\n        return words\n    end\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    if isempty(words)\n        return\
    \ words\n    end\n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   if isempty(words)\n        return words\n    end\n    \n    words = [w for\
    \ w in words if w != \"-\"]\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = [w for w in words if w != \"_\"]\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    if isempty(words)\n        return words\n    end\n    \n    words\
    \ = [w for w in words if w != \"?\"]\n    \n    if isempty(words)\n        return\
    \ words\n    end\n    \n    words = [w for w in words if w != \"-\"]\n    \n \
    \   if isempty(words)\n        return words\n    end\n    \n    words = [w for\
    \ w in words if w != \"_\"]\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = [w for w in words if w != \"!\"]\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    if isempty(words)\n        return words\n    end\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    if isempty(words)\n        return\
    \ words\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca3tzuhj.jl:1\nin expression starting at /tmp/tmpca3tzuhj.jl:1\n"
  stdout: ''
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    words = [w for w in words if w\
    \ != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"_\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words\
    \ = [w for w in words if w != \"?\"]\n    \n    words = [w for w in words if w\
    \ != \"!\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"_\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"?\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"_\"]\n    \n    words = [w for w in words if w\
    \ != \"?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words\
    \ = [w for w in words if w != \"?\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words\
    \ = [w for w in words if w != \"?\"]\n    \n    words = [w for w in words if w\
    \ != \"!\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"_\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"?\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"_\"]\n    \n    words = [w for w in words if w\
    \ != \"?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyntgoze1.jl:1\nin expression starting at /tmp/tmpyntgoze1.jl:1\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \" \")\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg1tm723g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg1tm723g.jl:1\n\
    in expression starting at /tmp/tmpg1tm723g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    words::Vector{String} = split(txt,\
    \ \" \")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \",\")\n    words::Vector{String} = split(txt, \",\")\n    words::Vector{String}\
    \ = split(txt, \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqlwabp3.jl:56\nin expression starting at\
    \ /tmp/tmpsqlwabp3.jl:56\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n   \
    \ \n    for word in words\n        words_split = words_split ++ split(word,\"\
    ,\")\n    end\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n\
    \    words_split = words_split ++ split(txt,\" \")\n    \n    words_split = words_split\
    \ ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\" \"\
    )\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n    \n    words_split\
    \ = words_split ++ split(txt,\" \")\n    \n    words_split = words_split ++ split(txt,\"\
    \ \")\n    \n    words_split = words_split ++ split(txt,\" \")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps97qklc1.jl:1\nin expression starting at /tmp/tmps97qklc1.jl:1\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9ovb751.jl:59\nin expression starting at\
    \ /tmp/tmpr9ovb751.jl:59\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if isempty(txt)\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        return words\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpea5wf_l9.jl:22\nin expression starting at\
    \ /tmp/tmpea5wf_l9.jl:22\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHI\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfulwe7_s.jl:27\nin expression starting at\
    \ /tmp/tmpfulwe7_s.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words = [w for w in\
    \ words if w != \"\"]\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    if length(words) == 0\n        return words\n    end\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmput9x0q3l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmput9x0q3l.jl:1\n\
    in expression starting at /tmp/tmput9x0q3l.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wpbt5nl.jl:87\nin expression starting at\
    \ /tmp/tmp_wpbt5nl.jl:87\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    words = [w for w in words if w != \"\"]\n\
    \    \n    if length(words) == 0\n        return words\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words = [w for w in words if w != \"a\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"b\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"c\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"d\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"e\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"f\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"g\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"h\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"i\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"j\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"k\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"l\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"m\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"n\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"o\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"p\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"q\"\
    ]\n    \n    if length(words) == 0\n        return \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp924o8zd9.jl:1\nin expression starting at /tmp/tmp924o8zd9.jl:1\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words) == length(words_split)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=2 |>\nThe shortest solution I came up with is:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0y95jwqr.jl:22\nin expression starting at\
    \ /tmp/tmp0y95jwqr.jl:22\n"
  stdout: ''
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0qp9dri.jl:1\nin expression starting at /tmp/tmpm0qp9dri.jl:1\n"
  stdout: ''
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    \n    words = split(txt, \" \")\n    \n    words = [w for w in words if w\
    \ != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"_\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words\
    \ = [w for w in words if w != \"?\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwqvu4h1.jl:1\nin expression starting at /tmp/tmpkwqvu4h1.jl:1\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    words = split(txt, \" \")\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprixjy7h2.jl:1\nin expression starting at /tmp/tmprixjy7h2.jl:1\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words = [w for w in words if w !=\
    \ \"\"]\n        return words\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nExamples\n\
    >>> count_chars(\"Hello world!\")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\n13\n>>> count_chars(\"Hello world! \")\n13\n\
    >>> count_chars(\"Hello world! \")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7f1wq4lg.jl:23\nin expression starting at\
    \ /tmp/tmp7f1wq4lg.jl:23\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \"\\n\"]\n        words\
    \ = [w for w in words if w != \"\\t\"]\n        words = [w for w in words if w\
    \ != \"\\r\"]\n        words = [w for w in words if w != \"\\f\"]\n        words\
    \ = [w for w in words if w != \"\\v\"]\n        words = [w for w in words if w\
    \ != \"\\a\"]\n        words = [w for w in words if w != \"\\e\"]\n        words\
    \ = [w for w in words if w != \"\\?\"]\n        words = [w for w in words if w\
    \ != \"\\!\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\:\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\;\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\;\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\;\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\;\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\;\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\;\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n        words\
    \ = [w for w in words if w != \"\\;\"]\n        words = [w for w in words if w\
    \ != \"\\;\"]\n        words = [w for w in words if w != \"\\;\"]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8mu94nn0.jl:28\nin expression starting at /tmp/tmp8mu94nn0.jl:28\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        words_split = push!(words_split, word)\n\
    \    end\n    return words_split\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdsjc6_no.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpdsjc6_no.jl:27\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n   Evaluated: [\"Hello,world!\"] ==\
    \ [\"Hello\", \"world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsjc6_no.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsjc6_no.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdsjc6_no.jl:30\n  Expression: candidate(\"abcdef\") == 3\n\
    \   Evaluated: [\"abcdef\"] == 3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsjc6_no.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsjc6_no.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdsjc6_no.jl:31\n  Expression: candidate(\"aaabb\") == 2\n\
    \   Evaluated: [\"aaabb\"] == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsjc6_no.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsjc6_no.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdsjc6_no.jl:32\n  Expression: candidate(\"aaaBb\") == 1\n\
    \   Evaluated: [\"aaaBb\"] == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsjc6_no.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsjc6_no.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdsjc6_no.jl:33\n  Expression: candidate(\"\") == 0\n   Evaluated:\
    \ [\"\"] == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1659823007
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = []\n \
    \   \n    for word in words\n        words_split.push(word)\n    end\n    \n \
    \   words_split = unique(words_split)\n    \n    if length(words_split) == 0\n\
    \        return length(split(txt, \",\"))\n    end\n    \n    return length(words_split)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj9gjdkc.jl:31\nin expression starting at\
    \ /tmp/tmpgj9gjdkc.jl:31\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1eu0pn5e.jl:1\nin expression starting at /tmp/tmp1eu0pn5e.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \".\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hfniheq.jl:87\nin expression starting at\
    \ /tmp/tmp6hfniheq.jl:87\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split2 = split(txt, \",\")\n    words_split3 = split(txt, \",\")\n\
    \    words_split4 = split(txt, \",\")\n    words_split5 = split(txt, \",\")\n\
    \    words_split6 = split(txt, \",\")\n    words_split7 = split(txt, \",\")\n\
    \    words_split8 = split(txt, \",\")\n    words_split9 = split(txt, \",\")\n\
    \    words_split10 = split(txt, \",\")\n    words_split11 = split(txt, \",\")\n\
    \    words_split12 = split(txt, \",\")\n    words_split13 = split(txt, \",\")\n\
    \    words_split14 = split(txt, \",\")\n    words_split15 = split(txt, \",\")\n\
    \    words_split16 = split(txt, \",\")\n    words_split17 = split(txt, \",\")\n\
    \    words_split18 = split(txt, \",\")\n    words_split19 = split(txt, \",\")\n\
    \    words_split20 = split(txt, \",\")\n    words_split21 = split(txt, \",\")\n\
    \    words_split22 = split(txt, \",\")\n    words_split23 = split(txt, \",\")\n\
    \    words_split24 = split(txt, \",\")\n    words_split25 = split(txt, \",\")\n\
    \    words_split26 = split(txt, \",\")\n    words_split27 = split(txt, \",\")\n\
    \    words_split28 = split(txt, \",\")\n    words_split29 = split(txt, \",\")\n\
    \    words_split30 = split(txt, \",\")\n    words_split31 = split(txt, \",\")\n\
    \    words_split32 = split(txt, \",\")\n    words_split33 = split(txt, \",\")\n\
    \    words_split34 = split(txt, \",\")\n    words_split35 = split(txt, \",\")\n\
    \    words_split36 = split(txt, \",\")\n    words_split37 = split(txt, \",\")\n\
    \    words_split38 = split(txt, \",\")\n    words_split39 = split(txt, \",\")\n\
    \    words_split40 = split(txt, \",\")\n    words_split41 = split(txt, \",\")\n\
    \    words_split42 = split(txt, \",\")\n    words_split43 = split(txt, \",\")\n\
    \    words_split44 = split(txt, \",\")\n    words_split45 = split(txt, \",\")\n\
    \    words_split46 = split(txt, \",\")\n    words_split47 = split(txt, \",\")\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpry5vbzf2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpry5vbzf2.jl:1\n\
    in expression starting at /tmp/tmpry5vbzf2.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    word = \"\"\n    for c in txt\n\
    \        if c == \",\"\n            push!(words, word)\n            word = \"\"\
    \n        else\n            word *= c\n        end\n    end\n    push!(words,\
    \ word)\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpodi086c6.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpodi086c6.jl:32\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: [\"Hello world!\"] ==\
    \ [\"Hello\", \"world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpodi086c6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodi086c6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpodi086c6.jl:33\n  Expression: candidate(\"Hello,world!\")\
    \ == [\"Hello\", \"world!\"]\n   Evaluated: [\"Hello,world!\"] == [\"Hello\",\
    \ \"world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpodi086c6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodi086c6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpodi086c6.jl:34\n  Expression: candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"]\n   Evaluated: [\"Hello world,!\"] == [\"Hello\"\
    , \"world,!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpodi086c6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodi086c6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpodi086c6.jl:35\n  Expression: candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"]\n   Evaluated: [\"Hello,Hello,world !\"\
    ] == [\"Hello,Hello,world\", \"!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpodi086c6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodi086c6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpodi086c"
  timestamp: 1659823007
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_whitespace = filter(x\
    \ -> !contains(x, \" \"), words)\n    words_without_commas = filter(x -> !contains(x,\
    \ \",\"), words_without_whitespace)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"a\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"b\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"c\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"d\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"e\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"f\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"g\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"h\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"i\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"j\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"k\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"l\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"m\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"n\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"o\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"p\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"q\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"r\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"s\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"t\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"u\"), words_without_commas)\n    words_without_commas = filter(x -> !contains(x,\
    \ \"v\"), words_without_commas)\n    words_without_commas = filter(x -> \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjseh3e3.jl:42\nin expression starting at\
    \ /tmp/tmpxjseh3e3.jl:42\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_no_spaces = words\n    \n    words_no_spaces_no_commas\
    \ = words\n    \n    words_no_spaces_no_commas = words_no_spaces_no_commas[findall(x\
    \ -> x != \",\", words_no_spaces_no_commas)]\n    \n    words_no_spaces_no_commas\
    \ = words_no_spaces_no_commas[findall(x -> x != \" \", words_no_spaces_no_commas)]\n\
    \    \n    words_no_spaces_no_commas = words_no_spaces_no_commas[findall(x ->\
    \ x != \" \", words_no_spaces_no_commas)]\n    \n    words_no_spaces_no_commas\
    \ = words_no_spaces_no_commas[findall(x -> x != \" \", words_no_spaces_no_commas)]\n\
    \    \n    words_no_spaces_no_commas = words_no_spaces_no_commas[findall(x ->\
    \ x != \" \", words_no_spaces_no_commas)]\n    \n    words_no_spaces_no_commas\
    \ = words_no_spaces_no_commas[findall(x -> x != \" \", words_no_spaces_no_commas)]\n\
    \    \n    words_no_spaces_no_commas = words_no_spaces_no_commas[findall(x ->\
    \ x != \" \", words_no_spaces_no_commas)]\n    \n    words_no_spaces_no_commas\
    \ = words_no_spaces_no_commas[findall(x -> x != \" \", words_no_spaces_no_commas)]\n\
    \    \n    words_no_spaces_no_commas = words_no_spaces_no_commas[findall(x ->\
    \ x != \" \", words_no_spaces_no_commas)]\n    \n    words_no_spaces_no_commas\
    \ = words_no_spaces_no_commas[findall(x -> x != \" \", words_no_spaces_no_commas)]\n\
    \    \n    words_no_spaces_no_commas = words_no_spaces_no_commas[findall(x ->\
    \ x != \" \", words_no_spaces_no_commas)]\n    \n    words_no_spaces_no_commas\
    \ = words_no_spaces_no_commas[findall(x -> x != \" \", words_no_spaces_no_commas)]\n\
    \    \n    words_no_spaces_no_commas = words_no_spaces_no_commas[findall(x ->\
    \ x != \" \", words_no_spaces_no_commas)]\n    \n    words_no_spaces_no_commas\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyi07i2u.jl:1\nin expression starting at /tmp/tmpmyi07i2u.jl:1\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_without_commas = filter(x -> x\
    \ != \",\", words)\n    \n    words_without_commas = words_without_commas[1 :\
    \ end]\n    \n    words_without_commas = words_without_commas[1 : end]\n    \n\
    \    words_without_commas = words_without_commas[1 : end]\n    \n    words_without_commas\
    \ = words_without_commas[1 : end]\n    \n    words_without_commas = words_without_commas[1\
    \ : end]\n    \n    words_without_commas = words_without_commas[1 : end]\n   \
    \ \n    words_without_commas = words_without_commas[1 : end]\n    \n    words_without_commas\
    \ = words_without_commas[1 : end]\n    \n    words_without_commas = words_without_commas[1\
    \ : end]\n    \n    words_without_commas = words_without_commas[1 : end]\n   \
    \ \n    words_without_commas = words_without_commas[1 : end]\n    \n    words_without_commas\
    \ = words_without_commas[1 : end]\n    \n    words_without_commas = words_without_commas[1\
    \ : end]\n    \n    words_without_commas = words_without_commas[1 : end]\n   \
    \ \n    words_without_commas = words_without_commas[1 : end]\n    \n    words_without_commas\
    \ = words_without_commas[1 : end]\n    \n    words_without_commas = words_without_commas[1\
    \ : end]\n    \n    words_without_commas = words_without_commas[1 : end]\n   \
    \ \n    words_without_commas = words_without_commas[1 : end]\n    \n    words_without_commas\
    \ = words_without_commas[1 : end]\n    \n    words_without_commas = words_without_commas[1\
    \ : end]\n    \n    words_without_commas = words_without_commas[1 : end]\n   \
    \ \n    words_without_commas = words_without_commas[1 : end]\n    \n    words_without_commas\
    \ = words_without_commas[1 : end]\n    \n    words_without_commas = words_without_commas[1\
    \ : end]\n    \n    words_without_commas = words_without_commas[1 : end]\n   \
    \ \n    words_without_commas = words_without_commas[1 : end]\n    \n    words_without_commas\
    \ = words_without_commas[1 : end]\n    \n    words_without_commas = words_without_commas[1\
    \ : end]\n    \n    words_without_comm\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5z5_zaj2.jl:1\nin expression starting at /tmp/tmp5z5_zaj2.jl:1\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    words_split = split(words)\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2fupuey.jl:27\nin expression starting at\
    \ /tmp/tmpp2fupuey.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    return\
    \ words\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmv7ym4_7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmv7ym4_7.jl:1\n\
    in expression starting at /tmp/tmpmv7ym4_7.jl:1\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = [split(word) for word in\
    \ words]\n    words_split = [word for word in words_split if !isempty(word)]\n\
    \    words_split = [word for word in words_split if !islower(word)]\n    words_split\
    \ = [word for word in words_split if !isupper(word)]\n    words_split = [word\
    \ for word in words_split if !isdigit(word)]\n    words_split = [word for word\
    \ in words_split if !isspace(word)]\n    words_split = [word for word in words_split\
    \ if !iscomma(word)]\n    words_split = [word for word in words_split if !isdash(word)]\n\
    \    words_split = [word for word in words_split if !isdot(word)]\n    words_split\
    \ = [word for word in words_split if !isquote(word)]\n    words_split = [word\
    \ for word in words_split if !isbracket(word)]\n    words_split = [word for word\
    \ in words_split if !isbackslash(word)]\n    words_split = [word for word in words_split\
    \ if !isslash(word)]\n    words_split = [word for word in words_split if !iscoloncolon(word)]\n\
    \    words_split = [word for word in words_split if !issemicolonsemicolon(word)]\n\
    \    words_split = [word for word in words_split if !iscommacomma(word)]\n   \
    \ words_split = [word for word in words_split if !isdashdash(word)]\n    words_split\
    \ = [word for word in words_split if !isdotdot(word)]\n    words_split = [word\
    \ for word in words_split if !isquotequote(word)]\n    words_split = [word for\
    \ word in words_split if !isbracketbracket(word)]\n    words_split = [word for\
    \ word in words_split if !isbackslashbackslash(word)]\n    words_split = [word\
    \ for word in words_split if !isslashslash(word)]\n    words_split = [word for\
    \ word in words_split if !iscoloncolon(word)]\n    words_split = [word for word\
    \ in words_split if !issemicolonsemicolon(word)]\n    words_split = [word for\
    \ word in words_split if !iscommacomma(word)]\n    words_split = [word for word\
    \ in words_split if !isdashdash(word)]\n    words_split = [word for word in words_split\
    \ if !isdotdot(word)]\n    words_split = [word for word in words_split if !isquotequote(word)]\n\
    \    words_split = [word for word in words_split if !isbracketbracket(word)]\n\
    \    words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg3xxu4ud.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg3xxu4ud.jl:1\n\
    in expression starting at /tmp/tmpg3xxu4ud.jl:1\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\
    \",<>?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\
    \",<>?/:;'\\\"\\\\,\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\
    \",<>?/:;'\\\"\\\\,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\
    \",<>?/:;'\\\"\\\\,.?\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\
    \",<>?/:;'\\\"\\\\,.?!\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\
    \",<>?/:;'\\\"\\\\,.?!:;'\\\"\\\\,\"]\n    words = [w for w in words if w != \"\
    abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\",<>?/:;'\\\"\\\\\
    ,.?!:;'\\\"\\\\,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\\\
    \",<>?/:;'\\\"\\\\,.?!\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkefvdz5s.jl:20\nin expression starting at\
    \ /tmp/tmpkefvdz5s.jl:20\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"-\"]\n    words\
    \ = [w for w in words if w != \"_\"]\n    words = [w for w in words if w != \"\
    ?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe13wykhi.jl:59\nin expression starting at\
    \ /tmp/tmpe13wykhi.jl:59\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        words_split = words_split ++ split(word)\n\
    \    end\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split .- \"a\"\n    \n    words_split = words_split .- \"b\"\n    \n\
    \    words_split = words_split .- \"c\"\n    \n    words_split = words_split .-\
    \ \"d\"\n    \n    words_split = words_split .- \"e\"\n    \n    words_split =\
    \ words_split .- \"f\"\n    \n    words_split = words_split .- \"g\"\n    \n \
    \   words_split = words_split .- \"h\"\n    \n    words_split = words_split .-\
    \ \"i\"\n    \n    words_split = words_split .- \"j\"\n    \n    words_split =\
    \ words_split .- \"k\"\n    \n    words_split = words_split .- \"l\"\n    \n \
    \   words_split = words_split .- \"m\"\n    \n    words_split = words_split .-\
    \ \"n\"\n    \n    words_split = words_split .- \"o\"\n    \n    words_split =\
    \ words_split .- \"p\"\n    \n    words_split = words_split .- \"q\"\n    \n \
    \   words_split = words_split .- \"r\"\n    \n    words_split = words_split .-\
    \ \"s\"\n    \n    words_split = words_split .- \"t\"\n    \n    words_split =\
    \ words_split .- \"u\"\n    \n    words_split = words_split .- \"v\"\n    \n \
    \   words_split = words_split .- \"w\"\n    \n    words_split = words_split .-\
    \ \"x\"\n    \n    words_split = words_split .- \"y\"\n    \n    words_split =\
    \ words_split .- \"z\"\n    \n    words_split = words_split .- \"A\"\n    \n \
    \   words_split = words_split .- \"B\"\n    \n    words_split = words_split .-\
    \ \"C\"\n    \n    words_split = words_split .- \"D\"\n    \n    words_split =\
    \ words_split .- \"E\"\n    \n    words_split = words_split .- \"F\"\n    \n \
    \   words_split = words_split .- \"G\"\n    \n    words_split = words_split .-\
    \ \"H\"\n    \n    words_split = words_split .- \"I\"\n    \n    words_split =\
    \ words_split .- \"J\"\n    \n    words_split = words_split \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn32c4sxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn32c4sxx.jl:1\n\
    in expression starting at /tmp/tmpn32c4sxx.jl:1\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    if length(words) == 0\n        return length(words)\n    else\n       \
    \ words = [w for w in words if w != \",\"]\n        if length(words) == 0\n  \
    \          return length(words)\n        else\n            return length(words)\n\
    \        end\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxc3vp_l.jl:27\nin expression starting at\
    \ /tmp/tmpmxc3vp_l.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1eu0pn5e.jl:1\nin expression starting at /tmp/tmp1eu0pn5e.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc3x92o_.jl:1\nin expression starting at /tmp/tmptc3x92o_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if isempty(txt)\n        return txt\n   \
    \ else\n        words = split(txt, \" \")\n        words = words[words != \"\"\
    ]\n        return words\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    count_words(txt::String)\n    Count the number of words in a given text\n\
    \    \n    Arguments\n    ---------\n    txt :: String\n        Text to count\
    \ the words from\n    \n    Returns\n    -------\n    count :: Int64\n       \
    \ Number of words in the given text\n    \n    Examples\n    --------\n    >>>\
    \ count_words(\"Hello world!\")\n    6\n    >>> count_words(\"Hello world! How\
    \ are you?\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrqgeu1h.jl:23\nin expression starting at\
    \ /tmp/tmphrqgeu1h.jl:23\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    words = [w for w in words\
    \ if w != \"\"]\n    \n    if length(words) == 0\n        return words\n    \n\
    \    words = [w for w in words if w != \"\"]\n    \n    if length(words) == 0\n\
    \        return words\n    \n    words = [w for w in words if w != \"\"]\n   \
    \ \n    if length(words) == 0\n        return words\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpci86awaw.jl:112\nin expression starting at /tmp/tmpci86awaw.jl:112\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    word = \"\"\n    for c in txt\n\
    \        if c == \" \" || c == \",\"\n            push!(words, word)\n       \
    \     word = \"\"\n        else\n            word *= c\n        end\n    end\n\
    \    push!(words, word)\n    return words\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlyqhkmw.jl:27\nin expression starting at\
    \ /tmp/tmpwlyqhkmw.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        if !contains(word, \" \")\n            words_split\
    \ = [word | words_split]\n        else\n            words_split = split(word)\n\
    \        end\n    end\n    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy3thg_e.jl:28\nin expression starting at\
    \ /tmp/tmpcy3thg_e.jl:28\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}<>?,./;'[]\\\
    \\|`~-=_+<>|\")\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}<>?,./;'[]\\\
    \\|`~-=_+<>|\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}<>?,./;'[]\\\
    \\|`~-=_+<>|\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}<>?,./;'[]\\\
    \\|`~-=_+<>|\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}<>?,./;'[]\\\
    \\|`~-=_+<>|\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6pwu3ui4.jl:21\nin expression starting at\
    \ /tmp/tmp6pwu3ui4.jl:21\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \".\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"(\"]\n    \n    words = [w\
    \ for w in words if w != \")\"]\n    \n    words = [w for w in words if w != \"\
    [\"]\n    \n    words = [w for w in words if w != \"]\"]\n    \n    words = [w\
    \ for w in words if w != \"{\"]\n    \n    words = [w for w in words if w != \"\
    }\"]\n    \n    words = [w for w in words if w != \"|\"]\n    \n    words = [w\
    \ for w in words if w != \"\\\\\"]\n    \n    words = [w for w in words if w !=\
    \ \"^\"]\n    \n    words = [w for w in words if w != \"~\"]\n    \n    words\
    \ = [w for w in words if w != \"`\"]\n    \n    words = [w for w in words if w\
    \ != \"~\"]\n    \n    words = [w for w in words if w != \"`\"]\n    \n    words\
    \ = [w for w in words if w != \"~\"]\n    \n    words = [w for w in words if w\
    \ != \"`\"]\n    \n    words = [w for w in words if w != \"~\"]\n    \n    words\
    \ = [w for w in words if w != \"`\"]\n    \n    words = [w for w in words if w\
    \ != \"~\"]\n    \n    words = [w for w in words if w != \"`\"]\n    \n    words\
    \ = [w for w in words if w != \"~\"]\n    \n    words = [w for w in words if w\
    \ != \"`\"]\n    \n    words = [w for w in words if w != \"~\"]\n    \n    words\
    \ = [w for w in words if w != \"`\"]\n    \n    words = [w for w in words if w\
    \ != \"~\"]\n    \n    words = [w for w in words if w != \"`\"]\n    \n    words\
    \ = [w for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vp3lm9w.jl:87\nin expression starting at\
    \ /tmp/tmp1vp3lm9w.jl:87\n"
  stdout: ''
  timestamp: 1659823007
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = []\n \
    \   \n    for word in words\n        words_split = words_split ++ split(word,\"\
    ,\")\n    end\n    \n    words_split = [w for w in words_split if !isempty(w)]\n\
    \    \n    words_split = [w for w in words_split if !islower(w)]\n    \n    words_split\
    \ = [w for w in words_split if !isupper(w)]\n    \n    words_split = [w for w\
    \ in words_split if !isdigit(w)]\n    \n    words_split = [w for w in words_split\
    \ if !issymbol(w)]\n    \n    words_split = [w for w in words_split if !isspace(w)]\n\
    \    \n    words_split = [w for w in words_split if !isblank(w)]\n    \n    words_split\
    \ = [w for w in words_split if !isempty(w)]\n    \n    return words_split\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_t30fu6d.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp_t30fu6d.jl:46\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp_t30fu6d.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_t30fu6d.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_t30fu6d.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp_t30fu6d.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ++\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_t30fu6d.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_t30fu6d.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_t30fu6d.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp_t30fu6d.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: ++\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_t30fu6d.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_t30fu6d.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_t30fu6d.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp_t30fu6d.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp_t30fu6d.jl:20\n   [2] macro expansio"
  timestamp: 1659823009
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[2], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[3], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[4], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[5], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[6], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[7], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[8], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[9], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_counts])\n    \n    word_counts = sort(word_counts, by=x->x[10], rev=true)\n\
    \    \n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n \
    \   word_counts = sort(word_counts, by=x->x[11], rev=true)\n    \n    word_counts\
    \ = Dict([(k, v[1]) for (k, v) in word_counts])\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[12], rev=true)\n    \n    word_counts = Dict([(k, v[1]) for (k, v) in\
    \ word_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpo4kq5n9i.jl:69\nin expression starting at /tmp/tmpo4kq5n9i.jl:69\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmba_ja6i.jl:59\nin expression starting at\
    \ /tmp/tmpmba_ja6i.jl:59\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    word_counts = Dict{String,\
    \ Int64}()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    word_counts = collect(values(word_counts))\n\
    \    \n    word_counts = sort(word_counts)\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjqyc7pml.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqyc7pml.jl:1\n\
    in expression starting at /tmp/tmpjqyc7pml.jl:1\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3r665zu0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3r665zu0.jl:1\n\
    in expression starting at /tmp/tmp3r665zu0.jl:1\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    \n    for word in split(txt, \"\
    \ \")\n        push!(words, word)\n    end\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzob373ho.jl:22\nin expression starting at\
    \ /tmp/tmpzob373ho.jl:22\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words)\n    words_no_commas = filter(x -> !contains(x, \",\"), words_no_spaces)\n\
    \    words_no_commas_no_spaces = filter(x -> !contains(x, \" \"), words_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words_no_commas_no_spaces_no_commas)\n    words_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces = filter(x\
    \ -> !contains(x, \" \"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_commas_no_spaces_\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokvgvdcw.jl:27\nin expression starting at\
    \ /tmp/tmpokvgvdcw.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmba_ja6i.jl:59\nin expression starting at\
    \ /tmp/tmpmba_ja6i.jl:59\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w\
    \ for w in words if w != \"_\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"_\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    !\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words = [w\
    \ for w in words if w != \"_\"]\n    \n    words = [w for w in words if w != \"\
    ?\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5a6v34j.jl:87\nin expression starting at\
    \ /tmp/tmpn5a6v34j.jl:87\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        if word != \"\"\n            words_split = [word\
    \ | words_split]\n        end\n    end\n    words_split\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0okujj6.jl:23\nin expression starting at\
    \ /tmp/tmpq0okujj6.jl:23\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \ \"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \" \"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \" \"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \" \"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \" \"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \" \"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \" \"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \" \"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \" \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4ab819i.jl:59\nin expression starting at\
    \ /tmp/tmpq4ab819i.jl:59\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjbc73i8.jl:71\nin expression starting at\
    \ /tmp/tmpcjbc73i8.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphf987_8u.jl:54\nin expression starting at /tmp/tmphf987_8u.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if isempty(words)\n       \
    \ return words\n    else\n        \n        words = split(txt, \",\")\n      \
    \  \n        if isempty(words)\n            return words\n        else\n     \
    \       \n            words = split(txt, \" \")\n            \n            if\
    \ isempty(words)\n                return words\n            else\n           \
    \     \n                words = split(txt, \" \")\n                \n        \
    \        if isempty(words)\n                    return words\n               \
    \ else\n                    \n                    words = split(txt, \" \")\n\
    \                    \n                    if isempty(words)\n               \
    \         return words\n                    else\n                        \n \
    \                       words = split(txt, \" \")\n                        \n\
    \                        if isempty(words)\n                            return\
    \ words\n                        else\n                            \n        \
    \                    words = split(txt, \" \")\n                            \n\
    \                            if isempty(words)\n                             \
    \   return words\n                            else\n                         \
    \       \n                                words = split(txt, \" \")\n        \
    \                        \n                                if isempty(words)\n\
    \                                    return words\n                          \
    \      else\n                                    \n                          \
    \          words = split(txt, \" \")\n                                    \n \
    \                                   if isempty(words)\n                      \
    \                  return words\n                                    else\n  \
    \                                      \n                                    \
    \    words = split(txt, \" \")\n                                        \n   \
    \                                     if isempty(words)\n                    \
    \                        return words\n                                      \
    \  else\n                                            \n                      \
    \                      words = split(txt, \" \")\n                           \
    \                 \n                                            if isempty(words)\n\
    \                                                return words\n              \
    \                              else\n                                        \
    \        \n                                                words = split(txt,\
    \ \" \")\n                                                \n                 \
    \                               if isempty(words)\n                          \
    \                          return words\n                                    \
    \            else\n                                                    \n    \
    \                                                words = split(txt, \" \")\n \
    \                                                   \n                       \
    \                             if isempty(words)\n                            \
    \                            return words\n                                  \
    \                  else\n                                                    \
    \    \n                                                        words = split(txt,\
    \ \" \")\n                                                        \n         \
    \                                               return words\n               \
    \                                 end\n                                      \
    \      end\n                                        end\n                    \
    \                end\n                                end\n                  \
    \          end\n                        end\n                    end\n       \
    \         end\n            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_words(txt::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2dly6k3.jl:109\nin expression starting at\
    \ /tmp/tmpv2dly6k3.jl:109\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    else\n        \n        words = [w for w in words if\
    \ w != \"\"]\n        \n        if length(words) == 0\n            return words\n\
    \        else\n            \n            words = [w for w in words if w != \"\
    ,\"]\n            \n            if length(words) == 0\n                return\
    \ words\n            else\n                \n                words = [w for w\
    \ in words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w !=\
    \ \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"\
    j\" and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w != \"o\"\
    \ and w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"t\" and\
    \ w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\" and w\
    \ != \"z\"]\n                \n                if length(words) == 0\n       \
    \             return words\n                else\n                    \n     \
    \               words = [w for w in words if w != \"a\" and w != \"b\" and w !=\
    \ \"c\" and w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"\
    h\" and w != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\"\
    \ and w != \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and\
    \ w != \"s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w\
    \ != \"x\" and w != \"y\" and w != \"z\"]\n                    \n            \
    \        if length(words) == 0\n                        return words\n       \
    \             else\n                        \n                        words =\
    \ [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\"\
    \ and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and\
    \ w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w\
    \ != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w !=\
    \ \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"\
    y\" and w != \"z\"]\n                        \n                        if length(words)\
    \ == 0\n                            return words\n                        else\n\
    \                            \n                            words = [w for w in\
    \ words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w != \"\
    e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpz5fw6f2y.jl:32\nin expression starting at /tmp/tmpz5fw6f2y.jl:32\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tkuwns4.jl:1\nin expression starting at /tmp/tmp_tkuwns4.jl:1\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words::Vector{String} = []\n    word = \"\"\n    for c in txt\n\
    \        if c == \",\"\n            push!(words, word)\n            word = \"\"\
    \n        else\n            word *= c\n        end\n    end\n    push!(words,\
    \ word)\n    return words\nend\n</code>\n<|/ a |>\n<| a tags=julia,string |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1z8osk5.jl:27\nin expression starting at\
    \ /tmp/tmpa1z8osk5.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    -\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp1o60g3ae.jl:58\nin expression starting at /tmp/tmp1o60g3ae.jl:58\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = []\n \
    \   \n    for word in words\n        if !isnothing(word)\n            words_split\
    \ += split(word, \",\")\n        end\n    end\n    \n    return words_split\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpewt2kxba.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpewt2kxba.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Any},\
    \ Bs::Vector{SubString{String}})\n     @ Base ./arraymath.jl:45\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpewt2kxba.jl:21\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpewt2kxba.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpewt2kxba.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpewt2kxba.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(2),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Any},\
    \ Bs::Vector{SubString{String}})\n     @ Base ./arraymath.jl:45\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpewt2kxba.jl:21\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpewt2kxba.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpewt2kxba.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpewt2kxba.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices."
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    abcdef\"]\n    return words\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\", \"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \"\
    ,\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\", \"abcdef\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \",\")\n</\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg32r5sv7.jl:23\nin expression starting at\
    \ /tmp/tmpg32r5sv7.jl:23\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    return length(words)\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nI like this solution, but I believe it can be simplified a bit.\
    \ For example, `[w for w in words if w != \"\"]` can be replaced with `words`.\
    \ And `[w for w in words if w != \",\"]` can be replaced with `filter(x -> x !=\
    \ \",\", words)`. And `[w for w in words if w != \"abcdef\"]` can be replaced\
    \ with `filter(x -> x != \"abcdef\", words)`.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ answer by is very good, but I thought I'd add my own solution that is more efficient\
    \ and more idiomatic. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprtm13wfa.jl:20\nin expression starting at\
    \ /tmp/tmprtm13wfa.jl:20\n"
  stdout: ''
  timestamp: 1659823008
