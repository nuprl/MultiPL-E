language: jl
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqykg5hvy.jl:17\nin expression\
    \ starting at /tmp/tmpqykg5hvy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:alphabet.len()]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-alphabet.len()%2:\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rx81ics.jl:48\nin expression starting at\
    \ /tmp/tmp8rx81ics.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = \nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg4d4fnal.jl:19\nin expression\
    \ starting at /tmp/tmpg4d4fnal.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqrpwu94g.jl:19\nin expression\
    \ starting at /tmp/tmpqrpwu94g.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsg7xucna.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsg7xucna.jl:1\n\
    in expression starting at /tmp/tmpsg7xucna.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jiu99tp.jl:66\nin expression starting at\
    \ /tmp/tmp6jiu99tp.jl:66\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7fuyfhn.jl:1\nin expression starting at /tmp/tmpc7fuyfhn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9vv2kunf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9vv2kunf.jl:1\n\
    in expression starting at /tmp/tmp9vv2kunf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwng7q0md.jl:17\n\
    in expression starting at /tmp/tmpwng7q0md.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr5hndc5w.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr5hndc5w.jl:1\n\
    in expression starting at /tmp/tmpr5hndc5w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9vv2kunf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9vv2kunf.jl:1\n\
    in expression starting at /tmp/tmp9vv2kunf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr76sa91m.jl:1\nin expression starting at /tmp/tmpr76sa91m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    enc = \"\"\n    for i in s\n        enc +=\
    \ alphabet[(alphabet.index(i) + 2) % 26]\n    return enc\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqpcrusb.jl:24\nin expression starting at\
    \ /tmp/tmpjqpcrusb.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    \n    encrypted_string =\
    \ \"\"\n    for letter in s\n        encrypted_string += rotated_alphabet[alphabet.index(letter)]\n\
    \    end\n    return encrypted_string\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb7jv_aub.jl:17\nin expression\
    \ starting at /tmp/tmpb7jv_aub.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet * 2\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet * 2\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet * 2\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet =\
    \ alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:] + alphabet[:\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjbtdmi6c.jl:19\nin expression\
    \ starting at /tmp/tmpjbtdmi6c.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet .rotate_left(2)\n    alphabet\
    \ .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"alphabet\
    \ .\" at /tmp/tmp9nyuetdl.jl:17\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9nyuetdl.jl:17\n\
    in expression starting at /tmp/tmp9nyuetdl.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb955z64k.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb955z64k.jl:1\n\
    in expression starting at /tmp/tmpb955z64k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(letters)\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16yym65y.jl:85\nin expression starting at\
    \ /tmp/tmp16yym65y.jl:85\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ldr_374.jl:1\nin expression starting at /tmp/tmp7ldr_374.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2]\n    \n    encrypted_string = \"\"\n    \n    for character\
    \ in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8du5d1mg.jl:28\nin expression starting at\
    \ /tmp/tmp8du5d1mg.jl:28\n"
  stdout: ''
