language: jl
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6y2i8ib.jl:13\nin expression starting at\
    \ /tmp/tmph6y2i8ib.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local maxes = []\n    local max = 0\n    local i = 1\n    \n   \
    \ while i <= length(numbers) do\n        if numbers[i] > max then\n          \
    \  max = numbers[i]\n        end\n        \n        if i == length(numbers) then\n\
    \            maxes = [max]\n        else\n            push!(maxes, max)\n    \
    \    end\n        \n        i = i + 1\n    end\n    \n    return maxes\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9oqrjcw1.jl:28\nin expression starting at\
    \ /tmp/tmp9oqrjcw1.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}()\n    rolling_max.push!(numbers[1])\n   \
    \ for n in numbers[2:end]\n        if rolling_max.last() > n\n            rolling_max.push!(n)\n\
    \        end\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie3ptq7s.jl:16\nin expression starting at\
    \ /tmp/tmpie3ptq7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqcc6ubf9.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpqcc6ubf9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpqcc6ubf9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqcc6ubf9.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3,\
    \ 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that generates a random\
    \ integer between $0$ and $1$ and returns its value if it is in the given interval\
    \ or $0$ if it is not.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzkt3m1b.jl:18\nin expression starting at\
    \ /tmp/tmpjzkt3m1b.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_d2m2lp6.jl:17\nin expression starting at\
    \ /tmp/tmp_d2m2lp6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpbt3unozc.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpbt3unozc.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpbt3unozc.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbt3unozc.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbt3unozc.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpbt3unozc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbt3unozc.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbt3unozc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbt3unozc.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpbt3unozc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_rolling_window(numbers, 1)\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2953uqho.jl:9\nin expression starting at /tmp/tmp2953uqho.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = []\n    \n    for number in numbers\n      \
    \  rolling_max_array.append(number)\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdlpsh5zu.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpdlpsh5zu.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpdlpsh5zu.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdlpsh5zu.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdlpsh5zu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdlpsh5zu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdlpsh5zu.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdlpsh5zu.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdlpsh5zu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdlpsh5zu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpdlpsh5zu.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdlpsh5zu.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdlpsh5zu.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local rolling_max_result = []\n    local rolling_max_index = 0\n\
    \    local rolling_max_value = numbers[1]\n    local rolling_max_window = numbers[1]\n\
    \    local rolling_max_window_size = numbers[1]\n    \n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_value\n            rolling_max_value = numbers[i]\n\
    \            rolling_max_window = rolling_max_value\n            rolling_max_window_size\
    \ = i\n        else\n            rolling_max_value = rolling_max_value\n     \
    \       rolling_max_window = rolling_max_value\n            rolling_max_window_size\
    \ = i\n        end\n    end\n    \n    rolling_max_result = [rolling_max_value]\
    \ + rolling_max_result\n    \n    while rolling_max_window_size < length(numbers)\n\
    \        rolling_max_value = numbers[rolling_max_window_size]\n        rolling_max_window\
    \ = rolling_max_value\n        rolling_max_window_size = rolling_max_window_size\
    \ + 1\n        \n        for i = rolling_max_window_size + 2:length(numbers)\n\
    \            if numbers[i] > rolling_max_value\n                rolling_max_value\
    \ = numbers[i]\n                rolling_max_window = rolling_max_value\n     \
    \           rolling_max_window_size = i\n            else\n                rolling_max_value\
    \ = rolling_max_value\n                rolling_max_window = rolling_max_value\n\
    \                rolling_max_window_size = i\n            end\n        end\n \
    \       \n        rolling_max_result = [rolling_max_value] + rolling_max_result\n\
    \    end\n    \n    return rolling_max_result\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit_misq4.jl:50\nin expression starting at\
    \ /tmp/tmpit_misq4.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        if n != rolling_max_list[-1]\n            rolling_max_list << n\n   \
    \     else\n            rolling_max_list << rolling_max_list[-1]\n        end\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9py9aj8s.jl:20\nin expression starting at\
    \ /tmp/tmp9py9aj8s.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmp1iutvm.jl:12\nin expression starting at\
    \ /tmp/tmpmp1iutvm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(Int64, length(numbers))\n    rolling_max_array[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] =\
    \ max(numbers[i-1], numbers[i])\n    end\n    return rolling_max_array\nend\n\
    </cell>\n<text>\nrolling_max_index\nThe function rolling_max_index returns the\
    \ index of the rolling maximum element found until a given moment in the sequence.\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb68rb4kx.jl:14\nin expression starting at\
    \ /tmp/tmpb68rb4kx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxulcq_j6.jl:16\nin expression starting at\
    \ /tmp/tmpxulcq_j6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    rolling_max_list =\
    \ rolling_max_list + numbers\n    \n    rolling_max_list = rolling_max_list[2:end]\n\
    \    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcyrn2ic.jl:16\nin expression starting at\
    \ /tmp/tmpjcyrn2ic.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        push!(rolling_max, maximum(rolling_max))\n        push!(rolling_max,\
    \ n)\n    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6_on5jy.jl:17\nin expression starting at\
    \ /tmp/tmpw6_on5jy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if\
    \ numbers[i] > maximum\n            maximum = numbers[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq7zeq1h.jl:16\nin expression starting at\
    \ /tmp/tmpwq7zeq1h.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(n)]\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nkbsguk.jl:16\nin expression starting at\
    \ /tmp/tmp3nkbsguk.jl:16\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(numbers, number)]\n\
    \    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3j3m1fi0.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp3j3m1fi0.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching rolling_max(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    rolling_max(::Vector{Int64}) at /tmp/tmp3j3m1fi0.jl:6\n  Stacktrace:\n  \
    \ [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3j3m1fi0.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3j3m1fi0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3j3m1fi0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3j3m1fi0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching rolling_max(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    rolling_max(::Vector{Int64}) at /tmp/tmp3j3m1fi0.jl:6\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3j3m1fi0.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3j3m1fi0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3j3m1fi0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3j3m1fi0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: no method\
    \ matching rolling_max(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    rolling_max(::Vector{Int64}) at /tmp/tmp3j3m1fi0.jl:6\n  Stacktrace:\n  \
    \ [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp3j3m1fi0.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3j3m1fi0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/jul"
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcxbnf0v.jl:16\nin expression starting at\
    \ /tmp/tmpdcxbnf0v.jl:16\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j6wmik5.jl:13\nin expression starting at\
    \ /tmp/tmp3j6wmik5.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\n>>> square_sum([1, 2, 3, 4])\n\
    25\n>>> square_sum([1, 2, 3])\n6\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2404b4tf.jl:13\nin expression starting at\
    \ /tmp/tmp2404b4tf.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflxrpecl.jl:18\nin expression starting at\
    \ /tmp/tmpflxrpecl.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        if n == rolling_max[1]\n            rolling_max[1] = n\n        else\n\
    \            push!(rolling_max, n)\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6joqqbq.jl:20\nin expression starting at\
    \ /tmp/tmpt6joqqbq.jl:20\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qxbbf2l.jl:13\nin expression starting at\
    \ /tmp/tmp6qxbbf2l.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfamb26_u.jl:16\nin expression starting at\
    \ /tmp/tmpfamb26_u.jl:16\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n   \
    \         rolling_max[i] = numbers[i]\n        else\n            rolling_max[i]\
    \ = rolling_max[i-1]\n        end\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqr0f87pq.jl:18\nin expression starting at\
    \ /tmp/tmpqr0f87pq.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(n)]\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nkbsguk.jl:16\nin expression starting at\
    \ /tmp/tmp3nkbsguk.jl:16\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list <- []\n    rolling_max_list <- numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max_list <- max(rolling_max_list, rolling_max(n))\n\
    \    end\n    rolling_max_list\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a random integer between $0$ and $1$, inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppue_r_q0.jl:14\nin expression starting at\
    \ /tmp/tmppue_r_q0.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list <- []\n    \n    for number in numbers\n      \
    \  rolling_max_list <- append(rolling_max_list, maximum(rolling_max_list, number))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjxlp9ob.jl:16\nin expression starting at\
    \ /tmp/tmpbjxlp9ob.jl:16\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_d2m2lp6.jl:17\nin expression starting at\
    \ /tmp/tmp_d2m2lp6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(Int64, length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend\n</code>\n<|/ a tags=julia,arrays,performance\
    \ |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got an\
    \ error `MethodError: no method matching maximum(::Array{Int64,1}, ::Int64)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix the error. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got\
    \ an error `MethodError: no method matching maximum(::Array{Int64,1}, ::Int64)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix the error. Sorry for the confusion.\n\
    <|/ c |>\n<| a tags=julia,arrays,performance |>\nI wrote a package called RollingMax\
    \ which does exactly that:\n<code>\njulia> using RollingMax\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_86yfyn.jl:13\nin expression starting at\
    \ /tmp/tmpf_86yfyn.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > rolling_max_list[1]\n\
    \            rolling_max_list.append(numbers[i])\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the rolling mean of a given list of integers. \nThe rolling mean is defined\
    \ as the arithmetic mean of the elements over a given window of length $k$. \n\
    For example, if the input list is [1, 2, 3, 4, 5] and the window length is $k$,\
    \ then the rolling mean is defined as the arithmetic mean of the elements over\
    \ the window: [1, 2, 3, 4] with $k$ equal to 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyy0cfck6.jl:16\nin expression starting at\
    \ /tmp/tmpyy0cfck6.jl:16\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    rolling_max_list <- rolling_max_list\
    \ ++ numbers\n    rolling_max_list <- rolling_max_list |> maximum\n    rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ca1w0ff.jl:12\nin expression starting at\
    \ /tmp/tmp3ca1w0ff.jl:12\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmp1iutvm.jl:12\nin expression starting at\
    \ /tmp/tmpmp1iutvm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xno0a9y.jl:14\nin expression starting at\
    \ /tmp/tmp1xno0a9y.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 3: Rolling average\nWrite a function that takes a vector of numbers and returns\
    \ the rolling average of the numbers. \nThe rolling average of a vector is the\
    \ sum of the elements divided by the number of elements in the vector.\nThe rolling\
    \ average of a vector is defined as the average of the last $k$ elements of the\
    \ vector.\nFor example, if the vector is [1,2,3,4,5] and the window size is 3,\
    \ the rolling average is calculated as (1+2+3)/3 = 2.5.\nThe function should return\
    \ the rolling average of the given vector.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both positive and negative\
    \ numbers.\nThe function should work for both positive and negative numbers, provided\
    \ that $k$ is less than or equal to the length of the vector.\nThe function should\
    \ work for both positive and negative numbers, provided that $k$ is less than\
    \ or equal to the length of the vector.\nThe function should work for both positive\
    \ and negative numbers, provided that $k$ is less than or equal to the length\
    \ of the vector.\nThe function should work for both positive and negative numbers,\
    \ provided that $k$ is less than or equal to the length of the vector.\nThe function\
    \ should work for both positive and negative numbers, provided that $k$ is less\
    \ than or equal to the length of the vector.\nThe function should work for both\
    \ positive and negative numbers, provided that $k$ is less than or equal to the\
    \ length of the vector.\nThe function should work for both positive and negative\
    \ numbers, provided that $k$ is less than or equal to the length of the vector.\n\
    The function should work for both positive and negative numbers, provided that\
    \ $k$ is less than or equal to the length of the vector.\nThe function should\
    \ work for both positive and negative numbers, provided that $k$ is less than\
    \ or equal to the length of the vector.\nThe function should work for both positive\
    \ and negative numbers, provided that $k$ is less than or equal to the length\
    \ of the vector.\nThe function should work for both positive and negative numbers,\
    \ provided that $k$ is less than or equal to the length of the vector.\nThe function\
    \ should work for both positive and negative numbers, provided that $k$ is less\
    \ than or equal to the length of the vector.\nThe function should work for both\
    \ positive and negative numbers, provided that $k$ is less than or equal to the\
    \ length of the vector.\nThe function should work for both positive and negative\
    \ numbers, provided that $k$ is less than or equal to the length of the vector.\n\
    The function should work for both positive and negative numbers, provided that\
    \ $k$ is less than or equal to the length of the vector.\nThe function should\
    \ work for both positive and negative numbers, provided that $k$ is less than\
    \ or equal to the length of the vector.\nThe function \nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32vvnbfh.jl:13\nin expression starting at\
    \ /tmp/tmp32vvnbfh.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0yor134.jl:13\nin expression starting at\
    \ /tmp/tmpe0yor134.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list <- append(rolling_max_list, maximum(rolling_max_list),\
    \ length(rolling_max_list))\n    end\n    \n    return rolling_max_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpz8mdzx4b.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpz8mdzx4b.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ rolling_max_list not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpz8mdzx4b.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz8mdzx4b.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz8mdzx4b.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz8mdzx4b.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  UndefVarError: rolling_max_list not\
    \ defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpz8mdzx4b.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz8mdzx4b.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz8mdzx4b.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz8mdzx4b.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  UndefVarError: rolling_max_list not\
    \ defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpz8mdzx4b.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz8mdzx4b.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz8mdzx4b.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz8mdzx4b.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: rolling_max_list\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vect"
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3274mkyr.jl:18\nin expression starting at\
    \ /tmp/tmp3274mkyr.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxulcq_j6.jl:16\nin expression starting at\
    \ /tmp/tmpxulcq_j6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n   \
    \         rolling_max[i] = numbers[i]\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9ppo4a9.jl:16\nin expression starting at\
    \ /tmp/tmpz9ppo4a9.jl:16\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppy880jo6.jl:12\nin expression starting at\
    \ /tmp/tmppy880jo6.jl:12\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_result = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[i-1]\n\
    \            rolling_max_result[i] = numbers[i]\n        else\n            rolling_max_result[i]\
    \ = rolling_max_result[i-1]\n        end\n    end\n    return rolling_max_result\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxxoegt3.jl:18\nin expression starting at\
    \ /tmp/tmplxxoegt3.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}()\n    rolling_max[1] = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if rolling_max[n] < rolling_max[1]\n          \
    \  rolling_max[n] = rolling_max[1]\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn929qf1s.jl:16\nin expression starting at\
    \ /tmp/tmpn929qf1s.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n        end\n  \
    \  end\n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzilezzfr.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpzilezzfr.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpzilezzfr.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzilezzfr.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzilezzfr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzilezzfr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzilezzfr.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzilezzfr.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzilezzfr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzilezzfr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzilezzfr.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzilezzfr.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzilezzfr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzilezzfr.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, "
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = []\n    \n    for number in numbers\n       \
    \ rolling_max_list.append(number)\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a list of rolling\
    \ minimum element found until given moment in the sequence.\n>>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 2]\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo777jehe.jl:16\nin expression starting at\
    \ /tmp/tmpo777jehe.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_75jw0z.jl:18\nin expression starting at\
    \ /tmp/tmpq_75jw0z.jl:18\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0yor134.jl:13\nin expression starting at\
    \ /tmp/tmpe0yor134.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsniepa6k.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpsniepa6k.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpsniepa6k.jl:11\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpsniepa6k.jl:22 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpsniepa6k.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsniepa6k.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpsniepa6k.jl:11\n  \
    \ [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpsniepa6k.jl:23 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n >\
    \ rolling_max\n            rolling_max = n\n        end\n    end\n    rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4j0k5ve.jl:15\nin expression starting at\
    \ /tmp/tmpf4j0k5ve.jl:15\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6y2i8ib.jl:13\nin expression starting at\
    \ /tmp/tmph6y2i8ib.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ return rolling_max\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuo2axuj.jl:16\nin expression starting at\
    \ /tmp/tmpsuo2axuj.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i],\
    \ rolling_max_array[i-1])\n    end\n    return rolling_max_array\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9n6v12ao.jl:14\nin expression starting at\
    \ /tmp/tmp9n6v12ao.jl:14\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list.append(n)\n        end\n    end\n    rolling_max_list\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwtrhj9d.jl:16\nin expression starting at\
    \ /tmp/tmprwtrhj9d.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpus828puk.jl:13\nin expression starting at\
    \ /tmp/tmpus828puk.jl:13\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n   \
    \         rolling_max[i] = numbers[i]\n        else\n            rolling_max[i]\
    \ = rolling_max[i-1]\n        end\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u3a68g2.jl:18\nin expression starting at\
    \ /tmp/tmp4u3a68g2.jl:18\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for number in numbers[2:end]\n        if number > rolling_max_list[1]\n \
    \           rolling_max_list.append(number)\n        end\n    end\n    rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpct4whgl2.jl:16\nin expression starting at\
    \ /tmp/tmpct4whgl2.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxulcq_j6.jl:16\nin expression starting at\
    \ /tmp/tmpxulcq_j6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = Array{Int64}(length(numbers), length(numbers))\n \
    \   for i = 1:length(numbers)\n        rolling_max_array[i, :] = rolling_max(numbers[i:i+1])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3c83sa6.jl:13\nin expression starting at\
    \ /tmp/tmpb3c83sa6.jl:13\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list <- Vector{Int64}()\n    \n    for number in numbers\n\
    \        \n        if number > rolling_max_list[1]\n            rolling_max_list\
    \ <- append(rolling_max_list, number)\n        end\n    end\n    \n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vlku_x2.jl:19\nin expression starting at\
    \ /tmp/tmp2vlku_x2.jl:19\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n >\
    \ rolling_max\n            rolling_max = n\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecw6kt_b.jl:15\nin expression starting at\
    \ /tmp/tmpecw6kt_b.jl:15\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, rolling_max(n))\n    end\n\
    \    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmyznurs.jl:16\nin expression starting at\
    \ /tmp/tmpdmyznurs.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(Int, length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n    end\n\
    \    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpitughj0i.jl:13\nin expression starting at\
    \ /tmp/tmpitughj0i.jl:13\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_array[i-1]\n\
    \            rolling_max_array[i] = numbers[i]\n        else\n            rolling_max_array[i]\
    \ = rolling_max_array[i-1]\n        end\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7x1trnv.jl:18\nin expression starting at\
    \ /tmp/tmps7x1trnv.jl:18\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzhd73qb6.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzhd73qb6.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhd73qb6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzhd73qb6.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzhd73qb6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzhd73qb6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhd73qb6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzhd73qb6.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzhd73qb6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzhd73qb6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmp1iutvm.jl:12\nin expression starting at\
    \ /tmp/tmpmp1iutvm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ouw8f_0.jl:13\nin expression starting at\
    \ /tmp/tmp9ouw8f_0.jl:13\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        if rolling_max_list.length == 0 || rolling_max_list[-1] < n\n       \
    \     rolling_max_list << n\n        else\n            rolling_max_list << rolling_max_list[-1]\n\
    \        end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm75o06y0.jl:20\nin expression starting at\
    \ /tmp/tmpm75o06y0.jl:20\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for i = length(numbers)-1 downto\
    \ 1 do\n        if numbers[i] > rolling_max\n            rolling_max = numbers[i]\n\
    \        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvd9lg1_r.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvd9lg1_r.jl:9\n\
    in expression starting at /tmp/tmpvd9lg1_r.jl:9\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflxrpecl.jl:18\nin expression starting at\
    \ /tmp/tmpflxrpecl.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklqyey6z.jl:16\nin expression starting at\
    \ /tmp/tmpklqyey6z.jl:16\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlax8tbm.jl:16\nin expression starting at\
    \ /tmp/tmpvlax8tbm.jl:16\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8crarp6.jl:12\nin expression starting at\
    \ /tmp/tmpb8crarp6.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.4>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates the cumulative sum of a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmmy7s9e.jl:13\nin expression starting at\
    \ /tmp/tmphmmy7s9e.jl:13\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if\
    \ n > rolling_max\n            rolling_max = n\n        end\n    end\n    \n \
    \   return rolling_max\nend\n</cell>\n<text>\nrolling_max\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7xyz79f.jl:17\nin expression starting at\
    \ /tmp/tmps7xyz79f.jl:17\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for i = end - 1 ; i >= 0 ; i--\n\
    \        rolling_max = max(numbers[i], rolling_max)\n    end\n    \n    return\
    \ rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8f96u09p.jl:9\nin expression starting at /tmp/tmp8f96u09p.jl:9\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if rolling_max_list[-1] < n\n          \
    \  rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sbifnik.jl:16\nin expression starting at\
    \ /tmp/tmp9sbifnik.jl:16\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk2ubf0q.jl:13\nin expression starting at\
    \ /tmp/tmpyk2ubf0q.jl:13\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: -1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ .+ numbers\n    rolling_max_list = rolling_max_list .+ rolling_max(numbers[2:end])\n\
    \    \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzhd73qb6.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzhd73qb6.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhd73qb6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzhd73qb6.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzhd73qb6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzhd73qb6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhd73qb6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzhd73qb6.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzhd73qb6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzhd73qb6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(Int64, length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)-1])\n    end\n\
    \    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggxjk2es.jl:13\nin expression starting at\
    \ /tmp/tmpggxjk2es.jl:13\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list =  []\n    rolling_max_list.append(numbers[1])\n    for\
    \ n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    return rolling_max_list\nend\n</cell>\n\
    <text>\nrolling_max_list function will return the rolling maximum element found\
    \ until given moment in the sequence.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfyg0qzo2.jl:14\nin expression starting at\
    \ /tmp/tmpfyg0qzo2.jl:14\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgapbplil.jl:18\nin expression starting at\
    \ /tmp/tmpgapbplil.jl:18\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3274mkyr.jl:18\nin expression starting at\
    \ /tmp/tmp3274mkyr.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyru7qk11.jl:14\nin expression starting at\
    \ /tmp/tmpyru7qk11.jl:14\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nHere is a solution\
    \ that uses only built-in functions:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfv_k775n.jl:18\nin expression starting at\
    \ /tmp/tmpfv_k775n.jl:18\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        push!(rolling_max, maximum(rolling_max))\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdne29hw7.jl:16\nin expression starting at\
    \ /tmp/tmpdne29hw7.jl:16\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprt0ohd98.jl:14\nin expression starting at\
    \ /tmp/tmprt0ohd98.jl:14\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the sum of the\
    \ squares of the numbers.\n    >>> sum_square([1, 2, 3])\n    6\n    >>> sum_square([-1,\
    \ -2, -3])\n    9\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61xgz3y2.jl:13\nin expression starting at\
    \ /tmp/tmp61xgz3y2.jl:13\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdrv1vpny.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdrv1vpny.jl:1\n\
    in expression starting at /tmp/tmpdrv1vpny.jl:1\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4es4i1l9.jl:16\nin expression starting at\
    \ /tmp/tmp4es4i1l9.jl:16\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6y2i8ib.jl:13\nin expression starting at\
    \ /tmp/tmph6y2i8ib.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, n)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7je49f4.jl:15\nin expression starting at\
    \ /tmp/tmph7je49f4.jl:15\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max = [rolling_max[i] | rolling_max[i+1] | rolling_max[i+2] |\
    \ rolling_max[i+3] | rolling_max[i+4] | rolling_max[i+5] | rolling_max[i+6] |\
    \ rolling_max[i+7] | rolling_max[i+8] | rolling_max[i+9] | rolling_max[i+10] |\
    \ rolling_max[i+11] | rolling_max[i+12] | rolling_max[i+13] | rolling_max[i+14]\
    \ | rolling_max[i+15] | rolling_max[i+16] | rolling_max[i+17] | rolling_max[i+18]\
    \ | rolling_max[i+19] | rolling_max[i+20] | rolling_max[i+21] | rolling_max[i+22]\
    \ | rolling_max[i+23] | rolling_max[i+24] | rolling_max[i+25] | rolling_max[i+26]\
    \ | rolling_max[i+27] | rolling_max[i+28] | rolling_max[i+29] | rolling_max[i+30]\
    \ | rolling_max[i+31] | rolling_max[i+32] | rolling_max[i+33] | rolling_max[i+34]\
    \ | rolling_max[i+35] | rolling_max[i+36] | rolling_max[i+37] | rolling_max[i+38]\
    \ | rolling_max[i+39] | rolling_max[i+40] | rolling_max[i+41] | rolling_max[i+42]\
    \ | rolling_max[i+43] | rolling_max[i+44] | rolling_max[i+45] | rolling_max[i+46]\
    \ | rolling_max[i+47] | rolling_max[i+48] | rolling_max[i+49] | rolling_max[i+50]\
    \ | rolling_max[i+51] | rolling_max[i+52] | rolling_max[i+53] | rolling_max[i+54]\
    \ | rolling_max[i+55] | rolling_max[i+56] | rolling_max[i+57] | rolling_max[i+58]\
    \ | rolling_max[i+59] | rolling_max[i+60] | rolling_max[i+61] | rolling_max[i+62]\
    \ | rolling_max[i+63] | rolling_max[i+64] | rolling_max[i+65] | rolling_max[i+66]\
    \ | rolling_max[i+67] | rolling_max[i+68] | rolling_max[i+69] | rolling_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e7v1at7.jl:1\nin expression starting at /tmp/tmp5e7v1at7.jl:1\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6y2i8ib.jl:13\nin expression starting at\
    \ /tmp/tmph6y2i8ib.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates the cumulative sum of a given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpmnj6g5.jl:13\nin expression starting at\
    \ /tmp/tmpwpmnj6g5.jl:13\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, n)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<text>\nExercise 2\nWrite a function that generates the cumulative\
    \ sum of a given vector of integers. \nThe cumulative sum is the sum of the first\
    \ element of the vector followed by all the elements \nof the vector, starting\
    \ from the second element.\nThe function should return an array of integers, containing\
    \ the cumulative sum of the given vector.\nThe function should work for vectors\
    \ of any length.\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vectors of any type of elements\
    \ (including strings).\nThe function should work for vector\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu410obf0.jl:15\nin expression starting at\
    \ /tmp/tmpu410obf0.jl:15\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.3>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector and returns the vector with the minimum\
    \ element replaced by 0.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprx4_t5ua.jl:13\nin expression starting at\
    \ /tmp/tmprx4_t5ua.jl:13\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnvil03n.jl:14\nin expression starting at\
    \ /tmp/tmpnnvil03n.jl:14\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, 0)\n    for n in numbers\n        push!(rolling_max,\
    \ max(n))\n    end\n    return rolling_max\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that generates a vector with random integers within a given range.\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4w360r5w.jl:13\nin expression starting at\
    \ /tmp/tmp4w360r5w.jl:13\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycj05xi5.jl:14\nin expression starting at\
    \ /tmp/tmpycj05xi5.jl:14\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3274mkyr.jl:18\nin expression starting at\
    \ /tmp/tmp3274mkyr.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list =  []\n    \n    for n in numbers\n        rolling_max_list\
    \ .= [rolling_max(n)]\n    end\n    \n    return rolling_max_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpu5nijr5v.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpu5nijr5v.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching rolling_max(::Int64)\n  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64})\
    \ at /tmp/tmpu5nijr5v.jl:6\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpu5nijr5v.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu5nijr5v.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu5nijr5v.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu5nijr5v.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching rolling_max(::Int64)\n\
    \  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64}) at /tmp/tmpu5nijr5v.jl:6\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpu5nijr5v.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu5nijr5v.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu5nijr5v.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu5nijr5v.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: no method\
    \ matching rolling_max(::Int64)\n  Closest candidates are:\n    rolling_max(!Matched::Vector{Int64})\
    \ at /tmp/tmpu5nijr5v.jl:6\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpu5nijr5v.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu5nijr5v.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Tes"
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n    end\n\
    \    \n    return rolling_max_array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpeiiiaudg.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpeiiiaudg.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpeiiiaudg.jl:11\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpeiiiaudg.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpeiiiaudg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeiiiaudg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [1:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpeiiiaudg.jl:11\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpeiiiaudg.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpeiiiaudg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeiiiaudg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abs"
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local max = 0\n    local max_index = 0\n    local max_value = numbers[1]\n\
    \    local max_index = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i]\
    \ > max_value then\n            max_value = numbers[i]\n            max_index\
    \ = i\n        end\n    end\n    \n    local new_max = max_value\n    local new_max_index\
    \ = max_index\n    for i = 2:length(numbers)\n        if numbers[i] > new_max\
    \ then\n            new_max = numbers[i]\n            new_max_index = i\n    \
    \    end\n    end\n    \n    local new_numbers = Vector{Int64}()\n    for i =\
    \ 2:length(numbers)\n        if numbers[i] > new_max then\n            new_numbers[i]\
    \ = numbers[i]\n        else\n            new_numbers[i] = new_max\n        end\n\
    \    end\n    \n    return new_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkvkdo96.jl:39\nin expression starting at\
    \ /tmp/tmpvkvkdo96.jl:39\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    \n    for n in\
    \ numbers\n        rolling_max_list <- rolling_max_list ++ [rolling_max(n)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that generates a rolling average of a given list of integers\
    \ until a given moment in the sequence.\n    >>> rolling_average([1, 2, 3, 2,\
    \ 3, 4, 2])\n    [1.5, 2.5, 3.5, 4.5, 5.5, 6.5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wq6kl3q.jl:16\nin expression starting at\
    \ /tmp/tmp4wq6kl3q.jl:16\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqcc6ubf9.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpqcc6ubf9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpqcc6ubf9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqcc6ubf9.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjt72dhbw.jl:16\nin expression starting at\
    \ /tmp/tmpjt72dhbw.jl:16\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        push!(rolling_max, maximum(n))\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7e34ayi8.jl:16\nin expression starting at\
    \ /tmp/tmp7e34ayi8.jl:16\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximums = Vector{Int64}()\n    \n    for n in numbers\n       \
    \ maximums.push(n)\n    end\n    \n    maximums\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgstljnym.jl:16\nin expression starting at\
    \ /tmp/tmpgstljnym.jl:16\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for i = end - 1; i >= 1; i--\n \
    \       rolling_max = max(numbers[i], rolling_max)\n    end\n    rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7m03jsk0.jl:9\nin expression starting at /tmp/tmp7m03jsk0.jl:9\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        if rolling_max == Vector{Int64}(undef, 0)\n            rolling_max =\
    \ n\n        else\n            if n > rolling_max\n                rolling_max\
    \ = n\n            end\n        end\n    end\n    \n    return rolling_max\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7bxonbv.jl:22\nin expression starting at\
    \ /tmp/tmpb7bxonbv.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_rolling_window(numbers, length(numbers), 1)\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8_e55uh.jl:9\nin expression starting at /tmp/tmpz8_e55uh.jl:9\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nThe function should raise an error if the\
    \ list is empty.\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2,\
    \ 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjui5ds2k.jl:13\nin expression starting at\
    \ /tmp/tmpjui5ds2k.jl:13\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphaffwysk.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmphaffwysk.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Vector{Int64}})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmphaffwysk.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmphaffwysk.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmphaffwysk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphaffwysk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Vector{Int64}})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmphaffwysk.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmphaffwysk.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmphaffwysk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphaffwysk.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices"
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_rolling_window(numbers, length(numbers))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4t9t2kc0.jl:9\nin expression starting at /tmp/tmp4t9t2kc0.jl:9\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        if rolling_max_list.length == 0 || rolling_max_list[-1] < n\n       \
    \     rolling_max_list << n\n        else\n            rolling_max_list << rolling_max_list[-1]\n\
    \        end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm75o06y0.jl:20\nin expression starting at\
    \ /tmp/tmpm75o06y0.jl:20\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3c48ptaf.jl:12\nin expression starting at\
    \ /tmp/tmp3c48ptaf.jl:12\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for i = length(numbers):-1:1\n \
    \       if numbers[i] > rolling_max\n            rolling_max = numbers[i]\n  \
    \      end\n    end\n    return rolling_max\nend\n</cell>\n<text>\nRolling mean\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92zg7j2p.jl:16\nin expression starting at\
    \ /tmp/tmp92zg7j2p.jl:16\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for i = length(numbers)-1 downto\
    \ 1 do\n        if numbers[i] > rolling_max then\n            rolling_max = numbers[i]\n\
    \        end\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmps339eb0h.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps339eb0h.jl:9\n\
    in expression starting at /tmp/tmps339eb0h.jl:9\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6y2i8ib.jl:13\nin expression starting at\
    \ /tmp/tmph6y2i8ib.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<text>\n\
    The function rolling_max is now ready to be used.\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2430zxcw.jl:13\nin expression starting at\
    \ /tmp/tmp2430zxcw.jl:13\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ rolling_max\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the cumulative sum of a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne41tw9h.jl:16\nin expression starting at\
    \ /tmp/tmpne41tw9h.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n   \
    \         rolling_max[i] = numbers[i]\n        else\n            rolling_max[i]\
    \ = rolling_max[i-1]\n        end\n    end\n    return rolling_max\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpprmawwvp.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpprmawwvp.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpprmawwvp.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpprmawwvp.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpprmawwvp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpprmawwvp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpprmawwvp.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpprmawwvp.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpprmawwvp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpprmawwvp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpprmawwvp.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpprmawwvp.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpprmawwvp.jl:22\ntest set:\
    \ Error D"
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8crarp6.jl:12\nin expression starting at\
    \ /tmp/tmpb8crarp6.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0yor134.jl:13\nin expression starting at\
    \ /tmp/tmpe0yor134.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfxdqgabb.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpfxdqgabb.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(f::Vector{Int64}, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64;\
    \ kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base\
    \ ./reduce.jl:678\n   [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n\
    \   [5] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpfxdqgabb.jl:11\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpfxdqgabb.jl:22 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpfxdqgabb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfxdqgabb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Vector{Int64}, op::Function, x::Int64)\n     @ Base\
    \ ./reduce.jl:394\n   [2] mapreduce(f::Vector{Int64}, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Vector{Int64}, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Vector{Int64}, a::Int64)\n     @ Base ./reduce.jl:678\n   [5]\
    \ rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpfxdqgabb.jl:11\n  \
    \ [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpfxdqgabb.jl:23 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for number in numbers[2:end]\n \
    \       if number > maximum\n            maximum = number\n        end\n    end\n\
    \    \n    return maximum\nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that generates a vector with all the prime numbers up to a given limit.\nHint:\
    \ use Sieve of Eratosthenes\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4smzlna.jl:18\nin expression starting at\
    \ /tmp/tmpp4smzlna.jl:18\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > rolling_max_list[1]\n\
    \            rolling_max_list.append(numbers[i])\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jimfv87.jl:16\nin expression starting at\
    \ /tmp/tmp5jimfv87.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfamb26_u.jl:16\nin expression starting at\
    \ /tmp/tmpfamb26_u.jl:16\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        if rolling_max == Vector{Int64}(undef, 0)\n            rolling_max =\
    \ Vector{Int64}(undef, 0)\n        else\n            push!(rolling_max, maximum(rolling_max))\n\
    \        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates the rolling mean of a given list of integers\
    \ until a given moment in the sequence.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97gnv67a.jl:20\nin expression starting at\
    \ /tmp/tmp97gnv67a.jl:20\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n >\
    \ rolling_max\n            rolling_max = n\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecw6kt_b.jl:15\nin expression starting at\
    \ /tmp/tmpecw6kt_b.jl:15\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_d2m2lp6.jl:17\nin expression starting at\
    \ /tmp/tmp_d2m2lp6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_result = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_result = rolling_max_result .+ [number]\n  \
    \  end\n    \n    return rolling_max_result\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5m6mgmr.jl:16\nin expression starting at\
    \ /tmp/tmpl5m6mgmr.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3274mkyr.jl:18\nin expression starting at\
    \ /tmp/tmp3274mkyr.jl:18\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_vector = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_vector = append(rolling_max_vector, maximum(rolling_max_vector))\n\
    \    end\n    \n    return rolling_max_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz_yt9m_r.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpz_yt9m_r.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum(a::Vector{Int64})\n   \
    \   @ Base ./reducedim.jl:889\n   [17] rolling_max(numbers::Vector{Int64})\n \
    \     @ Main /tmp/tmpz_yt9m_r.jl:11\n   [18] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpz_yt9m_r.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpz_yt9m_r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz_yt9m_r.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n  "
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppy880jo6.jl:12\nin expression starting at\
    \ /tmp/tmppy880jo6.jl:12\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bw_dis3.jl:16\nin expression starting at\
    \ /tmp/tmp9bw_dis3.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppy880jo6.jl:12\nin expression starting at\
    \ /tmp/tmppy880jo6.jl:12\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_result = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[i-1]\n\
    \            rolling_max_result[i] = numbers[i]\n        else\n            rolling_max_result[i]\
    \ = rolling_max_result[i-1]\n        end\n    end\n    return rolling_max_result\n\
    end\n</cell>\n<text>\nThe function rolling_max is implemented in the file rolling_max.jl\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaux9ygr8.jl:18\nin expression starting at\
    \ /tmp/tmpaux9ygr8.jl:18\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<text>\nrolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej39ds8w.jl:16\nin expression starting at\
    \ /tmp/tmpej39ds8w.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, n)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7je49f4.jl:15\nin expression starting at\
    \ /tmp/tmph7je49f4.jl:15\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6gxraer.jl:16\nin expression starting at\
    \ /tmp/tmpl6gxraer.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n >\
    \ rolling_max\n            rolling_max = n\n        end\n    end\n    rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4j0k5ve.jl:15\nin expression starting at\
    \ /tmp/tmpf4j0k5ve.jl:15\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdlrfawdh.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpdlrfawdh.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdlrfawdh.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdlrfawdh.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdlrfawdh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdlrfawdh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpdlrfawdh.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlrfawdh.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlrfawdh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdlrfawdh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T},"
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(n))\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6s8a3sb.jl:16\nin expression starting at\
    \ /tmp/tmpu6s8a3sb.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycj05xi5.jl:14\nin expression starting at\
    \ /tmp/tmpycj05xi5.jl:14\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfonb5hzo.jl:16\nin expression starting at\
    \ /tmp/tmpfonb5hzo.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(Int, length(numbers))\n    rolling_max_array[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] =\
    \ maximum(rolling_max_array[i-1:i+1], numbers[i])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzujnmfb6.jl:14\nin expression starting at\
    \ /tmp/tmpzujnmfb6.jl:14\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)-1])\n    end\n\
    \    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6spg184.jl:16\nin expression starting at\
    \ /tmp/tmpl6spg184.jl:16\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[1]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[2]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[3]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[4]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[5]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[6]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[7]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[8]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[9]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[10]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[11]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[12]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[13]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[14]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[15]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[16]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[17]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[18]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[19]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[20]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[21]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[22]]\n\
    \    rolling_max_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsp7w3ztw.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsp7w3ztw.jl:1\n\
    in expression starting at /tmp/tmpsp7w3ztw.jl:1\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_d2m2lp6.jl:17\nin expression starting at\
    \ /tmp/tmp_d2m2lp6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzhd73qb6.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzhd73qb6.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhd73qb6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzhd73qb6.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzhd73qb6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzhd73qb6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzhd73qb6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzhd73qb6.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzhd73qb6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzhd73qb6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcn_84xx1.jl:18\nin expression starting at\
    \ /tmp/tmpcn_84xx1.jl:18\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<text>\n\
    rolling_max\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyt85zdpu.jl:13\nin expression starting at\
    \ /tmp/tmpyt85zdpu.jl:13\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx3ctrtn.jl:13\nin expression starting at\
    \ /tmp/tmpjx3ctrtn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfamb26_u.jl:16\nin expression starting at\
    \ /tmp/tmpfamb26_u.jl:16\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqcc6ubf9.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpqcc6ubf9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpqcc6ubf9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqcc6ubf9.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, n)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7je49f4.jl:15\nin expression starting at\
    \ /tmp/tmph7je49f4.jl:15\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j6wmik5.jl:13\nin expression starting at\
    \ /tmp/tmp3j6wmik5.jl:13\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[1]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[2]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[3]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[4]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[5]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[6]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[7]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[8]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[9]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[10]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[11]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[12]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[13]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[14]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[15]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[16]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[17]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[18]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[19]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[20]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[21]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[22]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=rolling_max_list[23]]\n\
    \    rolling_max_list = \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsxkl3ws0.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsxkl3ws0.jl:1\n\
    in expression starting at /tmp/tmpsxkl3ws0.jl:1\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = []\n    \n    for number in numbers\n      \
    \  rolling_max_array.append(number)\n    end\n    \n    return rolling_max_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdlpsh5zu.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpdlpsh5zu.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpdlpsh5zu.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdlpsh5zu.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdlpsh5zu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdlpsh5zu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdlpsh5zu.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdlpsh5zu.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdlpsh5zu.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdlpsh5zu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field\
    \ append\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpdlpsh5zu.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdlpsh5zu.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdlpsh5zu.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjy3z5te0.jl:17\nin expression starting at\
    \ /tmp/tmpjy3z5te0.jl:17\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    rolling_max_list <- rolling_max_list\
    \ ++ numbers\n    rolling_max_list <- rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2n48jt3o.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp2n48jt3o.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ rolling_max_list not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp2n48jt3o.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2n48jt3o.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2n48jt3o.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp2n48jt3o.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  UndefVarError: rolling_max_list not\
    \ defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2n48jt3o.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2n48jt3o.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2n48jt3o.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp2n48jt3o.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  UndefVarError: rolling_max_list not\
    \ defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2n48jt3o.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2n48jt3o.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2n48jt3o.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp2n48jt3o.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: rolling_max_list\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vect"
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycj05xi5.jl:14\nin expression starting at\
    \ /tmp/tmpycj05xi5.jl:14\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7maxu6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7maxu6.jl:1\n\
    in expression starting at /tmp/tmpsj7maxu6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqcc6ubf9.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpqcc6ubf9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpqcc6ubf9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpqcc6ubf9.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcc6ubf9.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcc6ubf9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqcc6ubf9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Int64 to an object of type Vector{Int64}\n  Closest can"
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmp1iutvm.jl:12\nin expression starting at\
    \ /tmp/tmpmp1iutvm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_result = Vector{Int64}(undef, 0)\n    rolling_max_result[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[1]\n\
    \            rolling_max_result[1] = numbers[i]\n        else\n            rolling_max_result\
    \ = [rolling_max_result[1], numbers[i]]\n        end\n    end\n    return rolling_max_result\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_xefvj1.jl:18\nin expression starting at\
    \ /tmp/tmpw_xefvj1.jl:18\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6y2i8ib.jl:13\nin expression starting at\
    \ /tmp/tmph6y2i8ib.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for number in numbers[2:end]\n        if number > rolling_max_list[1]\n \
    \           rolling_max_list.append(number)\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdv08yd44.jl:16\nin expression starting at\
    \ /tmp/tmpdv08yd44.jl:16\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jzct0ej.jl:12\nin expression starting at\
    \ /tmp/tmp4jzct0ej.jl:12\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = append(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2iao0ff3.jl:16\nin expression starting at\
    \ /tmp/tmp2iao0ff3.jl:16\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ .+ numbers\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n  \
    \  rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl1nh2mbt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl1nh2mbt.jl:1\n\
    in expression starting at /tmp/tmpl1nh2mbt.jl:1\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp248yckpw.jl:16\nin expression starting at\
    \ /tmp/tmp248yckpw.jl:16\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklqyey6z.jl:16\nin expression starting at\
    \ /tmp/tmpklqyey6z.jl:16\n"
  stdout: ''
  timestamp: 1659822700
