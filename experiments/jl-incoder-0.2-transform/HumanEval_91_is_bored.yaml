name: HumanEval_91_is_bored
language: jl
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The\
  \ sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["    if is_bored(S,0)==1\n    else \n        return is_bored(S,1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nThe function should\
    \ ignore all punctuation marks and only count the words. \nThe function should\
    \ ignore all capitalization and only count the words.\nThe function should ignore\
    \ all numbers and only count the words.\nThe function should ignore all special\
    \ characters and only count the words.\nThe function should ignore all words that\
    \ are longer than 3 characters.\nThe function should ignore all words that are\
    \ shorter than 3 characters.\nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 3 characters.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 3 characters and\
    \ that contain digits. \nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 3 characters and that contain digits and\
    \ that contain special characters. \nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 3 characters and that contain\
    \ digits and that contain special characters and that contain capital letters.\
    \ \nThe function should ignore all words that are longer than 3 characters and\
    \ shorter than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters and that contain lower case letters. \nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters and that contain lower case letters and that\
    \ contain upper case letters. \nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 3 characters and that contain digits\
    \ and that contain special characters and that contain capital letters and that\
    \ contain lower case letters and that contain upper case letters and that contain\
    \ digits. \nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 3 characters and that contain digits and that contain special\
    \ characters and that contain capital letters and that contain lower case letters\
    \ and that contain upper case letters and that contain digits and that contain\
    \ special characters. \nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 3 characters and that contain digits and that\
    \ contain special characters and that contain capital letters and that contain\
    \ lower case letters and that contain upper case letters and that contain digits\
    \ and that contain special characters and that contain ", "    \n    boredoms\
    \ = 0 \n    \n    for word in S.split(\" \") do \n        if word[0] == \"I\"\
    \ then \n            boredoms += 1 \n        end \n    end \n    \n    return\
    \ boredoms \nend \n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'a'.", "    if is_bored(S, 0)\n    else \n        boredoms =\
    \ count_boredoms(S)\n        boredoms = boredoms - 1\n        return boredoms\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of boredoms in a given string.\nThe function should take one argument,\
    \ the string to be counted.\nThe function should return the number of boredoms\
    \ in the string.\nThe function should ignore punctuation and capitalization.\n\
    The function should ignore the case of the initial letter.\nThe function should\
    \ ignore the case of the final letter.\nThe function should ignore the case of\
    \ the initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case ",
  "    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    S = S.lower()\n    boredoms = findall(S, \"^I\")\n    return\
    \ length(boredoms)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    boredoms = 0 \n    \n    for word in split(S) do \n     \
    \   if word == \"I\" then \n            boredoms += 1 \n        end\n    end\n\
    \    \n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of words in the string.",
  "\"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    boredoms\
    \ = sum(map(is_bored, split(S, \".\")))\n    boredoms += sum(map(is_bored, split(S,\
    \ \"?\")))\n    boredoms += sum(map(is_bored, split(S, \"!\")))\n    return boredoms\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string. \n    \n    For example:\n  \
    \  >>> count_words(\"Hello world\")\n    2\n    >>> count_words(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    7\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        \n    end=length(S)\n    boredoms=0\n    \n    for i=1:end\n\
    \        if S[i]==\"I\"\n            boredoms+=1\n        end\n    end\n    return\
    \ boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in it.", "    \n    boredoms\
    \ = findall(S, \"^I.*\")\n    \n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string ", "    if is_bored(S,0)==0 then 1 else 0 end\nend",
  "    \n\"\"\"\n    You'll be given a list of strings, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello world\", \"The sky is blue. The sun is shining. I love\
    \ this weather\"])\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S, 0)==0 \n        error(\"is_bored failed\"\
    ) \n    end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    \n    boredoms=0\n\
    \    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n    \
    \    end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0) != 0\n    else \n        error(\"is_bored failed\")\n    end\nend", "   \
    \ if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in split(S,\"\
    .,?!\")\n            if word==\"I\"\n                boredoms+=1\n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that splits a string into a list of words. A word is defined as a sequence\
    \ of letters a-z or A-Z or digits. Spaces are ignored.", "    if is_bored(S,0)==1\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a string.\n    \n    Your function should\
    \ take a string as input, and return a number.\n    \n    For example, \n    >>>\
    \ count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
