name: HumanEval_91_is_bored
language: jl
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The\
  \ sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["    if is_bored(S,0)==1\n    else \n        return is_bored(S,1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nThe function should\
    \ ignore all punctuation marks and only count the words. \nThe function should\
    \ ignore all capitalization and only count the words.\nThe function should ignore\
    \ all numbers and only count the words.\nThe function should ignore all special\
    \ characters and only count the words.\nThe function should ignore all words that\
    \ are longer than 3 characters.\nThe function should ignore all words that are\
    \ shorter than 3 characters.\nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 3 characters.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 3 characters and\
    \ that contain digits. \nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 3 characters and that contain digits and\
    \ that contain special characters. \nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 3 characters and that contain\
    \ digits and that contain special characters and that contain capital letters.\
    \ \nThe function should ignore all words that are longer than 3 characters and\
    \ shorter than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters and that contain lower case letters. \nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters and that contain lower case letters and that\
    \ contain upper case letters. \nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 3 characters and that contain digits\
    \ and that contain special characters and that contain capital letters and that\
    \ contain lower case letters and that contain upper case letters and that contain\
    \ digits. \nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 3 characters and that contain digits and that contain special\
    \ characters and that contain capital letters and that contain lower case letters\
    \ and that contain upper case letters and that contain digits and that contain\
    \ special characters. \nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 3 characters and that contain digits and that\
    \ contain special characters and that contain capital letters and that contain\
    \ lower case letters and that contain upper case letters and that contain digits\
    \ and that contain special characters and that contain ", "    \n    boredoms\
    \ = 0 \n    \n    for word in S.split(\" \") do \n        if word[0] == \"I\"\
    \ then \n            boredoms += 1 \n        end \n    end \n    \n    return\
    \ boredoms \nend \n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'a'.", "    if is_bored(S, 0)\n    else \n        boredoms =\
    \ count_boredoms(S)\n        boredoms = boredoms - 1\n        return boredoms\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of boredoms in a given string.\nThe function should take one argument,\
    \ the string to be counted.\nThe function should return the number of boredoms\
    \ in the string.\nThe function should ignore punctuation and capitalization.\n\
    The function should ignore the case of the initial letter.\nThe function should\
    \ ignore the case of the final letter.\nThe function should ignore the case of\
    \ the initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case ",
  "    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    S = S.lower()\n    boredoms = findall(S, \"^I\")\n    return\
    \ length(boredoms)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    boredoms = 0 \n    \n    for word in split(S) do \n     \
    \   if word == \"I\" then \n            boredoms += 1 \n        end\n    end\n\
    \    \n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of words in the string.",
  "\"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    boredoms\
    \ = sum(map(is_bored, split(S, \".\")))\n    boredoms += sum(map(is_bored, split(S,\
    \ \"?\")))\n    boredoms += sum(map(is_bored, split(S, \"!\")))\n    return boredoms\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string. \n    \n    For example:\n  \
    \  >>> count_words(\"Hello world\")\n    2\n    >>> count_words(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    7\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        \n    end=length(S)\n    boredoms=0\n    \n    for i=1:end\n\
    \        if S[i]==\"I\"\n            boredoms+=1\n        end\n    end\n    return\
    \ boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in it.", "    \n    boredoms\
    \ = findall(S, \"^I.*\")\n    \n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'. \nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ the letter 'e'. \nWrite a function that takes a string and returns the number\
    \ of words in the string ", "    if is_bored(S,0)==0 then 1 else 0 end\nend",
  "    \n\"\"\"\n    You'll be given a list of strings, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello world\", \"The sky is blue. The sun is shining. I love\
    \ this weather\"])\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S, 0)==0 \n        error(\"is_bored failed\"\
    ) \n    end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    \n    boredoms=0\n\
    \    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n    \
    \    end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0) != 0\n    else \n        error(\"is_bored failed\")\n    end\nend", "   \
    \ if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in split(S,\"\
    .,?!\")\n            if word==\"I\"\n                boredoms+=1\n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that splits a string into a list of words. A word is defined as a sequence\
    \ of letters a-z or A-Z or digits. Spaces are ignored.", "    if is_bored(S,0)==1\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a string.\n    \n    Your function should\
    \ take a string as input, and return a number.\n    \n    For example, \n    >>>\
    \ count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    S = S.split(\"\
    \ \")\n    boredoms = 0\n    for word in S\n        if word[0] == \"I\"\n    \
    \        boredoms += 1\n    return boredoms\nend\n</cell>\n<code language=julia-1.1>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.1>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'.", "    if is_bored(S,0)==1\n    else\
    \ \n        0\n    end\nend\n\"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0\n    else \n        boredom(S,0)\n    end\nend\n</cell>\n\
    <code language=julia-0.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-0.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a string.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,\
    \ 0)\n    else \n        boredoms(S, 0)\nend", "    \n    \"\"\"\n    Your code\
    \ here!\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if is_bored(S, 0)\n    else \n        boredoms = is_bored(S, 1)\n        boredoms\
    \ += is_bored(S, 2)\n        boredoms += is_bored(S, 3)\n        boredoms += is_bored(S,\
    \ 4)\n        boredoms += is_bored(S, 5)\n        boredoms += is_bored(S, 6)\n\
    \        boredoms += is_bored(S, 7)\n        boredoms += is_bored(S, 8)\n    \
    \    boredoms += is_bored(S, 9)\n        boredoms += is_bored(S, 10)\n       \
    \ boredoms += is_bored(S, 11)\n        boredoms += is_bored(S, 12)\n        boredoms\
    \ += is_bored(S, 13)\n        boredoms += is_bored(S, 14)\n        boredoms +=\
    \ is_bored(S, 15)\n        boredoms += is_bored(S, 16)\n        boredoms += is_bored(S,\
    \ 17)\n        boredoms += is_bored(S, 18)\n        boredoms += is_bored(S, 19)\n\
    \        boredoms += is_bored(S, 20)\n        boredoms += is_bored(S, 21)\n  \
    \      boredoms += is_bored(S, 22)\n        boredoms += is_bored(S, 23)\n    \
    \    boredoms += is_bored(S, 24)\n        boredoms += is_bored(S, 25)\n      \
    \  boredoms += is_bored(S, 26)\n        boredoms += is_bored(S, 27)\n        boredoms\
    \ += is_bored(S, 28)\n        boredoms += is_bored(S, 29)\n        boredoms +=\
    \ is_bored(S, 30)\n        boredoms += is_bored(S, 31)\n        boredoms += is_bored(S,\
    \ 32)\n        boredoms += is_bored(S, 33)\n        boredoms += is_bored(S, 34)\n\
    \        boredoms += is_bored(S, 35)\n        boredoms += is_bored(S, 36)\n  \
    \      boredoms += is_bored(S, 37)\n        boredoms += is_bored(S, 38)\n    \
    \    boredoms += is_bored(S, 39)\n        boredoms += is_bored(S, 40)\n      \
    \  boredoms += is_bore", "\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S) == 0 \n        error(\"The string does not start with the word\
    \ 'I'\")\n    end\n    \n    boredoms = findall!(\"I\", S)\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'A'.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\
    \ \n    else \n        boredoms=0\n        for word in split(S,\".,?!\") \n  \
    \          if word==\"I\" \n                boredoms+=1 \n        return boredoms\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.\n    \n    Your function should take a string\
    \ as input and return a number.\n    \n    For example:\n    >>> count_borems(\"\
    Hello world\")\n    0\n    >>> count_borems(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S, 0)\n    else\
    \ \n        boredoms(S, 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of boredoms in the\
    \ string.", "    if is_bored(S,0)==1\n        \n    else \n        \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    \n    S = S.lower()\n\
    \    \n    boredoms = findall(S, boredoms)\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.\nThe function should take a string as input\
    \ and return a number.", "    if is_bored(S,0)==0 \n    else \n        return\
    \ is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in it.", "  \
    \  if is_bored(S,0)==0 \n    else \n        boredom(S,0)\n    end\nend", "   \
    \ if is_bored(S) == 0 \n        error(\"The string is not bored\")\n    end\n\
    \    boredom = findall(S, startswith(\"I\"))\n    return length(boredom)\nend\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of words in the string that start with the letter 'A'.", "    \n    boredoms\
    \ = sum(map(is_bored, S.split(\".\")))\n    \n    return boredoms == 0\nend\n\
    </cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a list of all the words in the string.", "    if is_bored(S,0)==0\
    \ \n        error(\"The sentence does not start with the word 'I'.\")\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of boredoms in a given string.\nThe function should return 0 if the string\
    \ does not contain any boredoms.\nThe function should return 1 if the string contains\
    \ exactly one boredom.\nThe function should return 2 if the string contains two\
    \ boredoms.\nThe function should return 3 if the string contains three boredoms.\n\
    The function should return 4 if the string contains four boredoms.\nThe function\
    \ should return 5 if the string contains five boredoms.\nThe function should return\
    \ 6 if the string contains six boredoms.\nThe function should return 7 if the\
    \ string contains seven boredoms.\nThe function should return 8 if the string\
    \ contains eight boredoms.\nThe function should return 9 if the string contains\
    \ nine boredoms.\nThe function should return 10 if the string contains ten boredoms.\n\
    The function should return 11 if the string contains eleven boredoms.\nThe function\
    \ should return 12 if the string contains twelve boredoms.\nThe function should\
    \ return 13 if the string contains thirteen boredoms.\nThe function should return\
    \ 14 if the string contains fourteen boredoms.\nThe function should return 15\
    \ if the string contains fifteen boredoms.\nThe function should return 16 if the\
    \ string contains sixteen boredoms.\nThe function should return 17 if the string\
    \ contains seventeen boredoms.\nThe function should return 18 if the string contains\
    \ eighteen boredoms.\nThe function should return 19 if the string contains nineteen\
    \ boredoms.\nThe function should return 20 if the string contains twenty boredoms.\n\
    The function should return 21 if the string contains twenty-one boredoms.\nThe\
    \ function should return 22 if the string contains twenty-two boredoms.\nThe function\
    \ should return 23 if the string contains twenty-three boredoms.\nThe function\
    \ should return 24 if the string contains twenty-four boredoms.\nThe function\
    \ should return 25 if the string contains twenty-five boredoms.\nThe function\
    \ should return 26 if the ", "    \n    count = 0\n    for word in S.split(\"\
    \ \")\n        if word[0] == \"I\"\n            count += 1\n    return count\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function is_bored_2(S::String)::Int64\
    \ which returns 1 if the string S starts with \"I\", and 0 otherwise.", "\"\"\"\
    \n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\
    \ \n    then return 0 \n    else return 1 \n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n \
    \       boredoms(S,0)\n    end\nend", "\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n\
    \    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n\
    \    end\nend", "    if is_bored(S,0,0) == 0 \n    else \n        return 1 \n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts\
    \ the number of boredoms in a given string.\nThe function should return a number\
    \ between 0 and 100.\nThe function should ignore capitalization and punctuation.\n\
    The function should ignore the '?' character.\nThe function should ignore the\
    \ '!' character.\nThe function should ignore the '.' character.\nThe function\
    \ should ignore the '\\n' character.\nThe function should ignore the '\\r' character.\n\
    The function should ignore the '\\t' character.\nThe function should ignore the\
    \ '\\v' character.\nThe function should ignore the '\\f' character.\nThe function\
    \ should ignore the '\\a' character.\nThe function should ignore the '\\e' character.\n\
    The function should ignore the '\\o' character.\nThe function should ignore the\
    \ '\\M' character.\nThe function should ignore the '\\p' character.\nThe function\
    \ should ignore the '\\P' character.\nThe function should ignore the '\\c' character.\n\
    The function should ignore the '\\C' character.\nThe function should ignore the\
    \ '\\v' character.\nThe function should ignore the '\\o' character.\nThe function\
    \ should ignore the '\\M' character.\nThe function should ignore the '\\p' character.\n\
    The function should ignore the '\\P' character.\nThe function should ignore the\
    \ '\\c' character.\nThe function should ignore the '\\C' character.\nThe function\
    \ should ignore the '\\v' character.\nThe function should ignore the '\\o' character.\n\
    The function should ignore the '\\M' character.\nThe function should ignore the\
    \ '\\p' character.\nThe function should ignore the '\\P' character.\nThe function\
    \ should ignore the '\\c' character.\nThe function should ignore the '\\C' character.\n\
    The function should ignore the '\\v' character.\nThe function should ignore the\
    \ '\\o' character.\nThe function should ignore the '\\M' character.\nThe function\
    \ should ignore the '\\p' character.\nThe function should ignore the '\\P' character.\n\
    The function should ignore the '\\c' character.\nThe function should ignore the\
    \ '\\C' character.\nThe function should ignore ", "    if is_bored(S,0)==0\n \
    \   else \n        boredoms=0\n        for word in split(S,\".?\")\n         \
    \   if word==\"I\"\n                boredoms+=1\n        return boredoms\n   \
    \ end\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string that start with capital\
    \ letters. Words are defined as any sequence of letters separated by spaces or\
    \ punctuation.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n\"\"\"\n    You'll be given a list of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \".\",\n\
    \    ...            \"I\", \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nPart 2: String Manipulation\nString manipulation\
    \ is the process of transforming one string into another. \n    For example, one\
    \ might want to remove punctuation from a string. \n    We can do this by splitting\
    \ the string into an array of words, and \n    then removing punctuation from\
    \ each word. \n    We can then rejoin the array into a string.", "\"\"\"\n   \
    \ You'll be given a string of words, and your task is to count the number\n  \
    \  of boredoms. A boredom is a sentence that starts with the word \"I\".\n   \
    \ Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    boredoms\
    \ = 0 \n    \n    for word in split(S) do \n        if starts_with(word, \"I\"\
    ) then \n            boredoms += 1 \n        end\n    end\n    \n    return boredoms\n\
    end\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.",
  "    if is_bored(S,0,0)==0\n    else \n        return is_bored(S,0,0)\n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms(S,0)\n    end\nend\n\"\"\"\n    You'll be given a\
    \ string of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n        return 0\
    \ \n    else \n        return 1 \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of boredoms in a string.\nThe function\
    \ should take a string as input and return a number.", "    \n    boredoms = 0\
    \ \n    \n    for word in split(S) do \n        if word == \"I\" then \n     \
    \       boredoms += 1 \n        end \n    end \n    return boredoms \nend \n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n\
    \        for word in split(S,\".?!\") \n            if word==\"I\"\n         \
    \   boredoms+=1\n        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in that\
    \ string\nthat start with the letter 'a'.", "    if is_bored(S, 0)\n    else \n\
    \        boredoms(S, 0)\n    end\nend", "    \n    boredoms = 0 \n    \n    for\
    \ word in split(S) do \n        if startswith(word, \"I\") do \n            boredoms\
    \ += 1 \n        end \n    end \n    \n    return boredoms \nend \n</cell>\n<code\
    \ language=julia-0.6>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'a'.", "    \n    boredoms\
    \ = findall(S, startswith(\"I\"))\n    return length(boredoms)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_bored(\"Hello world\") == 0\n@assert is_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\") == 1\n</cell>\n<text>\n\
    Part 2: Practice with Strings\nNow that you've seen some examples of string manipulation,\
    \ we will go over some more advanced string manipulation. We'll learn about regular\
    \ expressions, string splitting, string indexing, and string lengths.", "    if\
    \ is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend", " \
    \   if is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n  \
    \  end\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a substring appears in a string.\nFor example, if the substring\
    \ appears twice in the string \"The sky is blue. The sun is shining. I love this\
    \ weather\", your function should return 2.", "    if is_bored(S, 0) == 0 \n \
    \       return 0 \n    else \n        return 1 \nend \n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n\
    \    end\nend\n\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    boredoms = 0 \n    \n    for word in split(S)\
    \ do \n        if word == \"I\" then \n            boredoms += 1 \n        end\
    \ \n    end \n    \n    return boredoms \nend \n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_bored_2(S::String)::Bool that returns true if the string\
    \ S contains at least one boredom, and false otherwise. \nWrite a test that uses\
    \ your function to determine if your function works.", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nPart\
    \ 2: Write a function that counts the number of boredoms in a string.", "\"\"\"\
    \n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        boredom(S,0)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function is_bored(S::String) which returns 1 if the string S starts\
    \ with \"I\", and 0 otherwise.", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \"\"\"\n    Your task is to implement the function\
    \ is_bored(S::String)::Int64\n    that takes as input a string of words and returns\
    \ the number of boredoms.\n    \n    Boredoms are sentences that start with the\
    \ word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_bored(S, 0) == true\n     \
    \   return true\n    else\n        return false\n    end\nend\n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n \
    \       boredoms=0\n        for word in split(S,\".\")\n            if word==\"\
    I\"\n                boredoms+=1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function is_bored(S::String) which returns 1 if the\
    \ string S starts with \"I\", and 0 otherwise.", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    boredoms = findall(S, startswith(\"\
    I\"))\n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of words that start\
    \ with the letter 'e'.", "    if is_bored(S, 0)\n    else \n        boredoms =\
    \ count_boredoms(S)\n        boredoms = boredoms - 1\n        return boredoms\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather.\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-",
  "    if is_bored(S) == 0 \n        error(\"The string does not start with the word\
    \ 'I'.\")\n    else \n        return 1 \nend", "    \n    boredoms = Dict()\n\
    \    \n    for word in split(S) do \n        if is_bored(word) == 1 then \n  \
    \          boredoms[word] = boredoms[word] + 1 \n        end\n    end\n    \n\
    \    return length(boredoms)\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nPart 2\nNow that\
    \ you've seen how to count boredoms, let's see how we can use it to answer some\
    \ questions.", "    S = S.split(\" \")\n    boredoms = 0\n    for word in S\n\
    \        if word[0] == \"I\"\n            boredoms += 1\n    return boredoms\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    \n    boredoms\
    \ = 0 \n    \n    for word in split(S) do \n        if word == \"I\" then \n \
    \           boredoms += 1 \n        end \n    end \n    \n    return boredoms\
    \ \nend \n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'a'.",
  "    if is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_bored(S, 0)==0\n        error(\"\
    is_bored failed\")\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.",
  "    if is_bored(S,0)==1\n    else \n        if is_bored(S,1)==1\n        else \n\
    \            if is_bored(S,2)==1\n            else \n                if is_bored(S,3)==1\n\
    \                else \n                    if is_bored(S,4)==1\n            \
    \        else \n                        if is_bored(S,5)==1\n                \
    \        else \n                            if is_bored(S,6)==1\n            \
    \                else \n                                if is_bored(S,7)==1\n\
    \                                else \n                                    if\
    \ is_bored(S,8)==1\n                                    else \n              \
    \                          if is_bored(S,9)==1\n                             \
    \           else \n                                            if is_bored(S,10)==1\n\
    \                                            else \n                         \
    \                       if is_bored(S,11)==1\n                               \
    \                 else \n                                                    if\
    \ is_bored(S,12)==1\n                                                    else\
    \ \n                                                        if is_bored(S,13)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,14)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,15)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,16)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,17)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,18)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,19)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,20)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,21)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,22)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,23)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,24)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,25)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,26)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,27)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,28)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,29)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,30)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,31)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,32)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,33)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,34)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,35)==1\n      \
    \                                                          else \n           \
    \                                                         if ", "    if is_bored(S,\
    \ 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\n    \n   \
    \ Your function should take a string as an argument, and return a number.\n  \
    \  \n    Your function should only count boredoms, not non-boredoms.\n    \n \
    \   For example:\n    >>> count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"",
  "    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a given string.\nThe function\
    \ should take a string as its only argument.\nThe function should return an Int64.\n\
    The function should count the number of boredoms in the string S by counting \n\
    the number of times \"I\" appears in S.\nThe function should ignore punctuation\
    \ and capitalization.\nThe function should ignore the case of the letters \"I\"\
    \ and \"i\".\nThe function should ignore the case of the letters \"I\" and \"\
    i\".\nThe function should ignore the case of the letters \"I\" and \"i\".\nThe\
    \ function should ignore the case of the letters \"I\" and \"i\".\nThe function\
    \ should ignore the case of the letters \"I\" and \"i\".\nThe function should\
    \ ignore the case of the letters \"I\" and \"i\".\nThe function should ignore\
    \ the case of the letters \"I\" and \"i\".\nThe function should ignore the case\
    \ of the letters \"I\" and \"i\".\nThe function should ignore the case of the\
    \ letters \"I\" and \"i\".\nThe function should ignore the case of the letters\
    \ \"I\" and \"i\".\nThe function should ignore the case of the letters \"I\" and\
    \ \"i\".\nThe function should ignore the case of the letters \"I\" and \"i\".\n\
    The function should ignore the case of the letters \"I\" and \"i\".\nThe function\
    \ should ignore the case of the letters \"I\" and \"i\".\nThe function should\
    \ ignore the case of the letters \"I\" and \"i\".\nThe function should ignore\
    \ the case of the letters \"I\" and \"i\".\nThe function should ignore the case\
    \ of the letters \"I\" and \"i\".\nThe function should ignore the case of the\
    \ letters \"I\" and \"i\".\nThe function should ignore the case of the letters\
    \ \"I\" and \"i\".\nThe function should ignore the case of the letters \"I\" and\
    \ \"i\".\nThe function should ignore the case of the letters \"I\" and \"i\".\n\
    The function should ignore the case of the letters \"I\" and \"i\".\nThe function\
    \ should ignore the case of the letters \"I\" and \"i\".\nThe function should\
    \ ignore the case of the letters \"I\" and \"i\".\nThe function should ignore\
    \ the case of the letters \"I\" and \"i\".\nThe function should ignore the case\
    \ of the letters \"I\" and \"i\".\nThe function should ignore the case of the\
    \ letters \"I\" and \"", "\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0)==0 \n    else \n        boredoms=0\n       \
    \ for word in split(S,\".?!\") \n            if word==\"I\" \n            boredoms+=1\
    \ \n        return boredoms\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S)\
    \ == 0 \n    then \n        boredoms = 0\n        for w in S \n        do \n \
    \           if w == \"I\" \n            then \n                boredoms += 1\n\
    \        end \n    else \n        boredoms = 1\n    end \n    return boredoms\n\
    end \n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'A'.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,\
    \ 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of boredoms \nin the\
    \ string.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    count = 0\n    for word in S.split(\" \")\n        if word == \"I\"\n   \
    \         count += 1\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'.", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    S = S.lower()\n    \n    boredoms = 0\n\
    \    \n    for word in S.split(\" \")\n        if word[0] == \"i\"\n         \
    \   boredoms += 1\n    \n    return boredoms\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S,0,0)==0\n    else \n        if is_bored(S,0,1)==1\n\
    \        else \n            if is_bored(S,1,1)==1\n            else \n       \
    \         is_bored(S,1,0)==1\n            end\n        end\n    end\nend\n\"\"\
    \"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    boredoms\
    \ = findall(S, \"^I.*\")\n    \n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n    boredoms = sum(map(is_bored_word,S.split(\"\
    .\")))\n    return boredoms\nend", "    if is_bored(S, 0)\n    else \n       \
    \ boredoms = count_boredoms(S)\n        boredoms = boredoms - 1\n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a string.\nHint: Use count_boredoms.",
  "    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    which takes in a string S and returns the number of boredoms in S.\n    \n\
    \    Boredoms are sentences that start with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S) == 0 \n    then \n        error(\"The\
    \ string does not start with the word 'I'.\")\n    else \n        return 1\n \
    \   end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   S = S.trim()\n    S = S.lower()\n    S = S.strip(\".\")\n    S = S.strip(\"\
    ?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n\
    \    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S = S.strip(\".\")\n    S\
    \ = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\"\
    ;\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S = S.strip(\".\")\n\
    \    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S\
    \ = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S = S.strip(\"\
    .\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n\
    \    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S\
    \ = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\"\
    ,\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n\
    \    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S\
    \ = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"\
    !\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n\
    \    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S\
    \ = S.strip(\"!\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"\
    !\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n\
    \    S = S.strip(\"!\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S\
    \ = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\"\
    :\")\n    S = S.strip(\"!\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n\
    \    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S\
    \ = S.strip(\"", "    if is_bored(S,0)==0 \n    else \n        error(\"is_bored\
    \ function expects a string as input\")\n    end\nend\n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n        error(\"\
    is_bored failed: empty string\")\n    end\nend", "    if is_bored(S,0,0)==0\n\
    \    else \n        return is_bored(S,0,0)\n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S, 0)\n    else \n   \
    \     boredoms(S, 0)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    # Your code here\n    \n    return 0\nend\n</cell>\n\
    <code language=julia-1.4>\n# Test your code\n@test is_bored(\"Hello world\") ==\
    \ 0\n@test is_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    ) == 1\n</cell>\n<text>\nTask 3: Write a function that counts the number of times\
    \ a substring appears in a string.\n    For example, count_substr(\"Hello world\"\
    , \"ll\") should return 2.\n    \n    Your function should only return the number\
    \ of times the substring appears in the string.\n    \n    It is allowed to use\
    \ any built-in Julia functions or any pre-defined functions.\n    \n    You may\
    \ assume that the string contains only lowercase letters.\n    \n    You may assume\
    \ that all letters are in the English alphabet.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 ", "    \n\"\"\"\n    You'll be given a list of words, and your task is to\
    \ count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"\
    The\", \"sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\"\
    , \".\",\n    ...            \"I\", \"love\", \"this\", \"weather\"])\n    1\n\
    \    \"\"\"", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n      \
    \  for word in split(S,\".\")\n            if word==\"I\"\n                boredoms+=1\n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function is_bored(S::String, N::Int64) which returns N if S is a boredom sentence,\
    \ else returns 0.", "    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in it.", "    \n    \"\"\"\n    Your task is to implement the function\
    \ is_bored(S::String)::Int64\n    which returns 1 if S is a bored sentence and\
    \ 0 otherwise.\n    \"\"\"\n    \n    # Your code here\n    \n    return 0\nend\n\
    </cell>\n<code language=julia-1.0>\n# Run this cell to test your code\n@test is_bored(\"\
    Hello world\") \u2248 0\n@test is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\") \u2248 1\n</cell>\n<text>\nPart 2: Sentence Boredom\n\
    Now that you've seen how to count boredoms, let's write a function that will tell\
    \ you if a sentence is bored or not. Complete the function below.", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0,0)==0\
    \ then return 0 else return 1\nend", "\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n\
    \    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n        return 1\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of words in it.", "    \n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n \
    \       return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function is_bored(S::String, i::Int64) which returns 1 if S[i] is a boredom\
    \ and 0 otherwise.", "    S = S.lower()\n    boredoms = findall(S, boredom_pattern)\n\
    \    return length(boredoms)\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.\
    \ \nThe function should ignore all punctuation marks and only count the words.\
    \ \nThe function should ignore all capitalization and only count the words.",
  "    if is_bored(S,0)==0 \n    else \n        boredoms=0 \n        for word in split(S,\"\
    .?!\") \n            if word==\"I\" \n                boredoms+=1 \n        return\
    \ boredoms \n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ start with the letter 'a'.", "    if is_bored(S, 0) < 0\n        error(\"is_bored\
    \ failed to return a valid value\")\n    end\n    return 0\nend", "    \n    count\
    \ = 0\n    for word in S.split(\" \")\n        if word[0] == \"I\"\n         \
    \   count += 1\n    return count\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function is_bored_2(S::String)::Bool that returns true if S is a bored sentence,\
    \ and false otherwise.", "    if is_bored(S, 0)\n    else \n        boredoms(S,\
    \ 0)\n    end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if is_bored(S, 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a given string.", " \
    \   if is_bored(S, 0) != 0\n    else \n        error(\"is_bored failed\")\n  \
    \  end\nend", "    if is_bored(S, 0) != 0\n    else \n        error(\"is_bored\
    \ failed to return correct result\")\n    end\nend", "\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n      \
    \  boredoms=0\n        for w in split(S,\".\")\n            if is_bored(w,1)==1\n\
    \            else \n                boredoms+=is_bored(w,1)\n        return boredoms\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in it.", "    if is_bored(S,0)==0 \n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of times the word\
    \ \"the\" appears in the string.", "\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a list of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"\
    The\", \"sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\"\
    , \"I\", \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".\")\n         \
    \   if is_bored(word,boredoms)==1\n            boredoms+=1\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of boredoms \n    in the string. \n    \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S, 0)==0 then 1\
    \ else 0 end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".\")\n         \
    \   if is_bored(word,boredoms)==1\n            boredoms+=1\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of boredoms in a string.\n    \n    Your function should take a string\
    \ as input, and return a number.\n    \n    For example, \n    >>> count_borems(\"\
    Hello world\")\n    0\n    >>> count_borems(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n    1\n    \"\"\"", "    S = S.lower()\n    boredoms\
    \ = findall(S, boredoms)\n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n@time is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of words\
    \ in it.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_bored(S, 0)==0 \n        error(\"is_bored failed\") \n    end\n    return\
    \ 1\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that counts the\
    \ number of boredoms in a given string.", "    S = S.strip\n    boredoms = findall(S,\
    \ \"^I.*\")\n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string. \nThe function should ignore punctuation, numbers, and other non-word\
    \ characters.\nThe function should ignore leading and trailing whitespace.", " \
    \   if is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function is_bored(S::String,\
    \ i::Int64) which returns 1 if S[i] is a boredom and 0 otherwise.", "    \n  \
    \  boredoms = 0 \n    \n    for word in split(S) do \n        if startswith(word,\
    \ \"I\") then \n            boredoms += 1 \n        end \n    end \n    \n   \
    \ return boredoms \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'e'.", "    if is_bored(S,0,0)==0\n    else \n        return\
    \ is_bored(S,0,0)\n    end\nend\n\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if is_bored(S,0)==1\n    else \n        boredoms=0\n        for word in split(S,\"\
    .\")\n            if word==\"I\"\n                boredoms+=1\n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of words in the string.",
  "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".?!\") \n      \
    \      if word==\"I\"\n            boredoms+=1\n        return boredoms\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of boredoms in a string.\nThe function should take a string as its only\
    \ argument.\nThe function should return the number of boredoms in the string.\n\
    The function should ignore all punctuation.\nThe function should ignore all capitalization.\n\
    The function should ignore all numbers.\nThe function should ignore all words\
    \ that start with a capital letter.\nThe function should ignore all words that\
    \ start with a number.\nThe function should ignore all words that start with a\
    \ lowercase letter.\nThe function should ignore all words that start with a special\
    \ character.\nThe function should ignore all words that start with a space.\n\
    The function should ignore all words that start with a question mark.\nThe function\
    \ should ignore all words that start with a exclamation point.\nThe function should\
    \ ignore all words that start with a period.\nThe function should ignore all words\
    \ that start with a question mark.\nThe function should ignore all words that\
    \ start with a exclamation point.\nThe function should ignore all words that start\
    \ with a period.\nThe function should ignore all words that start with a question\
    \ mark.\nThe function should ignore all words that start with a exclamation point.\n\
    The function should ignore all words that start with a period.\nThe function should\
    \ ignore all words that start with a question mark.\nThe function should ignore\
    \ all words that start with a exclamation point.\nThe function should ignore all\
    \ words that start with a period.\nThe function should ignore all words that start\
    \ with a question mark.\nThe function should ignore all words that start with\
    \ a exclamation point.\nThe function should ignore all words that start with a\
    \ period.\nThe function should ignore all words that start with a question mark.\n\
    The function should ignore all words that start with a exclamation point.\nThe\
    \ function should ignore all words that start with a period.\nThe function should\
    \ ignore all words that start with a question mark.\nThe function should ignore\
    \ all words that start with a exclamation point.\nThe function should ignore all\
    \ words that start with a period.\nThe function should ignore all words that start\
    \ with a question mark.", "    if is_bored(S,0)==0\n    else \n        return\
    \ is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    \    \n    For example:\n    >>> count_words(\"Hello world\")\n    2\n    >>>\
    \ count_words(\"The sky is blue. The sun is shining. I love this weather\")\n\
    \    6\n    \"\"\"", "    if is_bored(S,0)==0 \n    else \n        boredoms(S,0)\n\
    \    end\nend\n\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", " \
    \   \n    count = 0\n    for word in split(S) do \n        if word[0] == \"I\"\
    \ then \n            count += 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'A'.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,\
    \ 0)==0 \n    else \n        error(\"is_bored not implemented\")\n    end\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0)\n    else \n        boredoms(S, 0)\n    end\nend", "    if is_bored(S,0)==0\
    \ then 0 else 1\nend\n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a string.", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".?!\") \n      \
    \      if word==\"I\"\n            boredoms+=1 \n        return boredoms\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string\nthat are longer than or\
    \ equal to 3 characters.", "    if is_bored(S, 0)\n    else \n        boredoms(S,\
    \ 0)\n    end\nend", "    if is_bored(S) == 0 \n        error(\"is_bored called\
    \ with an empty string\")\n    end\n    \n    boredom = false\n    \n    for w\
    \ in split(S) \n        if w == \"I\" \n            boredom = true\n         \
    \   break\n        end\n    end\n    \n    return boredom ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of words in the string.", "    if is_bored(S,0)==0\n    else \n        boredom(S,0)\n\
    \    end\nend", "    if is_bored(S, 0)==0\n    else \n        boredoms(S, 0)\n\
    \    end\nend", "    if is_bored(S, 0)\n    else \n        boredom(S, 0)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of boredoms in a string.\n    \n    For example, \n    >>> count_borems(\"\
    Hello world\")\n    0\n    >>> count_borems(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n    1\n    \"\"\"", "\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n\
    \        boredoms += is_bored(S, boredoms)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a string.\nWrite a function\
    \ that counts the number of boredoms in a string and also counts the number of\
    \ boredoms in the string after each boredom is counted.\nWrite a function that\
    \ counts the number of boredoms in a string and also counts the number of boredoms\
    \ in the string after each boredom is counted, but only counts boredoms starting\
    \ with \"I\".\nWrite a function that counts the number of boredoms in a string\
    \ and also counts the number of boredoms in the string after each boredom is counted,\
    \ but only counts boredoms starting with \"I\" and ending with \"!\".", "    if\
    \ is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in split(S,\"\
    .?!\")\n            if word==\"I\"\n                boredoms+=1\n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of words in the string.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    boredoms = sum(map(is_bored_word,S.split(\"\
    .\")))\n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of boredoms within a given string.\nThe function\
    \ should take a string as input and return a number.", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".?!\")\n       \
    \     if word==\"I\"\n                boredoms+=1\n        return boredoms\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.\n    \n    Your function should take a string\
    \ as its only argument. \n    \n    Your function should return a number representing\
    \ the number of boredoms in the string.\n    \n    Your function should ignore\
    \ capitalization and punctuation.\n    \n    Your function should ignore the case\
    \ of the initial \"I\" in the string.\n    \n    Your function should ignore the\
    \ case of the final \"I\" in the string.\n    \n    Your function should ignore\
    \ the case of the initial \"I\" in the string.\n    \n    Your function should\
    \ ignore the case of the final \"I\" in the string.\n    \n    Your function should\
    \ ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the initial \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the final \"I\" in the string.\n    \n    Your function\
    \ should ignore the case of the ", "    if is_bored(S,0)==1\n    else \n     \
    \   0\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    \n\
    \"\"\"\n    You'll be given a list of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"sky\"\
    , \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \"I\", \"love\"\
    , \"this\", \"weather\"])\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S) == 0 \n        boredoms\
    \ = count_boredoms(S) \n    else \n        boredoms = 0 \n    end \n    return\
    \ boredoms \nend \n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in it.", "\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    \n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S, 0)==0 \n    else \n    \
    \    boredom_count::Int64 = 0\n        for word in split(S) \n            if word==\"\
    I\" \n            then boredom_count::Int64 = boredom_count+1\n            else\
    \ \n                boredom_count::Int64 = boredom_count\n        end\n      \
    \  return boredom_count\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with the letter 'a'.", "    \n    count = 0\n    \n    for word in\
    \ split(S) do \n        if word == \"I\" then \n            count += 1\n     \
    \   end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nHint: Use split() to split the string\
    \ into words.", "    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a string.",
  "    if is_bored(S, 0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a given string.\nWrite\
    \ a function that counts the number of boredoms in a given string.\nWrite a function\
    \ that counts the number of boredoms in a given string.\nWrite a function that\
    \ counts the number of boredoms in a given string.\nWrite a function that counts\
    \ the number of boredoms in a given string.\nWrite a function that counts the\
    \ number of boredoms in a given string.\nWrite a function that counts the number\
    \ of boredoms in a given string.\nWrite a function that counts the number of boredoms\
    \ in a given string.\nWrite a function that counts the number of boredoms in a\
    \ given string.\nWrite a function that counts the number of boredoms in a given\
    \ string.\nWrite a function that counts the number of boredoms in a given string.\n\
    Write a function that counts the number of boredoms in a given string.\nWrite\
    \ a function that counts the number of boredoms in a given string.\nWrite a function\
    \ that counts the number of boredoms in a given string.\nWrite a function that\
    \ counts the number of boredoms in a given string.\nWrite a function that counts\
    \ the number of boredoms in a given string.\nWrite a function that counts the\
    \ number of boredoms in a given string.\nWrite a function that counts the number\
    \ of boredoms in a given string.\nWrite a function that counts the number of boredoms\
    \ in a given string.\nWrite a function that counts the number of boredoms in a\
    \ given string.\nWrite a function that counts the number of boredoms in a given\
    \ string.\nWrite a function that counts the number of boredoms in a given string.\n\
    Write a function that counts the number of boredoms in a given string.\nWrite\
    \ a function that counts the number of boredoms in a given string.\nWrite a function\
    \ that counts the number of boredoms in a given string.\nWrite a function that\
    \ counts the number of boredoms in a given string.\nWrite a function that counts\
    \ the number of boredoms in a given string.\nWrite a function that counts the\
    \ number of boredoms in a given string.\nWrite a function that counts the number\
    \ of boredoms in a given string.\nWrite a function that counts the number of boredoms\
    \ in a given string.\nWrite a function that counts the number of boredoms in a\
    \ given string.\nWrite a function that counts the number of boredoms in a given\
    \ string.\nWrite a function that counts the number of boredoms in a given string.\n\
    Write a function that counts the number of boredoms in a given ", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".?\")\n        \
    \    if word==\"I\"\n                boredoms+=1\n        return boredoms\n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nThe function should ignore\
    \ numbers and punctuation marks.\nThe function should ignore capitalization.\n\
    The function should ignore extra spaces.\nThe function should ignore sentences\
    \ starting with a number.\nThe function should ignore sentences starting with\
    \ a capital letter.\nThe function should ignore sentences starting with a period.\n\
    The function should ignore sentences starting with a question mark.\nThe function\
    \ should ignore sentences starting with a exclamation mark.\nThe function should\
    \ ignore sentences starting with a period.\nThe function should ignore sentences\
    \ starting with a question mark.\nThe function should ignore sentences starting\
    \ with a exclamation mark.\nThe function should ignore sentences starting with\
    \ a period.\nThe function should ignore sentences starting with a question mark.\n\
    The function should ignore sentences starting with a exclamation mark.\nThe function\
    \ should ignore sentences starting with a period.\nThe function should ignore\
    \ sentences starting with a question mark.\nThe function should ignore sentences\
    \ starting with a exclamation mark.\nThe function should ignore sentences starting\
    \ with a period.\nThe function should ignore sentences starting with a question\
    \ mark.\nThe function should ignore sentences starting with a exclamation mark.\n\
    The function should ignore sentences starting with a period.\nThe function should\
    \ ignore sentences starting with a question mark.\nThe function should ignore\
    \ sentences starting with a exclamation mark.\nThe function should ignore sentences\
    \ starting with a period.\nThe function should ignore sentences starting with\
    \ a question mark.\nThe function should ignore sentences starting with a exclamation\
    \ mark.\nThe function should ignore sentences starting with a period.\nThe function\
    \ should ignore sentences starting with a question mark.\nThe function should\
    \ ignore sentences starting with a exclamation mark.\nThe function should ignore\
    \ sentences starting with a period.\nThe function should ignore sentences starting\
    \ with a question mark.\nThe function should ignore sentences starting with a\
    \ exclamation mark.\nThe function should ignore sentences starting with a period.\n\
    The function should ignore sentences starting with a ", "    if is_bored(S) ==\
    \ 0 then \n        return 0 \n    else \n        return 1 \nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n\
    \        for word in split(S,\".\")\n            if is_bored(word,boredoms)==1\n\
    \            else \n                boredoms+=1\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that splits a string into a vector of words.\
    \ Use a regular expression to split on '.', '?' and '!'.", "    \n    boredoms\
    \ = 0 \n    \n    for word in split(S) do \n        if starts_with(word, \"I\"\
    ) then \n            boredoms += 1 \n        end\n    end\n    \n    return boredoms\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that splits a string into a\
    \ list of words. Use a regular expression to split on spaces, punctuation, and\
    \ non-alphanumeric characters.", "\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    \n    for\
    \ i=1:end\n        if S[i]==\".\"\n            \n            if S[i+1]==\".\"\n\
    \                if S[i+2]==\".\"\n                    if S[i+3]==\".\"\n    \
    \                    if S[i+4]==\".\"\n                            if S[i+5]==\"\
    .\"\n                                if S[i+6]==\".\"\n                      \
    \              if S[i+7]==\".\"\n                                        return\
    \ i+7\n                                end\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S)\
    \ == 0 \n        error(\"is_bored expects a string that starts with 'I'\")\n \
    \   end\n    \n    boredoms = findall(S, startswith(\"I\"))\n    return length(boredoms)\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nPart\
    \ 2: String Manipulation\nNow that we have some boredom sentences, let's count\
    \ how many boredoms we have.", "    \n    count = 0\n    for word in S.split(\"\
    \ \")\n        if word == \"I\"\n            count += 1\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'a'.",
  "    if is_bored(S,0)==0 \n    then return 0 \n    else return 1 \n    end \nend\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S)\
    \ == 0 \n        error(\"The string is not bored\")\n    else \n        return\
    \ 1 \n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in it.", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
