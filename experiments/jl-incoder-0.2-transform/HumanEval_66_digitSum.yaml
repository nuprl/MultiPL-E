name: HumanEval_66_digitSum
language: jl
prompt: "\"\"\"Task\n    Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n   \
  \ >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
  abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
  )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
  \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
  \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
  \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
  \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
completions: ["    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n    \
    \        sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThanks for the answer! I didn't know about `codePointAt`, but this\
    \ looks very useful. I'm going to try this out and see how it works.\n<|/ c |>\n\
    <| c |>\n`codePointAt` was introduced in `Data.Char`, which is part of the base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base ",
  "    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n        \
    \    sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    sum::Int64 = 0\n  \
    \  for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\ndef digitSum(s):\n\
    \    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c.lower())\
    \ - ord('A')\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `ord` takes an argument of type `Char`, not\
    \ `String`.\n<|/ c |>\n<| c |>\nThis doesn't work either. `ord` takes an argument\
    \ of type `Char`, not `String`.\n<|/ c |>\n<| c |>\nIt does work, if you change\
    \ `ord` to `ord` as I did.\n<|/ c |>\n<| c |>\nIt does work, if you change `ord`\
    \ to `ord` as I did.\n<|/ c |>\n<| c |>\nIt does work, if you change `ord` to\
    \ `ord` as I did.\n<|/ c |>\n<| a |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = sum (map ord $ filter (\\c -> isUpper c) s)\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. `ord` takes an argument of type `Char`,\
    \ not `String`.\n<|/ c |>\n<| c |>\nThis doesn't work either. `ord` takes an argument\
    \ of type `Char`, not `String`.\n<|/ c |>\n<| c |>\nThis doesn't work either.\
    \ `ord` takes an argument of type `Char`, not `String`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work either. `ord` takes an argument of type `Char`, not `String`.\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s\n       \
    \ if ('A' <= c && c <= 'Z')\n            sum += c - 'A' + 1\n        else if ('a'\
    \ <= c && c <= 'z')\n            sum += c - 'a' + 1\n        else if ('0' <= c\
    \ && c <= '9')\n            sum += c - '0'\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the upper characters only'\nASCII codes.", "    if s == \"\
    \"\n        0\n    else\n        sum = 0\n        for c in s\n            if isUpper\
    \ c\n                sum += toUpper c\n            else\n                sum +=\
    \ toLower c\n        sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the numbers in the string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| c |>\nThis doesn't\
    \ work. `digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n<|/ c |>\n<|\
    \ c |>\n: I missed that requirement. Fixed now.\n<|/ c |>\n<| c |>\nThis still\
    \ doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n<|/ c\
    \ |>\n<| c |>\n: I missed that requirement. Fixed now.\n<|/ c |>\n<| c |>\nThis\
    \ still doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n\
    <|/ c |>\n<| a dscore=3 |>\nThe other answers here are all great, but I thought\
    \ I'd add my own solution, which is based on a combination of Data.Char from the\
    \ standard library, and Data.Text from the text library. \n<code>\nimport Data.Char\n\
    import Data.Text", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")` which should return\
    \ 153\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that doesn't require\
    \ any imports.\n<|/ c |>\n<| a tags=string,haskell |>\nHere's a solution without\
    \ imports:\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a tags=string,haskell,functional-programming |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to do this in Haskell, not how to do\
    \ it in a different language.\n<|/ c |>\n<| c |>\nI agree with you. My answer\
    \ was more about how to do this in Haskell and I thought it would be useful to\
    \ share the code with others. I edited my answer to make it more clear.\n<|/ c\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . filter (\\c -> isUpper c)` - this one looks very nice.\n<|/ c |>\n<|\
    \ a dscore=4 |>\nThe other answers here are great, but I wanted to add that you\
    \ can also use Data.Char's toUpper to convert a character to a character code.\
    \ \n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n\
    <|/ a tags=string,haskell,ascii |>\n<| a dscore=4 |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| a dscore=3 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $\
    \ map toUpper s\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| a |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a tags=string,haskell,ascii\
    \ dscore=3 |>\n<| a tags=string,haskell,ascii |>\n<code>\ndigitSum :: String ->\
    \ Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a dscore=3 |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=string,haskell,ascii |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n\
    <|/ a tags=string,haskell,ascii |>\n<| a |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = ", "    sum = 0\n    for c in s:\n        if c.isUpper():\n     \
    \       sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThe `sum` function can be replaced by `foldl (+) 0`.\n<|/ c |>\n\
    <| c |>\n: Yes, but `foldl` has some nice properties that `sum` doesn't, like\
    \ being strict in its arguments and being strict in its return type.\n<|/ c |>\n\
    <| c |>\n: I agree with you, but I find `foldl` easier to read and understand.\n\
    <|/ c |>\n<| c |>\n: I agree with you, but I find `foldl` easier to read and understand.\n\
    <|/ c |>\n<| c |>\n: I agree with you, but I find `foldl` easier to read and understand.\n\
    <|/ c |>\n<| a tags=string,haskell,ascii |>\nHere's a solution that doesn't use\
    \ any libraries:\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in\
    \ s do\n        if c >= 'A' and c <= 'Z' then \n            sum += c - 'A' + 10\n\
    \        else \n            sum += c\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n  \
    \          if c >= '0' and c <= '9'\n                sum += c - '0'\n        \
    \    else\n                sum\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef digitSum(s:String)::Int64\n \
    \   sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| a tags=haskell,string,ascii |>\n<code>\nimport Data.Char", "    digitSum\
    \ = 0\n    for c in s\n        if c.isUpper\n            digitSum += c.codePointAt(0)\n\
    \    return digitSum\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\nI like this\
    \ solution, although it might be worth pointing out that `digitSum` can be implemented\
    \ as `sum . filter (\\c -> isUpper c)`.\n<|/ c |>\n<| c |>\nYes, that's a good\
    \ point. I was trying to keep it close to the original code as much as possible.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport Data.Char\nimport Data.List", "   \
    \ if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n   \
    \         if c >= '0' && c <= '9'\n                sum += c - '0'\n          \
    \  else\n                sum += c - 'A' + 10\n        end\n        sum\nend\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the upper characters only'\nASCII codes.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `digitSum(\"\
    aAaaaXa\")` returns `153` instead of `131`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated the answer to include a more robust solution.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to include a more\
    \ robust solution.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (ord '0') s\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `131`.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated the answer to include a more robust solution.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\nend",
  "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n       \
    \     sum += c - 'A' + 1\n        else\n            sum += c\n    return sum\n\
    end", "    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c =>\
    \ c >= 'a' && c <= 'z', s)))\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\n`digitSum` doesn't work if you give it an empty string. `digitSum` should\
    \ return 0 instead of throwing an error.\n<|/ c |>\n<| c |>\nI agree, that's why\
    \ I added the comment \"Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\nASCII codes\"\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote you, but I suspect it's because you didn't actually answer the question.\
    \ Your answer doesn't even try to answer the question, just point out a mistake.\n\
    <|/ c |>\n<| c |>\nI did answer the question. He asked for a function that takes\
    \ a string as input and returns the sum of the upper characters only. He also\
    \ said he was new to Haskell. He also said he was new to functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ Haskell and functional programming. He also said he was new to Haskell and functional\
    \ programming. He also said he was new to Haskell and functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ Haskell and functional programming. He also said he was new to Haskell and functional\
    \ programming. He also said he was new to Haskell and functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ Haskell and functional programming. He also said he was new to Haskell and functional\
    \ programming. He also said he was new to Haskell and functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ Haskell and functional programming. He also said he was new to H", "    sum::Int64\
    \ = 0\n    for c in s do \n        if ('A' <= c && c <= 'Z') then \n         \
    \   sum += c - 'A' + 1\n        else \n            sum += c\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work if the string contains any non-ASCII characters. For example,\
    \ `digitSum(\"aAaaaXa\")` returns `153` instead of `153`.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. I tested it before posting it. `digitSum(\"aAaaaXa\")` returns\
    \ `153`.\n<|/ c |>\n<| c |>\nAh, I missed the part about non-ASCII characters.\
    \ I thought you were talking about ASCII characters. Sorry.\n<|/ c |>\n<| a |>\n\
    <code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    if s == \"\"\n\
    \        0\n    else\n        sum(map(ord, filter(c => c >= 'A' && c <= 'Z', s)))\n\
    end\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are upper case. For\
    \ example, the string \"hello\" has 4 characters that are upper case: \"H\", \"\
    E\", \"L\", \"L\".", "    sum::Int64 = 0\n    for c in s do \n        if c >=\
    \ '0' && c <= '9' then \n            sum += (c - '0')\n        else \n       \
    \     sum += (c - 'A' + 10)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits only'\nASCII codes.", "    sum::Int64 = 0\n    for c in s:\n \
    \       if c >= '0' and c <= '9':\n            sum += (c - '0')\n    return sum\n\
    end", "    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n\
    \            sum += c - 'A' + 1\n        else if c >= 'a' and c <= 'z'\n     \
    \       sum += c - 'a' + 1\n        else\n            sum += c\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the sum of the digits in that string. For example, digitSum(\"1234\"\
    ) should return 10.", "    sum = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the digits only'\n    ASCII codes.", "    sum::Int64 = 0\n    for c in s\n \
    \       if c >= '0' && c <= '9'\n            sum += c - '0'\n        end\n   \
    \ end\n    return sum\nend", "    if s == \"\"\n        0\n    else\n        sum\
    \ = 0\n        for c in s\n            if isUpper(c)\n                sum += toUpper(c)\n\
    \            else\n                sum += toLower(c)\n        end\n        sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 10\nWrite a function that takes a string\
    \ as input and returns the number of uppercase letters.", "    sum::Int64 = 0\n\
    \    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any libraries. I guess I should use recursion to solve\
    \ this problem. I am not able to figure out how to do that.\n<|/ c |>\n<| c |>\n\
    I added a recursive solution to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks again. I am not allowed to use any libraries. I guess I should use recursion\
    \ to solve this problem. I am not able to figure out how to do that.\n<|/ c |>\n\
    <| c |>\nI added a recursive solution to my answer. Hope it helps.\n<|/ c |>\n\
    <| a tags=string,recursion,haskell |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ [] = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum [] = 0\ndigitSum (x:xs)\
    \ = x + digitSum xs\n</code>\n<|/ a tags=string,recursion,haskell |>\n<| a tags=string,recursion,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum [] = 0\ndigitSum (x:xs) = x\
    \ + digitSum xs\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but also provide an explanation of what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a tags=string,recursion,haskell |>\n<code>\ndigitSum :: String ->\
    \ Int\ndigitSum [] = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,recursion,haskell |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum [] = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,recursion,haskell |>\n<code>\ndigitSum :: String -> Int\ndigit",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to know how to use `isUpper` without using\
    \ any external libraries.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted\
    \ to point out that `isUpper` can be implemented without using any external libraries.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any external libraries.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any external libraries.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport Data.Char\nimport Data.List\nimport\
    \ Data.Maybe", "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c\
    \ <= 'Z')\n            sum += c - 'A' + 1\n        else\n            sum += c\n\
    \    return sum\nend", "    sum::Int64 = 0\n    for c in s do \n        if c >=\
    \ '0' && c <= '9' then \n            sum += c - '0'\n        else \n         \
    \   sum += c - 'A' + 10\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits only'\nASCII codes.", "    sum::Int64 = 0\n    for c in s do \n\
    \        if c >= '0' && c <= '9' then \n            sum += (c - '0')\n       \
    \ else \n            sum += (c - 'A' + 10)\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the upper characters only'\nASCII codes.", "    sum = 0\n\
    \    for c in s do \n        if c >= '0' && c <= '9' then \n            sum +=\
    \ c - '0'\n        else \n            sum += 10\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string. \nThe digits are the characters\
    \ '0' through '9'.", "    if s == \"\"\n        0\n    else\n        sum = 0\n\
    \        for c in s\n            if isUpper(c)\n                sum += toUpper(c)\n\
    \            else\n                sum += toLower(c)\n        end\n        sum\n\
    end\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string as input and returns the number of uppercase characters in the\
    \ string. \nWrite a function that takes a string as input and returns the number\
    \ of lowercase characters in the string. \nWrite a function that takes a string\
    \ as input and returns the number of digits in the string. \nWrite a function\
    \ that takes a string as input and returns the number of uppercase and lowercase\
    \ characters in the string. \nWrite a function that takes a string as input and\
    \ returns the number of uppercase and lowercase and digits in the string. \nWrite\
    \ a function that takes a string as input and returns the number of uppercase\
    \ and lowercase and digits in the string. \nWrite a function that takes a string\
    \ as input and returns the number of uppercase and lowercase and digits in the\
    \ string. \nWrite a function that takes a string as input and returns the number\
    \ of uppercase and lowercase and digits in the string. \nWrite a function that\
    \ takes a string as input and returns the number of uppercase and lowercase and\
    \ digits in the string. \nWrite a function that takes a string as input and returns\
    \ the number of uppercase and lowercase and digits in the string. \nWrite a function\
    \ that takes a string as input and returns the number of uppercase and lowercase\
    \ and digits in the string. \nWrite a function that takes a string as input and\
    \ returns the number of uppercase and lowercase and digits in the string. \nWrite\
    \ a function that takes a string as input and returns the number of uppercase\
    \ and lowercase and digits in the string. \nWrite a function that takes a string\
    \ as input and returns the number of uppercase and lowercase and digits in the\
    \ string. \nWrite a function that takes a string as input and returns the number\
    \ of uppercase and lowercase and digits in the string. \nWrite a function that\
    \ takes a string as input and returns the number of uppercase and lowercase and\
    \ digits in the string. \nWrite a function that takes a string as input and returns\
    \ the number of uppercase and lowercase and digits in the string. \nWrite a function\
    \ that takes a string as input and returns the number of uppercase and lower",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\n\
    import Data.List", "    sum = 0\n    for c in s\n        if c.isUpper()\n    \
    \        sum += c.codePointAt(0)\n    return sum\nend", "    sum::Int64 = 0\n\
    \    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=haskell,string,ascii |>\n<| c |>\n`digitSum\
    \ = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter\
    \ (\\c -> isUpper c)` doesn't work if `c` is `'\\0'`\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . filter (\\c -> isUpper c)` doesn't work if `c` is `'\\0'`\n<|/ c |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` doesn't work if `c` is `'\\\
    0'`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` doesn't work\
    \ if `c` is `'\\0'`\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport Data.Char (isUpper)",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend", "    sum::Int64 = 0\n    for c in s:\n\
    \        if c >= '0' and c <= '9':\n            sum += Int(c)\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    sum = 0\n    for c\
    \ in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case. Do not use the isUpper function.", "    sum::Int64 = 0\n    for\
    \ c in s do\n        if c >= '0' && c <= '9' then\n            sum += c - '0'\n\
    \        else\n            sum += c - 'A' + 10\n        end\n    end\n    return\
    \ sum\nend", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n \
    \           sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char", "    digitSum =\
    \ 0\n    for c in s\n        if c >= '0' and c <= '9'\n            digitSum +=\
    \ c - '0'\n        end\n    end\n    return digitSum\nend", "    digitSum = 0\n\
    \    for c in s\n        if c.isUpper\n            digitSum += c.codePointAt(0)\n\
    \        end\n    end\n    return digitSum\nend", "    digitSum = 0\n    for c\
    \ in s\n        if c >= '0' and c <= '9'\n            digitSum += c - '0'\n  \
    \      end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the upper characters only'\n    ASCII codes.", "    digitSum = 0\n    for c\
    \ in s do\n        digitSum += digitToInt(c)\n    end\n    return digitSum\nend",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - that's a nice one!\n<|/ c |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` - that's a nice one!\n<|/\
    \ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    digitSum = 0\n    for c in s do \n        if c.isUpper() then digitSum += c.codePointAt(0)\
    \ - 64 else digitSum += c.codePointAt(0)\n    end\n    return digitSum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters.", "    sum::Int64 = 0\n    for\
    \ c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nimport Data.List", "    sum::Int64 = 0\n    for\
    \ c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef digitSum(s):\n    sum\
    \ = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n \
    \   return sum\n</code>\n<|/ a tags=string,haskell,ascii dscore=0 |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\nend", "    sum::Int64 = 0\n    for c in s:\n        if c >= '0'\
    \ and c <= '9':\n            sum += c - '0'\n    return sum\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't answer the question. OP asked for \"a function that takes\
    \ a string as input and returns the sum of the upper characters only\", not \"\
    a function that takes a string as input and returns the sum of the digits\"\n\
    <|/ c |>\n<| c |>\nI believe that my answer does answer the question. OP asked\
    \ for a function that takes a string as input and returns the sum of the upper\
    \ characters only, which I believe is what my answer does. OP also asked for \"\
    a function that takes a string as input and returns the sum of the digits\", which\
    \ I believe is what my answer does. OP also asked for \"a function that takes\
    \ a string as input and returns the sum of the digits\", which I believe is what\
    \ my answer does. OP also asked for \"a function that takes a string as input\
    \ and returns the sum of the digits\", which I believe is what my answer does.\
    \ OP also asked for \"a function that takes a string as input and returns the\
    \ sum of the digits\", which I believe is what my answer does. OP also asked for\
    \ \"a function that takes a string as input and returns the sum of the digits\"\
    , which I believe is what my answer does.\n<|/ c |>\n<| c |>\nI believe that my\
    \ answer does answer the question. OP asked for a function that takes a string\
    \ as input and returns the sum of the upper characters only, which I believe is\
    \ what my answer does. OP also asked for \"a function that takes a string as input\
    \ and returns the sum of the digits\", which I believe is what my answer does.\
    \ OP also asked for \"a function that takes a string as input and returns the\
    \ sum of the digits\", which I believe is what my answer does. OP also asked for\
    \ \"a function that takes a string as input and returns the sum of the digits\"\
    , which I believe is what my answer does. OP also asked for \"a function that\
    \ takes a string as input and returns the sum of the digits\", which I believe\
    \ is what my answer does.\n<|/ c |>\n<| c |>\nI believe that my answer does answer\
    \ the question. OP asked for a function that takes a string as input and returns\
    \ the sum of the upper characters only, which I believe is what my answer does.\
    \ OP also asked for \"a function that takes a string as input and returns the\
    \ sum of the digits\", which I believe is what my answer does. OP also asked for\
    \ \"a function that takes a string as ", "    sum::Int64 = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    import Data.List", "    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and\
    \ c <= '9':\n            sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.", "    sum::Int64 = 0\n    for c in s do\n   \
    \     if c >= '0' && c <= '9' then\n            sum += c - '0'\n        else\n\
    \            sum += c - 'A' + 10\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    digitSum = 0\n    for\
    \ c in s\n        if isUpper(c)\n            digitSum += toUpper(c) - 'A' + 1\n\
    \        end\n    end\n    return digitSum\nend", "    sum::Int64 = 0\n    for\
    \ c in s do\n        if c >= '0' && c <= '9' then\n            sum += c - '0'\n\
    \        else\n            sum += c - 'A' + 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nimport Data.Char\n\
    import Data.List", "    sum::Int64 = 0\n    for c in s do\n        if c >= '0'\
    \ && c <= '9' then\n            sum += c - '0'\n        else\n            sum\
    \ += c - 'A' + 10\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are upper case. For example, the string \"\
    hello\" has 5 characters that are upper case: \"H\", \"E\", \"L\", \"L\", \"O\"\
    .", "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n            sum += c\
    \ - 'A' + 1\n        else\n            sum += c\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the digits in that string.", "    sum = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nimport Data.Char", "    digitSum\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            digitSum += c.codePointAt(0)\n\
    \    return digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`, which should return\
    \ `153`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I was trying to\
    \ avoid using recursion and I thought that would be the most straightforward solution.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wonder why you didn't use `foldl`\
    \ instead of `fold`.\n<|/ c |>\n<| c |>\nI didn't know about foldl. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nI didn't know about foldl either. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    if s == \"\"\n        0\n    else\n    \
    \    sum = 0\n        for c in s\n            if isUpper(c)\n                sum\
    \ += toUpper(c)\n            else\n                sum += toLower(c)\n       \
    \ end\n        sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`, which should return\
    \ `153`.\n<|/ c |>\n<| c |>\nThanks, I fixed it\n<|/ c |>\n<| c |>\n`digitSum(\"\
    aAaaaXa\")` should return `153`, not `153`.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it\n<|/ c |>\n<| a tags=haskell,string,ascii |>\nHere's a solution using Data.Char's\
    \ toUpper and foldl (foldl is like foldl1 but for lists). foldl is like foldr\
    \ but for lists. foldl is like foldl1 but for lists.\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer! I didn't know that `codePointAt` existed. I also didn't know\
    \ that `isUpper` existed. I was trying to use `isUpper` but was getting errors.\
    \ I didn't know that `codePointAt` existed either. Thanks again!\n<|/ c |>\n<|\
    \ c |>\n`isUpper` existed in Rust 1.26, but was removed from the language in Rust\
    \ 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust ", "    sum::Int64 = 0\n    for c in s\n        if c.isUpper\n     \
    \       sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `153`.\n\
    <|/ c |>\n<| c |>\nIt does work. `digitSum(\"aAaaaXa\")` returns `153` as expected.\n\
    <|/ c |>\n<| c |>\nYes, it does work. My mistake. I was looking at the wrong function.\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution that doesn't require any\
    \ looping.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlet digitSum(s:String):Int64 =\
    \ \n    let rec digitSum acc str = match str with\n        | [] -> acc\n     \
    \   | c :: tail -> digitSum (acc+c.codePointAt(0)) tail\n    in digitSum 0 s\n\
    </code>\n<|/ a tags=ocaml,functional-programming |>\n<| a tags=ocaml,functional-programming\
    \ |>\n<code>\nlet digitSum s = \n    let rec loop acc s = \n        match s with\n\
    \        | [] -> acc\n        | c :: t -> loop (acc + c.codePointAt(0)) t\n  \
    \  in loop 0 s\n</code>\n<|/ a dscore=1 |>\n<| a tags=ocaml,functional-programming\
    \ |>\n<code>\nlet digitSum s = \n    let rec loop acc s = \n        match s with\n\
    \        | [] -> acc\n        | c :: t -> loop (acc + c.codePointAt(0)) t\n  \
    \  in loop 0 s\n</code>\n<|/ a dscore=1 |>\n<| a tags=ocaml,functional-programming\
    \ |>\n<code>\nlet digitSum s = \n    let rec loop acc s = \n        match s with\n\
    \        | [] -> acc\n        | c :: t -> loop (acc + c.codePointAt(0)) t\n  \
    \  in loop 0 s\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nlet digitSum\
    \ s = \n    let rec loop acc s = \n        match s with\n        | [] -> acc\n\
    \        | c :: t -> loop (acc + c.codePointAt(0)) t\n    in loop 0 s\n</code>\n\
    <|/ a tags=ocaml,functional-programming |>", "    sum = 0\n    for c in s:\n \
    \       if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I didn't know that\
    \ `codePointAt` existed. I will definitely look into it. However, I still don't\
    \ understand why my code doesn't work. Could you please elaborate on that?\n<|/\
    \ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I still don't understand why my code doesn't\
    \ work. Could you please elaborate on that?\n<|/ c |>\n<| c |>\nI added an explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| a tags=haskell,string |>\nThe problem\
    \ is that the function digitSum doesn't work correctly for empty strings. Here's\
    \ a simpler version:\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map\
    \ toUpper s\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I didn't\
    \ know that `toUpper` existed. I will definitely look into it. However, I still\
    \ don't understand why my code doesn't work. Could you please elaborate on that?\n\
    <|/ c |>\n<| c |>\nThe function `digitSum` doesn't work correctly for empty strings.\
    \ That's why I wrote a simpler version. `digitSum` should work for any non-empty\
    \ string.\n<|/ c |>\n<| c |>\nThanks for your answer! I still don't understand\
    \ why my code doesn't work. Could you please elaborate on that?\n<|/ c |>\n<|\
    \ c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n<| a |>\n\
    The problem is that the function digitSum doesn't work correctly for empty strings.\
    \ Here's a simpler version:\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum\
    \ $ map toUpper s\n</code>\n<|/ a dscore=1 tags=haskell,string |>\n<| c |>\nThanks\
    \ for your answer! I didn't know that `toUpper` existed. I will definitely look\
    \ into it. However, I still don't understand why my code doesn't work. Could you\
    \ please elaborate on that?\n<|/ c |>\n<| c |>\nI added an explanation ", "  \
    \  sum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n            sum\
    \ += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string. \nThe digits are the characters between '0' and\
    \ '9'.", "    sum::Int64 = 0\n    for c in s \n        if c >= '0' && c <= '9'\
    \ \n            sum += c - '0'\n    return sum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map (\\x -> x - '0')\
    \ s)\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\nThis doesn't work. Try it\
    \ with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = sum (map (\\x -> x - '0') s)\n</code>\n<|/ a dscore=1 tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map (\\x -> x - '0')\
    \ s)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum\
    \ (map (\\x -> x - '0') s)\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\nThis\
    \ doesn't work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map (\\x -> x - '0')\
    \ s)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\n`digitSum` doesn't seem to work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n\
    <| c |>\n: I fixed the typo.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    import Data.List", "    digitSum = 0\n    for c in s do \n        if c.isUpper()\
    \ then digitSum += c.codePointAt(0)\n    end\n    return digitSum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters.", "    sum::Int64 = 0\n    for\
    \ i in s\n        if i >=48 && i <=57\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\nASCII codes.", " \
    \   sum::Int64 = 0\n    for c in s \n        if c.isUpper() \n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be done without using\
    \ any libraries. I guess it would be possible by writing a recursive function\
    \ that would go through the string and count the upper case letters, but that\
    \ would require a lot of code (I guess).\n<|/ c |>\n<| c |>\n: Yes, it can be\
    \ done without libraries. I added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| c |>\nI guess this solution doesn't use any libraries because `isUpper`\
    \ is defined in `Data.Char`.\n<|/ c |>\n<| c |>\n: Yes, it does. `isUpper` is\
    \ defined in `Data.Char`.\n<|/ c |>\n<| c |>\n: Yes, it does. `isUpper` is defined\
    \ in `Data.Char`.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using Data.Char:\n\
    <code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n\
    \        if c.isupper():\n            sum += ord(c)\n    return sum\n</code>\n\
    <|/ a tags=haskell,string |>\n<| c |>\nThis doesn't work. `ord` returns an `Int`,\
    \ not a `Char`.\n<|/ c |>\n<| c |>\n`ord` returns an `Int`, not a `Char`. `ord`\
    \ converts a `Char` to an `Int`\n<|/ c |>\n<| c |>\n`ord` converts a `Char` to\
    \ an `Int` - that's not what it does. `ord` converts a `Char` to an `Int` - that's\
    \ what it does.\n<|/ c |>\n<| c |>\n`ord` converts a `Char` to an `Int` - that's\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does.\n<|/\
    \ c |>\n<| c |>\n`ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's what it does. `ord` converts a `Char`\
    \ to an `Int` - that's what it does. `ord` converts a `Char` to an `Int` - that's\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's what it does. `ord` converts a `Char`\
    \ to an `Int` - that's what it does. `ord` converts a `Char` to an `Int` - that's\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's what it does. `ord` converts a `Char`\
    \ to an `Int` - that's what it does. `ord` converts a `Char` to an `Int` - that's\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's ", "    sum::Int64 = 0\n    for c in\
    \ s\n        if c >= 'A' and c <= 'Z'\n            sum += (c - 'A' + 10)\n   \
    \     end\n    end\n    return sum\nend", "    digitSum = 0\n    for c in s do\
    \ \n        if c >= '0' && c <= '9' then digitSum += c - '0' else digitSum +=\
    \ c - 'A' + 10\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are upper case letters.", "    digitSum = 0\n\
    \    for c in s do\n        if c >= '0' and c <= '9' then\n            digitSum\
    \ += c - '0'\n        end\n    end\n    return digitSum\nend", "    sum::Int64\
    \ = 0\n    for c in s do \n        if ('A' <= c && c <= 'Z') then \n         \
    \   sum += c - 'A' + 1\n        else \n            sum += c - 'a' + 1\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    digitSum = 0\n    for c in s:\n        if c.isUpper():\n\
    \            digitSum += c.codePointAt(0)\n    return digitSum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n       \
    \     sum += c - 'A' + 1\n        elseif ('a' <= c && c <= 'z')\n            sum\
    \ += c - 'a' + 1\n        else\n            sum += c\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are not digits.", " \
    \   sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nI like this\
    \ solution, because it doesn't require any external libraries. But I wonder why\
    \ you didn't use `sum` instead of `Int64`?\n<|/ c |>\n<| c |>\nI used `Int64`\
    \ because I thought it would be more efficient than `Int`. But I guess it really\
    \ doesn't matter. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI guess it really\
    \ doesn't matter. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI guess it really\
    \ doesn't matter. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    import Data.Char", "    if s == \"\"\n        0\n    else\n        sum = 0\n \
    \       for c in s\n            if ('A' <= c && c <= 'Z')\n                sum\
    \ += c - 'A' + 1\n            else\n                sum += c\n        end\n  \
    \      sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string. \nThe function\
    \ should ignore all non-alphanumeric characters and return 0 for the empty string.",
  "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n \
    \           sum += c - '0'\n        else\n            sum += c - 'A' + 10\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all non-alphanumeric\
    \ characters and return the number of alphanumeric characters.", "    digitSum\
    \ = 0\n    for c in s\n        if c.isUpper\n            digitSum += c.code\n\
    \    end\n    return digitSum\nend", "    sum::Int64 = 0\n    for c in s:\n  \
    \      if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport Data.Char", "   \
    \ digitSum = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n    \
    \        digitSum += c - '0'\n        else\n            digitSum = digitSum\n\
    \        end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the sum\
    \ of the digits of that string. \nThe digits are the characters between '0' and\
    \ '9'.", "    digitSum = 0\n    for c in s:\n        if c.isUpper():\n       \
    \     digitSum += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a |>\n<|\
    \ c |>\nI like the idea of using codePointAt. Thanks.\n<|/ c |>\n<| a |>\n<code>\n\
    import Data.Char (toUpper)", "    if s == \"\"\n        0\n    else\n        sum(map(ord,\
    \ filter(c => c >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<text>\nExercise 9\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string. \nThe function should ignore all non-alphanumeric characters.",
  "    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c >= 'A'\
    \ && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nWrite\
    \ a function that takes a string as input and returns the number of uppercase\
    \ characters in the string. \nWrite a function that takes a string as input and\
    \ returns the number of lowercase characters in the string. \nWrite a function\
    \ that takes a string as input and returns the number of digits in the string.\
    \ \nWrite a function that takes a string as input and returns the number of alphanumeric\
    \ characters in the string. \nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are not alphanumeric.",
  "    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then \n\
    \            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n  \
    \          if ('A' <= c && c <= 'Z')\n                sum += c - 'A' + 1\n   \
    \         else\n                sum += c\n        end\n        sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    digitSum = 0\n    for\
    \ c in s\n        if ('A' <= c <= 'Z') || (\"a\" <= c <= \"z\")\n            digitSum\
    \ += c - 'A' + 1\n        else if ('0' <= c <= '9')\n            digitSum += c\
    \ - '0'\n        end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c >=\
    \ '0' and c <= '9':\n            sum += (c - '0')\n    return sum\nend", "   \
    \ sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n    \
    \        sum += ord(c)\n    return sum\n</code>\n<|/ a dscore=0 tags=haskell,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. `ord` only works on ASCII characters. `ord`\
    \ doesn't work on non-ASCII characters. `ord` doesn't work on non-ASCII characters\
    \ in Haskell.\n<|/ c |>\n<| c |>\nThe question was about ASCII characters, not\
    \ about non-ASCII characters. `ord` works on non-ASCII characters in Haskell.\
    \ `ord` works on non-ASCII characters in Haskell.\n<|/ c |>\n<| c |>\n`ord` works\
    \ on non-ASCII characters in Haskell. `ord` works on non-ASCII characters in Haskell.\n\
    <|/ c |>\n<| c |>\n`ord` works on non-ASCII characters in Haskell. `ord` works\
    \ on non-ASCII characters in Haskell.\n<|/ c |>\n<| c |>\n`ord` works on non-ASCII\
    \ characters in Haskell. `ord` works on non-ASCII characters in Haskell.\n<|/\
    \ c |>\n<| a tags=haskell,string,ascii |>\n<code>\nimport Data.Char\nimport Data.List",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nI like your answer\
    \ but I think it would be better to use a `fold` instead of a `for` loop. `digitSum\
    \ = foldl (+) 0` will do the same thing but in a more readable way.\n<|/ c |>\n\
    <| c |>\nI agree with you. `foldl` is more readable. `foldl` is also more efficient\
    \ than `foldl (+) 0` because `foldl` can avoid the creation of intermediate lists.\n\
    <|/ c |>\n<| c |>\nI agree with you. `foldl` is more readable. `foldl` is also\
    \ more efficient than `foldl (+) 0` because `foldl` can avoid the creation of\
    \ intermediate lists.\n<|/ c |>\n<| c |>\nI agree with you. `foldl` is more readable.\
    \ `foldl` is also more efficient than `foldl (+) 0` because `foldl` can avoid\
    \ the creation of intermediate lists.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\nHere's a solution using foldl:\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = foldl (\\acc c -> if c.isUpper then acc + c.codePointAt(0) else acc) 0 s\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=haskell,functional-programming |>\nA solution\
    \ using foldl and isUpper from Data.Char:\n<code>\nimport Data.Char", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I tested it before posting. What is your problem?\n<|/ c |>\n<| c |>\n\
    I tested it before posting, but I didn't test the case you mentioned. I was thinking\
    \ about it when I wrote the comment and I thought it would be a good idea to mention\
    \ it here too. Anyway, I edited my answer to include a solution that works for\
    \ that case.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have had\
    \ a typo when I tested it the first time.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works. I must have had a typo when I tested it the first time.\n<|/ c\
    \ |>\n<| a |>\nThe other answers here are great, but I wanted to show a more functional\
    \ approach using Data.Char.\n<code>\nimport Data.Char (toUpper)", "    sum::Int64\
    \ = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c\
    \ - 'A' + 1\n        else\n            sum += c\n    return sum\n</code>\n<|/\
    \ a tags=string,haskell,functional-programming |>\n<| a dscore=0 |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c &&\
    \ c <= 'Z')\n            sum += c - 'A' + 1\n        else if ('a' <= c && c <=\
    \ 'z')\n            sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n\
    \            sum += c - '0'\n    return sum\nend", "    sum::Int64 = 0\n    for\
    \ c in s do\n        if c >= '0' && c <= '9' then\n            sum += c - '0'\n\
    \        else\n            sum += c - 'A' + 10\n        end\n    end\n    return\
    \ sum\nend", "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c\
    \ <= '9' then\n            sum += c - '0'\n        else\n            sum += c\
    \ - 'A' + 10\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n    return sum\n\
    end", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n        \
    \    sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\nI like your solution, although it would be more idiomatic to write\
    \ `sum . filter (\\`elem\\` ['A'..'Z'])` instead of `sum . filter (\\`elem\\`\
    \ ['A'..'Z']) . map toUpper`.\n<|/ c |>\n<| c |>\nThanks, I didn't know about\
    \ `elem` - I thought it was a list comprehension but it's actually a function\
    \ that takes a predicate and returns a new list.\n<|/ c |>\n<| c |>\n`elem` is\
    \ indeed a list comprehension, but `filter` takes a predicate and returns a new\
    \ list. `filter (\\`elem\\` ['A'..'Z'])` is equivalent to `filter (\\`elem\\`\
    \ ['A'..'Z']) . map toUpper`.\n<|/ c |>\n<| a dscore=2 |>\nHere's another solution,\
    \ using Data.Char.\n<code>\nimport Data.Char", "    sum = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters in the string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell |>\nThe\
    \ simplest way is to use Data.Char.digitToInt:\n<code>\nimport Data.Char", " \
    \   sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum +=\
    \ toUpper(c)\n    return sum\nend", "    digitSum = 0\n    for c in s:\n     \
    \   if c.isUpper():\n            digitSum += c.codePointAt(0)\n    return digitSum\n\
    </code>\n<|/ a tags=string,haskell,functional-programming |>\n<| c |>\nThanks\
    \ for the answer! I understand that `digitSum` can be written as a `fold` but\
    \ I'm still confused on how `digitSum` can be written as a `fold`. Can you please\
    \ elaborate on that?\n<|/ c |>\n<| c |>\nThe `fold` function takes two arguments:\
    \ an initial value and a function which takes a single argument and returns a\
    \ new value. The initial value is given as the second argument. `digitSum` can\
    \ be written as a `fold` by using the `foldl` function which takes a function\
    \ which takes a single argument and returns a new value. The initial value is\
    \ given as the first argument. `digitSum` can be written as a `fold` by using\
    \ the `foldl` function which takes a function which takes a single argument and\
    \ returns a new value. The initial value is given as the second argument. `digitSum`\
    \ can be written as a `fold` by using the `foldl` function which takes a function\
    \ which takes a single argument and returns a new value. The initial value is\
    \ given as the third argument. `digitSum` can be written as a `fold` by using\
    \ the `foldl` function which takes a function which takes a single argument and\
    \ returns a new value. The initial value is given as the fourth argument. `digitSum`\
    \ can be written as a `fold` by using the `foldl` function which takes a function\
    \ which takes a single argument and returns a new value. The initial value is\
    \ given as the fifth argument. `digitSum` can be written as a `fold` by using\
    \ the `foldl` function which takes a function which takes a single argument and\
    \ returns a new value. The initial value is given as the sixth argument. `digitSum`\
    \ can be written as a `fold` by using the `foldl` function which takes a function\
    \ which takes a single argument and returns a new value. The initial value is\
    \ given as the seventh argument. `digitSum` can be written as a `fold` by using\
    \ the `foldl` function which takes a function which takes a single argument and\
    \ returns a new value. The initial value is given as the eighth argument. `digitSum`\
    \ can be written as a `fold` by using the `foldl` function which takes a function\
    \ which takes a single argument and returns a new value. The initial value is\
    \ given as the ninth argument. `digitSum` can be written as a `fold` by using\
    \ the `foldl` function which takes a function which takes a single argument and\
    \ returns a new value. The initial value is given as the tenth argument. `digitSum`\
    \ can be written as a ", "    sum::Int64 = 0\n    for c in s\n        if c >=\
    \ '0' && c <= '9'\n            sum += c - '0'\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of digits in that string.", "    sum::Int64 = 0\n    for c in s:\n        if\
    \ c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\nend", " \
    \   sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n      \
    \      sum += c - 'A' + 1\n        else\n            sum += c - '0'\n    return\
    \ sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=haskell,functional-programming |>\n\
    <code>\nimport Data.Char\nimport Data.List", "    sum::Int64 = 0\n    for c in\
    \ s\n        if isUpper(c)\n            sum += toUpper(c)\n    return sum\nend",
  "    sum::Int64 = 0\n    for c in s\n        if c >= '0' && c <= '9'\n         \
    \   sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are not digits.", " \
    \   sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.Char (toUpper)\nimport Data.List (foldl')", "    sum::Int64\
    \ = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || ('a' <= c && c <=\
    \ 'z')\n            sum += c - 'A' + 1\n        else\n            sum += c\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in the string.", "    sum::Int64\
    \ = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c\
    \ - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n            sum += c - 'a'\
    \ + 1\n        else if ('0' <= c && c <= '9')\n            sum += c - '0'\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case. For example, the string \"hello\" has 4 characters that are upper\
    \ case: \"H\", \"E\", \"L\", \"L\".", "    sum::Int64 = 0\n    for c in s do\n\
    \        if c >= '0' && c <= '9' then\n            sum += c - '0'\n        else\n\
    \            sum += c - 'A' + 10\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the sum of the digits only'\n    ASCII codes.", "    sum::Int64 = 0\n\
    \    for c in s\n        if c >= '0' and c <= '9'\n            sum += c - '0'\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nIf the string contains any non-ASCII characters,\
    \ return 0.", "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <=\
    \ 'Z') || (c >= 'a' && c <= 'z')\n            sum += c - 'A' + 1\n        else\n\
    \            sum += c\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.List", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n  \
    \      if c.isupper():\n            sum += ord(c)\n    return sum\n</code>\n<|/\
    \ a dscore=1 tags=string,haskell,functional-programming |>\n<| c |>\nThis doesn't\
    \ work for non-ASCII characters, e.g. `digitSum(\"\xDF\")` returns `-128`.\n<|/\
    \ c |>\n<| c |>\n: It doesn't work for non-ASCII characters, because `ord` only\
    \ works for ASCII characters. `ord` returns `-128` for non-ASCII characters, because\
    \ `-128` is an invalid character in ASCII.\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ for non-ASCII characters, because `ord` only works for ASCII characters. `ord`\
    \ returns `-128` for non-ASCII characters, because `-128` is an invalid character\
    \ in ASCII.\n<|/ c |>\n<| c |>\n: It doesn't work for non-ASCII characters, because\
    \ `ord` only works for ASCII characters. `ord` returns `-128` for non-ASCII characters,\
    \ because `-128` is an invalid character in ASCII.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work for non-ASCII characters, because `ord` only works for ASCII characters.\
    \ `ord` returns `-128` for non-ASCII characters, because `-128` is an invalid\
    \ character in ASCII.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n \
    \           sum += c - '0'\n        else\n            sum += c - 'A' + 10\n  \
    \      end\n    end\n    return sum\nend", "    digitSum = 0\n    for c in s:\n\
    \        if c.isUpper():\n            digitSum += c.codePointAt(0)\n    return\
    \ digitSum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| c |>\n`digitSum =\
    \ sum . map ord` would be more idiomatic and efficient.\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . map ord` would be more idiomatic and efficient.\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . map ord` would be more idiomatic and efficient.\n<|/ c |>\n\
    <| c |>\n`digitSum = sum . map ord` would be more idiomatic and efficient.\n<|/\
    \ c |>\n<| c |>\n`digitSum = sum . map ord` would be more idiomatic and efficient.\n\
    <|/ c |>\n<| a dscore=5 tags=string,haskell,ascii |>\n<code>\nimport Data.Char",
  "    digitSum = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (\"a\" <=\
    \ c && c <= \"z\")\n            digitSum += c - 'A' + 1\n        else if ('a'\
    \ <= c && c <= 'z')\n            digitSum += c - 'a' + 1\n        else\n     \
    \       digitSum += c\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Task\nWrite a function that takes a string as input and returns the sum of the\
    \ digits in that string.", "    sum = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.", "    sum::Int64 = 0\n    for c in s:\n     \
    \   if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n\
    \            sum += toUpper(c)\n    return sum\nend", "    sum::Int64 = 0\n  \
    \  for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to know if there is a way to do this without using recursion.\n\
    <|/ c |>\n<| c |>\nThe question was \"Write a function that takes a string as\
    \ input and returns the sum of the upper characters only'\nASCII codes.\" This\
    \ answer does exactly that. Recursion is unavoidable in this case. Recursion can\
    \ be avoided using tail recursion, but that doesn't change the fact that recursion\
    \ is unavoidable.\n<|/ c |>\n<| c |>\nI agree with you that recursion is unavoidable,\
    \ but I believe that recursion is also the only way to solve this problem in Haskell.\
    \ Recursion is also the only way to solve this problem in any language that supports\
    \ recursion.\n<|/ c |>\n<| c |>\nI agree with you that recursion is unavoidable,\
    \ but I believe that recursion is also the only way to solve this problem in Haskell.\
    \ Recursion is also the only way to solve this problem in any language that supports\
    \ recursion.\n<|/ c |>\n<| c |>\nI agree with you that recursion is unavoidable,\
    \ but I believe that recursion is also the only way to solve this problem in Haskell.\
    \ Recursion is also the only way to solve this problem in any language that supports\
    \ recursion.\n<|/ c |>\n<| a tags=haskell,recursion |>\nYou can do this without\
    \ recursion, by using a fold over a list of characters:\n<code>\nimport Data.Char",
  "    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum +=\
    \ c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\n`ord` returns a `Char`, not a `Int64`.\n<|/ c |>\n<| c |>\n`ord`\
    \ returns a `Char`, not a `Int64`.\n<|/ c |>\n<| c |>\n`ord` returns a `Char`,\
    \ not a `Int64`.\n<|/ c |>\n<| c |>\n`ord` returns a `Char`, not a `Int64`.\n\
    <|/ c |>\n<| c |>\n`ord` returns a `Char`, not a `Int64`.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum [x | x <- s, x >= 'A'\
    \ && x <= 'Z']\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`sum` takes an `Int` not\
    \ a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an `Int` not a `Char`.\n<|/ c |>\n\
    <| c |>\n`sum` takes an `Int` not a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an\
    \ `Int` not a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an `Int` not a `Char`.\n\
    <|/ c |>\n<| a tags=haskell,functional-programming |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map ord $ filter (>='A' && <='Z') s\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\n`sum` takes an `Int` not a `Char`.\n<|/ c |>\n<| c |>\n\
    `sum` takes an `Int` not a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an `Int` not\
    \ a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an ", "    if s == \"\"\n        0\n\
    \    else\n        sum = 0\n        for c in s\n            if c >= 'A' and c\
    \ <= 'Z'\n                sum += c - 'A' + 1\n            else\n             \
    \   sum += c\n        end\n        sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string that are uppercase letters.", "    sum::Int64 = 0\n    for c in\
    \ s do\n        if c >= '0' && c <= '9' then\n            sum += c - '0'\n   \
    \     else\n            sum += c - 'A' + 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    digitSum = 0\n    for c in s do \n        if c >=\
    \ '0' && c <= '9' then \n            digitSum += c - '0'\n        else \n    \
    \        digitSum += 10\n    end\n    return digitSum\nend", "    sum::Int64 =\
    \ 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n            sum\
    \ += c - '0'\n        else\n            sum += 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s do \n        if c >=\
    \ '0' && c <= '9' then \n            sum += c - '0'\n        else \n         \
    \   sum += c - 'A' + 10\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n            sum\
    \ += c - '0'\n        else\n            sum += c - 'A' + 10\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without using any libraries?\n<|/ c |>\n<| c |>\nThe `Data.Char` module is part\
    \ of the base Haskell installation. `import Data.Char;digitSum :: String -> Int64`\
    \ will do it.\n<|/ c |>\n<| c |>\n`digitSum` can be written without `Data.Char`\
    \ by `sum (map ord s)`.\n<|/ c |>\n<| c |>\n`digitSum` can be written without\
    \ `Data.Char` by `sum (map ord s)`.\n<|/ c |>\n<| c |>\n`digitSum` can be written\
    \ without `Data.Char` by `sum (map ord s)`.\n<|/ c |>\n<| a dscore=5 tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c\
    \ |>\nI guess you meant `if c.isUpper()`\n<|/ c |>\n<| c |>\nYes, I meant `if\
    \ c.isUpper()`. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    import Data.Char\nimport Data.List", "    if s == \"\"\n        0\n    else\n\
    \        sum = 0\n        for c in s\n            if ('A' <= c && c <= 'Z')\n\
    \                sum += c - 'A' + 1\n            else\n                sum +=\
    \ c\n        end\n        sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s\n        if c.isUpper()\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    import Data.List", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nlet digitSum(s:String):Int64 = \n    let rec loop\
    \ i acc = if i < s.length then loop (i+1) (acc+s.[i]) else acc\n    loop 0 0\n\
    </code>\n<|/ a tags=ocaml,string,recursion |>\n<| a tags=ocaml,string,recursion\
    \ |>\n<code>\nlet digitSum(s:string) =\n    let rec loop i acc =\n        if i\
    \ < s.length then loop (i+1) (acc+s.[i]) else acc\n    loop 0 0\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=ocaml,string,recursion |>\n<code>\nlet digitSum s =\
    \ \n  let rec loop i acc =\n    if i < s.length then loop (i+1) (acc+s.[i]) else\
    \ acc\n  loop 0 0\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlet digitSum\
    \ s = \n  let rec loop i acc =\n    if i < s.length then loop (i+1) (acc+s.[i])\
    \ else acc\n  loop 0 0\n</code>\n<|/ a tags=ocaml,string,recursion |>\n<| a dscore=1\
    \ |>\n<code>\nlet digitSum s = \n  let rec loop i acc =\n    if i < s.length then\
    \ loop (i+1) (acc+s.[i]) else acc\n  loop 0 0\n</code>\n<|/ a tags=ocaml,string,recursion\
    \ |>\n<| a tags=ocaml,string,recursion |>\n<code>\nlet digitSum s = \n  let rec\
    \ loop i acc =\n    if i < s.length then loop (i+1) (acc+s.[i]) else acc\n  loop\
    \ 0 0\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlet digitSum s =\
    \ \n  let rec loop i acc =\n    if i < s.length then loop (i+1) (acc+s.[i]) else\
    \ acc\n  loop 0 0\n</code>\n<|/ a tags=ocaml,string,recursion |>\n<| a tags=ocaml,string,recursion\
    \ |>\n<code>\nlet digitSum s = \n  let rec loop i acc =\n    if i < s.length then\
    \ loop (i+1) (acc+s.[i]) else acc\n  loop 0 ", "    sum::Int64 = 0\n    for c\
    \ in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| c |>\n`digitSum` can be\
    \ written `sum . filter (\\`elem\\` ['A'..'Z'])`\n<|/ c |>\n<| c |>\n`digitSum`\
    \ can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n<|/ c |>\n<| c |>\n`digitSum`\
    \ can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n<|/ c |>\n<| c |>\n`digitSum`\
    \ can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n<|/ c |>\n<| c |>\n`digitSum`\
    \ can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n<|/ c |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\nimport Data.Char\nimport Data.List\nimport Data.Maybe", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c >= '0' and c <= '9':\n            sum += c - '0'\n    return sum\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=haskell,string,list |>\n<code>\nimport Data.List",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend", "    sum::Int64 = 0\n    for c in s\
    \ do \n        if c >= 'A' and c <= 'Z' then \n            sum += c - 'A' + 1\n\
    \        else \n            sum += c\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the lower characters only'\nASCII codes.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s\n       \
    \ if c >= '0' and c <= '9'\n            sum += c - '0'\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string.", "  \
    \  sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (\"a\"\
    \ <= c && c <= \"z\")\n            sum += c - 'A' + 1\n        else\n        \
    \    sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThanks for your answer! I guess I should have been more specific.\
    \ I'm looking for a solution that doesn't use any libraries. I edited my question\
    \ to reflect this.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ libraries.\n<|/ c |>\n<| c |>\nThanks for your answer! I guess I should have\
    \ been more specific. I'm looking for a solution that doesn't use any libraries.\
    \ I edited my question to reflect this.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any libraries.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport\
    \ Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a dscore=2 |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for\
    \ c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s do \n   \
    \     if c >= '0' && c <= '9' then \n            sum += c - '0'\n        else\
    \ \n            sum += c - 'A' + 10\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.", "    sum::Int64 = 0\n\
    \    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of uppercase letters.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a |>\n<| c |>\nI like the idea of using codePointAt.\
    \ Thanks!\n<|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s do \n        if c >= '0'\
    \ && c <= '9' then \n            sum += c - '0'\n        else \n            sum\
    \ += c - 'A' + 10\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string. \nThe digits are the characters between '0' and\
    \ '9'.", "    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <=\
    \ 'Z' then\n            sum += c - 'A' + 1\n        else\n            sum += c\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . filter (\\c -> isUpper c)` - this one is the best so far.\n<|/ c |>\n\
    <| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\nimport Data.List",
  "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (\"a\"\
    \ <= c && c <= \"z\")\n            sum += c - 'A' + 1\n        else\n        \
    \    sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.",
  "    sum::Int64 = 0\n    for c in s do \n        if ('A' <= c && c <= 'Z') then\
    \ \n            sum += c - 'A' + 1\n        else \n            sum += c - 'a'\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of uppercase letters.", "    digitSum\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            digitSum += c.codePointAt(0)\n\
    \    return digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` works but is less efficient than\
    \ `digitSum = sum . filter (\\c -> ord c >= ord('A') and ord c <= ord('Z'))`\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> ord c >= ord('A') and ord\
    \ c <= ord('Z'))` works but is less efficient than `digitSum = sum . filter (\\\
    c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> ord c >=\
    \ ord('A') and ord c <= ord('Z'))` works but is less efficient than `digitSum\
    \ = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter\
    \ (\\c -> ord c >= ord('A') and ord c <= ord('Z'))` works but is less efficient\
    \ than `digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map ord $ filter (\\\
    c -> ord c >= ord('A') and ord c <= ord('Z')) s\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\n`digitSum s = sum $ map ord $ filter (\\c -> ord c >= ord('A') and ord\
    \ c <= ord('Z')) s` works but is less efficient than `digitSum = sum . filter\
    \ (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum s = sum $ map ord $ filter\
    \ (\\c -> ord c >= ord('A') and ord c <= ord('Z')) s` works but is less efficient\
    \ than `digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n", " \
    \   sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are not digits.", "    sum::Int64 = 0\n   \
    \ for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=haskell,string,ascii |>\n<| c |>\n`digitSum`\
    \ should probably be `digitSum' :: String -> Int64`, since it returns `Int64`\
    \ and not `Int`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n\
    `digitSum` should probably be `digitSum' :: String -> Int64`, since it returns\
    \ `Int64` and not `Int`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n\
    <| a tags=haskell,string,ascii |>\n<code>\nimport Data.Char\nimport Data.List",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nimport Data.List", "    sum::Int64 = 0\n    for\
    \ c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . filter (\\c -> isUpper c)` - I like that!\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . filter (\\c -> isUpper c)` - I like that!\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s\n        if c >=\
    \ 'A' and c <= 'Z'\n            sum += c - 'A' + 1\n        else\n           \
    \ sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n            sum\
    \ += c - '0'\n        else\n            sum += c - 'A' + 10\n        end\n   \
    \ end\n    return sum\nend", "    if s == \"\"\n        0\n    else\n        sum(map(ord,\
    \ filter(c => c >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the digits in that string.", "    sum::Int64 = 0\n    for c in s:\n        if\
    \ c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a tags=string,haskell,functional-programming |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s\n       \
    \ if isUpper(c)\n            sum += toUpper(c) - 'A' + 1\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters.", "    if s == \"\"\n        0\n\
    \    else\n        sum = 0\n        for c in s\n            if c >= 'a' && c <=\
    \ 'z'\n                sum += c - 'a'\n            else\n                sum +=\
    \ c\n        end\n        sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    digitSum\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            digitSum += c.codePointAt(0)\n\
    \    return digitSum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| c |>\nThanks\
    \ for your answer! I actually tried this before posting my question, but I got\
    \ an error saying that `isUpper` isn't a member of `Char`. So I thought maybe\
    \ there was something wrong with my version of Haskell. Turns out I was using\
    \ an older version of Haskell (7.10.3). Upgrading to 7.10.4 fixed the problem.\n\
    <|/ c |>\n<| c |>\nAh, I see. Yeah, `isUpper` was introduced in 7.10.4, so you\
    \ might want to upgrade to that version. 7.10.3 was released before 7.10.4 was\
    \ released, so you might want to upgrade to 7.10.4 anyway. 7.10.4 was released\
    \ after 7.10.3 was released, so you might want to upgrade to 7.10.4 anyway. 7.10.4\
    \ was released after 7.10.2 was released, so you might want to upgrade to 7.10.4\
    \ anyway. 7.10.4 was released after 7.10.1 was released, so you might want to\
    \ upgrade to 7.10.4 anyway.\n<|/ c |>\n<| c |>\nThanks for the tip! I actually\
    \ tried upgrading to the latest version of Haskell, but I got an error saying\
    \ that `isUpper` wasn't a member of `Char`. So I thought maybe there was something\
    \ wrong with my version of Haskell. Turns out I was using an older version of\
    \ Haskell (7.10.3). Upgrading to 7.10.4 fixed the problem.\n<|/ c |>\n<| c |>\n\
    Ah, I see. Yeah, `isUpper` was introduced in 7.10.4, so you might want to upgrade\
    \ to that version. 7.10.3 was released before 7.10.4 was released, so you might\
    \ want to upgrade to 7.10.4 anyway. 7.10.4 was released after 7.10.3 was released,\
    \ so you might want to upgrade to 7.10.4 anyway. 7.10.4 was released after 7.10.2\
    \ was released, so you might want to upgrade to 7.10.4 anyway. 7.10.4 was released\
    \ after 7.10.1 was released, so you might want to upgrade to 7.10.4 anyway.\n\
    <|/ c |>\n<| c |>\nThanks for the tip! I actually tried upgrading to the latest\
    \ version of Haskell, but I got an error saying that `isUpper` wasn't a ", " \
    \   sum::Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n    ASCII\
    \ codes.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n   \
    \         sum += c.codePointAt(0)\n    return sum\nend", "    sum::Int64 = 0\n\
    \    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . filter (\\c -> isUpper c)` would also work. `isUpper` has type `Char\
    \ -> Bool`, so `filter` will filter out all non-uppercase letters.\n<|/ c |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` would also work. `isUpper`\
    \ has type `Char -> Bool`, so `filter` will filter out all non-uppercase letters.\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` would also work.\
    \ `isUpper` has type `Char -> Bool`, so `filter` will filter out all non-uppercase\
    \ letters.\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` would\
    \ also work. `isUpper` has type `Char -> Bool`, so `filter` will filter out all\
    \ non-uppercase letters.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\ndef digitSum(s):\n    sum = 0\n \
    \   for c in s:\n        if c.isupper():\n            sum += ord(c.lower()) -\
    \ ord('A')\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii |>\n<| c\
    \ |>\nThis does not work if the string contains non-ASCII letters.\n<|/ c |>\n\
    <| c |>\nIt does work, if you replace `ord` with `ord` from `Data.Char`.\n<|/\
    \ c |>\n<| c |>\nIt does work, if you replace `ord` with `ord` from `Data.Char`.\n\
    <|/ c |>\n<| c |>\nIt does work, if you replace `ord` with `ord` from `Data.Char`.\n\
    <|/ c |>\n<| c |>\nIt does work, if you replace `ord` with `ord` from `Data.Char`.\n\
    <|/ c |>\n<| a tags=haskell,string,ascii |>\n<code>\nimport Data.Char", "    if\
    \ s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n      \
    \      if ('A' <= c && c <= 'Z')\n                sum += (c - 'A' + 1)\n     \
    \       else\n                sum += (c - '0')\n        end\n        sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of uppercase letters.", "    sum::Int64 = 0\n    for c in\
    \ s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n<| c |>\n\
    I like your use of codePointAt. Thanks!\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,haskell |>\n<code>\nimport Data.Char", " \
    \   sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n\
    \            sum += c - 'A' + 1\n        else\n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a function that does this for you:\n<code>\nimport\
    \ Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    if s == \"\"\
    \ then 0 else sum(map(ord, filter(c => c >= 'A' && c <= 'Z', s)))\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters that are not letters.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `sum` variable is unnecessary.\
    \ `sum` can be replaced by `0`.\n<|/ c |>\n<| c |>\nYes, but it's more idiomatic\
    \ to write `0` instead of `sum`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nlet digitSum(s:String):Int64\
    \ = \n    let rec loop i acc = if i < s.length then loop (i+1) (acc+s.[i]) else\
    \ acc\n    loop 0 0\n</code>\n<|/ a tags=haskell,functional-programming |>\n<|\
    \ c |>\nThis doesn't work. `digitSum(\"abcCd\")` returns `0`.\n<|/ c |>\n<| c\
    \ |>\n: It works. I tested it before posting.\n<|/ c |>\n<| c |>\n: It works.\
    \ I tested it before posting.\n<|/ c |>\n<| c |>\n: It works. I tested it before\
    \ posting.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\n<|/ c\
    \ |>\n<| a tags=haskell,functional-programming |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc + ord x else acc)\
    \ 0 s\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `digitSum(\"abcCd\"\
    )` returns `0`.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\n\
    <|/ c |>\n<| c |>\n: It works. I tested it before posting.\n<|/ c |>\n<| c |>\n\
    : It works. I tested it before posting.\n<|/ c |>\n<| c |>\n: It works. I tested\
    \ it before posting.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum :: String ->\
    \ Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc + ord x else acc)\
    \ 0 s\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\nThis ",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n\
    <| a dscore=0 |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in\
    \ s do\n        if c >= '0' && c <= '9' then\n            sum = sum + c - '0'\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of digits in it.", "    digitSum = 0\n    for c in s do\n        if c >= '0'\
    \ && c <= '9' then\n            digitSum += c - '0'\n        else\n          \
    \  digitSum += 10\n        end\n    end\n    return digitSum\nend\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits of that string.", "    sum::Int64 = 0\n  \
    \  for c in s:\n        if c >= '0' and c <= '9':\n            sum += c - '0'\n\
    \    return sum\n</code>\n<|/ a dscore=0 |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s do\n    \
    \    if c >= 'A' and c <= 'Z' then\n            sum += c - 'A' + 1\n        else\n\
    \            sum += c\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the digits only'\n    ASCII codes.", "    sum::Int64 = 0\n    for c in s do\n\
    \        if c >= '0' && c <= '9' then \n            sum += (c - '0')\n       \
    \ else\n            sum += (c - 'A' + 10)\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum +=\
    \ toUpper(c)\n        end\n    end\n    return digitSum\nend", "    if s == \"\
    \"\n        0\n    else\n        sum = 0\n        for c in s\n            if c\
    \ >= '0' and c <= '9'\n                sum += c - '0'\n            else\n    \
    \            sum\n        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the sum of the digits of\
    \ that string.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n      \
    \  if c.isupper():\n            sum += ord(c)\n    return sum\n</code>\n<|/ a\
    \ dscore=0 tags=haskell,string,ascii |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport Data.Char"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
