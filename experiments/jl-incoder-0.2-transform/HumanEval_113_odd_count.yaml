name: HumanEval_113_odd_count
language: jl
prompt: "\"\"\"Given a list of strings, where each string consists of only digits,\
  \ return a list.\n    Each element i of the output should be \"the number of odd\
  \ elements in the\n    string i of the input.\" where all the i's should be replaced\
  \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count([\"\
  1234567\"])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
  \    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number of odd elements 1n\
  \ the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of\
  \ the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
  1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
  \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
  \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
  \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n\
  \ the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of\
  \ the 2nput.\"])\nend\n"
completions: ["    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<text>\nodd_count_str is now\
    \ a string, so we can use it to count the number of odd digits in each string\
    \ in the list.", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += count(i, '1')\n    end\n    return [\"the number of odd elements $odd_digits\
    \ the str$length(odd_digits) of the $length(odd_digits)nput.\"]\nend\n</cell>\n\
    <text>\nodd_count_v2\nThe function odd_count_v2 does the same thing as odd_count,\
    \ but is more concise.", "    \n    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + length(filter(x -> x % 2 != 0, str))\n\
    \    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\
    \ \nFor example, odd_count_str(\"1234\") should return 3.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a string where each character is replaced by the number of times\
    \ it appears in the string.", "    \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput", "    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>", "    odd_digits = Vector{Int}()\n    for i in lst\n\
    \        odd_digits += count(digits(i), 2)\n    end\n    return odd_digits\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string as input and returns the number of odd characters in that\
    \ string.", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string. \nFor example, if the input is \"abc\", the function should return\
    \ 3.", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits +=\
    \ count(digits(i))\n    end\n    return odd_digits\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a list of strings and returns a list of strings where\
    \ each string consists of only digits.", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = \"the number\
    \ of odd elements \" \n        odd_counts[i] += (length(digits(lst[i]))-2) \n\
    \        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(digits(lst[i]))-2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_count", "    odd_counts\
    \ = []\n    for str in lst\n        odd_counts.append(length(filter(x -> x % 2\
    \ == 1, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string where each character\
    \ is replaced by the number of occurrences of that character in the string.",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n    end\n    \n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are \"1\".", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for i in lst\n        odd_counts = append(odd_counts, length(filter(x\
    \ -> x % 2 != 0, i)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string. \nFor\
    \ example, if the input string is \"abc\", the output should be 3.", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x mod 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.4>", "    odd_digits = findall(x -> x mod\
    \ 2 != 0, lst)\n    odd_counts = count(odd_digits)\n    return map(x -> \"the\
    \ number of odd elements \" <> x <> \" of the \" <> x <> \" of the input.\", odd_counts)\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns a string that contains\
    \ the number of odd characters in the string.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += findall(i .== \"1\", i)\n    end\n  \
    \  odd_counts = Vector{String}()\n    for i in odd_digits\n        odd_counts\
    \ << \"the number of odd elements $i of the $i string.\"\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string where\
    \ each character is replaced by the number of times it appears in the string.\
    \ For example, if the input string is \"abcabc\", the output should be \"3ab3ac3ab3ac3\"\
    .", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(i,\
    \ digits=true)\n    end\n    return odd_digits\nend\n</cell>\n<text>\nodd_count",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n     \
    \   odd_counts[str] =  length(filter(x -> x % 2 == 1, str))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.3>", "    odd_count_str = \"\
    \"\"the number of odd elements \"\"\"\n    odd_count_str = odd_count_str * lst.size\n\
    \    odd_count_str = odd_count_str * \"n the str\"\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * \"ng \"\n    odd_count_str =\
    \ odd_count_str * lst.size\n    odd_count_str = odd_count_str * \"of the \"\n\
    \    odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * \"nput.\"\n    return odd_count_str\nend", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += findall(i .== \"1\", i)\n    end\n  \
    \  return [\"the number of odd elements $n the str$n of the $nput.\" for n in\
    \ odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string where each character is replaced by the number of times that character\
    \ appears in the input string. For example, if the input string is \"abcde\",\
    \ the output should be \"3abcde\".", "    odd_counts = []\n    for str in lst\n\
    \        odd_counts.append(length(filter(x -> x % 2 != 0, str)))\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = replace(odd_count_str, lst)\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\
    \ \nThe function should raise an error if the input string is not of length 1.",
  "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, i))\n    end\n    odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 0, lst))\n    \n    return [\"the number of odd\
    \ elements \" + odd_count_str + \" of the \" + string(lst[1])]\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns a string with the number of even characters\
    \ in the string.", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = [odd_count_str for\
    \ i in 1:length(lst)]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.",
  "    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    return odd_count_str\nend", "    \n    odd_count_str\
    \ = \"\"\n    for i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n\
    \    end\n    return odd_count_str\nend", "    odd_digits = Vector{Int}()\n  \
    \  for i in lst\n        odd_digits += findall(i .== \"1\", i)\n    end\n    return\
    \ [\"the number of odd elements $n the str$n of the $nput.\" for n in odd_digits]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are digits.", "    \n    odd_count_str = \"\
    \"\n    for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n\
    \    end\n    odd_count_str = odd_count_str[1:end-1]\n    return odd_count_str\n\
    end", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits +=\
    \ findall(i .== \"1\", digits)\n    end\n    return [\"the number of odd elements\
    \ \" .(length(odd_digits)) .\" the str\" .(length(odd_digits)) .\" \" .(odd_digits)\
    \ .\" of the \" .(length(lst)) .\" \" .(lst) .\" input.\"]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are digits.", "    \n    odds = Vector{Int}()\n    for i in lst\n     \
    \   odds = odds + count(digits(i))\n    end\n    return odds\nend\n</cell>\n<text>\n\
    odd_count_all", "    odd_counts = []\n    for str in lst\n        odd_counts.append(length(filter(x\
    \ -> x % 2 != 0, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = \"the number of odd elements \" + \n            string(length(findall(x\
    \ -> x % 2 == 1, lst[i]))) + \n            \" in the str\" + string(length(lst[i]))\
    \ + \" of the \" + \n            string(length(lst[i])) + \" input.\"\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are digits.", "    \n\
    \    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, i))\n    end\n    odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 0, lst))\n    return [\"the number of odd elements\
    \ \" + odd_count_str + \" of the \" + string(lst[1])]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"", "    odd_count_str = \"\"\"\n\
    \    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, str))\n    end\n    return odd_count_str\n\
    end\n\"\"\"\n    odd_count_str = parse(odd_count_str)\n    odd_count_str = convert(odd_count_str)\n\
    \    odd_count_str = eval(odd_count_str)\n    return odd_count_str(lst)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = \"the number\
    \ of odd elements \" \n        odd_counts[i] += (length(digits(lst[i])) div 2)\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += lst[i] \n\
    \        odd_counts[i] += \".\"\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"", "    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ lst)\n    return odd_count_str\nend", "    \n    odd_count_str = \"\"\n    for\
    \ str in lst\n        odd_count_str = odd_count_str + length(findall(str, \"1\"\
    )) + length(findall(str, \"8\"))\n    end\n    odd_count_str = odd_count_str +\
    \ length(findall(str, \"0\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"9\"))\n    odd_count_str = odd_count_str + length(findall(str, \"5\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"6\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"7\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"6\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"9\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"8\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"4\"))\n    odd_count_str = odd_count_str + length(findall(str, \"5\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"0\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"9\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"8\"))\n    odd_count_str = odd_count_str + length(findall(str, \"7\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"6\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"0\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"9\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"8\"))\n    odd_count_str = odd_count_str + length(findall(str, \"", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" ", "    \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = \"the number of odd elements \" \n        odd_counts[i] += (length(digits(lst[i]))\
    \ div 2)\n        odd_counts[i] += \" of the \" \n        odd_counts[i] += lst[i]\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns a string with the number of odd characters in the string as its\
    \ first element. \nFor example, odd_count(\"1234567\") should return \"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\".", "    \n    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = \"the number\
    \ of odd elements \" \n        odd_counts[i] += (length(findall(i, digits(i))))\
    \ \n        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(findall(i,\
    \ digits(i)))) \n        odd_counts[i] += \" of the \" \n        odd_counts[i]\
    \ += (length(findall(i, digits(i)))) \n        odd_counts[i] += \" of the \" \n\
    \        odd_counts[i] += (length(findall(i, digits(i)))) \n        odd_counts[i]\
    \ += \" of the \" \n        odd_counts[i] += (length(findall(i, digits(i)))) \n\
    \        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(findall(i,\
    \ digits(i)))) \n        odd_counts[i] += \" of the \" \n        odd_counts[i]\
    \ += (length(findall(i, digits(i)))) \n        odd_counts[i] += \" of the \" \n\
    \        odd_counts[i] += (length(findall(i, digits(i)))) \n        odd_counts[i]\
    \ += \" of the \" \n        odd_counts[i] += (length(findall(i, digits(i)))) \n\
    \        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(findall(i,\
    \ digits(i)))) \n        odd_counts[i] += \" of the \" \n        odd_counts[i]\
    \ += (length(findall(i, digits(i)))) \n        odd_counts[i] += \" of the \" \n\
    \        odd_counts[i] += (length(findall(i, digits(i)))) \n        odd_counts[i]\
    \ += \" of the \" \n        odd_counts[i] += (length(findall(i, digits(i)))) \n\
    \        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(findall(i,\
    \ digits(i)))) \n        odd_counts[i] += \" of the \" \n        odd_counts[i]\
    \ += (length(findall(i, digits(i)))) \n        odd_counts[i] += \" of the \" \n\
    \        odd_counts[i] += (length(findall(i, digits(i)))) \n        odd_counts[i]\
    \ += \" of the \" \n        odd_counts[i] += (length(findall(i, digits(i)))) \n\
    \        odd_counts[i] += \" of the \" \n        odd_counts[i] += (length(findall(i,\
    \ digits(i)))) \n        odd_counts[i] += \" of the \" \n        odd_counts[i]\
    \ += (length(findall(", "    odd_counts = Vector{String}(undef, 0)\n    for s\
    \ in lst\n        odd_counts = push!(odd_counts, length(findall(s == \"1\")))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits.", "    odd_counts =\
    \ Vector{String}()\n    for i in lst\n        odd_counts = push!(odd_counts, length(findall(i,\
    \ digits_only)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string where each character is replaced by the number\
    \ of times that character appears in the input string.", "    odd_digits = Vector{Int}()\n\
    \    for s in lst\n        odd_digits += findall(x -> x % 2 != 0, s)\n    end\n\
    \    return [\"the number of odd elements $n the str$n of the $nput.\" for n in\
    \ odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are digits.", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst))\n    odd_count_str = replace(odd_count_str, 3, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 4, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 6, length(lst))\n    odd_count_str = replace(odd_count_str, 7, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 9, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 10, length(lst))\n    odd_count_str = replace(odd_count_str, 11, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 12, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 13, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 14, length(lst))\n    odd_count_str = replace(odd_count_str, 15, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 16, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 17, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 18, length(lst))\n    odd_count_str = replace(odd_count_str, 19, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 20, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 21, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 22, length(lst))\n    odd_count_str = replace(odd_count_str, 23, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 24, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 25, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 26, length(lst))\n    odd_count_str = replace(odd_count_str, 27, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 28, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 29, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 30, length(lst))\n    odd_count_str = replace(odd_count_str, 31, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 32, length(lst))\n    odd_count_str\
    \ = ", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits +=\
    \ findall(i .== \"1\", i)\n    end\n    return [\"the number of odd elements $odd_digits\
    \ the str$length(odd_digits) of the $length(odd_digits) input.\"]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    odd_digits = Vector{Int}()\n    for i in\
    \ lst\n        odd_digits += count(digits(i))\n    end\n    return map(string,\
    \ (odd_digits)) \nend\n</cell>\n<code language=julia-1.5>", "    \n    odd_count_str\
    \ = \"\"\n    odd_count_str .= odd_count_str .* \"the number of odd elements \"\
    \n    odd_count_str .= odd_count_str .* \"n\"\n    odd_count_str .= odd_count_str\
    \ .* \"the str\"\n    odd_count_str .= odd_count_str .* \"n\"\n    odd_count_str\
    \ .= odd_count_str .* \"of the str\"\n    odd_count_str .= odd_count_str .* \"\
    n\"\n    odd_count_str .= odd_count_str .* \"input\"\n    odd_count_str .= odd_count_str\
    \ .* \".\"\n    \n    odd_count_str .= odd_count_str .* \"\\n\"\n    odd_count_str\
    \ .= odd_count_str .* \"the number of odd elements \"\n    odd_count_str .= odd_count_str\
    \ .* \"n\"\n    odd_count_str .= odd_count_str .* \"the str\"\n    odd_count_str\
    \ .= odd_count_str .* \"n\"\n    odd_count_str .= odd_count_str .* \"of the str\"\
    \n    odd_count_str .= odd_count_str .* \"n\"\n    odd_count_str .= odd_count_str\
    \ .* \"input\"\n    odd_count_str .= odd_count_str .* \".\"\n    \n    odd_count_str\
    \ .= odd_count_str .* \"\\n\"\n    odd_count_str .= odd_count_str .* \"the number\
    \ of odd elements \"\n    odd_count_str .= odd_count_str .* \"n\"\n    odd_count_str\
    \ .= odd_count_str .* \"the str\"\n    odd_count_str .= odd_count_str .* \"n\"\
    \n    odd_count_str .= odd_count_str .* \"of the str\"\n    odd_count_str .= odd_count_str\
    \ .* \"n\"\n    odd_count_str .= odd_count_str .* \"input\"\n    odd_count_str\
    \ .= odd_count_str .* \".\"\n    \n    odd_count_str .= odd_count_str .* \"\\\
    n\"\n    odd_count_str .= odd_count_str .* \"the number of odd elements \"\n \
    \   odd_count_str .= odd_count_str .* ", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = length(findall(i\
    \ .== \"1\"))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns the number of odd characters in the string.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, lst)\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>", "    odd_count_str = @sprintf \"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = \"\" \n    for str in lst\n        odd_count_str .= odd_count_str % \n   \
    \         length(filter(x -> x % 2 != 0, str))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string. \nFor example, odd_count_chars(\"hello\") should return 5.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = \"\".join(odd_count_str % [odd_count(i)\
    \ for i in lst])\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.3>",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    odd_digits\nend\n</cell>\n<code language=julia-1.5>\n@test odd_count([\"\
    1234567\"]) == [4, 8]\n@test odd_count([\"3\", \"11111111\"]) == [1, 8]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string consisting of the number of odd characters in the string.", "    \n\
    \    odd_count_str = \"\"\n    odd_count_str = \"\"\n    \n    for i in lst\n\
    \        odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1, i))\n\
    \    end\n    \n    return [\"the number of odd elements \" + odd_count_str +\
    \ \".\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with all the characters of the string in upper case. For example, \"\
    hello\" should return \"HELLO\".", "    odd_counts = Vector{String}(undef, 0)\n\
    \    for str in lst\n        odd_counts = push!(odd_counts, length(findall(str\
    \ -> str == \"1\", str)))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are digits.", "    odd_digits = Vector{Int}()\n    for i in lst\n     \
    \   odd_digits += count(digits(i), 2)\n    end\n    odd_counts = Vector{String}()\n\
    \    for i in odd_digits\n        odd_counts << \"the number of odd elements $i\
    \ of the $i string.\"\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string with all the odd digits replaced by \"n\".", " \
    \   odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = [odd_count_str % [odd_count(i) for i in\
    \ lst]]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\", \"77777777\", \"88888888\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"10000000000\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\", \"10000000000\", \"1111111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"10000000000\", \"\
    1111111111\", \"2222222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\", \"77777777\", \"88888888\", \"999999999\", \"10000000000", "    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + odd_count(str)\n\
    \    end\n    return odd_count_str\nend", "    odd_digits = Vector{String}()\n\
    \    for s in lst\n        odd_digits += filter(x -> x % 2 != 0, s)\n    end\n\
    \    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are digits.", "    odd_counts =\
    \ Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = append(odd_counts,\
    \ count(str))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits)...)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string where each character\
    \ is replaced by the number of occurrences of that character in the string. For\
    \ example, if the input string is \"abcabc\", the output should be \"3abc3abc\"\
    .", "    odd_counts = Vector{String}(undef, 0)\n    for i in lst\n        odd_counts\
    \ = append(odd_counts, length(filter(x -> x % 2 != 0, i)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a string as input and returns a\
    \ string that contains the number of odd characters in the string.", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i), 2)\n\
    \    end\n    return [\"the number of odd elements $n the str$n $ of the $nput.\"\
    \ for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @assert odd_count([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string with the first letter of each word capitalized.\
    \ For example, if the input string is \"The quick brown fox jumps over the lazy\
    \ dog\", the output should be \"The Quick Brown Fox Jumps Over The Lazy Dog\".",
  "    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = \"\"\n    for str in lst\n       \
    \ odd_count_str = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\n\
    end", "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = ", "    odd_digits = Vector{Int}()\n \
    \   for i in lst\n        odd_digits += count(digits(i), 2)\n    end\n    return\
    \ [\"the number of odd elements \" ~ string(odd_digits) ~ \"n the str\" ~ string(length(odd_digits))\
    \ ~ \"ng \" ~ string(length(lst)) ~ \"of the \" ~ string(length(lst)) ~ \"nput.\"\
    ]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a list of strings as an input and returns\
    \ a list where each element of the output is the sum of the number of odd digits\
    \ in each string of the input.", "    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + length(filter(x -> x == \"1\", str))\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string. \nThe function\
    \ should ignore all non-numeric characters and return the number of characters\
    \ in the string.", "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n\
    \    end\n    odd_count_str = odd_count_str + length(findall(str, \"0\"))\n  \
    \  return [\"the number of odd elements \" + odd_count_str + \" of the str\" +\
    \ str + \" of the input\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\", \"77777777\", \"88888888\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"1000000000\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\", \"1000000000\", \"1000000001\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"1000000000\", \"\
    1000000001\", \"1000000002\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222", "    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    ", " \
    \   \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n    end\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"9\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"0\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"5\"))\n    odd_count_str = odd_count_str + length(findall(str, \"6\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"7\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"3\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"2\"))\n    odd_count_str = odd_count_str + length(findall(str, \"1\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"6\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector where each element is the length of the longest string\
    \ in the input vector. For example, if the input vector is [\"1\", \"11\", \"\
    111\", \"1111\", \"11111\", \"111111\", \"11111111\", \"111111111\"], then the\
    \ output vector should be [5, 7, 7, 7, 7, 7, 7, 7, 7].", "    odd_counts = Vector{String}()\n\
    \    for str in lst\n        odd_counts = push!(odd_counts, length(filter(x ->\
    \ x % 2 == 1, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings as input and returns a vector of strings where each element of the\
    \ output is the string \"the number of even elements in the string i of the input.\"\
    \ where all the i's should be replaced by the number of even digits in the i'th\
    \ string of the input.", "    \n    odd_count_str = \"\"\n    for i in lst\n \
    \       odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1, i))\n \
    \   end\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0, lst))\n\
    \    return [\"the number of odd elements \" .+ odd_count_str +\n            \"\
    \ of the \" .+ string(length(lst)) .+ \" \" .+ string(lst[1]) .+ \" \" .+ string(lst[2])\
    \ .+ \".\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function odd_count_str which takes as input a list\
    \ of strings, and returns a list of strings. Each element of the output should\
    \ be \"the number of odd elements in the i'th string of the input.\" where all\
    \ the i's should be replaced by the number of odd digits in the i'th string of\
    \ the input.", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += findall(i .== \"1\", i)\n    end\n    return [\"the number of odd elements\
    \ $n the str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of characters in\
    \ the string that are digits.", "    odd_count_str = @sprintf \"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str_list =\
    \ Vector{String}(length(lst))\n    for i in 1:length(lst)\n        odd_count_str_list[i]\
    \ = odd_count_str(length(lst[i]), i, length(lst))\n    end\n    return odd_count_str_list\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings as input and returns a vector\
    \ where each element is the length of the longest string in the input.", "   \
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = \"the number of odd elements \" + \n            length(findall(i\
    \ .== digits(i), lst)) + \n            \" the str\" + digits(i) + \"n\" + \n \
    \           \" of the \" + digits(i) + \"nput.\"\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are not digits. For example, if the input is \"abc123\",\
    \ the function should return 3.", "    odd_count_str = @sprintf \"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 3, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    odd_counts\
    \ = Vector{String}()\n    for i in lst\n        odd_counts = append(odd_counts,\
    \ count(i, digits=true))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    odd_counts = Vector{String}(undef, 0)\n    for str\
    \ in lst\n        odd_counts = push!(odd_counts, length(findall(str -> str ==\
    \ \"1\", str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nPart 2: Strings\nNow let's\
    \ move on to strings. Strings are immutable and are used to represent text data.\
    \ Strings are used to represent text data because they are the core data structure\
    \ of Julia. Strings are also the basic building block of many other data types\
    \ in Julia. Strings are the core data structure of Julia. Strings are the basic\
    \ building block of many other data types in Julia. Strings are the core data\
    \ structure of Julia. Strings are the basic building block of many other data\
    \ types in Julia. Strings are the core data structure of Julia. Strings are the\
    \ basic building block of many other data types in Julia. Strings are the core\
    \ data structure of Julia. Strings are the basic building block of many other\
    \ data types in Julia. Strings are the core data structure of Julia. Strings are\
    \ the basic building block of many other data types in Julia. Strings are the\
    \ core data structure of Julia. Strings are the basic building block of many other\
    \ data types in Julia. Strings are the core data structure of Julia. Strings are\
    \ the basic building block of many other data types in Julia. Strings are the\
    \ core data structure of Julia. Strings are the basic building block of many other\
    \ data types in Julia. Strings are the core data structure of Julia. Strings are\
    \ the basic building block of many other data types in Julia. Strings are the\
    \ core data structure of Julia. Strings are the basic building block of many other\
    \ data types in Julia. Strings are the core data structure of Julia. Strings are\
    \ the basic building block of many other data types in Julia. Strings are the\
    \ core data structure of Julia. Strings are the basic building block of many other\
    \ data types in Julia. Strings are the core data structure of Julia. Strings are\
    \ the basic building block of ", "    odd_count_str = @sprintf \"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    return odd_count_str\n\
    end", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits +=\
    \ count(i, digits)\n    end\n    return [\"the number of odd elements \" .(join(map(str,\
    \ odd_digits))) .\" of the \" .(join(map(str, lst))) .\" of the \" .(join(map(str,\
    \ lst))) .\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called odd_count_by_digit(lst::Vector{String})::Vector{String}\
    \ that takes a list of strings and returns the same list but with each string\
    \ replaced by the number of odd digits in that string.", "    \n    odd_digits\
    \ = Vector{String}(undef, 0)\n    for i in lst\n        odd_digits += count_digits(i)\n\
    \    end\n    odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the number of even digits in that string.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(i, digits)\n    end\n    return\
    \ map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a string where each character is replaced by the number of times that character\
    \ appears in the string.", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str1 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str2 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str3 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str4 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str5 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str6 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str7 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str8 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str9 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str10 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str11 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str12 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str13 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str14 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str15 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str16 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str17 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str18 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str19 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str20 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str21 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str22 = @sprintf \"the number of odd elements\
    \ %dn the str%dd\" \n    odd_count_str23 = @sprintf \"the number of odd elements\
    \ %dn the str%dd", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_digits = Vector{String}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, s)\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are odd.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\" \n \
    \   odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst)+1)\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst)+2)\n    odd_count_str = replace(odd_count_str, 4, length(lst)+3)\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst)+4)\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst)+5)\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst)+6)\n    odd_count_str = replace(odd_count_str, 8, length(lst)+7)\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst)+8)\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst)+9)\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst)+10)\n    odd_count_str = replace(odd_count_str, 12, length(lst)+11)\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst)+12)\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst)+13)\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst)+14)\n    odd_count_str = replace(odd_count_str, 16, length(lst)+15)\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst)+16)\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst)+17)\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst)+18)\n    odd_count_str = replace(odd_count_str, 20, length(lst)+19)\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst)+20)\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst)+21)\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst)+22)\n    odd_count_str = replace(odd_count_str, 24, length(lst)+23)\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst)+24)\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst)+25)\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst)+26)\n    odd_count_str = replace(odd_count_str, 28, length(lst)+27)\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst)+28)\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst)+29)\n    odd_count_str = replace(od",
  "    \n    odd_counts = []\n    for str in lst\n        odd_count = []\n       \
    \ for char in str\n            if char == \"1\"\n                odd_count[1]\
    \ += 1 \n            elseif char == \"2\"\n                odd_count[2] += 1 \n\
    \            elseif char == \"3\"\n                odd_count[3] += 1 \n      \
    \      elseif char == \"4\"\n                odd_count[4] += 1 \n            elseif\
    \ char == \"5\"\n                odd_count[5] += 1 \n            elseif char ==\
    \ \"6\"\n                odd_count[6] += 1 \n            elseif char == \"7\"\n\
    \                odd_count[7] += 1 \n            elseif char == \"8\"\n      \
    \          odd_count[8] += 1 \n            elseif char == \"9\"\n            \
    \    odd_count[9] += 1 \n            elseif char == \"0\"\n                odd_count[10]\
    \ += 1 \n            else\n                odd_count[char] += 1\n        end\n\
    \        odd_counts = vcat(odd_counts, odd_count)\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for str in lst\n        odd_counts[str] =  length(findall(str\
    \ -> str == \"1\", str))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are not digits. For example, if the input string is \"abc123\" then the output\
    \ should be \"3\".", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    odd_digits\
    \ = Vector{String}(undef, 0)\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return odd_digits\nend", "    \n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 0, str))\n    end\n    \n    return [\"the number of odd elements\
    \ \" <> odd_count_str \n            <> \" of the \" <> string(length(lst)) <>\
    \ \" of the \" <> string(length(lst)) <> \" input.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\", \"", "    \n    odd_count_str =\
    \ \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(findall(str,\
    \ \"1\")) + length(findall(str, \"8\"))\n    end\n    \n    return [\"the number\
    \ of odd elements \" + odd_count_str + \".\"]\nend", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" ", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = vcat(odd_counts, count_odd_digits(str))\n\
    \    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_digits\
    \ = Vector{String}()\n    for i in lst\n        odd_digits = append(odd_digits,\
    \ count(i, digits=:odd));\n    end\n    return odd_digits\nend\n</cell>\n<text>\n\
    odd_count2\nWrite a function that takes a string as input and returns a list of\
    \ strings as output.\nEach element of the output should be \"the number of odd\
    \ digits in the i'th string of the input.\" where all the i's should be replaced\
    \ by the number of odd digits in the i'th string of the input.", "    \n    odd_count_str\
    \ = \"\"\n    for i in lst\n        odd_count_str = odd_count_str + length(findall(i,\
    \ r\"\\d\"))\n    end\n    \n    return [\"the number of odd elements \" + odd_count_str\
    \ + \".\"]\nend\n</cell>\n<text>\nodd_count_str", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = odd_counts + count_odd_digits(str)\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_digits = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits\
    \ += findall(x -> x % 2 != 0, s)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are digits.", "    odd_digits = Vector{Int}()\n    for i in lst\n     \
    \   odd_digits += count(digits(i), 2)\n    end\n    return [\"the number of odd\
    \ elements $n the str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings as an argument and returns a vector of the number\
    \ of odd digits in each string. Test your function on a few examples.", "    \n\
    \    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(str)\n    end\n    odd_count_str = odd_count_str[1:end-1]\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], lst)\n    odd_count_str = replace(odd_count_str,\
    \ [\"d\"], digits(lst))\n    return odd_count_str\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case. \nFor example, if the input is \"Hello World\"\
    , the function should return \"hello world\".", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 3, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 0, length(lst))\n    return odd_count_str\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string.", "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n \
    \       odd_counts = append!(odd_counts, count_odd_digits(str))\n    end\n   \
    \ return odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts\
    \ = []\n    for i in lst\n        odd_counts[i] = length(filter(x -> x % 2 !=\
    \ 0, i))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nPart 3: Strings\nNow let's\
    \ look at strings. We'll start by defining a string by using a quotation mark\
    \ (\"), a colon (:), and a variable name (letters).", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in lower case and all the characters in upper case.\
    \ For example, \"Hello World\" should return \"hELLO wORLD\".", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string as input and returns the number of digits in that string. \n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string and digits in that string. \nWrite a function that takes a string\
    \ as input and returns the number of characters in the string and digits in that\
    \ string separated by space. \nWrite a function that takes a string as input and\
    \ returns the number of characters in the string and digits in that string separated\
    \ by comma. \nWrite a function that takes a string as input and returns the number\
    \ of characters in the string and digits in that string separated by semicolon.\
    \ \nWrite a function that takes a string as input and returns the number of characters\
    \ in the string and digits in that string separated by colon. \nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ and digits in that string separated by semicolon. \nWrite a function that takes\
    \ a string as input and returns the number of characters in the string and digits\
    \ in that string separated by comma. \nWrite a function that takes a string as\
    \ input and returns the number of characters in the string and digits in that\
    \ string separated by colon. \nWrite a function that takes a string as input and\
    \ returns the number of characters in the string and digits in that string separated\
    \ by semicolon. \nWrite a function that takes a string as input and returns the\
    \ number of characters in the string and digits in that string separated by comma.\
    \ \nWrite a function that takes a string as input and returns the number of characters\
    \ in the string and digits in that string separated by colon. \nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ and digits in that string separated by semicolon. \nWrite a function that takes\
    \ a string as input and returns the number of characters in the string and digits\
    \ in that string separated by comma. \nWrite a function that takes a string as\
    \ input and returns the number of characters in the string and digits in that\
    \ string separated by colon. \nWrite a function that takes a string as input and\
    \ returns the number of characters in the string and digits in that string separated\
    \ by semicolon. \nWrite a function that takes a string as input and returns the\
    \ number of characters in the string and digits in that string separated by comma.\
    \ \nWrite a function that takes a string as input and returns the number of characters\
    \ in the string and digits in that string separated by colon. \nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ and digits in that string separated by semicolon. \nWrite a function that ",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = \"\" \n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the number\
    \ of odd characters in the string.", "    \n    odd_count_str = \"\"\n    for\
    \ str in lst\n        odd_count_str = strcat(odd_count_str, odd_count(str))\n\
    \    end\n    return odd_count_str\nend", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for s in lst\n        odd_counts = append(odd_counts, length(findall(s\
    \ == \"1\", s)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.",
  "    \n    odds = Vector{Int}()\n    for str in lst\n        odds = odds + count_odd_digits(str)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   odd_digits = Vector{Int}()\n    \n    for i in lst\n        odd_digits +=\
    \ findall(i .== \"1\", i)\n    end\n    \n    return [\"the number of odd elements\
    \ $odd_digits the str$length(odd_digits) of the $length(odd_digits) input.\"]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ where all the characters are replaced by \"*\".", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = append(odd_counts, count(str))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that takes a list of strings and\
    \ returns a list of strings where each string consists of only digits.", "   \
    \ odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of characters in the string that are digits.", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = vcat(odd_counts,\
    \ count_odd_digits(str))\n    end\n    return odd_counts\nend", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for i in lst\n        odd_counts = odd_counts\
    \ + count_odd_digits(i)\n    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.4>",
  "    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 != 0, i))\n    end\n    return [\"the number of odd\
    \ elements \" + odd_count_str + \".\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns a vector where each element\
    \ is the length of the longest string in the input.", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst[1]))\n    odd_count_str = replace(odd_count_str, 8, length(lst[2]))\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string with the number of odd characters in the string.\
    \ \nFor example, odd_count(\"abracadabra\") should return \"the number of odd\
    \ characters 4n the str4ng 4 of the 4nput.\".", "    odd_digits = Vector{Int}()\n\
    \    for s in lst\n        odd_digits += findall(x -> x % 2 != 0, s)\n    end\n\
    \    return [\"the number of odd elements $n the str$n of the $nput.\" for n in\
    \ odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are digits.", "    odd_digits =\
    \ Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n  \
    \  end\n    return map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input and returns a string where each character is replaced by the number\
    \ of times that character appears in the string.", "    \n    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += findall(i .== \"1\", i)\n    end\n  \
    \  return [\"the number of odd elements $n the str$n of the $nput.\" for n in\
    \ odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of\nstrings where each string consists of only digits followed\
    \ by the number of odd\ndigits in the i'th string of the input.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = ", "    \n    odds = Vector{Int}()\n    for s in lst\n  \
    \      odds = union(odds, count_odd_digits(s))\n    end\n    return odds\nend",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\" \n \
    \   odd_count_strs = Vector{String}(undef, 0)\n    for str in lst\n        odd_count_strs\
    \ = vcat(odd_count_strs, odd_count_str(length(str)+1, str))\n    end\n    return\
    \ odd_count_strs\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string where each character is replaced by the number of times it appears\
    \ in the string.", "    odd_digits = Vector{Int}()\n    for i in lst\n       \
    \ odd_digits += count(digits(i))\n    end\n    return [\"the number of odd elements\
    \ $odd_digits the str$length(odd_digits) of the $length(odd_digits) input.\"]\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are digits.", "    \n    odd_count_str = \"\"\n    for i\
    \ in lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string where each character is replaced by the number of times it appears\
    \ in the string.", "    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend", " \
    \   odd_digits = Vector{String}()\n    for str in lst\n        odd_digits += count_digits(str)\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_counts = Vector{String}()\n    for i in lst\n        odd_counts = push!(odd_counts,\
    \ length(findall(i, digits)))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of strings and returns a vector of the number of odd characters\
    \ in each string. Test it by calling it on some test cases.", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = append!(odd_counts,\
    \ count(str, '1'))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of characters in the string that are digits. \nFor example,\
    \ odd_count(\"123abc\") should return 3.", "    \n    odd_counts = Vector{String}()\n\
    \    for str in lst\n        odd_counts = append(odd_counts, length(findall(str,\
    \ \"1n\")))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    @test odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@test odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of strings and returns a list of strings where each string\
    \ consists of only digits.", "    \n    odd_count_str = \"\"\n    for i in lst\n\
    \        odd_count_str = odd_count_str + length(filter(x -> x % 2 != 0, i))\n\
    \    end\n    \n    return [\"the number of odd elements \" + odd_count_str +\
    \ \".\"]\nend\n</cell>\n<text>\nodd_count_str is now a string, so we can concatenate\
    \ it with the other strings in the list to form the final output.", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = ", "    \n    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for (i,s) in enumerate(lst)\n        odd_counts[i] = \"the\
    \ number of odd elements \" + \n            length(findall(x -> x % 2 == 1, s))\
    \ + \" in the str\" + \n            length(s) + \" of the \" + length(s) + \n\
    \            \" input.\"\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are digits in the string. For example, if the input string is \"1234567\"\
    , then the output should be \"5\".", "    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dd\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 33, length(", "    odd_counts = Vector{String}()\n    for str in lst\n     \
    \   odd_counts = push!(odd_counts, length(findall(str, \"1\")))\n    end\n   \
    \ return odd_counts\nend\n</cell>\n<code language=julia-1.0>", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for str in lst\n        odd_counts[findall(str)\
    \ .== 1] .+= 1\n    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.0>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, \" \", \"\")\n  \
    \  odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"\")\n    odd_count_str = replace(odd_count_str, \"n\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str", "    odd_digits = findall(x -> x mod 2 != 0, lst)\n\
    \    odd_count = length(odd_digits)\n    odd_count_str = join(odd_digits, \" \"\
    )\n    return [\"the number of odd elements \", odd_count_str, \"of the \", join(lst,\
    \ \" \"), \" of the \", join(lst, \" \")]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string that consists of all the characters in the input\
    \ string except for the first and last characters. For example, the string \"\
    hello\" should return \"helo\".", "    odd_digits = Vector{Int}()\n    for i in\
    \ lst\n        odd_digits += count(i, digits)\n    end\n    return [\"the number\
    \ of odd elements $odd_digits the str$length(odd_digits) of the $length(odd_digits)\
    \ input.\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of characters in the string that are digits.", "    odd_counts = Vector{String}()\n\
    \    for s in lst\n        odd_counts = push!(odd_counts, length(findall(s ==\
    \ \"1\")))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    @test odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@test odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns a string with all the characters in\
    \ lower case. \nThe function should ignore all non-alphabetic characters and return\
    \ \"the string with all the characters in lower case\".", "    odd_count_str =\
    \ \"\"\n    for i in lst\n        odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 0, i))\n    end\n    return odd_count_str\nend\n</cell>\n<text>\n\
    odd_count_str is now a string. Let's see what it looks like:", "    \n    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string that are digits.", "    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], map(length, lst))\n    odd_count_str = replace(odd_count_str, [\"str\"\
    , \"string\"], map(str, lst))\n    odd_count_str = replace(odd_count_str, [\"\
    nput\", \"input\"], map(str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ [\"input\", \"output\"], map(str, lst))\n    return odd_count_str\nend", " \
    \   odd_counts = Vector{String}(undef, 0)\n    for s in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(s == \"1\")))\n    end\n    return odd_counts\n\
    end", "    odd_count_str = \"\"\"the number of odd elements \"\"\"\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * \"n the str\"\
    \n    odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * \"ng \"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str =\
    \ odd_count_str * \"of the \"\n    odd_count_str = odd_count_str * lst.size\n\
    \    odd_count_str = odd_count_str * \"nput.\"\n    return odd_count_str\nend",
  "    \n    odd_counts = Vector{String}()\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, length(findall(str, \"1\")))\n    end\n    \n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_digits = Vector{Int}()\n\
    \    for str in lst\n        odd_digits += findall(x -> x % 2 != 0, str)\n   \
    \ end\n    return [\"the number of odd elements \" ~ string(odd_digits) ~ \"n\
    \ the str\" ~ string(length(odd_digits)) ~ \"th \" ~ string(length(lst)) ~ \"\
    th \" ~ string(string(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th \" ~ string(string(length(odd_digits)) ~ \"th \" ~ string(string(length(odd_digits))\
    \ ~ \"th ", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd\" \n    odd_count_str = @sprintf \"the number of odd elements ", "  \
    \  \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n    end\n    \n\
    \    return [\"the number of odd elements \" <> odd_count_str <> \" of the \"\
    \ <> string(length(lst)) <> \" of the \" <> string(length(lst)) <> \" input.\"\
    ]\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are digits.", "    odd_digits = Vector{Int}()\n\
    \    for str in lst\n        odd_digits += findall(x -> x % 2 != 0, str)\n   \
    \ end\n    return [\"the number of odd elements $n the str$n of the $nput.\" for\
    \ n in odd_digits]\nend", "    odd_digits = Vector{Int}()\n    for str in lst\n\
    \        odd_digits += count_digits(str)\n    end\n    return map(str, odd_digits)\n\
    end", "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n       \
    \ odd_counts = append(odd_counts, sum(map(x -> x % 2 == 1, str)))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nThe function should ignore\
    \ all non-digit characters and count the digits. \nThe function should ignore\
    \ all leading zeros and count the digits. \nThe function should ignore all trailing\
    \ zeros and count the digits.", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i in 1:length(lst)\n        odd_counts[i] = length(findall(i .== \"1\"\
    ))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    odd_count_str\nend", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i), 2)\n    end\n    return\
    \ map(string(\"the number of odd elements \", odd_digits), lst)\nend", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i .== \"1\"\
    , i)\n    end\n    return [\"the number of odd elements $n the str$n of the $nput.\"\
    \ for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns a string with all the characters in lower case. \nFor example, if\
    \ the input string is \"Hello World\", the output should be \"hello world\".",
  "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strsplit(str, \"\")[end-1], \"n\")\n    end\n    odd_count_str = strsplit(odd_count_str,\
    \ \"\")\n    return odd_count_str\nend", "    odd_count_str = \"\"\n    for str\
    \ in lst\n        odd_count_str = odd_count_str + length(findall(str, \"1\"))\
    \ + length(findall(str, \"8\"))\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>", "    odd_count_str = \"\"\"\n    odd_count_str = \"\
    \"\n    for i in lst\n        odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 != 0, i))\n    end\n    \"\"\"\n    return julia_eval(odd_count_str)\n\
    end", "    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits\
    \ += findall(str .== \"1\", str)\n    end\n    odd_digits\nend\n</cell>\n<code\
    \ language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are odd.", "    odd_counts = Vector{String}(undef, length(lst))\n    for str\
    \ in lst\n        odd_counts[str] =  length(filter(x -> x % 2 != 0, str))\n  \
    \  end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the number of characters in that string that are digits.", "    \n \
    \   odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 != 0, str))\n    end\n    odd_count_str = odd_count_str\
    \ + \" \"\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string. \nThe function\
    \ should ignore all non-digit characters.", "    odd_count_str = \"\"\n    for\
    \ i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n  \
    \  return odd_count_str\nend", "    odd_count_str = @sprintf \"the number of odd\
    \ elements %dn the str%dd\" \n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], lst)\n    odd_count_str = replace(odd_count_str, [\"d\"], digits(lst))\n  \
    \  return odd_count_str\nend", "    odd_digits = Vector{String}()\n    for i in\
    \ lst\n        odd_digits += count_digits(i)\n    end\n    return odd_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = odd_counts + [length(filter(x ->\
    \ x % 2 == 1, str))]\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", digits)\n    end\n    return [\"the number of odd elements $n the\
    \ str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns a string with all the\
    \ characters in lowercase and with all the characters in uppercase (both included).\
    \ For example \"hello\" would return \"Hello\".", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = odd_counts + count_odd_digits(str)\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    3\", \"11111111\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    \n    odd_count_str = \"\"\n    for i in lst\n\
    \        odd_count_str = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"\
    11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"\
    11111111\", \"11111111\", \"11111111\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
    , \"11111111\", \"11111111\", \"11111111\", \"", "    odd_count_str = \"\"\n \
    \   for str in lst\n        odd_count_str = strcat(odd_count_str, strsplit(str,\
    \ \"1\")[1], \"n\")\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = \"the number of odd elements \" + \n            length(findall(x\
    \ -> x % 2 != 0, lst[i])) + \" the str\" + \n            length(findall(x -> x\
    \ % 2 != 0, lst[i])) + \"n\" + \n            \" of the \" + length(findall(x ->\
    \ x % 2 != 0, lst[i])) + \"nput.\"\n    end\n    return odd_counts\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts, but I really want to know\
    \ why my code doesn't work. I'm just trying to learn Julia by solving problems.\
    \ I understand that my code is not the most efficient way to do it, but I really\
    \ want to know why my code doesn't work.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you so much! I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your efforts. I understand now why my code doesn't work. I really\
    \ appreciate your ", "    odd_digits = findall(x -> x mod 2 != 0, lst)\n    odd_count\
    \ = length(odd_digits)\n    odd_count_str = join(map(str, odd_digits), \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n\", odd_count)\n    return [\"\
    the number of odd elements \", odd_count_str, \"of the \", join(map(str, lst),\
    \ \" of the \"), \" input.\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of the number of odd characters in each string. For example,\
    \ [\"1\", \"2\", \"3\"] should return [1, 0, 1].", "    \n    odd_count_str =\
    \ \"\"\n    for i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strcat(\" \", count_odd_digits(str)))\n    end\n    return odd_count_str\nend",
  "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str, \"1\")))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>", "    odd_digits = Vector{String}()\n\
    \    for str in lst\n        odd_digits = odd_digits + count(str, '1')\n    end\n\
    \    return odd_digits\nend\n</cell>\n<code language=julia-1.0>\n@assert odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @assert odd_count([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"]\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are digits.", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>", "    odd_count_str = @sprintf \"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns a string with the number of even digits in it.", "    odd_digits\
    \ = Vector{String}()\n    for i in lst\n        odd_digits += count_digits(i)\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns a string with the number of odd characters in the string.", "  \
    \  odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strsplit(str, \"1\")[1], \"n\")\n    end\n    odd_count_str = strsplit(odd_count_str,\
    \ \"n\")[1]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"100000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"100000000\", \"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\", \"100000000\", \"11111111\", \"22222222\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"100", "    odd_digits\
    \ = Vector{Int}()\n    for str in lst\n        odd_digits += count_digits(str)\n\
    \    end\n    return map(x -> \"the number of odd elements \" x \" of the \" x\
    \ \" of the \" x \".\", odd_digits)\nend\n</cell>\n<text>\nodd_count_str", " \
    \   odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = odd_counts + count_odd_digits(str)\n    end\n    odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>", "    odd_digits = Vector{Int}()\n    for i in lst\n\
    \        odd_digits += count(digits(i), 2)\n    end\n    return [\"the number\
    \ of odd elements $n the str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns a string where each character is replaced\
    \ by the number of occurrences of that character in the input string.", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count_digits(i)\n \
    \   end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    odd_digits = Vector{String}()\n    \n    for i in lst\n        odd_digits\
    \ += count_odd_digits(i)\n    end\n    \n    return odd_digits\nend", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, [\"n\"], (length(lst)-1))\n   \
    \ odd_count_str = replace(odd_count_str, [\"s\"], (length(lst)-2))\n    odd_count_str\
    \ = replace(odd_count_str, [\"t\"], (length(lst)-3))\n    odd_count_str = replace(odd_count_str,\
    \ [\"r\"], (length(lst)-4))\n    odd_count_str = replace(odd_count_str, [\"g\"\
    ], (length(lst)-5))\n    odd_count_str = replace(odd_count_str, [\"b\"], (length(lst)-6))\n\
    \    odd_count_str = replace(odd_count_str, [\"m\"], (length(lst)-7))\n    odd_count_str\
    \ = replace(odd_count_str, [\"k\"], (length(lst)-8))\n    odd_count_str = replace(odd_count_str,\
    \ [\"h\"], (length(lst)-9))\n    odd_count_str = replace(odd_count_str, [\"v\"\
    ], (length(lst)-10))\n    odd_count_str = replace(odd_count_str, [\"x\"], (length(lst)-11))\n\
    \    odd_count_str = replace(odd_count_str, [\"q\"], (length(lst)-12))\n    odd_count_str\
    \ = replace(odd_count_str, [\"p\"], (length(lst)-13))\n    odd_count_str = replace(odd_count_str,\
    \ [\"o\"], (length(lst)-14))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], (length(lst)-15))\n    odd_count_str = replace(odd_count_str, [\"m\"], (length(lst)-16))\n\
    \    odd_count_str = replace(odd_count_str, [\"k\"], (length(lst)-17))\n    odd_count_str\
    \ = replace(odd_count_str, [\"h\"], (length(lst)-18))\n    odd_count_str = replace(odd_count_str,\
    \ [\"v\"], (length(lst)-19))\n    odd_count_str = replace(odd_count_str, [\"x\"\
    ], (length(lst)-20))\n    odd_count_str = replace(odd_count_str, [\"q\"], (length(lst)-21))\n\
    \    odd_count_str = replace(odd_count_str, [\"p\"], (length(lst)-22))\n    odd_count_str\
    \ = replace(odd_count_str, [\"o\"], (length(lst)-23))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], (length(lst)-24))\n    odd_count_", "    odd_count_str = \"\"\n   \
    \ for str in lst\n        odd_count_str = odd_count_str + length(filter(x -> x\
    \ % 2 == 1, str))\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a list\
    \ of strings and returns a list of strings where each string consists of only\
    \ digits.", "    odd_digits = findall(x -> x % 2 == 1, lst)\n    odd_counts =\
    \ map(x -> length(odd_digits[findfirst(x -> x == i, odd_digits)]) , 1:length(lst))\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ as an input and returns a vector of the length of each string in the input.",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend", "    odd_count_str = \"\"\"the number of odd elements\
    \ \"\"\"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * \"n the str\"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * \"ng \"\n    odd_count_str = odd_count_str * lst.size\n  \
    \  odd_count_str = odd_count_str * \"of the \"\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * \"nput.\"\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"1000000000\", \"\
    1000000001\"])\n</cell>\n<code language=julia-1.5>\nod", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ [\"the number of odd elements $odd_digits the str$length(odd_digits) of the\
    \ $length(odd_digits)nput.\"]\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\
    \ \nWrite a function that takes a string as input and returns the number of words\
    \ in the string. \nWrite a function that takes a string as input and returns the\
    \ number of sentences in the string. \nWrite a function that takes a string as\
    \ input and returns the number of characters in the string divided by the number\
    \ of words in the string.", "    odd_counts = Vector{String}(undef, 0)\n    for\
    \ str in lst\n        odd_counts = push!(odd_counts, length(findall(str -> str\
    \ == \"1\", str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, count(str))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>", "    odd_count_str = @sprintf \"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
