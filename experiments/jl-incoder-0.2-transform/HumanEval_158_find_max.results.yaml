language: jl
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars\n   \
    \ if length(unique_chars) > length(words)\n        words[1]\n    else\n      \
    \  words[end]\n    end\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of times it occurs in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhvmvwi1.jl:26\nin expression starting at\
    \ /tmp/tmpnhvmvwi1.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp741om2es.jl:54\nin expression starting at\
    \ /tmp/tmp741om2es.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"e\")\n    unique_chars = unique_chars\
    \ - Set(\"i\")\n    unique_chars = unique_chars - Set(\"o\")\n    unique_chars\
    \ = unique_chars - Set(\"u\")\n    \n    unique_chars = unique_chars - Set(\"\
    A\")\n    unique_chars = unique_chars - Set(\"E\")\n    unique_chars = unique_chars\
    \ - Set(\"I\")\n    unique_chars = unique_chars - Set(\"O\")\n    unique_chars\
    \ = unique_chars - Set(\"U\")\n    \n    unique_chars = unique_chars - Set(\"\
    1\")\n    unique_chars = unique_chars - Set(\"2\")\n    unique_chars = unique_chars\
    \ - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n    unique_chars\
    \ = unique_chars - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n\
    \    unique_chars = unique_chars - Set(\"7\")\n    unique_chars = unique_chars\
    \ - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    \n    unique_chars = unique_chars - Set(\"\
    .\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9l2cqffu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9l2cqffu.jl:1\n\
    in expression starting at /tmp/tmp9l2cqffu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for c\
    \ in word\n            unique_chars = unique_chars + c\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    z\")\n    unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"!\")\n    unique_chars = unique_chars - Set{Char}(\"?\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\"(\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\")\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"[\")\n    unique_chars = unique_chars - Set{Char}(\"]\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"{\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"}\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"(\")\n    unique_chars = unique_chars - Set{Char}(\")\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"[\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"]\")\n    unique_chars = unique_chars - Set{Char}(\"{\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"}\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"[\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"]\")\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpraqv39r0.jl:25\nin expression starting at\
    \ /tmp/tmpraqv39r0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n    for word\
    \ in words \n        unique_chars = unique_chars | Set(word)\n        if unique_chars.size\
    \ > word_with_max_unique_chars.length\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a boolean\
    \ indicating whether that string is a palindrome or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvf_o1bd.jl:24\nin expression starting at\
    \ /tmp/tmpzvf_o1bd.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb136eqz.jl:57\nin expression starting at\
    \ /tmp/tmpdb136eqz.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars_count = 0\n    unique_chars_index\
    \ = 0\n    for word in words\n        for char in word\n            if char in\
    \ unique_chars\n                unique_chars_count += 1\n                if unique_chars_count\
    \ > unique_chars_index\n                    unique_chars_index = unique_chars_count\n\
    \            else\n                unique_chars.add(char)\n    end\n    return\
    \ words[unique_chars_index]\nend\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ given string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4vyll1b.jl:28\nin expression starting at\
    \ /tmp/tmpn4vyll1b.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm3tfe9r1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm3tfe9r1.jl:1\n\
    in expression starting at /tmp/tmpm3tfe9r1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    return unique_chars.last\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a string and returns the number of unique\
    \ characters in it.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvo9grrp.jl:15\nin expression starting at\
    \ /tmp/tmpdvo9grrp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    for word in words\n\
    \        unique_chars = unique_chars + Set(word)\n        unique_chars_count =\
    \ unique_chars_count + length(word)\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return words[end]\n    else\n        unique_chars =\
    \ unique_chars - Set(\"a\")\n        unique_chars = unique_chars - Set(\"z\")\n\
    \        unique_chars = unique_chars - Set(\"A\")\n        unique_chars = unique_chars\
    \ - Set(\"Z\")\n        unique_chars = unique_chars - Set(\"0\")\n        unique_chars\
    \ = unique_chars - Set(\"9\")\n        unique_chars = unique_chars - Set(\"_\"\
    )\n        unique_chars = unique_chars - Set(\"$\")\n        unique_chars = unique_chars\
    \ - Set(\"%\")\n        unique_chars = unique_chars - Set(\"&\")\n        unique_chars\
    \ = unique_chars - Set(\"*\")\n        unique_chars = unique_chars - Set(\"(\"\
    )\n        unique_chars = unique_chars - Set(\")\")\n        unique_chars = unique_chars\
    \ - Set(\"+\")\n        unique_chars = unique_chars - Set(\",\")\n        unique_chars\
    \ = unique_chars - Set(\".\")\n        unique_chars = unique_chars - Set(\":\"\
    )\n        unique_chars = unique_chars - Set(\";\")\n        unique_chars = unique_chars\
    \ - Set(\"/\")\n        unique_chars = unique_chars - Set(\"[\")\n        unique_chars\
    \ = unique_chars - Set(\"]\")\n        unique_chars = unique_chars - Set(\"{\"\
    )\n        unique_chars = unique_chars - Set(\"}\")\n        unique_chars = unique_chars\
    \ - Set(\"!\")\n        unique_chars = unique_chars - Set(\"?\")\n        unique_chars\
    \ = unique_chars - Set(\":\")\n        unique_chars = unique_chars - Set(\";\"\
    )\n        unique_chars = unique_chars - Set(\"+\")\n        unique_chars = unique_chars\
    \ - Set(\",\")\n        unique_chars = unique_chars - Set(\".\")\n        unique_chars\
    \ = unique_chars - Set(\":\")\n        unique_chars = unique_chars - Set(\";\"\
    )\n        unique_chars = unique_chars - Set(\"/\")\n        unique_chars = unique_chars\
    \ - Set(\"[\")\n        unique_chars = unique_chars - Set(\"]\")\n        unique_chars\
    \ = unique_chars - Set(\"{\")\n        unique_chars = unique_chars - Set(\"}\"\
    )\n        unique_chars = unique_chars - Set(\"!\")\n        unique_chars = unique_chars\
    \ - Set(\"?\")\n        unique_chars = unique_chars - \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43ypr2h2.jl:31\nin expression starting at\
    \ /tmp/tmp43ypr2h2.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = unique_chars_count + length(word)\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return words[end]\n    else\n        return words[end]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string\
    \ and returns a list of all words in the string that have length greater than\
    \ or equal to 3. Return an empty list if the string length is less than 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvzqu_47.jl:28\nin expression starting at\
    \ /tmp/tmpcvzqu_47.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars_count = Set{Int}(0)\n\
    \    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count[char] = unique_chars_count[char] + 1\n    end\n\
    \    \n    unique_chars_count = unique_chars_count.values()\n    unique_chars_count\
    \ = unique_chars_count.max()\n    \n    if unique_chars_count == 0\n        return\
    \ words[1]\n    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp8twucwg4.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8twucwg4.jl:1\n\
    in expression starting at /tmp/tmp8twucwg4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1502c5rt.jl:54\nin expression starting at\
    \ /tmp/tmp1502c5rt.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbmzpbup.jl:55\nin expression starting at\
    \ /tmp/tmpxbmzpbup.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkp8ohlmt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkp8ohlmt.jl:1\n\
    in expression starting at /tmp/tmpkp8ohlmt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words \n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise\nWrite a function that accepts a list of strings and returns\
    \ the word with minimum number of unique characters.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48frfgwg.jl:21\nin expression starting at\
    \ /tmp/tmp48frfgwg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"z\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return \"0\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"9\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\".\")\n    \n    if length(unique_chars) == 0\n        return \".\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"_\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"$\")\n    \n    if length(unique_chars) == 0\n        return \"$\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"%\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"%\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"&\")\n    \n    if length(unique_chars) == 0\n        return \"&\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"(\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"(\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\")\")\n    \n    if length(unique_chars) == 0\n        return \")\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"+\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"+\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\",\")\n    \n    if length(unique_chars) == 0\n        return \",\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \":\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\";\")\n    \n    if length(unique_chars) == 0\n        return \";\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"=\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"=\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"[\")\n    \n    if length(unique_chars) == 0\n        return \"[\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolbtw89u.jl:57\nin expression starting at\
    \ /tmp/tmpolbtw89u.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb136eqz.jl:57\nin expression starting at\
    \ /tmp/tmpdb136eqz.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    word_with_max_unique_chars = \"\"\n  \
    \  for word in words \n        unique_chars = unique_chars + Set{Char}(word)\n\
    \        if unique_chars.size > word_with_max_unique_chars.length\n          \
    \  word_with_max_unique_chars = word\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of unique characters in the string. \nIf the string contains no unique\
    \ characters, return 0.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29ml6gl5.jl:24\nin expression starting at\
    \ /tmp/tmp29ml6gl5.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj18mmw21.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj18mmw21.jl:1\n\
    in expression starting at /tmp/tmpj18mmw21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\":\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\":\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\":\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\":\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\":\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\":\")\n    unique_chars.update(\".\")\n    unique_chars.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpplsvz70n.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpplsvz70n.jl:75\n\
    in expression starting at /tmp/tmpplsvz70n.jl:75\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&lower))\n    unique_chars = unique_chars.union(words.map(&upper))\n\
    \    unique_chars = unique_chars.union(words.map(&chars))\n    unique_chars =\
    \ unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5blu_yhw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5blu_yhw.jl:1\n\
    in expression starting at /tmp/tmp5blu_yhw.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp741om2es.jl:54\nin expression starting at\
    \ /tmp/tmp741om2es.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj18mmw21.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj18mmw21.jl:1\n\
    in expression starting at /tmp/tmpj18mmw21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars\
    \ = unique_chars.keys() \n    unique_chars = unique_chars.sort\n    unique_chars\
    \ = unique_chars[end]\n    return unique_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns the number of unique characters in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuh6za3ls.jl:15\nin expression starting at\
    \ /tmp/tmpuh6za3ls.jl:15\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9twoxgxw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9twoxgxw.jl:1\n\
    in expression starting at /tmp/tmp9twoxgxw.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        for char in word\n            unique_chars << char\n        \
    \    unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[words.index(words[words.index(words[words.index(word)]),\
    \ 1)]\n    else\n        return words[words.index(words[words.index(words[words.index(word)]),\
    \ 2)]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a string and returns the number of occurrences of that string in another string.\
    \ For example, if the input string is \"abba\" and another string is \"ab\", the\
    \ function should return 2.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_05fhncr.jl:25\nin expression starting at\
    \ /tmp/tmp_05fhncr.jl:25\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj18mmw21.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj18mmw21.jl:1\n\
    in expression starting at /tmp/tmpj18mmw21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update(\"a\")\n    unique_chars.update(\"\
    b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"d\")\n    unique_chars.update(\"\
    e\")\n    unique_chars.update(\"f\")\n    unique_chars.update(\"g\")\n    unique_chars.update(\"\
    h\")\n    unique_chars.update(\"i\")\n    unique_chars.update(\"j\")\n    unique_chars.update(\"\
    k\")\n    unique_chars.update(\"l\")\n    unique_chars.update(\"m\")\n    unique_chars.update(\"\
    n\")\n    unique_chars.update(\"o\")\n    unique_chars.update(\"p\")\n    unique_chars.update(\"\
    q\")\n    unique_chars.update(\"r\")\n    unique_chars.update(\"s\")\n    unique_chars.update(\"\
    t\")\n    unique_chars.update(\"u\")\n    unique_chars.update(\"v\")\n    unique_chars.update(\"\
    w\")\n    unique_chars.update(\"x\")\n    unique_chars.update(\"y\")\n    unique_chars.update(\"\
    z\")\n    unique_chars.update(\"A\")\n    unique_chars.update(\"B\")\n    unique_chars.update(\"\
    C\")\n    unique_chars.update(\"D\")\n    unique_chars.update(\"E\")\n    unique_chars.update(\"\
    F\")\n    unique_chars.update(\"G\")\n    unique_chars.update(\"H\")\n    unique_chars.update(\"\
    I\")\n    unique_chars.update(\"J\")\n    unique_chars.update(\"K\")\n    unique_chars.update(\"\
    L\")\n    unique_chars.update(\"M\")\n    unique_chars.update(\"N\")\n    unique_chars.update(\"\
    O\")\n    unique_chars.update(\"P\")\n    unique_chars.update(\"Q\")\n    unique_chars.update(\"\
    R\")\n    unique_chars.update(\"S\")\n    unique_chars.update(\"T\")\n    unique_chars.update(\"\
    U\")\n    unique_chars.update(\"V\")\n    unique_chars.update(\"W\")\n    unique_chars.update(\"\
    X\")\n    unique_chars.update(\"Y\")\n    unique_chars.update(\"Z\")\n    unique_chars.update(\"\
    0\")\n    unique_chars.update(\"1\")\n    unique_chars.update(\"2\")\n    unique_chars.update(\"\
    3\")\n    unique_chars.update(\"4\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8m9t3f86.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8m9t3f86.jl:1\n\
    in expression starting at /tmp/tmp8m9t3f86.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.last\nend\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ accepts a list of strings and returns a list of strings. \nThe function should\
    \ return a list of strings which contains words with maximum number\nof unique\
    \ characters. \nThe function should return an empty list if there are no words\
    \ with maximum number\nof unique characters.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41qkyesu.jl:15\nin expression starting at\
    \ /tmp/tmp41qkyesu.jl:15\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc26clx6x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc26clx6x.jl:1\n\
    in expression starting at /tmp/tmpc26clx6x.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.max() \nend\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nIf the string has less than 10 unique characters, return 0.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnpril76.jl:15\nin expression starting at\
    \ /tmp/tmphnpril76.jl:15\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4q68vk7n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4q68vk7n.jl:1\n\
    in expression starting at /tmp/tmp4q68vk7n.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    for word in words\
    \ \n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = unique_chars_count + length(word)\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return words[end]\n    else\n        unique_chars =\
    \ unique_chars - Set(\"0\")\n        unique_chars = unique_chars - Set(\"1\")\n\
    \        unique_chars = unique_chars - Set(\"2\")\n        unique_chars = unique_chars\
    \ - Set(\"3\")\n        unique_chars = unique_chars - Set(\"4\")\n        unique_chars\
    \ = unique_chars - Set(\"5\")\n        unique_chars = unique_chars - Set(\"6\"\
    )\n        unique_chars = unique_chars - Set(\"7\")\n        unique_chars = unique_chars\
    \ - Set(\"8\")\n        unique_chars = unique_chars - Set(\"9\")\n        unique_chars\
    \ = unique_chars - Set(\"a\")\n        unique_chars = unique_chars - Set(\"b\"\
    )\n        unique_chars = unique_chars - Set(\"c\")\n        unique_chars = unique_chars\
    \ - Set(\"d\")\n        unique_chars = unique_chars - Set(\"e\")\n        unique_chars\
    \ = unique_chars - Set(\"f\")\n        unique_chars = unique_chars - Set(\"g\"\
    )\n        unique_chars = unique_chars - Set(\"h\")\n        unique_chars = unique_chars\
    \ - Set(\"i\")\n        unique_chars = unique_chars - Set(\"j\")\n        unique_chars\
    \ = unique_chars - Set(\"k\")\n        unique_chars = unique_chars - Set(\"l\"\
    )\n        unique_chars = unique_chars - Set(\"m\")\n        unique_chars = unique_chars\
    \ - Set(\"n\")\n        unique_chars = unique_chars - Set(\"o\")\n        unique_chars\
    \ = unique_chars - Set(\"p\")\n        unique_chars = unique_chars - Set(\"q\"\
    )\n        unique_chars = unique_chars - Set(\"r\")\n        unique_chars = unique_chars\
    \ - Set(\"s\")\n        unique_chars = unique_chars - Set(\"t\")\n        unique_chars\
    \ = unique_chars - Set(\"u\")\n        unique_chars = unique_chars - Set(\"v\"\
    )\n        unique_chars = unique_chars - Set(\"w\")\n        unique_chars = unique_chars\
    \ - Set(\"x\")\n        unique_chars = unique_chars - Set(\"y\")\n        unique_chars\
    \ = unique_chars - Set(\"z\")\n        unique_chars = unique_chars - Set(\"A\"\
    )\n        unique_chars = unique_chars - Set(\"B\")\n        unique_chars = unique_chars\
    \ - Set\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpn6zab4ss.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn6zab4ss.jl:1\n\
    in expression starting at /tmp/tmpn6zab4ss.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj18mmw21.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj18mmw21.jl:1\n\
    in expression starting at /tmp/tmpj18mmw21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars <- unique_chars + char\n    end\n    \n  \
    \  if unique_chars == Set{Char}(\"\")\n        return words[1]\n    else\n   \
    \     unique_chars = Set{Char}(\"\")\n        for word in words \n           \
    \ for char in word\n                unique_chars <- unique_chars + char\n    \
    \        end\n        end\n        \n        if length(unique_chars) > length(words)\n\
    \            return words[1]\n        else\n            return words[length(unique_chars)]\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndooc2fe.jl:37\nin expression starting at\
    \ /tmp/tmpndooc2fe.jl:37\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars_count = Dict{Char,Int}(\"\
    \")\n    for word in words \n        for char in word\n            if char in\
    \ unique_chars\n                unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n            else\n                unique_chars.add(char)\n            \
    \    unique_chars_count[char] = 1\n    end\n    \n    unique_chars_sorted = Dict{Char,Int}(unique_chars_count)\n\
    \    unique_chars_sorted[end] = unique_chars_count[end]\n    \n    unique_chars_sorted\
    \ = sort(unique_chars_sorted)\n    \n    return unique_chars_sorted[end][1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings\
    \ and returns the string with maximum length. \nIf two strings have the same length,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_2543ay.jl:32\nin expression starting at\
    \ /tmp/tmpg_2543ay.jl:32\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm3tfe9r1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm3tfe9r1.jl:1\n\
    in expression starting at /tmp/tmpm3tfe9r1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.max() \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps31dn2oh.jl:15\nin expression starting at\
    \ /tmp/tmps31dn2oh.jl:15\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.max() \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns a string with all the characters in lower case.\
    \ \nIf the input string contains any non-alphabetic characters, return an empty\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9yugy00.jl:15\nin expression starting at\
    \ /tmp/tmpy9yugy00.jl:15\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars_count = Dict{Char, Int}()\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars.last\n\
    \                else\n                    unique_chars_count[unique_chars.last]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string\
    \ and returns a string with all the characters in lower case. \nThe function should\
    \ ignore the case of the characters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphs0zjasf.jl:28\nin expression starting at\
    \ /tmp/tmphs0zjasf.jl:28\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.map(sort)\n    unique_chars = unique_chars.map(first)\n    unique_chars\
    \ = unique_chars.map(last)\n    return unique_chars.max\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a list of strings and returns a list\
    \ of strings. \nThe function should remove duplicates and sort them in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzdpzjgo.jl:22\nin expression starting at\
    \ /tmp/tmpnzdpzjgo.jl:22\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in\
    \ words\n        for char in word\n            if char in unique_chars\n     \
    \           unique_chars_count[char] += 1\n            else\n                unique_chars.add(char)\n\
    \                unique_chars_count[char] = 1\n    end\n    unique_chars_count.keys\n\
    \    max_count = max(unique_chars_count.values)\n    unique_chars_count.values.max()\n\
    \    for char in unique_chars\n        if unique_chars_count[char] == max_count\n\
    \            return char\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that accepts a string and returns a list of all possible substrings of the string.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7762f8o.jl:32\nin expression starting at\
    \ /tmp/tmpm7762f8o.jl:32\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm3tfe9r1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm3tfe9r1.jl:1\n\
    in expression starting at /tmp/tmpm3tfe9r1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n    for word\
    \ in words\n        for char in word\n            unique_chars << char\n     \
    \   end\n    end\n    for word in words\n        unique_chars = unique_chars -\
    \ Set(word)\n        if length(unique_chars) > length(word_with_max_unique_chars)\n\
    \            word_with_max_unique_chars = word\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzz8tx5f1.jl:29\nin expression starting at\
    \ /tmp/tmpzz8tx5f1.jl:29\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb136eqz.jl:57\nin expression starting at\
    \ /tmp/tmpdb136eqz.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51xz5l3e.jl:59\nin expression starting at\
    \ /tmp/tmp51xz5l3e.jl:59\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1502c5rt.jl:54\nin expression starting at\
    \ /tmp/tmp1502c5rt.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 1))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 2))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 3))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 4))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 5))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 6))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 7))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 8))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 9))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 10))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 11))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 12))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 13))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 14))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 15))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 16))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 17))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 18))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 19))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 20))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 21))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 22))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 23))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 24))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 25))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpys1xrn41.jl:45\nin expression starting at\
    \ /tmp/tmpys1xrn41.jl:45\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{String}()\n    unique_chars = unique_chars.sorted()\n    unique_chars\
    \ = unique_chars[end]\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"\
    , \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jo0syta.jl:24\nin expression starting at\
    \ /tmp/tmp5jo0syta.jl:24\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbmzpbup.jl:55\nin expression starting at\
    \ /tmp/tmpxbmzpbup.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words\n        for char\
    \ in word\n            unique_chars <- unique_chars + char\n        end\n    end\n\
    \    unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[2]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[4]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[6]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[8]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[10]\n    end\n  \
    \  unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[12]\n    end\n  \
    \  unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[14]\n    end\n  \
    \  unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[16]\n    end\n  \
    \  unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[17]\n    end\n\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph5tss3kg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph5tss3kg.jl:1\n\
    in expression starting at /tmp/tmph5tss3kg.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    for word in words \n        for char in\
    \ word\n            unique_chars <- unique_chars + char\n        end\n    end\n\
    \    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    else\n        return words[findfirst(unique_chars)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. \nThe function should remove all duplicate words and return\
    \ the list with unique words.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkvgnls0.jl:27\nin expression starting at\
    \ /tmp/tmpnkvgnls0.jl:27\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words \n        for char in word\n            unique_chars = unique_chars +\
    \ char\n            unique_chars_count = unique_chars_count + 1\n        end\n\
    \    end\n    \n    if unique_chars_count > unique_chars.length\n        return\
    \ words[1]\n    else\n        return words[end]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a string and returns the number of unique\
    \ characters in it.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoeujutrw.jl:30\nin expression starting at\
    \ /tmp/tmpoeujutrw.jl:30\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update([word for word in\
    \ words if word != \"\"])\n    unique_chars.update([word for word in words if\
    \ word != \"\"])\n    unique_chars.update([word for word in words if word != \"\
    \"])\n    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpui332ymm.jl:1\nin expression starting at /tmp/tmpui332ymm.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse.chars))\n    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3rpfwwb.jl:33\nin expression starting at\
    \ /tmp/tmpp3rpfwwb.jl:33\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"_\"\
    )\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsol2qf3h.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsol2qf3h.jl:1\n\
    in expression starting at /tmp/tmpsol2qf3h.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars_count = 0\n    for word\
    \ in words\n        for char in word\n            unique_chars.add(char)\n   \
    \         unique_chars_count += 1\n            if unique_chars_count > unique_chars_max\n\
    \                unique_chars_max = unique_chars_count\n                unique_chars_word\
    \ = word\n        end\n    end\n    return unique_chars_word\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a list of strings and returns a list\
    \ of strings. \nThe function should remove all duplicate words from the list.\
    \ \nThe function should remove all empty strings from the list. \nThe function\
    \ should remove all strings that are not words. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7zwjitr.jl:27\nin expression starting at\
    \ /tmp/tmpk7zwjitr.jl:27\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars.update(\"a\"..\"z\")\n  \
    \  unique_chars.update(\"A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\") \n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\":\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"\
    %\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"\
    *\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"\
    }\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"~\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"\
    ^\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"*\")\n    unique_chars.update(\"\
    (\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"\
    ]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    |\")\n    unique_chars.update(\"~\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    $\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"\
    &\")\n    unique_chars.update(\"*\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"\
    {\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"\
    ~\")\n    unique_chars.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi578_0v.jl:25\nin expression starting at\
    \ /tmp/tmpzi578_0v.jl:25\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&lower))\n    unique_chars = unique_chars.union(words.map(&upper))\n\
    \    unique_chars = unique_chars.union(words.map(&chars))\n    unique_chars =\
    \ unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&split))\n\
    \    unique_chars = unique_chars.union(words.map(&join))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xkwxx0r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xkwxx0r.jl:1\n\
    in expression starting at /tmp/tmp5xkwxx0r.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        for char\
    \ in word\n            unique_chars[char] = unique_chars[char] + 1\n    end\n\
    \    unique_chars = unique_chars.keys\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise: Write a function that accepts a list of strings and returns\
    \ the word with maximum number of unique characters. If the word has maximum number\
    \ of unique characters, return the first word in the lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0v2noo8.jl:24\nin expression starting at\
    \ /tmp/tmpc0v2noo8.jl:24\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    \n    if unique_chars.size == 1\n        return\
    \ unique_chars.first()\n    else\n        return unique_chars.last()\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of occurrences of that string in the given string.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpyxe2p5.jl:15\nin expression starting at\
    \ /tmp/tmpgpyxe2p5.jl:15\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fvtlo0p.jl:15\nin expression starting at\
    \ /tmp/tmp9fvtlo0p.jl:15\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.map(char).filter(x -> x != \" \")\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjj4n_oq.jl:52\nin expression starting at\
    \ /tmp/tmprjj4n_oq.jl:52\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words \n        unique_chars = unique_chars + Set(word)\n   \
    \     if length(unique_chars) > length(word_with_max_unique_chars)\n         \
    \   word_with_max_unique_chars = word\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3lzm0vw.jl:24\nin expression starting at\
    \ /tmp/tmpg3lzm0vw.jl:24\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.map(sort)\n    unique_chars = unique_chars.last\n    unique_chars\
    \ = unique_chars.last\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns the number of unique characters in\
    \ that string. \nThe function should ignore spaces and punctuation marks.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp282n49gb.jl:22\nin expression starting at\
    \ /tmp/tmp282n49gb.jl:22\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars <- unique_chars + char\n        end\n    end\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars \nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk78vgtr0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk78vgtr0.jl:1\n\
    in expression starting at /tmp/tmpk78vgtr0.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars |= char\n    end\n    \n    if unique_chars\
    \ == Set{Char}()\n        return words[1]\n    else\n        unique_chars = unique_chars\
    \ - Set{Char}()\n        unique_chars = unique_chars.sorted()\n        return\
    \ words[unique_chars[1]]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a list of strings and returns a list of strings. \nThe function should\
    \ remove all duplicate words and return the list without duplicates.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptl2vjd_o.jl:28\nin expression starting at\
    \ /tmp/tmptl2vjd_o.jl:28\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptbjftpwe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptbjftpwe.jl:1\n\
    in expression starting at /tmp/tmptbjftpwe.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj18mmw21.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj18mmw21.jl:1\n\
    in expression starting at /tmp/tmpj18mmw21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzz9_jxk4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzz9_jxk4.jl:1\n\
    in expression starting at /tmp/tmpzz9_jxk4.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    if length(unique_chars) > length(words)\n\
    \        \n        unique_chars = unique_chars - Set(words[1])\n        \n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9vhrzyw6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9vhrzyw6.jl:1\n\
    in expression starting at /tmp/tmp9vhrzyw6.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings\
    \ and a character as input. Return the word with maximum number of unique characters.\
    \ If multiple strings have maximum number of unique characters, return the one\
    \ which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8pbu_wg.jl:27\nin expression starting at\
    \ /tmp/tmpl8pbu_wg.jl:27\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    return unique_chars.max() \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a string and returns a string with all\
    \ the characters in lower case. \n    For example, if the input string is \"hello\"\
    , the output should be \"hello\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcue_5k28.jl:15\nin expression starting at\
    \ /tmp/tmpcue_5k28.jl:15\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ = unique_chars + Set{Char}(word)\n    end\n    unique_chars = unique_chars -\
    \ Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"b\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"c\")\n    unique_chars = unique_chars - Set{Char}(\"\
    d\")\n    unique_chars = unique_chars - Set{Char}(\"e\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"f\")\n    unique_chars = unique_chars - Set{Char}(\"g\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"h\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"i\")\n    unique_chars = unique_chars - Set{Char}(\"j\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"k\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"l\")\n    unique_chars = unique_chars - Set{Char}(\"m\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"n\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"p\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"r\")\n    unique_chars = unique_chars - Set{Char}(\"s\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"t\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"v\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"w\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"y\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"z\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"A\")\n    unique_chars = unique_chars - Set{Char}(\"B\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"C\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"D\")\n    unique_chars = unique_chars - Set{Char}(\"E\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"F\")\n    unique_chars = unique_chars\
    \ - Set{\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqw4mdyws.jl:53\nin expression starting at\
    \ /tmp/tmpqw4mdyws.jl:53\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars <- unique_chars + char\n        end\n    end\n\
    \    \n    if unique_chars == Set{Char}(\"\") \n        return words[1]\n    else\n\
    \        unique_chars = Set{Char}(\"\")\n        for word in words \n        \
    \    for char in word\n                unique_chars <- unique_chars + char\n \
    \           end\n        end\n        \n        if unique_chars == Set{Char}(\"\
    \") \n            return words[1]\n        else\n            unique_chars = Set{Char}(\"\
    \")\n            for word in words \n                for char in word\n      \
    \              unique_chars <- unique_chars + char\n                end\n    \
    \        end\n            \n            if unique_chars == Set{Char}(\"\") \n\
    \                return words[1]\n            else\n                unique_chars\
    \ = Set{Char}(\"\")\n                for word in words \n                    for\
    \ char in word\n                        unique_chars <- unique_chars + char\n\
    \                    end\n                end\n                \n            \
    \    if unique_chars == Set{Char}(\"\") \n                    return words[1]\n\
    \                else\n                    unique_chars = Set{Char}(\"\")\n  \
    \                  for word in words \n                        for char in word\n\
    \                            unique_chars <- unique_chars + char\n           \
    \             end\n                    end\n                    \n           \
    \         if unique_chars == Set{Char}(\"\") \n                        return\
    \ words[1]\n                    else\n                        unique_chars = Set{Char}(\"\
    \")\n                        for word in words \n                            for\
    \ char in word\n                                unique_chars <- unique_chars +\
    \ char\n                            end\n                        end\n       \
    \                 \n                        if unique_chars == Set{Char}(\"\"\
    ) \n                            return words[1]\n                        else\n\
    \                            unique_chars = Set{Char}(\"\")\n                \
    \            for word in words \n                                for char in word\n\
    \                                    unique_chars <- unique_chars + char\n   \
    \                             end\n                            end\n         \
    \                   \n                            if unique_chars == Set{Char}(\"\
    \") \n                                return words[1]\n                      \
    \      else\n                                unique_chars = Set{Char}(\"\")\n\
    \                                for word in words \n                        \
    \            for char in word\n                                        unique_chars\
    \ <- unique_chars + char\n                                    end\n          \
    \                      end\n                                \n               \
    \                 if unique_chars == Set{Char}(\"\") \n                      \
    \              return words[1]\n                                else\n       \
    \                             unique_chars = Set{Char}(\"\")\n               \
    \                     for word in words \n                                   \
    \     for char in word\n                                            unique_chars\
    \ <- unique_chars + char\n                                        end\n      \
    \                              end\n                                    \n   \
    \                                 if unique_chars == Set{Char}(\"\") \n      \
    \                                  return words[1]\n                         \
    \           else\n                                        unique_chars = Set{Char}(\"\
    \")\n                                        for word in words \n            \
    \                                for char in word\n                          \
    \                      unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpkn8uamku.jl:106\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkn8uamku.jl:1\n\
    in expression starting at /tmp/tmpkn8uamku.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyrngrsn.jl:51\nin expression starting at\
    \ /tmp/tmptyrngrsn.jl:51\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict{Char, Int}()\n   \
    \ for word in words \n        for char in word\n            if char in unique_chars\n\
    \                unique_chars_count[char] += 1\n            else\n           \
    \     unique_chars += char\n                unique_chars_count[char] = 1\n   \
    \ end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n    \n    return\
    \ unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a list of strings and returns a list of strings where each string in\
    \ the list contains only unique characters. \nThe function should return a list\
    \ of strings where each string in the list contains only unique characters.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqzpj4wp.jl:29\nin expression starting at\
    \ /tmp/tmplqzpj4wp.jl:29\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    else\n        \n        unique_chars = unique_chars -\
    \ Set(\"a\")\n        \n        if length(unique_chars) == 0\n            return\
    \ words[2]\n        else\n            \n            unique_chars = unique_chars\
    \ - Set(\"a\")\n            \n            if length(unique_chars) == 0\n     \
    \           return words[3]\n            else\n                \n            \
    \    unique_chars = unique_chars - Set(\"a\")\n                \n            \
    \    if length(unique_chars) == 0\n                    return words[4]\n     \
    \           else\n                    \n                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                    \n                    if length(unique_chars)\
    \ == 0\n                        return words[5]\n                    else\n  \
    \                      \n                        unique_chars = unique_chars -\
    \ Set(\"a\")\n                        \n                        if length(unique_chars)\
    \ == 0\n                            return words[6]\n                        else\n\
    \                            \n                            unique_chars = unique_chars\
    \ - Set(\"a\")\n                            \n                            if length(unique_chars)\
    \ == 0\n                                return words[7]\n                    \
    \        else\n                                \n                            \
    \    unique_chars = unique_chars - Set(\"a\")\n                              \
    \  \n                                if length(unique_chars) == 0\n          \
    \                          return words[8]\n                                else\n\
    \                                    \n                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                    \n        \
    \                            if length(unique_chars) == 0\n                  \
    \                      return words[9]\n                                    else\n\
    \                                        \n                                  \
    \      unique_chars = unique_chars - Set(\"a\")\n                            \
    \            \n                                        if length(unique_chars)\
    \ == 0\n                                            return words[10]\n       \
    \                                 else\n                                     \
    \       \n                                            unique_chars = unique_chars\
    \ - Set(\"a\")\n                                            \n               \
    \                             if length(unique_chars) == 0\n                 \
    \                               return words[11]\n                           \
    \                 else\n                                                \n   \
    \                                             unique_chars = unique_chars - Set(\"\
    a\")\n                                                \n                     \
    \                           if length(unique_chars) == 0\n                   \
    \                                 return words[12]\n                         \
    \                       else\n                                               \
    \     \n                                                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                                                    \n       \
    \                                             if length(unique_chars) == 0\n \
    \                                                       return words[13]\n   \
    \                                                 else\n                     \
    \                                   \n                                       \
    \                 unique_chars = unique_chars - Set(\"a\")\n                 \
    \                                       \n                                   \
    \                     if length(unique_chars) == 0\n                         \
    \                                   return words[14]\n                       \
    \                                 else\n                                     \
    \                       \n                                                   \
    \         unique_chars = unique_chars - Set(\"a\")\n                         \
    \                                   \n                                       \
    \                     if length(unique_chars) == 0\n                         \
    \                                       return words[15]\n                   \
    \                                         else\n                             \
    \                                   \n                                       \
    \                         unique_chars = unique_chars - Set(\"a\")\n         \
    \                                                       \n                   \
    \                                             if length(unique_\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplk9ntdkw.jl:115\nin expression starting at\
    \ /tmp/tmplk9ntdkw.jl:115\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n    for word\
    \ in words \n        unique_chars = unique_chars + Set(word)\n        if unique_chars.size\
    \ > word_with_max_unique_chars.length\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case. \n    For example, \"Hello World\" ->\
    \ \"helloworld\".\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s7e2glm.jl:24\nin expression starting at\
    \ /tmp/tmp_s7e2glm.jl:24\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        for c in w\n\
    \            unique_chars.add(c)\n            if unique_chars.size > max_chars\n\
    \                return w\n        end\n    end\n    return words[1]\nend\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and a string.\
    \ The function should return a list of strings that contains the string in the\
    \ first position and all other strings in the list except the string in the first\
    \ position. For example, if the list contains [\"apple\", \"banana\", \"cherry\"\
    ] and the string \"apple\" the function should return [\"banana\", \"cherry\"\
    ]. If the string is not in the list return an empty list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijz5m653.jl:24\nin expression starting at\
    \ /tmp/tmpijz5m653.jl:24\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1502c5rt.jl:54\nin expression starting at\
    \ /tmp/tmp1502c5rt.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    e\")\n    unique_chars = unique_chars - Set{Char}(\"i\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"u\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"y\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"s\")\n    unique_chars = unique_chars - Set{Char}(\"d\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"h\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"r\")\n    unique_chars = unique_chars - Set{Char}(\"c\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"k\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"m\")\n    unique_chars = unique_chars - Set{Char}(\"p\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"l\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"f\")\n    unique_chars = unique_chars - Set{Char}(\"v\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"w\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"y\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"e\")\n    unique_chars = unique_chars - Set{Char}(\"i\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"o\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"y\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"s\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"d\")\n    unique_chars = unique_chars - Set{Char}(\"h\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"r\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpzl2nhe.jl:57\nin expression starting at\
    \ /tmp/tmpmpzl2nhe.jl:57\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bzdnkis.jl:21\nin expression starting at\
    \ /tmp/tmp8bzdnkis.jl:21\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm3tfe9r1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm3tfe9r1.jl:1\n\
    in expression starting at /tmp/tmpm3tfe9r1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars\
    \ = unique_chars.keys() |> sort\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[end-1]\n    unique_chars = unique_chars[end-2]\n    unique_chars\
    \ = unique_chars[end-3]\n    unique_chars = unique_chars[end-4]\n    unique_chars\
    \ = unique_chars[end-5]\n    unique_chars = unique_chars[end-6]\n    unique_chars\
    \ = unique_chars[end-7]\n    unique_chars = unique_chars[end-8]\n    unique_chars\
    \ = unique_chars[end-9]\n    unique_chars = unique_chars[end-10]\n    unique_chars\
    \ = unique_chars[end-11]\n    unique_chars = unique_chars[end-12]\n    unique_chars\
    \ = unique_chars[end-13]\n    unique_chars = unique_chars[end-14]\n    unique_chars\
    \ = unique_chars[end-15]\n    unique_chars = unique_chars[end-16]\n    unique_chars\
    \ = unique_chars[end-17]\n    unique_chars = unique_chars[end-18]\n    unique_chars\
    \ = unique_chars[end-19]\n    unique_chars = unique_chars[end-20]\n    unique_chars\
    \ = unique_chars[end-21]\n    unique_chars = unique_chars[end-22]\n    unique_chars\
    \ = unique_chars[end-23]\n    unique_chars = unique_chars[end-24]\n    unique_chars\
    \ = unique_chars[end-25]\n    unique_chars = unique_chars[end-26]\n    unique_chars\
    \ = unique_chars[end-27]\n    unique_chars = unique_chars[end-28]\n    unique_chars\
    \ = unique_chars[end-29]\n    unique_chars = unique_chars[end-30]\n    unique_chars\
    \ = unique_chars[end-31]\n    unique_chars = unique_chars[end-32]\n    unique_chars\
    \ = unique_chars[end-33]\n    unique_chars = unique_chars[end-34]\n    unique_chars\
    \ = unique_chars[end-35]\n    unique_chars = unique_chars[end-36]\n    unique_chars\
    \ = unique_chars[end-37]\n    unique_chars = unique_chars[end-38]\n    unique_chars\
    \ = unique_chars[end-39]\n    unique_chars = unique_chars[end-40]\n    unique_chars\
    \ = unique_chars[end-41]\n    unique_chars = unique_chars[end-42]\n    unique_chars\
    \ = unique_chars[end-43]\n    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7gimlj27.jl:15\nin expression starting at\
    \ /tmp/tmp7gimlj27.jl:15\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy0o473ml.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy0o473ml.jl:1\n\
    in expression starting at /tmp/tmpy0o473ml.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update(\"a\")\n    unique_chars.update(\"\
    b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"d\")\n    unique_chars.update(\"\
    e\")\n    unique_chars.update(\"f\")\n    unique_chars.update(\"g\")\n    unique_chars.update(\"\
    h\")\n    unique_chars.update(\"i\")\n    unique_chars.update(\"j\")\n    unique_chars.update(\"\
    k\")\n    unique_chars.update(\"l\")\n    unique_chars.update(\"m\")\n    unique_chars.update(\"\
    n\")\n    unique_chars.update(\"o\")\n    unique_chars.update(\"p\")\n    unique_chars.update(\"\
    q\")\n    unique_chars.update(\"r\")\n    unique_chars.update(\"s\")\n    unique_chars.update(\"\
    t\")\n    unique_chars.update(\"u\")\n    unique_chars.update(\"v\")\n    unique_chars.update(\"\
    w\")\n    unique_chars.update(\"x\")\n    unique_chars.update(\"y\")\n    unique_chars.update(\"\
    z\")\n    unique_chars.update(\"A\")\n    unique_chars.update(\"B\")\n    unique_chars.update(\"\
    C\")\n    unique_chars.update(\"D\")\n    unique_chars.update(\"E\")\n    unique_chars.update(\"\
    F\")\n    unique_chars.update(\"G\")\n    unique_chars.update(\"H\")\n    unique_chars.update(\"\
    I\")\n    unique_chars.update(\"J\")\n    unique_chars.update(\"K\")\n    unique_chars.update(\"\
    L\")\n    unique_chars.update(\"M\")\n    unique_chars.update(\"N\")\n    unique_chars.update(\"\
    O\")\n    unique_chars.update(\"P\")\n    unique_chars.update(\"Q\")\n    unique_chars.update(\"\
    R\")\n    unique_chars.update(\"S\")\n    unique_chars.update(\"T\")\n    unique_chars.update(\"\
    U\")\n    unique_chars.update(\"V\")\n    unique_chars.update(\"W\")\n    unique_chars.update(\"\
    X\")\n    unique_chars.update(\"Y\")\n    unique_chars.update(\"Z\")\n    unique_chars.update(\"\
    a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"\
    d\")\n    unique_chars.update(\"e\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmponjay712.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmponjay712.jl:1\n\
    in expression starting at /tmp/tmponjay712.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnix5zy_.jl:1\nin expression starting at /tmp/tmphnix5zy_.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ the number of vowels in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpab_mbb3o.jl:27\nin expression starting at\
    \ /tmp/tmpab_mbb3o.jl:27\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj18mmw21.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj18mmw21.jl:1\n\
    in expression starting at /tmp/tmpj18mmw21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words\n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"\")\n    unique_chars = unique_chars.sorted()\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case. \nThe function should ignore the case\
    \ of the characters.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcp4y7ht5.jl:24\nin expression starting at\
    \ /tmp/tmpcp4y7ht5.jl:24\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words \n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of occurrences of that string in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgpf1gdm.jl:21\nin expression starting at\
    \ /tmp/tmpkgpf1gdm.jl:21\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptbjftpwe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptbjftpwe.jl:1\n\
    in expression starting at /tmp/tmptbjftpwe.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars\n   \
    \ unique_chars.max_by(&length)\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a string and returns a string with all the letters capitalized.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8a78daeb.jl:22\nin expression starting at\
    \ /tmp/tmp8a78daeb.jl:22\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update([word for word in\
    \ words])\n    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::2]\
    \ for word in words])\n    unique_chars.update([word[::3] for word in words])\n\
    \    unique_chars.update([word[::4] for word in words])\n    unique_chars.update([word[::5]\
    \ for word in words])\n    unique_chars.update([word[::6] for word in words])\n\
    \    unique_chars.update([word[::7] for word in words])\n    unique_chars.update([word[::8]\
    \ for word in words])\n    unique_chars.update([word[::9] for word in words])\n\
    \    unique_chars.update([word[::10] for word in words])\n    unique_chars.update([word[::11]\
    \ for word in words])\n    unique_chars.update([word[::12] for word in words])\n\
    \    unique_chars.update([word[::13] for word in words])\n    unique_chars.update([word[::14]\
    \ for word in words])\n    unique_chars.update([word[::15] for word in words])\n\
    \    unique_chars.update([word[::16] for word in words])\n    unique_chars.update([word[::17]\
    \ for word in words])\n    unique_chars.update([word[::18] for word in words])\n\
    \    unique_chars.update([word[::19] for word in words])\n    unique_chars.update([word[::20]\
    \ for word in words])\n    unique_chars.update([word[::21] for word in words])\n\
    \    unique_chars.update([word[::22] for word in words])\n    unique_chars.update([word[::23]\
    \ for word in words])\n    unique_chars.update([word[::24] for word in words])\n\
    \    unique_chars.update([word[::25] for word in words])\n    unique_chars.update([word[::26]\
    \ for word in words])\n    unique_chars.update([word[::27] for word in words])\n\
    \    unique_chars.update([word[::28] for word in words])\n    unique_chars.update([word[::29]\
    \ for word in words])\n    unique_chars.update([word[::30] for word in words])\n\
    \    unique_chars.update([word[::31] for word in words])\n    unique_chars.update([word[::32]\
    \ for word in words])\n    unique_chars.update([word[::33] for word in words])\n\
    \    unique_chars.update([word[::34] for word in words])\n    unique_chars.update([word[::35]\
    \ for word in word\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj0d0euv8.jl:16\n\
    in expression starting at /tmp/tmpj0d0euv8.jl:16\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars\n   \
    \ unique_chars.max\n    unique_chars.min\n    unique_chars.sort\n    unique_chars.first\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings\
    \ and returns a list of strings. \nThe list contains different words. \nReturn\
    \ the word with maximum number of unique characters. If multiple strings have\
    \ maximum number of unique characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgvkqiri.jl:25\nin expression starting at\
    \ /tmp/tmpqgvkqiri.jl:25\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    return unique_chars.max \n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\", \"nnnn\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t4tt26x.jl:20\nin expression starting at\
    \ /tmp/tmp8t4tt26x.jl:20\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    for word in words\n        for char in\
    \ word\n            unique_chars <- unique_chars + char\n        end\n    end\n\
    \    \n    if unique_chars == Set{Char}()\n        return words[1]\n    else\n\
    \        unique_chars = sort(unique_chars)\n        for word in words\n      \
    \      if length(unique_chars) == length(word)\n                return word\n\
    \            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a string and returns the number of occurrences of that\
    \ string in the given string. \nIf the given string is not present in the given\
    \ string, return 0.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphba9i_40.jl:32\nin expression starting at\
    \ /tmp/tmphba9i_40.jl:32\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_char\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr1d2t8ye.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr1d2t8ye.jl:1\n\
    in expression starting at /tmp/tmpr1d2t8ye.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars\
    \ = unique_chars.keys() \n    unique_chars = unique_chars.sort\n    unique_chars\
    \ = unique_chars[end]\n    return unique_chars\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d_m1u8t.jl:15\nin expression starting at\
    \ /tmp/tmp1d_m1u8t.jl:15\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for w in words\n        for c in w\n\
    \            unique_chars.add(c)\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzf4klxb3.jl:54\nin expression starting at\
    \ /tmp/tmpzf4klxb3.jl:54\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbmzpbup.jl:55\nin expression starting at\
    \ /tmp/tmpxbmzpbup.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words \n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that accepts a list of strings\
    \ and returns a list of strings. \nThe function should remove all duplicate strings\
    \ from the list. \nThe function should remove all empty strings from the list.\
    \ \nThe function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_x4kvna.jl:27\nin expression starting at\
    \ /tmp/tmp6_x4kvna.jl:27\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set{Char}(word))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[1]))\n    unique_chars =\
    \ unique_chars.union(Set{Char}(word[2]))\n    unique_chars = unique_chars.union(Set{Char}(word[3]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[4]))\n    unique_chars =\
    \ unique_chars.union(Set{Char}(word[5]))\n    unique_chars = unique_chars.union(Set{Char}(word[6]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[7]))\n    unique_chars =\
    \ unique_chars.union(Set{Char}(word[8]))\n    unique_chars = unique_chars.union(Set{Char}(word[9]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[10]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[11]))\n    unique_chars = unique_chars.union(Set{Char}(word[12]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[13]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[14]))\n    unique_chars = unique_chars.union(Set{Char}(word[15]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[16]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[17]))\n    unique_chars = unique_chars.union(Set{Char}(word[18]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[19]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[20]))\n    unique_chars = unique_chars.union(Set{Char}(word[21]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[22]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[23]))\n    unique_chars = unique_chars.union(Set{Char}(word[24]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[25]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[26]))\n    unique_chars = unique_chars.union(Set{Char}(word[27]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[28]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[29]))\n    unique_chars = unique_chars.union(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75glll4s.jl:48\nin expression starting at\
    \ /tmp/tmp75glll4s.jl:48\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"\")\n    unique_chars = unique_chars.sorted()\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. \nThe function should remove duplicate strings from the list.\
    \ \nThe function should return a list of strings with no duplicates.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw7oi8ee.jl:24\nin expression starting at\
    \ /tmp/tmpcw7oi8ee.jl:24\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rdpckj5.jl:51\nin expression starting at\
    \ /tmp/tmp9rdpckj5.jl:51\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with the first letter of each word capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ojhrq0r.jl:21\nin expression starting at\
    \ /tmp/tmp8ojhrq0r.jl:21\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars\n    unique_chars.max\n\
    \    unique_chars.min \nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca4fsmgb.jl:23\nin expression starting at\
    \ /tmp/tmpca4fsmgb.jl:23\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnix5zy_.jl:1\nin expression starting at /tmp/tmphnix5zy_.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1502c5rt.jl:54\nin expression starting at\
    \ /tmp/tmp1502c5rt.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34be_07k.jl:47\nin expression starting at\
    \ /tmp/tmp34be_07k.jl:47\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbmzpbup.jl:55\nin expression starting at\
    \ /tmp/tmpxbmzpbup.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars_count = Set{Int64}(0)\n\
    \    for word in words\n        for char in word\n            unique_chars +=\
    \ char\n            unique_chars_count[char] += 1\n    end\n    \n    if unique_chars_count\
    \ == unique_chars\n        return words[1]\n    else\n        unique_chars_count.sort\n\
    \        unique_chars_count.reverse\n        unique_chars_count.first\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in that string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9jslynv.jl:30\nin expression starting at\
    \ /tmp/tmpz9jslynv.jl:30\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt3n39w23.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt3n39w23.jl:1\n\
    in expression starting at /tmp/tmpt3n39w23.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n    unique_chars\
    \ = unique_chars - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n\
    \    unique_chars = unique_chars - Set(\"4\")\n    unique_chars = unique_chars\
    \ - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n    unique_chars\
    \ = unique_chars - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"@\")\n    unique_chars = unique_chars\
    \ - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = \nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqoymjhbs.jl:31\nin expression starting at\
    \ /tmp/tmpqoymjhbs.jl:31\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt3n39w23.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt3n39w23.jl:1\n\
    in expression starting at /tmp/tmpt3n39w23.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words\n    \
    \    unique_chars |= Set(word)\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"b\")\n    unique_chars\
    \ = unique_chars - Set(\"c\")\n    unique_chars = unique_chars - Set(\"d\")\n\
    \    unique_chars = unique_chars - Set(\"e\")\n    unique_chars = unique_chars\
    \ - Set(\"f\")\n    unique_chars = unique_chars - Set(\"g\")\n    unique_chars\
    \ = unique_chars - Set(\"h\")\n    unique_chars = unique_chars - Set(\"i\")\n\
    \    unique_chars = unique_chars - Set(\"j\")\n    unique_chars = unique_chars\
    \ - Set(\"k\")\n    unique_chars = unique_chars - Set(\"l\")\n    unique_chars\
    \ = unique_chars - Set(\"m\")\n    unique_chars = unique_chars - Set(\"n\")\n\
    \    unique_chars = unique_chars - Set(\"o\")\n    unique_chars = unique_chars\
    \ - Set(\"p\")\n    unique_chars = unique_chars - Set(\"q\")\n    unique_chars\
    \ = unique_chars - Set(\"r\")\n    unique_chars = unique_chars - Set(\"s\")\n\
    \    unique_chars = unique_chars - Set(\"t\")\n    unique_chars = unique_chars\
    \ - Set(\"u\")\n    unique_chars = unique_chars - Set(\"v\")\n    unique_chars\
    \ = unique_chars - Set(\"w\")\n    unique_chars = unique_chars - Set(\"x\")\n\
    \    unique_chars = unique_chars - Set(\"y\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"B\")\n    unique_chars = unique_chars - Set(\"C\")\n\
    \    unique_chars = unique_chars - Set(\"D\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"F\")\n    unique_chars\
    \ = unique_chars - Set(\"G\")\n    unique_chars = unique_chars - Set(\"H\")\n\
    \    unique_chars = unique_chars - Set(\"I\")\n    unique_chars = unique_chars\
    \ - Set(\"J\")\n    unique_chars = unique_chars - Set(\"K\")\n    unique_chars\
    \ = unique_chars - Set(\"L\")\n    unique_chars = unique_chars - Set(\"M\")\n\
    \    unique_chars = unique_chars - Set(\"N\")\n    unique_chars = unique_chars\
    \ - Set\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgibn26so.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgibn26so.jl:1\n\
    in expression starting at /tmp/tmpgibn26so.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(*words)\n\
    \    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars =\
    \ unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpteedfop2.jl:15\nin expression starting at\
    \ /tmp/tmpteedfop2.jl:15\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\".\")\n    unique_chars = unique_chars - Set{Char}(\",\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\"?\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"!\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\"%\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"^\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"&\")\n    unique_chars = unique_chars - Set{Char}(\"*\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"+\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\".\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\",\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"?\")\n    unique_chars = unique_chars - Set{Char}(\"!\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"$\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"%\")\n    unique_chars = unique_chars - Set{Char}(\"^\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"&\")\n    unique_chars = unique_chars\
    \ - Set\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhjusnw1.jl:31\nin expression starting at\
    \ /tmp/tmpqhjusnw1.jl:31\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"_\"\
    )\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjddug9jn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjddug9jn.jl:1\n\
    in expression starting at /tmp/tmpjddug9jn.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"b\")\n    unique_chars = unique_chars - Set(\"c\")\n\
    \    unique_chars = unique_chars - Set(\"d\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"f\")\n    unique_chars\
    \ = unique_chars - Set(\"g\")\n    unique_chars = unique_chars - Set(\"h\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"j\")\n    unique_chars = unique_chars - Set(\"k\")\n    unique_chars\
    \ = unique_chars - Set(\"l\")\n    unique_chars = unique_chars - Set(\"m\")\n\
    \    unique_chars = unique_chars - Set(\"n\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"p\")\n    unique_chars\
    \ = unique_chars - Set(\"q\")\n    unique_chars = unique_chars - Set(\"r\")\n\
    \    unique_chars = unique_chars - Set(\"s\")\n    unique_chars = unique_chars\
    \ - Set(\"t\")\n    unique_chars = unique_chars - Set(\"u\")\n    unique_chars\
    \ = unique_chars - Set(\"v\")\n    unique_chars = unique_chars - Set(\"w\")\n\
    \    unique_chars = unique_chars - Set(\"x\")\n    unique_chars = unique_chars\
    \ - Set(\"y\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"B\")\n\
    \    unique_chars = unique_chars - Set(\"C\")\n    unique_chars = unique_chars\
    \ - Set(\"D\")\n    unique_chars = unique_chars - Set(\"E\")\n    unique_chars\
    \ = unique_chars - Set(\"F\")\n    unique_chars = unique_chars - Set(\"G\")\n\
    \    unique_chars = unique_chars - Set(\"H\")\n    unique_chars = unique_chars\
    \ - Set(\"I\")\n    unique_chars = unique_chars - Set(\"J\")\n    unique_chars\
    \ = unique_chars - Set(\"K\")\n    unique_chars = unique_chars - Set(\"L\")\n\
    \    unique_chars = unique_chars - Set(\"M\")\n    unique_chars = unique_chars\
    \ - Set(\"N\")\n    unique_chars = unique_chars - Set(\"O\")\n    unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp1khucpw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp1khucpw.jl:1\n\
    in expression starting at /tmp/tmpp1khucpw.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj18mmw21.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj18mmw21.jl:1\n\
    in expression starting at /tmp/tmpj18mmw21.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    return unique_chars.max() \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a string and returns the number of vowels\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_fnjl2b.jl:15\nin expression starting at\
    \ /tmp/tmpx_fnjl2b.jl:15\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe95xp2x0.jl:55\nin expression starting at\
    \ /tmp/tmpe95xp2x0.jl:55\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&lower))\n    unique_chars = unique_chars.union(words.map(&upper))\n\
    \    unique_chars = unique_chars.union(words.map(&chars))\n    unique_chars =\
    \ unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpubf1omkv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpubf1omkv.jl:1\n\
    in expression starting at /tmp/tmpubf1omkv.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        for char in word\n            unique_chars << char\n        \
    \    unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[words.index(words[words.index(word)\
    \ - 1])]\n    else\n        return words[words.index(words[words.index(word) -\
    \ 1])]\n    end\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts\
    \ a list of strings and returns a dictionary that maps a word to its number of\
    \ occurrences.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lufne_f.jl:30\nin expression starting at\
    \ /tmp/tmp3lufne_f.jl:30\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fvtlo0p.jl:15\nin expression starting at\
    \ /tmp/tmp9fvtlo0p.jl:15\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(*words)\n\
    \    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars =\
    \ unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpteedfop2.jl:15\nin expression starting at\
    \ /tmp/tmpteedfop2.jl:15\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wqsolry.jl:57\nin expression starting at\
    \ /tmp/tmp5wqsolry.jl:57\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set{String}()\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphizal6rq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphizal6rq.jl:1\n\
    in expression starting at /tmp/tmphizal6rq.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update([c for c in words[1]])\n\
    \    unique_chars.update([c for c in words[2]])\n    unique_chars.update([c for\
    \ c in words[3]])\n    unique_chars.update([c for c in words[4]])\n    unique_chars.update([c\
    \ for c in words[5]])\n    unique_chars.update([c for c in words[6]])\n    unique_chars.update([c\
    \ for c in words[7]])\n    unique_chars.update([c for c in words[8]])\n    unique_chars.update([c\
    \ for c in words[9]])\n    unique_chars.update([c for c in words[10]])\n    unique_chars.update([c\
    \ for c in words[11]])\n    unique_chars.update([c for c in words[12]])\n    unique_chars.update([c\
    \ for c in words[13]])\n    unique_chars.update([c for c in words[14]])\n    unique_chars.update([c\
    \ for c in words[15]])\n    unique_chars.update([c for c in words[16]])\n    unique_chars.update([c\
    \ for c in words[17]])\n    unique_chars.update([c for c in words[18]])\n    unique_chars.update([c\
    \ for c in words[19]])\n    unique_chars.update([c for c in words[20]])\n    unique_chars.update([c\
    \ for c in words[21]])\n    unique_chars.update([c for c in words[22]])\n    unique_chars.update([c\
    \ for c in words[23]])\n    unique_chars.update([c for c in words[24]])\n    unique_chars.update([c\
    \ for c in words[25]])\n    unique_chars.update([c for c in words[26]])\n    unique_chars.update([c\
    \ for c in words[27]])\n    unique_chars.update([c for c in words[28]])\n    unique_chars.update([c\
    \ for c in words[29]])\n    unique_chars.update([c for c in words[30]])\n    unique_chars.update([c\
    \ for c in words[31]])\n    unique_chars.update([c for c in words[32]])\n    unique_chars.update([c\
    \ for c in words[33]])\n    unique_chars.update([c for c in words[34]])\n    unique_chars.update([c\
    \ for c in words[35]])\n    unique_chars.update([c for c in words[36]])\n    unique_chars.update([c\
    \ for c in words[37]])\n    unique_chars.update([c for c in words[38]])\n    unique_chars.update([c\
    \ for c in words[39]])\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj6f9lboz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6f9lboz.jl:1\n\
    in expression starting at /tmp/tmpj6f9lboz.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a list of strings\
    \ and a character as input. Return the string which contains all characters from\
    \ the input string. Return an empty string if there is no such string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekw2lvgq.jl:27\nin expression starting at\
    \ /tmp/tmpekw2lvgq.jl:27\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm3tfe9r1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm3tfe9r1.jl:1\n\
    in expression starting at /tmp/tmpm3tfe9r1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in words\n  \
    \      for char in word\n            unique_chars.add(char)\n        end\n   \
    \ end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if\
    \ length(unique_chars) == 0\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return words[2]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[3]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[4]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[5]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return words[6]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return words[7]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return words[11]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return words[12]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[13]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[14]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[15]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49_z9xpl.jl:1\nin expression starting at /tmp/tmp49_z9xpl.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    for word in words\
    \ \n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = length(unique_chars)\n    end\n    \n    if unique_chars_count > length(words)\n\
    \        return words[1]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings and\
    \ returns a list of strings. \nThe function should remove all duplicate words\
    \ and return the list of unique words.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1ljjva2.jl:27\nin expression starting at\
    \ /tmp/tmpa1ljjva2.jl:27\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}()\n    \n    for word in words\n      \
    \  for char in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        \n        unique_chars = unique_chars\
    \ - Set(\"a\")\n        \n        if length(unique_chars) > length(words)\n  \
    \          return words[end]\n        else\n            \n            unique_chars\
    \ = unique_chars - Set(\"a\")\n            \n            if length(unique_chars)\
    \ > length(words)\n                return words[end]\n            else\n     \
    \           \n                unique_chars = unique_chars - Set(\"a\")\n     \
    \           \n                if length(unique_chars) > length(words)\n      \
    \              return words[end]\n                else\n                    \n\
    \                    unique_chars = unique_chars - Set(\"a\")\n              \
    \      \n                    if length(unique_chars) > length(words)\n       \
    \                 return words[end]\n                    else\n              \
    \          \n                        unique_chars = unique_chars - Set(\"a\")\n\
    \                        \n                        if length(unique_chars) > length(words)\n\
    \                            return words[end]\n                        else\n\
    \                            \n                            unique_chars = unique_chars\
    \ - Set(\"a\")\n                            \n                            if length(unique_chars)\
    \ > length(words)\n                                return words[end]\n       \
    \                     else\n                                \n               \
    \                 unique_chars = unique_chars - Set(\"a\")\n                 \
    \               \n                                if length(unique_chars) > length(words)\n\
    \                                    return words[end]\n                     \
    \           else\n                                    \n                     \
    \               unique_chars = unique_chars - Set(\"a\")\n                   \
    \                 \n                                    if length(unique_chars)\
    \ > length(words)\n                                        return words[end]\n\
    \                                    else\n                                  \
    \      \n                                        unique_chars = unique_chars -\
    \ Set(\"a\")\n                                        \n                     \
    \                   if length(unique_chars) > length(words)\n                \
    \                            return words[end]\n                             \
    \           else\n                                            \n             \
    \                               unique_chars = unique_chars - Set(\"a\")\n   \
    \                                         \n                                 \
    \           if length(unique_chars) > length(words)\n                        \
    \                        return words[end]\n                                 \
    \           else\n                                                \n         \
    \                                       unique_chars = unique_chars - Set(\"a\"\
    )\n                                                \n                        \
    \                        if length(unique_chars) > length(words)\n           \
    \                                         return words[end]\n                \
    \                                else\n                                      \
    \              \n                                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \      \n                                                    if length(unique_chars)\
    \ > length(words)\n                                                        return\
    \ words[end]\n                                                    else\n     \
    \                                                   \n                       \
    \                                 unique_chars = unique_chars - Set(\"a\")\n \
    \                                                       \n                   \
    \                                     if length(unique_chars) > length(words)\n\
    \                                                            return words[end]\n\
    \                                                        else\n              \
    \                                              \n                            \
    \                                unique_chars = unique_chars - Set(\"a\")\n  \
    \                                                          \n                \
    \                                            if length(unique_chars) > length(words)\n\
    \                                                                return words[end]\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            \nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmppi_lbo8h.jl:108\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppi_lbo8h.jl:1\n\
    in expression starting at /tmp/tmppi_lbo8h.jl:1\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    \n    unique_chars.max() in unique_chars ? \"\
    string\" : unique_chars.max()\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that accepts a string and returns a string with all the characters in lower\
    \ case. \nIf the input string has any non-alphabetic characters, return an empty\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dep3mbm.jl:15\nin expression starting at\
    \ /tmp/tmp9dep3mbm.jl:15\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ = unique_chars + Set{Char}(word)\n    end\n    unique_chars = unique_chars -\
    \ Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"b\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"c\")\n    unique_chars = unique_chars - Set{Char}(\"\
    d\")\n    unique_chars = unique_chars - Set{Char}(\"e\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"f\")\n    unique_chars = unique_chars - Set{Char}(\"g\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"h\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"i\")\n    unique_chars = unique_chars - Set{Char}(\"j\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"k\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"l\")\n    unique_chars = unique_chars - Set{Char}(\"m\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"n\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"p\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"r\")\n    unique_chars = unique_chars - Set{Char}(\"s\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"t\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"v\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"w\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"y\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"z\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"A\")\n    unique_chars = unique_chars - Set{Char}(\"B\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"C\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"D\")\n    unique_chars = unique_chars - Set{Char}(\"E\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"F\")\n    unique_chars = unique_chars\
    \ - Set{\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqw4mdyws.jl:53\nin expression starting at\
    \ /tmp/tmpqw4mdyws.jl:53\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in\
    \ words\n        unique_chars = unique_chars | Set(word)\n        unique_chars_count[word]\
    \ = length(unique_chars)\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    \n    unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_18t_vf.jl:25\nin expression starting at\
    \ /tmp/tmpo_18t_vf.jl:25\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qodz2wj.jl:15\nin expression starting at\
    \ /tmp/tmp4qodz2wj.jl:15\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    if length(unique_chars) > length(words)\n        return\
    \ words[end]\n    else\n        return find_max(words[2:end])\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ a string with the first letter capitalized.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5p87er8r.jl:26\nin expression starting at\
    \ /tmp/tmp5p87er8r.jl:26\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"z\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return \"0\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"9\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\".\")\n    \n    if length(unique_chars) == 0\n        return \".\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \",\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\":\")\n    \n    if length(unique_chars) == 0\n        return \":\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \";\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"?\")\n    \n    if length(unique_chars) == 0\n        return \"?\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"!\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"@\")\n    \n    if length(unique_chars) == 0\n        return \"@\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"$\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return \"%\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"^\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"^\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"&\")\n    \n    if length(unique_chars) == 0\n        return \"&\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"*\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"*\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return \"(\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1c5oc9q.jl:87\nin expression starting at\
    \ /tmp/tmpi1c5oc9q.jl:87\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcrbhhdmc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcrbhhdmc.jl:1\n\
    in expression starting at /tmp/tmpcrbhhdmc.jl:1\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        for char in word\n            unique_chars << char\n        \
    \    unique_chars_count += 1 if char in unique_chars \n        end\n    end\n\
    \    \n    if unique_chars_count > unique_chars_count\n        return words[words.index(words[words.index(words[words.index(word)])\
    \ -1]) -1]\n    else\n        return words[words.index(words[words.index(word)])\
    \ -1]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts\
    \ a string and returns a string with all the letters capitalized.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpmcsu16of.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmcsu16of.jl:20\n\
    in expression starting at /tmp/tmpmcsu16of.jl:20\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for w in words\n        for c in w\n       \
    \     unique_chars.add(c)\n    end\n    \n    if unique_chars == Set()\n     \
    \   return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"a\"\
    )\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2nah7l_g.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2nah7l_g.jl:1\n\
    in expression starting at /tmp/tmp2nah7l_g.jl:1\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars\
    \ = unique_chars.keys() \n    unique_chars.sort()\n    return unique_chars[end]\n\
    end\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that accepts a string and returns\
    \ the number of unique characters in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0ubagsz.jl:15\nin expression starting at\
    \ /tmp/tmpm0ubagsz.jl:15\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    unique_chars_index\
    \ = 0\n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count += 1\n            if unique_chars_count > unique_chars_index\n\
    \                unique_chars_index = unique_chars_count\n            end\n  \
    \      end\n    end\n    \n    if unique_chars_count == 0\n        return words[1]\n\
    \    else\n        return words[unique_chars_index]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise: Write a function that accepts a list of strings and returns the word\
    \ with maximum number of unique characters. If the word has maximum number of\
    \ unique characters, return the first word in the lexicographical order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvk6lxhp4.jl:33\nin expression starting at\
    \ /tmp/tmpvk6lxhp4.jl:33\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{String}()\n    if length(unique_chars) == 0\n        return words[1]\n\
    \    else\n        return words[findall(unique_chars)[1]]\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that accepts a list of strings.\n    The\
    \ list contains different words. Return the word with minimum number\n    of unique\
    \ characters. If multiple strings have minimum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfni29sc.jl:26\nin expression starting at\
    \ /tmp/tmpgfni29sc.jl:26\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb136eqz.jl:57\nin expression starting at\
    \ /tmp/tmpdb136eqz.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars\n   \
    \ unique_chars.max_by(&length)\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"\
    , \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kk\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupw83ovc.jl:22\nin expression starting at\
    \ /tmp/tmpupw83ovc.jl:22\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5t0_kev5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5t0_kev5.jl:1\n\
    in expression starting at /tmp/tmp5t0_kev5.jl:1\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update([c for c in words[1]])\n\
    \    unique_chars.update([c for c in words[2]])\n    unique_chars.update([c for\
    \ c in words[3]])\n    unique_chars.update([c for c in words[4]])\n    unique_chars.update([c\
    \ for c in words[5]])\n    unique_chars.update([c for c in words[6]])\n    unique_chars.update([c\
    \ for c in words[7]])\n    unique_chars.update([c for c in words[8]])\n    unique_chars.update([c\
    \ for c in words[9]])\n    unique_chars.update([c for c in words[10]])\n    unique_chars.update([c\
    \ for c in words[11]])\n    unique_chars.update([c for c in words[12]])\n    unique_chars.update([c\
    \ for c in words[13]])\n    unique_chars.update([c for c in words[14]])\n    unique_chars.update([c\
    \ for c in words[15]])\n    unique_chars.update([c for c in words[16]])\n    unique_chars.update([c\
    \ for c in words[17]])\n    unique_chars.update([c for c in words[18]])\n    unique_chars.update([c\
    \ for c in words[19]])\n    unique_chars.update([c for c in words[20]])\n    unique_chars.update([c\
    \ for c in words[21]])\n    unique_chars.update([c for c in words[22]])\n    unique_chars.update([c\
    \ for c in words[23]])\n    unique_chars.update([c for c in words[24]])\n    unique_chars.update([c\
    \ for c in words[25]])\n    unique_chars.update([c for c in words[26]])\n    unique_chars.update([c\
    \ for c in words[27]])\n    unique_chars.update([c for c in words[28]])\n    unique_chars.update([c\
    \ for c in words[29]])\n    unique_chars.update([c for c in words[30]])\n    unique_chars.update([c\
    \ for c in words[31]])\n    unique_chars.update([c for c in words[32]])\n    unique_chars.update([c\
    \ for c in words[33]])\n    unique_chars.update([c for c in words[34]])\n    unique_chars.update([c\
    \ for c in words[35]])\n    unique_chars.update([c for c in words[36]])\n    unique_chars.update([c\
    \ for c in words[37]])\n    unique_chars.update([c for c in words[38]])\n    unique_chars.update([c\
    \ for c in words[39]])\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj6f9lboz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6f9lboz.jl:1\n\
    in expression starting at /tmp/tmpj6f9lboz.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars_count = Dict{String, Int}()\n\
    \    for w in words\n        unique_chars |= Set(w)\n        unique_chars_count[w]\
    \ = length(unique_chars)\n    end\n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    return unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns the number of occurrences of that\
    \ string in the string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5w097s9.jl:23\nin expression starting at\
    \ /tmp/tmpp5w097s9.jl:23\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(word))\n\
    \    unique_chars = unique_chars.union(Set(word[1]))\n    unique_chars = unique_chars.union(Set(word[2]))\n\
    \    unique_chars = unique_chars.union(Set(word[3]))\n    unique_chars = unique_chars.union(Set(word[4]))\n\
    \    unique_chars = unique_chars.union(Set(word[5]))\n    unique_chars = unique_chars.union(Set(word[6]))\n\
    \    unique_chars = unique_chars.union(Set(word[7]))\n    unique_chars = unique_chars.union(Set(word[8]))\n\
    \    unique_chars = unique_chars.union(Set(word[9]))\n    unique_chars = unique_chars.union(Set(word[10]))\n\
    \    unique_chars = unique_chars.union(Set(word[11]))\n    unique_chars = unique_chars.union(Set(word[12]))\n\
    \    unique_chars = unique_chars.union(Set(word[13]))\n    unique_chars = unique_chars.union(Set(word[14]))\n\
    \    unique_chars = unique_chars.union(Set(word[15]))\n    unique_chars = unique_chars.union(Set(word[16]))\n\
    \    unique_chars = unique_chars.union(Set(word[17]))\n    unique_chars = unique_chars.union(Set(word[18]))\n\
    \    unique_chars = unique_chars.union(Set(word[19]))\n    unique_chars = unique_chars.union(Set(word[20]))\n\
    \    unique_chars = unique_chars.union(Set(word[21]))\n    unique_chars = unique_chars.union(Set(word[22]))\n\
    \    unique_chars = unique_chars.union(Set(word[23]))\n    unique_chars = unique_chars.union(Set(word[24]))\n\
    \    unique_chars = unique_chars.union(Set(word[25]))\n    unique_chars = unique_chars.union(Set(word[26]))\n\
    \    unique_chars = unique_chars.union(Set(word[27]))\n    unique_chars = unique_chars.union(Set(word[28]))\n\
    \    unique_chars = unique_chars.union(Set(word[29]))\n    unique_chars = unique_chars.union(Set(word[30]))\n\
    \    unique_chars = unique_chars.union(Set(word[31]))\n    unique_chars = unique_chars.union(Set(word[32]))\n\
    \    unique_chars = unique_chars.union(Set(word[33]))\n    unique_chars = unique_chars.union(Set(word[34]))\n\
    \    unique_chars = unique_chars.union(Set(word[35]))\n    unique_chars = unique_chars.union(Set(word[36]))\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptfheqip7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfheqip7.jl:1\n\
    in expression starting at /tmp/tmptfheqip7.jl:1\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb136eqz.jl:57\nin expression starting at\
    \ /tmp/tmpdb136eqz.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    \n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"e\")\n    unique_chars = unique_chars - Set{Char}(\"i\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"o\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"A\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"E\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"I\")\n    unique_chars = unique_chars - Set{Char}(\"O\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"U\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"e\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"i\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"u\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"E\")\n    unique_chars = unique_chars - Set{Char}(\"I\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"O\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"U\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"e\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"i\")\n    unique_chars = unique_chars - Set{Char}(\"o\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"u\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"A\")\n    unique_chars = unique_chars - Set{Char}(\"E\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"I\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"O\")\n    unique_chars = unique_chars - Set{Char}(\"U\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"e\")\n    unique_chars = unique_\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpor4w2k5i.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpor4w2k5i.jl:1\n\
    in expression starting at /tmp/tmpor4w2k5i.jl:1\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc26clx6x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc26clx6x.jl:1\n\
    in expression starting at /tmp/tmpc26clx6x.jl:1\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        for char in word\n            unique_chars << char\n        \
    \    unique_chars_count += 1 if char in unique_chars \n        end\n    end\n\
    \    \n    if unique_chars_count > 1\n        return words[words.index(unique_chars.first)]\n\
    \    else\n        return unique_chars.first\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a string and returns a boolean indicating whether the\
    \ string contains only letters.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpeldpucty.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeldpucty.jl:20\n\
    in expression starting at /tmp/tmpeldpucty.jl:20\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"e\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"i\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"u\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"y\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"s\")\n    unique_chars = unique_chars - Set{Char}(\"t\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"h\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"r\")\n    unique_chars = unique_chars - Set{Char}(\"c\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"d\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"g\")\n    unique_chars = unique_chars - Set{Char}(\"p\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"f\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"v\")\n    unique_chars = unique_chars - Set{Char}(\"k\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"m\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"n\")\n    unique_chars = unique_chars - Set{Char}(\"x\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"b\")\n    unique_chars = unique_chars - Set{Char}(\"k\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"m\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"n\")\n    unique_chars = unique_chars - Set{Char}(\"x\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"b\")\n    unique_chars = unique_chars - Set{Char}(\"k\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"m\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"n\")\n    unique_chars = unique_chars - Set{Char}(\"x\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr59oci8p.jl:57\nin expression starting at\
    \ /tmp/tmpr59oci8p.jl:57\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in words \n \
    \       for char in word\n            unique_chars.add(char)\n    end\n    \n\
    \    if unique_chars.size > 1\n        return words[words.index(words[words.index(words[words.index(words.index(words))])])]\n\
    \    else\n        return words[words.index(words[words.index(words[words.index(words)])])]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list\
    \ of strings and returns a list of strings. \nThe function should remove all duplicate\
    \ words and return the list without duplicates.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_4oe8o3.jl:28\nin expression starting at\
    \ /tmp/tmph_4oe8o3.jl:28\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb136eqz.jl:57\nin expression starting at\
    \ /tmp/tmpdb136eqz.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnix5zy_.jl:1\nin expression starting at /tmp/tmphnix5zy_.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        for c in w\n\
    \            unique_chars.add(c)\n            if unique_chars.size > max_unique_chars\n\
    \                max_unique_chars = unique_chars.size\n            end\n     \
    \   end\n    end\n    unique_chars = unique_chars.sorted()\n    unique_chars[max_unique_chars]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a list of strings\
    \ and returns the word with maximum length. If multiple strings have maximum length,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsq3qdojx.jl:26\nin expression starting at\
    \ /tmp/tmpsq3qdojx.jl:26\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptbjftpwe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptbjftpwe.jl:1\n\
    in expression starting at /tmp/tmptbjftpwe.jl:1\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars\
    \ = unique_chars.keys() \n    unique_chars.sort()\n    unique_chars.reverse()\n\
    \    \n    if unique_chars.size == 1\n        return unique_chars.first()\n  \
    \  end\n    \n    unique_chars.last()\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that accepts a string and returns the number of occurrences of that\
    \ string in the given string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugxylga2.jl:15\nin expression starting at\
    \ /tmp/tmpugxylga2.jl:15\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyrngrsn.jl:51\nin expression starting at\
    \ /tmp/tmptyrngrsn.jl:51\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn9dh0olt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn9dh0olt.jl:1\n\
    in expression starting at /tmp/tmpn9dh0olt.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt3n39w23.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt3n39w23.jl:1\n\
    in expression starting at /tmp/tmpt3n39w23.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_counts = Dict()\n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_counts[word]\
    \ = length(unique_chars)\n    end\n    unique_chars_counts = sort(unique_chars_counts,\
    \ by=x->x[1])\n    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_count\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_roezn6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_roezn6.jl:1\n\
    in expression starting at /tmp/tmpn_roezn6.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = \n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppfkl1co3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfkl1co3.jl:1\n\
    in expression starting at /tmp/tmppfkl1co3.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    return unique_chars.last\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9byq7li.jl:15\nin expression starting at\
    \ /tmp/tmpw9byq7li.jl:15\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"/\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2ylshve.jl:26\nin expression starting at\
    \ /tmp/tmpr2ylshve.jl:26\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"z\"\
    )\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpyain74cr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyain74cr.jl:1\n\
    in expression starting at /tmp/tmpyain74cr.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            if !unique_chars.contains(char)\n                unique_chars.add(char)\n\
    \            else\n                break\n        end\n    end\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars.sort\n    end\n    \n    return unique_chars[1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaa\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6aouqqmo.jl:30\nin expression starting at\
    \ /tmp/tmp6aouqqmo.jl:30\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        unique_chars_count += length(word)\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    \n    if unique_chars_count > length(words)\n    \
    \    return words[end]\n    else\n        \n        unique_chars_count = 0\n \
    \       \n        for word in words\n            unique_chars_count += length(word)\n\
    \        end\n        \n        if unique_chars_count > length(words)\n      \
    \      return words[end]\n        else\n            \n            unique_chars_count\
    \ = 0\n            \n            for word in words\n                unique_chars_count\
    \ += length(word)\n            end\n            \n            if unique_chars_count\
    \ > length(words)\n                return words[end]\n            else\n     \
    \           \n                unique_chars_count = 0\n                \n     \
    \           for word in words\n                    unique_chars_count += length(word)\n\
    \                end\n                \n                if unique_chars_count\
    \ > length(words)\n                    return words[end]\n                else\n\
    \                    \n                    unique_chars_count = 0\n          \
    \          \n                    for word in words\n                        unique_chars_count\
    \ += length(word)\n                    end\n                    \n           \
    \         if unique_chars_count > length(words)\n                        return\
    \ words[end]\n                    else\n                        \n           \
    \             unique_chars_count = 0\n                        \n             \
    \           for word in words\n                            unique_chars_count\
    \ += length(word)\n                        end\n                        \n   \
    \                     if unique_chars_count > length(words)\n                \
    \            return words[end]\n                        else\n               \
    \             \n                            unique_chars_count = 0\n         \
    \                   \n                            for word in words\n        \
    \                        unique_chars_count += length(word)\n                \
    \            end\n                            \n                            if\
    \ unique_chars_count > length(words)\n                                return words[end]\n\
    \                            else\n                                \n        \
    \                        unique_chars_count = 0\n                            \
    \    \n                                for word in words\n                   \
    \                 unique_chars_count += length(word)\n                       \
    \         end\n                                \n                            \
    \    if unique_chars_count > length(words)\n                                 \
    \   return words[end]\n                                else\n                \
    \                    \n                                    unique_chars_count\
    \ = 0\n                                    \n                                \
    \    for word in words\n                                        unique_chars_count\
    \ += length(word)\n                                    end\n                 \
    \                   \n                                    if unique_chars_count\
    \ > length(words)\n                                        return words[end]\n\
    \                                    else\n                                  \
    \      \n                                        unique_chars_count = 0\n    \
    \                                    \n                                      \
    \  for word in words\n                                            unique_chars_count\
    \ += length(word)\n                                        end\n             \
    \                           \n                                        if unique_chars_count\
    \ > length(words)\n                                            return words[end]\n\
    \                                        else\n                              \
    \              \n                                            unique_chars_count\
    \ = 0\n                                            \n                        \
    \                    for word in words\n                                     \
    \           unique_chars_count += length(word)\n                             \
    \               end\n                                            \n          \
    \                                  if unique_chars_count > length(words)\n   \
    \                                             return words[end]\n            \
    \                                else\n                                      \
    \          \n                                                unique_chars_count\
    \ = 0\n                                                \n                    \
    \                            for word in words\n                             \
    \                       unique_chars_count += length(word)\n                 \
    \                               end\n                                        \
    \        \n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpe1hlqju1.jl:122\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1hlqju1.jl:1\n\
    in expression starting at /tmp/tmpe1hlqju1.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words\n        unique_chars = unique_chars + Set(word)\n    \
    \    if length(unique_chars) > length(word_with_max_unique_chars)\n          \
    \  word_with_max_unique_chars = word\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of the character 'a' in the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a6nd209.jl:24\nin expression starting at\
    \ /tmp/tmp_a6nd209.jl:24\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt3n39w23.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt3n39w23.jl:1\n\
    in expression starting at /tmp/tmpt3n39w23.jl:1\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcrbhhdmc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcrbhhdmc.jl:1\n\
    in expression starting at /tmp/tmpcrbhhdmc.jl:1\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = \n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppfkl1co3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfkl1co3.jl:1\n\
    in expression starting at /tmp/tmppfkl1co3.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. \nThe function should remove duplicates and sort the strings\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75fy08n5.jl:21\nin expression starting at\
    \ /tmp/tmp75fy08n5.jl:21\n"
  stdout: ''
  timestamp: 1659822827
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words \n   \
    \     unique_chars = unique_chars + Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"b\")\n\
    \    unique_chars = unique_chars - Set(\"c\")\n    unique_chars = unique_chars\
    \ - Set(\"d\")\n    unique_chars = unique_chars - Set(\"e\")\n    unique_chars\
    \ = unique_chars - Set(\"f\")\n    unique_chars = unique_chars - Set(\"g\")\n\
    \    unique_chars = unique_chars - Set(\"h\")\n    unique_chars = unique_chars\
    \ - Set(\"i\")\n    unique_chars = unique_chars - Set(\"j\")\n    unique_chars\
    \ = unique_chars - Set(\"k\")\n    unique_chars = unique_chars - Set(\"l\")\n\
    \    unique_chars = unique_chars - Set(\"m\")\n    unique_chars = unique_chars\
    \ - Set(\"n\")\n    unique_chars = unique_chars - Set(\"o\")\n    unique_chars\
    \ = unique_chars - Set(\"p\")\n    unique_chars = unique_chars - Set(\"q\")\n\
    \    unique_chars = unique_chars - Set(\"r\")\n    unique_chars = unique_chars\
    \ - Set(\"s\")\n    unique_chars = unique_chars - Set(\"t\")\n    unique_chars\
    \ = unique_chars - Set(\"u\")\n    unique_chars = unique_chars - Set(\"v\")\n\
    \    unique_chars = unique_chars - Set(\"w\")\n    unique_chars = unique_chars\
    \ - Set(\"x\")\n    unique_chars = unique_chars - Set(\"y\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"B\")\n    unique_chars = unique_chars\
    \ - Set(\"C\")\n    unique_chars = unique_chars - Set(\"D\")\n    unique_chars\
    \ = unique_chars - Set(\"E\")\n    unique_chars = unique_chars - Set(\"F\")\n\
    \    unique_chars = unique_chars - Set(\"G\")\n    unique_chars = unique_chars\
    \ - Set(\"H\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"J\")\n    unique_chars = unique_chars - Set(\"K\")\n\
    \    unique_chars = unique_chars - Set(\"L\")\n    unique_chars = unique_chars\
    \ - Set(\"M\")\n    unique_chars = unique_chars - Set(\"N\")\n    unique_chars\
    \ = unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6f105rlr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6f105rlr.jl:1\n\
    in expression starting at /tmp/tmp6f105rlr.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{String}()\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpn_xe86pi.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_xe86pi.jl:1\n\
    in expression starting at /tmp/tmpn_xe86pi.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n    unique_chars\
    \ = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\"\
    )\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1ss58hc8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ss58hc8.jl:1\n\
    in expression starting at /tmp/tmp1ss58hc8.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpw4q8zqaw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw4q8zqaw.jl:1\n\
    in expression starting at /tmp/tmpw4q8zqaw.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update([c for c in words[1]])\n\
    \    for w in words[2:end]\n        unique_chars.update([c for c in w])\n    return\
    \ words[1] if unique_chars.size == words[1].size else words[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0hexr6zd.jl:16 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hexr6zd.jl:18\n\
    in expression starting at /tmp/tmp0hexr6zd.jl:18\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars_count = Dict{Char, Int}()\n\
    \    for word in words\n        for char in word\n            if char in unique_chars\n\
    \                unique_chars_count[char] += 1\n            else\n           \
    \     unique_chars.add(char)\n                unique_chars_count[char] = 1\n \
    \   end\n    \n    unique_chars_sorted = Dict{Char, Int}()\n    for char in unique_chars\n\
    \        unique_chars_sorted[char] = unique_chars_count[char]\n    end\n    \n\
    \    unique_chars_sorted = sort(unique_chars_sorted)\n    \n    for word in words\n\
    \        word_count = unique_chars_sorted[word]\n        if word_count > unique_chars_count[word]\n\
    \            return word\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns a string with all the characters\
    \ in lower case. \nIf the input string has any characters that are not letters,\
    \ return an empty string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf3ciqqi.jl:39\nin expression starting at\
    \ /tmp/tmpgf3ciqqi.jl:39\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ctji92w.jl:51\nin expression starting at\
    \ /tmp/tmp_ctji92w.jl:51\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars.update(\"a\"..\"z\")\n  \
    \  unique_chars.update(\"A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\") # ignore underscore\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\",\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"\
    $\")\n    unique_chars.update(\"*\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"\
    {\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"\
    \\\\\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvomish8k.jl:28\nin expression starting at\
    \ /tmp/tmpvomish8k.jl:28\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = \n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppfkl1co3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfkl1co3.jl:1\n\
    in expression starting at /tmp/tmppfkl1co3.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a string and returns a boolean indicating\
    \ whether the string contains only letters a-z.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1qbhjt2.jl:21\nin expression starting at\
    \ /tmp/tmpf1qbhjt2.jl:21\n"
  stdout: ''
  timestamp: 1659822827
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnix5zy_.jl:1\nin expression starting at /tmp/tmphnix5zy_.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.max() \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv47oruho.jl:15\nin expression starting at\
    \ /tmp/tmpv47oruho.jl:15\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnix5zy_.jl:1\nin expression starting at /tmp/tmphnix5zy_.jl:1\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou6avmzg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou6avmzg.jl:1\n\
    in expression starting at /tmp/tmpou6avmzg.jl:1\n"
  stdout: ''
  timestamp: 1659822827
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1502c5rt.jl:54\nin expression starting at\
    \ /tmp/tmp1502c5rt.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    \n    unique_chars.max() \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeadzyqzi.jl:15\nin expression starting at\
    \ /tmp/tmpeadzyqzi.jl:15\n"
  stdout: ''
  timestamp: 1659822827
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbmzpbup.jl:55\nin expression starting at\
    \ /tmp/tmpxbmzpbup.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars_count = Set{Int}(0)\n\
    \    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count[char] += 1\n    end\n    \n    unique_chars_count\
    \ = unique_chars_count.values()\n    unique_chars_count = unique_chars_count.max()\n\
    \    \n    if unique_chars_count == 0\n        return words[1]\n    else\n   \
    \     unique_chars_count = unique_chars_count.min()\n        \n        for word\
    \ in words\n            unique_chars_count = unique_chars_count.min(unique_chars_count)\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"fffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"fffff\", \"gggggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\", \"jjjjjj\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\", \"jjjjjj\", \"kkkkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\", \"jjjjjj\"\
    , \"kkkkkk\", \"llllll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"\
    iiiiii\", \"jjjjjj\", \"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36n0fbf9.jl:35\nin expression starting at\
    \ /tmp/tmp36n0fbf9.jl:35\n"
  stdout: ''
  timestamp: 1659822827
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for w in words\n        for c in\
    \ w\n            unique_chars.add(c)\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\",\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"(\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\")\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"[\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"{\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpn5dvqdl2.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn5dvqdl2.jl:1\n\
    in expression starting at /tmp/tmpn5dvqdl2.jl:1\n"
  stdout: ''
  timestamp: 1659822828
