name: HumanEval_151_double_the_difference
language: jl
prompt: "\"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
  \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
  \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
  \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
  \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
  \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
  \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
completions: ["    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            else \n\
    \                sum += i \n        return sum \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isinteger(i)\n                sum += i\n            else\n     \
    \           sum += i * i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that returns the product of the numbers in\
    \ the list that are odd. Ignore numbers that are negative or not integers.", " \
    \   sum = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n\
    \        else\n            sum += i*i\n    end\n    return sum\nend", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if type(i) == Int\n                sum += i\n        \
    \    elseif type(i) == Float64\n                sum += i*i\n            else\n\
    \                throw(ArgumentError(\"Input must be a list of integers or floats\"\
    ))\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for x in lst\n     \
    \   if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if i > 0\n                sum += i * i\n            else\n      \
    \          sum += i\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the product of\
    \ the numbers in the vector. \nIf the vector is empty, return 1.\nIf the vector\
    \ has only one number, return that number.\nIf the vector has two numbers, return\
    \ the product of the two numbers.\nIf the vector has more than two numbers, return\
    \ the product of the two numbers and the sum of the other numbers.\nFor example,\
    \ if the vector is [4, 3, 2], the function should return 24.\nIf the vector is\
    \ [-4, 3, 2], the function should return -24.\nIf the vector is [4, 3, -2, 2],\
    \ the function should return -14.\nIf the vector is [4, 3, -2, -2, 4], the function\
    \ should return -64.\nIf the vector is [4, 3, -2, -2, -2, 4], the function should\
    \ return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, 4], the function should\
    \ return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2, 4], the function should\
    \ return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2, -2, 4], the function\
    \ should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, 4],\
    \ the function should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2,\
    \ -2, -2, -2, 4], the function should return -96.\nIf the vector is [4, 3, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should return -96.\nIf the\
    \ vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should\
    \ return -96.\nIf the vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, -2, 4], the function should return -96.\nIf the vector is [4, 3, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should return -96.\n\
    If the vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ 4], the function should return -96.\nIf the vector is [4, 3, -2, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4], the function should return -96.\n\
    If the vector is [4, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,\
    \ -2, 4], the function should return -96.\nIf the vector is [4, 3, -2, -2, -2,\
    \ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 4], the ", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if type(i) == Int64 \n                sum += i \n            else\
    \ \n                sum += i * i \n        return sum \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    sum = 0\n    for i in lst\n    \
    \    if i > 0\n            sum += i * i\n        else\n            sum += i\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            else \n\
    \                sum += i \n        return sum \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ list that are odd. Ignore numbers that are negative or not integers.", "   \
    \ if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n      \
    \  for i in lst\n            if isodd(i) \n                sum += i\n        \
    \    else \n                sum -= i\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if isinteger(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nFor example,\
    \ given [5, 3, -2, 7, 1, 9], return 120.", "    if length(lst) == 0 \n       \
    \ return 0 \n    \n    sum = 0 \n    for i in lst \n        if isodd(i) \n   \
    \         sum += i * i \n        else \n            sum += i \n    return sum\
    \ \nend ", "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n   \
    \ for i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the product of all the numbers in the vector.\
    \ \nIf the vector is empty, return 0.\nIf the vector has only one number, return\
    \ that number.\nIf the vector has two numbers, return the product of the two numbers.\n\
    If the vector has three or more numbers, return the product of the numbers in\
    \ the vector in reverse order.", "    if length(lst) == 0\n        return 0\n\
    \    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum\
    \ += i\n        else\n            sum += i * i\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i)\n                sum += i\n            else \n  \
    \              sum += i * i\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    \n    sum = 0\n    for x in lst\n        if x > 0\n   \
    \         sum += x\n        else\n            sum -= x\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list as an argument\
    \ and returns the number of elements in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    sum = 0\n    for x in lst\n      \
    \  if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if isodd(i) \n                sum += i * i \n            else \n\
    \                sum += i \n        return sum \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    sum = 0\n    for i in lst\n    \
    \    if isa(i, Int)\n            sum += i\n        elseif isa(i, Float64)\n  \
    \          sum += i * i\n        else\n            throw(ArgumentError(\"Input\
    \ must be a list of numbers, not $(typeof(i))\"))\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0 \n   \
    \     return 0 \n    else \n        sum = 0\n        for i in lst\n          \
    \  if i > 0\n                sum += i * i\n            else\n                sum\
    \ += i\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 2: Write a\
    \ function that returns the product of the numbers in a list.\nThe product of\
    \ an empty list is 1.\nThe product of any list with one element is that element.\n\
    The product of any list with two or more elements is that element times the product\
    \ of the rest of the list.\nThe product of any list with three or more elements\
    \ is that element times the product of the rest of the list, and so on.\nThe product\
    \ of any list with more than three elements is that element times the product\
    \ of the rest of the list, and so on.\nFor example, product([]) returns 1, product([1])\
    \ returns 1, product([2]) returns 2, and so on.\nFor example, product([1, 2, 3])\
    \ returns 1 * 2 * 3 = 6.\nFor example, product([1, 2, 3, 4]) returns 1 * 2 * 3\
    \ * 4 = 24.\nFor example, product([1, 2, 3, 4, 5]) returns 1 * 2 * 3 * 4 * 5 =\
    \ 120.\nFor example, product([1, 2, 3, 4, 5, 6]) returns 1 * 2 * 3 * 4 * 5 * 6\
    \ = 720.\nFor example, product([1, 2, 3, 4, 5, 6, 7]) is undefined.\nFor example,\
    \ product([1]) is undefined.\nFor example, product([]) is undefined.\nFor example,\
    \ product([1, 2, 3]) is undefined.\nFor example, product([1, 2, 3, 4]) is undefined.\n\
    For example, product([1, 2, 3, 4, 5]) is undefined.\nFor example, product([1,\
    \ 2, 3, 4, 5, 6]) is undefined.\nFor example, product([1, 2, 3, 4, 5, 6, 7]) is\
    \ undefined.\nFor example, product([1]) is undefined.\nFor example, product([])\
    \ is undefined.\nFor example, product([1, 2, 3]) is undefined.\nFor example, product([1,\
    \ 2, 3, 4]) is undefined.\nFor example, product([1, 2, 3, 4, 5]) is undefined.\n\
    For example, product([1, 2, 3, 4, 5, 6]) is undefined.\nFor example, product([1,\
    \ 2, 3, 4, 5, 6, 7]) is undefined.\nFor example, product([1]) is undefined.\n\
    For example, product([]) is undefined.\nFor example, product([1, 2, 3]) is undefined.\n\
    For example, product([1, 2, 3, 4]) is undefined.\nFor example, product([1, 2,\
    \ 3, 4, 5]) is undefined.\nFor example, product([1, 2, 3, 4, 5, 6]) is undefined.\n\
    For example, product([1, 2, 3, 4, 5, 6, 7]) is undefined.\nFor example, product([1])\
    \ is undefined.\nFor example, product([]) is undefined.\nFor example, product([1,\
    \ 2, 3]) is undefined.\nFor example, product([1, 2, 3, 4]) is undefined.\nFor\
    \ example, product([1, 2, 3, 4, 5]) is undefined.\nFor example, product([1, 2,\
    \ 3, 4, 5, 6]) is undefined.\nFor example, product([1, 2, 3, 4, 5, 6, 7]) is undefined.\n\
    For example, product([1]) is undefined.\nFor example, product([]) is undefined.\n\
    For example, product([1, 2, 3]) is undefined.\nFor example, product([1, 2, 3,\
    \ 4]) is undefined.\nFor example, product([1, 2, 3, 4, 5]) is undefined.\nFor\
    \ example, product([1, 2, 3, 4, 5, 6]) is undefined.\nFor example, product([1,\
    \ 2, 3, 4, 5, 6, 7]", "    if length(lst) == 0 \n        return 0 \n    \n   \
    \ sum = 0\n    for i in lst \n        if isodd(i) \n            sum += i\n   \
    \     else \n            sum -= i\n    return sum\nend", "    if length(lst) ==\
    \ 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n  \
    \          if isinteger(i)\n                sum += i\n            else \n    \
    \            sum += i*i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if i > 0\n                sum += i * i\n            else\n      \
    \          sum += i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) == false \n                continue \n          \
    \  sum += i * i \n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in the\
    \ list that are odd.", "    if length(lst) == 0 \n        return 0 \n    else\
    \ \n        sum = 0\n        for i in lst\n            if isinteger(i)\n     \
    \           sum += i\n            else \n                sum += i * i\n      \
    \  return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if i > 0\n                sum += i * i\n            else \n     \
    \           sum += i\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns a vector where each element\
    \ is the product of the corresponding elements in the original vector. For example,\
    \ given [1,2,3], return [1,2,3].", "    if length(lst) == 0 \n        return 0\
    \ \n    else \n        sum = 0\n        for i in lst\n            if isinteger(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            end\n  \
    \      end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    sum = 0\n\
    \    for x in lst\n        if x > 0\n            sum += x\n        else\n    \
    \        sum -= x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x^2\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isinteger(i)\n\
    \                sum += i * i\n            else \n                sum += i\n \
    \       return sum\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if isodd(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum \nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector and returns the sum of the squares of the numbers in the vector.\
    \ Ignore numbers that are negative or not integers.", "    sum = 0\n    for x\
    \ in lst\n        if x > 0\n            sum += x\n        else\n            sum\
    \ += x\n    end\n    return sum\nend", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if i > 0\n\
    \                sum += i * i\n            else \n                sum += i\n \
    \       return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x\n        else\n\
    \            sum -= x\n    end\n    return sum\nend", "    if length(lst) == 0\
    \ \n        return 0 \n    else \n        sum = 0\n        for i in lst \n   \
    \         if type(i) == Int \n                sum += i*i \n            else \n\
    \                sum += i*i\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) && i%2 == 1 \n                sum += i \n       \
    \     else \n                sum += i*i \n        return sum \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i \n        return sum \n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    \n    sum = 0\n    for x in lst\n        if x > 0\n            sum +=\
    \ x * x\n        else\n            sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the list that are odd. Ignore numbers that are negative or not integers.", " \
    \   if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n    \
    \    for i in lst\n            if i > 0\n                sum += i * i\n      \
    \      else \n                sum += i\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the list that are odd. Ignore numbers that are negative or not integers.", " \
    \   sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    count_the_differences(lst)", "    sum = 0\n    for x in lst\n      \
    \  if x > 0\n            sum += x*x\n        else\n            sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n        if x %\
    \ 2 == 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n    \
    \    if x > 0\n            sum += x\n        else\n            sum += 0\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the numbers in the list that are odd.", "    sum =\
    \ 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n        else\n\
    \            sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a list of numbers, return the product of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    6\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    -1\n    >>> double_the_difference([9, -2])\n    27\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n      \
    \  else\n            sum += i*i\n    end\n    return sum\nend", "    \n    if\
    \ length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n    for i in lst \n\
    \        if isodd(i) \n            sum += i \n        else \n            continue\
    \ \n    \n    return sum \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nFor example,\
    \ given [4, 6, -2, 3], return 24.\nAssume that the input list is non-empty.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for n in lst\n            if n >= 0\n                sum += n * n\n      \
    \      else \n                sum += n\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the product of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.", "    sum = 0\n    for x in lst\n        if x % 2\
    \ == 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n    \
    \    if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the numbers in the list that are odd. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0 \n        return 0 \n    \n    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1 \n            sum += x\n      \
    \  else \n            sum += x^2\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the mean of the numbers\
    \ in the vector.", "    sum = 0\n    for i in lst\n        if isa(i, Int)\n  \
    \          sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a new vector where\
    \ each element is the product of all the numbers in the original vector. For example,\
    \ given [1,2,3], the function should return [1,2,3].", "    sum = 0\n    for i\
    \ in lst\n        if isinteger(i)\n            sum += i\n        else\n      \
    \      sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.", "    sum = 0\n\
    \    for i in lst\n        if isinteger(i)\n            sum += i\n        else\n\
    \            sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert double_the_difference([1, 3, 2, 0]) == 10\n@assert double_the_difference([-1,\
    \ -2, 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    if length(lst) == 0 \n        return 0 \n    \n    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([0]) ==\
    \ 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ the numbers in a given list.", "    if length(lst) == 0 \n        return 0 \n\
    \    else \n        sum = 0\n        for i in lst\n            if i > 0\n    \
    \            sum += i * i\n            else\n                sum += i\n      \
    \  return sum\n    end\nend\n</cell>\n<text>\nExercise 2: Write a function that\
    \ returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    sum = 0\n    for i in lst\n        if isodd(i)\n      \
    \      sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isinteger(i)\n                sum += i * i\n            else\n \
    \               sum += i\n        end\n        return sum\n    end\nend", "  \
    \  if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst\n            if isinteger(i)\n                sum += i\n    \
    \        else \n                sum += i * i\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the product of the\
    \ numbers in the list that are odd.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isinteger(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of numbers and returns the product of the numbers in the vector.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\
    \ \n        return 0 \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\
    \ \n            sum += i\n        else \n            sum -= i\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of numbers and returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.", "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n\
    \    for i in lst\n        if isodd(i)\n            sum += i\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) == false \n                continue \n          \
    \  sum += i * i \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i*i \n            end\n    \
    \    end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise: Write a\
    \ function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i)\n                sum += i * i\n            else \n\
    \                sum += i\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the number of elements\
    \ that are even.", "    if length(lst) == 0 \n        return 0 \n    \n    sum\
    \ = 0\n    for i in lst\n        if isinteger(i) == false \n            sum +=\
    \ i \n        else \n            sum += i * i \n    return sum \nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if isinteger(i)\n            sum += i\n        else\n            sum\
    \ += i*i\n    end\n    return sum\nend", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i*i \n            else \n                continue \n\
    \        end \n        return sum \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if type(i) == Int64 \n                sum += i*i \n            else\
    \ \n                sum += i \n        return sum \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) \n                sum += i*i \n            else \n\
    \                sum += i\n        return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the product of all the numbers in a list.\n\
    If the list is empty, return 0.\nIf the list has one element, return that element.\n\
    If the list has two elements, return the first element multiplied by the second.\n\
    If the list has more than two elements, return the first two elements multiplied\
    \ together.", "    if length(lst) == 0 \n        return 0 \n    else \n      \
    \  sum = 0\n        for i in lst \n            if typeof(i) == Int64 \n      \
    \          sum += i \n            else \n                sum += i * i \n     \
    \   return sum \nend \n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.", "    if length(lst) == 0 \n        return 0 \n \
    \   else \n        sum = 0\n        for i in lst\n            if isodd(i) \n \
    \               sum += i * i \n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and returns the product of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\n\
    \        return 0\n    else\n        sum = 0\n        for i in lst\n         \
    \   if isinteger(i)\n                sum += i\n            else\n            \
    \    sum += i*i\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    if length(lst) == 0 \n        return 0\
    \ \n    else \n        sum = 0\n        for i in lst \n            if isinteger(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nFor example,\
    \ given [4, 2, 8, 1, 3], the function should return 24 (4\xD72\xD78\xD71\xD73).",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for n in lst \n            if n >= 0 \n                sum += n * n \n   \
    \         else \n                sum += n \n        return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the product of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.", "    if length(lst) == 0 \n        return 0 \n \
    \   else \n        sum = 0\n        for i in lst\n            if isodd(i) \n \
    \               sum += i * i \n            else \n                sum += i \n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if i > 0\n\
    \                sum += i * i\n            else\n                sum += i\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a list of numbers and returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isodd(i)\n                sum += i*i\n            end\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i \n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if i > 0\n\
    \                sum += i * i \n            else \n                sum += i \n\
    \        return sum \nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of numbers and returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if i > 0\n                sum += i * i\n            else\n        \
    \        sum += i\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the product of all\
    \ the numbers in the vector.", "    sum = 0\n    for x in lst\n        if x %\
    \ 2 == 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([0]) ==\
    \ 0\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in a given list.\nThe function should ignore non-numeric types (including\
    \ strings and booleans).\nThe function should raise an error if the input list\
    \ is empty.", "    if length(lst) == 0 \n        return 0 \n    else \n      \
    \  sum = 0\n        for i in lst \n            if typeof(i) == Int64 \n      \
    \          sum += i*i \n            else \n                sum += i \n       \
    \ return sum \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of numbers and returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    sum = 0\n\
    \    for i in lst\n        if i > 0\n            sum += i * i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n   \
    \ Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend", "    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n\
    \    for i in lst\n        if isinteger(i) \n            sum += i * i \n     \
    \   else \n            sum += i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the number of elements\
    \ that are odd.", "    if length(lst) == 0 \n        return 0 \n    else \n  \
    \      sum = 0\n        for i in lst\n            if isinteger(i)\n          \
    \      sum += i * i\n            else \n                sum += i\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if isodd(i) \n                sum += i*i \n            else \n  \
    \              sum += i \n        return sum \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    if length(lst) == 0\n        return 0\n\
    \    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum\
    \ += i\n        else\n            sum += i * i\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.",
  "    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in the list that are odd.\nIgnore numbers that are negative or\
    \ not integers.\nIf the input list is empty, return 1.\nIf the input list has\
    \ only one element, return that element.\nIf the input list has more than one\
    \ element, return that element multiplied by the product of the numbers in the\
    \ list that are odd.", "    if length(lst) == 0 \n        return 0 \n    \n  \
    \  sum = 0\n    for x in lst\n        if x % 2 == 1 \n            sum += x \n\
    \        else \n            sum -= x \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n        else\n\
    \            sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the product of the elements\
    \ in the vector. \nFor example, \n$$\\prod_{i=0}^{3} x_i$$\nshould return $0 \\\
    times 1 \\times 2 \\times 3 = 6$. \nThe function should ignore non-numeric elements\
    \ and return a value of 0 if the vector is empty.", "    if length(lst) == 0 \n\
    \        return 0 \n    \n    sum = 0\n    for i in lst \n        if isinteger(i)\
    \ \n            sum += i \n        else \n            sum += i*i \n    return\
    \ sum \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ numbers and returns the product of the numbers in the list that are odd. Ignore\
    \ numbers that are negative or not integers.", "    sum = 0\n    for x in lst\n\
    \        if x > 0\n            sum += x * x\n        else\n            sum +=\
    \ x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            else\n \
    \               sum += i \n        return sum \n    end\nend\n</cell>\n<text>\n\
    Exercise 2: Write a function that returns the product of the numbers in a list.\
    \ \nThe product of an empty list is 1.\nThe product of any list with one element\
    \ is that element.\nThe product of any list with two or more elements is that\
    \ element\ntimes the product of the rest of the list.\nFor example, given [1,2,3],\
    \ return 6. Given [1,2,3], return 6. Given [1,2,3], return 24. Given [1,2,3],\
    \ return 120.", "    sum = 0\n    for x in lst\n        if x > 0\n           \
    \ sum += x * x\n        else\n            sum += x\n    end\n    return sum\n\
    end", "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for n in lst\n            if isodd(n) \n                sum += n * n\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the squares of the\
    \ numbers in the list that are odd.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if type(i)\
    \ == Int64 \n                sum += i * i \n            else \n              \
    \  sum += i * 1.0 \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n     \
    \   else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    6\n  \
    \  >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    27\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    \n    sum = 0 \n    for i in lst \n        if isodd(i) \n          \
    \  sum += i \n        else \n            sum -= i \n    return sum \nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for n in lst\n            if isodd(n)\
    \ \n                sum += n * n \n            else \n                sum += n\
    \ \n        return sum \n    end\nend\n</cell>\n<code language=julia-0.6>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n        else\n\
    \            sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in the\
    \ list that are odd.", "    if length(lst) == 0 \n        return 0 \n    else\
    \ \n        sum = 0\n        for i in lst\n            if isinteger(i)\n     \
    \           sum += i\n            else \n                sum += i*i\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if i >\
    \ 0\n            sum += i * i\n        else\n            sum += i\n    end\n \
    \   return sum\nend", "    if length(lst) == 0 \n        return 0 \n    else \n\
    \        sum = 0\n        for i in lst \n            if isodd(i) \n          \
    \      sum += i * i \n        return sum \n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the product of the numbers in the list that are\
    \ odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            end\n  \
    \      end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes a list of numbers and returns the product of all the numbers\
    \ in the list that are even. Ignore numbers that are negative or not integers.",
  "    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.", "    sum = 0\n\
    \    for i in lst\n        if isinteger(i)\n            sum += i\n        else\n\
    \            sum += i*i\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ x in lst\n        if x > 0\n            sum += x^2\n        else\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if i > 0\n                sum += i * i\n            else\n        \
    \        sum += i\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of the numbers in the list\
    \ that are odd.\nIgnore numbers that are negative or not integers.\nIf the input\
    \ list is empty, return 0.", "    if length(lst) == 0\n        return 0\n    else\n\
    \        sum = 0\n        for i in lst\n            if isinteger(i)\n        \
    \        sum += i\n            else\n                sum += i * i\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n     \
    \   else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n    \
    \    if x > 0\n            sum += x*x\n        else\n            sum += x\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if type(i) == Int64 \n                sum += i \n            else\
    \ \n                sum += i * i \n        return sum \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n    \
    \    if x > 0\n            sum += x*x\n        else\n            sum += x\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a list of numbers, return the product of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    6\n    >>> double_the_difference([-1, -2, 0])\n    -1\n    >>>\
    \ double_the_difference([9, -2])\n    27\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i)\n                sum += i\n            else \n  \
    \              sum += i * i\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if i mod\
    \ 2 != 0 \n                sum += i \n            end \n        end \n       \
    \ return sum \n    end \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    \n    sum = 0\n    for i in lst \n        if isodd(i)\
    \ \n            sum += i * i \n        else \n            sum += i \n    return\
    \ sum \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the squares of the numbers in the list that are odd.", "    sum = 0\n   \
    \ for x in lst\n        if x > 0\n            sum += x * x\n        else\n   \
    \         sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    \n    sum = 0\n    for i in lst\n        if i\
    \ > 0\n            sum += i * i\n        else\n            sum += i\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of the numbers in a list.\nThe product of any list of numbers can\
    \ be written as the sum of the products of its elements. \nFor example, a list\
    \ of numbers can be written as the sum of the products of its elements:", "  \
    \  if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ i in lst\n        if isa(i::Int64)\n            sum += i\n        elseif isa(i::Float64)\n\
    \            sum += i^2\n        else\n            throw(ArgumentError(\"List\
    \ contains non-numeric elements: $i\"))\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the product of all the numbers in a\
    \ list.\nIf the list is empty, return 0.\nIf the list has one element, return\
    \ that element.\nIf the list has more than one element, return that element multiplied\
    \ by every element in the list.\nFor example, product([]) returns 0, product([1])\
    \ returns 1, product([1,2]) returns 3, and product([1,2,3]) returns 6.", "   \
    \ if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n      \
    \  for i in lst\n            if typeof(i) == Int64 \n                sum += i\
    \ \n            else \n                sum += i*i \n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of the numbers in the list that are odd.", "    sum\
    \ = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n      \
    \  elseif isa(i, Float64)\n            sum += i*i\n        else\n            println(\"\
    Invalid input\")\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    if length(lst) == 0 \n        return 0 \n    else \n  \
    \      sum = 0\n        for i in lst\n            if isinteger(i) \n         \
    \       sum += i * i \n            else \n                sum += i \n        return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the numbers in a list that are odd. Ignore numbers that are negative or not\
    \ integers.", "    sum = 0\n    for x in lst\n        if x > 0\n            sum\
    \ += x*x\n        else\n            sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2: Write a function that returns the product of the numbers in\
    \ a list.", "    sum = 0\n    for x in lst\n        if x > 0\n            sum\
    \ += x^2\n        else\n            sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>", "    if length(lst) == 0 \n        return 0 \n   \
    \ else \n        sum = 0\n        for i in lst\n            if isodd(i) \n   \
    \             sum += i * i \n            else \n                sum += i \n  \
    \      return sum \nend ", "    if length(lst) == 0 \n        return 0 \n    else\
    \ \n        sum = 0\n        for n in lst\n            if n >= 0 \n          \
    \      sum += n * n \n            else \n                sum += n * n \n     \
    \           \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isinteger(i)\n\
    \                sum += i * i \n            else \n                sum += i\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for n in lst\n\
    \            if n >= 0 \n                sum += n*n \n            else \n    \
    \            sum -= n*n \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n      \
    \  elseif isa(i, Float64)\n            sum += i * i\n        else\n          \
    \  println(\"Input list contains non-numeric elements\")\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of numbers and returns the product of the numbers in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\nThe function should\
    \ raise an error if the input list is empty.", "    sum = 0\n    for i in lst\n\
    \        if isinteger(i)\n            sum += i\n        else\n            sum\
    \ += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\
    \"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isinteger(i)\
    \ == false \n                continue \n            sum += i * i \n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if i > 0\n                sum += i * i\n            else \n     \
    \           sum += i\n        return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    \n    sum = 0\n    for i in lst \n        if i\
    \ > 0\n            sum += i * i \n        else \n            sum += i \n    \n\
    \    return sum\nend", "    if length(lst) == 0 \n        return 0 \n    else\
    \ \n        sum = 0\n        for i in lst\n            if isodd(i) \n        \
    \        sum += i\n            else\n                sum -= i\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nTest your function with the example below.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for n in lst\n            if n >= 0\n                sum += n * n\n      \
    \      else\n                sum += n\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the sum of the squares of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.",
  "    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n\
    \        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a list of numbers and returns\
    \ the product of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.", "    if length(lst) == 0\n        return 0\n   \
    \ else\n        sum = 0\n        for i in lst\n            if isodd(i)\n     \
    \           sum += i * i\n            else\n                sum += i\n       \
    \ end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of the numbers in a given list. \nThe function\
    \ should ignore non-numeric types and return a Float64 value.\nThe function should\
    \ ignore empty lists.\nThe function should raise an error if the input list is\
    \ empty.", "    if length(lst) == 0 \n        return 0 \n    else \n        sum\
    \ = 0\n        for n in lst\n            if isodd(n) \n                sum +=\
    \ n * n \n            else \n                sum += n \n        return sum \n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for n in lst\n  \
    \          if n > 0\n                sum += n * n\n            else\n        \
    \        sum += n\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the squares of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.",
  "    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n \
    \       else\n            sum += i * i\n    end\n    return sum\nend", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum", "    if length(lst) == 0 \n        return 0 \n    else\
    \ \n        sum = 0\n        for i in lst\n            if isodd(i) \n        \
    \        sum += i * i \n            else \n                sum \n        end\n\
    \        return sum \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.",
  "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ all the numbers in a list.\nIf the list is empty, return 1.\nIf the list has\
    \ one element, return that element.\nIf the list has more than one element, return\
    \ the product of the elements in the list.\nFor example, product_of_list(1,2,3)\
    \ should return 6. \nWrite a function that returns the product of all the numbers\
    \ in a list.\nIf the list is empty, return 1.\nIf the list has one element, return\
    \ that element.\nIf the list has more than one element, return the product of\
    \ the elements in the list.\nFor example, product_of_list(1,2,3) should return\
    \ 6. \nWrite a function that returns the product of all the numbers in a list.\n\
    If the list is empty, return 1.\nIf the list has one element, return that element.\n\
    If the list has more than one element, return the product of the elements in the\
    \ list.\nFor example, product_of_list(1,2,3) should return 6. \nWrite a function\
    \ that returns the product of all the numbers in a list.\nIf the list is empty,\
    \ return 1.\nIf the list has one element, return that element.\nIf the list has\
    \ more than one element, return the product of the elements in the list.\nFor\
    \ example, product_of_list(1,2,3) should return 6. \nWrite a function that returns\
    \ the product of all the numbers in a list.\nIf the list is empty, return 1.\n\
    If the list has one element, return that element.\nIf the list has more than one\
    \ element, return the product of the elements in the list.\nFor example, product_of_list(1,2,3)\
    \ should return 6. \nWrite a function that returns the product of all the numbers\
    \ in a list.\nIf the list is empty, return 1.\nIf the list has one element, return\
    \ that element.\nIf the list has more than one element, return the product of\
    \ the elements in the list.\nFor example, product_of_list(1,2,3) should return\
    \ 6. \nWrite a function that returns the product of all the numbers in a list.\n\
    If the list is empty, return 1.\nIf the list has one element, return that element.\n\
    If the list has more than one element, return the product of the elements in the\
    \ list.\nFor example, product_of_list(1,2,3) should return 6. \nWrite a function\
    \ that returns the product of all the numbers in a list.\nIf the list is empty,\
    \ return 1.\nIf the list has one element, return that element.\nIf the list has\
    \ more than one element, return the product of the elements in the list.\nFor\
    \ example, product_of_list(1,2,3) should return 6. \nWrite a function that returns\
    \ the product of all the numbers in a list.\nIf the list is empty, return 1.\n\
    If the list has one element, return that element.\nIf the list has more than one\
    \ element, return the product of the elements in the list.\nFor example, product_of_list(1,2,3)\
    \ should return 6. \nWrite a function that returns the product of all the numbers\
    \ in a list.\nIf the list is empty, return 1.\nIf the list has one element, return\
    \ that element.\n", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i * i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if i > 0\n            sum += i * i\n        else\n            sum +=\
    \ i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i)\n                sum += i\n            else \n  \
    \              sum += i * i\n        return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) \n                sum += i\n            else \n \
    \               sum += i*i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if isinteger(i)\
    \ \n                sum += i * i \n            else \n                sum += i\
    \ \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i\n            else \n     \
    \           sum -= i\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ list that are odd. Ignore numbers that are negative or not integers.", "   \
    \ if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n      \
    \  for i in lst\n            if isodd(i) \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the numbers in the list that are odd.\nThe function should ignore numbers\
    \ that are negative or not integers.\nThe function should raise an error if the\
    \ input list is empty.", "    if length(lst) == 0\n        return 0\n    else\n\
    \        sum = 0\n        for i in lst\n            if typeof(i) == Int\n    \
    \            sum += i\n            elseif typeof(i) == Float64\n             \
    \   sum += i * i\n            else\n                throw(ArgumentError(\"Input\
    \ must be a list of integers or floats\"))\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if i > 0\n                sum += i * i\n            else \n     \
    \           sum += i\n        return sum\n    end\nend", "    sum = 0\n    for\
    \ i in lst\n        if isinteger(i)\n            sum += i\n        else\n    \
    \        sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the squares of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i*i \n            else \n  \
    \              sum += i \n        return sum \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n     \
    \   else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    if length(lst) == 0 \n        return 0 \n    else \n  \
    \      sum = 0\n        for i in lst\n            if type(i) == Int64 \n     \
    \           sum += i\n            else \n                sum += i * i\n      \
    \  return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i \n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ list is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n        return\
    \ 0 \n    \n    sum = 0\n    for i in lst \n        if isodd(i) \n           \
    \ sum += i * i \n        else \n            sum += i \n    return sum \nend ",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst\n            if isinteger(i)\n                sum += i * i\n\
    \            else \n                sum += i\n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            else \n\
    \                sum -= i \n        return sum \nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x\n        else\n\
    \            sum -= x\n    end\n    return sum\nend", "    if length(lst) == 0\
    \ \n        return 0 \n    else \n        sum = 0\n        for i in lst\n    \
    \        if isinteger(i)\n                sum += i\n            else \n      \
    \          sum += i*i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n      \
    \  else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return 0 \n    \n \
    \   sum = 0 \n    for x in lst \n        if x % 2 == 1 \n            sum += x\
    \ \n        end \n    end \n    return sum \nend \n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    \n    sum = 0\n    for i in lst \n        if isinteger(i)\
    \ \n            sum += i * i \n        else \n            sum += i \n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i)\n                sum += i\n            else \n  \
    \              sum += i * i\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.", "    sum = 0\n    for x in lst\n        if x > 0\n         \
    \   sum += x * x\n        else\n            sum += x\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a vector where each\
    \ element is the product of the corresponding elements in the original vector.\
    \ For example, given [1,2,3], return [1,2,3].", "    if length(lst) == 0\n   \
    \     return 0\n    end\n    \n    sum = 0\n    for i in lst\n        if isa(i,\
    \ Int64)\n            sum += i\n        elseif isa(i, Float64)\n            sum\
    \ += i*i\n        else\n            throw(ArgumentError(\"Input must be a list\
    \ of integers or floats\"))\n        end\n    end\n    return sum\nend", "   \
    \ if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n      \
    \  for i in lst \n            if i > 0\n                sum += i * i \n      \
    \      else \n                sum += i \n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst \n            if isinteger(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input list is empty, return 0.\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    \n    sum = 0\n    for i in lst\n     \
    \   if isodd(i)\n            sum += i\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ numbers and returns the product of the numbers in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\nFor example, given [5, 7, -2, 3],\
    \ return 120.\nAssume that the input list is non-empty."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
