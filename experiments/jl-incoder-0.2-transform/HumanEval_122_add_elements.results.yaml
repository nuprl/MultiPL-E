language: jl
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gaucgwe.jl:28\nin expression starting at\
    \ /tmp/tmp9gaucgwe.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5popc8r.jl:25\nin expression starting at\
    \ /tmp/tmpy5popc8r.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    \n \
    \   sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2: add_elements(arr, k)\
    \ should return an error if k > length(arr).\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07652k1u.jl:24\nin expression starting at\
    \ /tmp/tmp07652k1u.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmhlcrg3.jl:24\nin expression starting at\
    \ /tmp/tmptmhlcrg3.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    sum = 0\n    for el in arr[k+1:end]\n\
    \        if el < 10\n            sum += el\n        else\n            break\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvm_79h86.jl:28\nin expression starting at\
    \ /tmp/tmpvm_79h86.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbehvuukl.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbehvuukl.jl:1\n\
    in expression starting at /tmp/tmpbehvuukl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvj53upc.jl:24\nin expression starting at\
    \ /tmp/tmpxvj53upc.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr \n    \n    sum = 0\n\
    \    \n    for x in arr \n        if x < 10 \n            sum += x \n        else\
    \ \n            sum += 10 + x \n    end\n    \n    for x in arr \n        if x\
    \ > 9 \n            sum += x \n        else \n            sum += 10 + x \n   \
    \ end\n    \n    return sum + add_elements(arr[k+1:end], k-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpged5oqok.jl:36\nin expression starting at\
    \ /tmp/tmpged5oqok.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7ht8ukq.jl:20\nin expression starting at\
    \ /tmp/tmpl7ht8ukq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) || k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length of arr\"))\n    end\n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3da3_lx.jl:24\nin expression starting at\
    \ /tmp/tmps3da3_lx.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    \n    sum = 0\n    \n    for i = 1:k\n        sum += arr[i]\n    end\n  \
    \  \n    return sum\nend\n</cell>\n<text>\nProblem 8\nWrite a function that returns\
    \ true if a binary tree is balanced, false otherwise. \nThe tree is defined as\
    \ follows:\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3x3ad_8.jl:26\nin expression starting at\
    \ /tmp/tmpr3x3ad_8.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 0 && x < 10\n\
    \            sum += x\n        elseif x > 9\n            sum += x - 10\n     \
    \   elseif x < 0\n            sum += x + 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzxqkgfs.jl:27\nin expression starting at\
    \ /tmp/tmpgzxqkgfs.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbehvuukl.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbehvuukl.jl:1\n\
    in expression starting at /tmp/tmpbehvuukl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        if el % 10 > 2\n            sum += el\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qh7bopt.jl:26\nin expression starting at\
    \ /tmp/tmp8qh7bopt.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i in\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpruygcujn.jl:24\nin expression starting at\
    \ /tmp/tmpruygcujn.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpri_fv8af.jl:21\nin expression starting at\
    \ /tmp/tmpri_fv8af.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2: Write\
    \ a function called two_digits that takes as input a positive integer n and returns\
    \ the sum of the digits of n up to and including the first two digits. For example,\
    \ given n = 123, the function should return 1 + 2 = 3. Assume that n does not\
    \ contain any leading zero. \n(Hint: use the function add_elements to solve this\
    \ problem.)\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_e_9axo.jl:21\nin expression starting at\
    \ /tmp/tmpt_e_9axo.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length of arr\")\n    end\n    sum = 0\n    for i = 1:k\n      \
    \  sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtoriilp.jl:24\nin expression starting at\
    \ /tmp/tmpdtoriilp.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for n in\
    \ arr[k:end]\n        sum += n\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwo_51k_s.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwo_51k_s.jl:29\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwo_51k_s.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwo_51k_s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwo_51k_s.jl:30\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwo_51k_s.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwo_51k_s.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwo_51k_s.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwo_51k_s.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwo_51k_s.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e > 0 && e <= 9\n\
    \            sum += e\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfptshm1m.jl:23\nin expression starting at\
    \ /tmp/tmpfptshm1m.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in arr[k:end] \n            sum += i \n        return\
    \ sum + arr[1] \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6s_ab91o.jl:23\nin expression starting at\
    \ /tmp/tmp6s_ab91o.jl:23\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    \n    for i in 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnw7mb6s3.jl:26\nin expression starting at\
    \ /tmp/tmpnw7mb6s3.jl:26\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        sum += el\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mxxp9mt.jl:24\nin expression starting at\
    \ /tmp/tmp2mxxp9mt.jl:24\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0abjnrcd.jl:61

    '
  stdout: "test set: Test Failed at /tmp/tmp0abjnrcd.jl:64\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 384 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0abjnrcd.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0abjnrcd.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0abjnrcd.jl:65\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 3046 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0abjnrcd.jl:65 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0abjnrcd.jl:63\ntest set: Test Failed at /tmp/tmp0abjnrcd.jl:66\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 130 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0abjnrcd.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0abjnrcd.jl:63\ntest set: Test\
    \ Failed at /tmp/tmp0abjnrcd.jl:67\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 3060 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0abjnrcd.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0abjnrcd.jl:63\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in arr[k+1:end]\n        sum += i\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the elements with at most two digits from the\
    \ first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqj__7ee.jl:21\nin expression starting at\
    \ /tmp/tmpjqj__7ee.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        if el < 10\n\
    \            sum += el\n        else\n            sum += el - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1f7lxmt7.jl:25\nin expression starting at\
    \ /tmp/tmp1f7lxmt7.jl:25\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdx3vmapr.jl:21\nin expression starting at\
    \ /tmp/tmpdx3vmapr.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for x in arr[k:end]\n        if x < 10 \n            sum += x \n        else\
    \ \n            sum += 10 + x \n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jk3q0p1.jl:1\nin expression starting at /tmp/tmp2jk3q0p1.jl:1\n"
  stdout: ''
  timestamp: 1659822635
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e < 10\n      \
    \      sum += e\n        elseif e < 100\n            sum += e % 10\n        elseif\
    \ e < 1000\n            sum += e % 100\n        elseif e < 10000\n           \
    \ sum += e % 1000\n        elseif e < 100000\n            sum += e % 10000\n \
    \       elseif e < 1000000\n            sum += e % 100000\n        elseif e <\
    \ 10000000\n            sum += e % 1000000\n        elseif e < 100000000\n   \
    \         sum += e % 10000000\n        elseif e < 1000000000\n            sum\
    \ += e % 100000000\n        elseif e < 10000000000\n            sum += e % 1000000000\n\
    \        elseif e < 100000000000\n            sum += e % 10000000000\n       \
    \ elseif e < 1000000000000\n            sum += e % 100000000000\n        elseif\
    \ e < 10000000000000\n            sum += e % 1000000000000\n        elseif e <\
    \ 100000000000000\n            sum += e % 10000000000000\n        elseif e < 1000000000000000\n\
    \            sum += e % 100000000000000\n        elseif e < 10000000000000000\n\
    \            sum += e % 1000000000000000\n        elseif e < 100000000000000000\n\
    \            sum += e % 10000000000000000\n        elseif e < 1000000000000000000\n\
    \            sum += e % 100000000000000000\n        else\n            sum += e\
    \ % 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph323ilij.jl:59\nin expression starting at\
    \ /tmp/tmph323ilij.jl:59\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        sum += el\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the elements with at most two digits from the first k elements of arr.\
    \ For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, your function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvus8su8.jl:24\nin expression starting at\
    \ /tmp/tmphvus8su8.jl:24\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6a0z6ehu.jl:25\nin expression starting at\
    \ /tmp/tmp6a0z6ehu.jl:25\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and an integer k and returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vql9rc3.jl:24\nin expression starting at\
    \ /tmp/tmp8vql9rc3.jl:24\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for e in arr[k+1:end]\n            if e < 10 \n         \
    \       sum += e\n            else \n                sum += e - 10\n        end\n\
    \        return sum + arr[1]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmexkmqm.jl:27\nin expression starting at\
    \ /tmp/tmpvmexkmqm.jl:27\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphl4u5hc9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl4u5hc9.jl:1\n\
    in expression starting at /tmp/tmphl4u5hc9.jl:1\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr\n        if el > 0\n     \
    \       sum += el % 10\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptf3z7i44.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmptf3z7i44.jl:28\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 39 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf3z7i44.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf3z7i44.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptf3z7i44.jl:29\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 16 == 0\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptf3z7i44.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptf3z7i44.jl:27\ntest set: Test Failed at /tmp/tmptf3z7i44.jl:30\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 40 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf3z7i44.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf3z7i44.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptf3z7i44.jl:31\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 40 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptf3z7i44.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptf3z7i44.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x <= 9\n      \
    \      sum += x\n        elseif x > 9\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm_fzxww.jl:25\nin expression starting at\
    \ /tmp/tmpcm_fzxww.jl:25\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nProblem 7: add_elements_v2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. \nThe function should return an Int64.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2b5hcae.jl:24\nin expression starting at\
    \ /tmp/tmpi2b5hcae.jl:24\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98cyxnax.jl:21\nin expression starting at\
    \ /tmp/tmp98cyxnax.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k \n            sum += arr[i] \n        end\n \
    \       return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2ha6vi9.jl:25\nin expression starting at\
    \ /tmp/tmpo2ha6vi9.jl:25\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvv_hbkz.jl:25\nin expression starting at\
    \ /tmp/tmpbvv_hbkz.jl:25\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dvojqda.jl:21\nin expression starting at\
    \ /tmp/tmp2dvojqda.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvw6x169v.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvw6x169v.jl:1\n\
    in expression starting at /tmp/tmpvw6x169v.jl:1\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i = 1:k \n            sum += arr[i] \n        return\
    \ sum + add_elements(arr[k+1:], k-1) \nend\n</cell>\n<text>\nQuestion 7\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(k + 1):\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx5rykx__.jl:21\nin expression\
    \ starting at /tmp/tmpx5rykx__.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7cqfmlz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpa7cqfmlz.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpa7cqfmlz.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\ntest set: Test Failed at /tmp/tmpa7cqfmlz.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpky577exe.jl:25\nin expression starting at\
    \ /tmp/tmpky577exe.jl:25\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo2ujo6vl.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpo2ujo6vl.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2ujo6vl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2ujo6vl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo2ujo6vl.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2ujo6vl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2ujo6vl.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    sum = 0\n    for el in arr[k+1:end]\n\
    \        if el % 10 == 0 && el > 0\n            sum += el\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv27vm0u6.jl:26\nin expression starting at\
    \ /tmp/tmpv27vm0u6.jl:26\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    \n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpjoex7t.jl:25\nin expression starting at\
    \ /tmp/tmpmpjoex7t.jl:25\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\
    \ Given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 5, the function should\
    \ return 125.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6xjuriv.jl:59\nin expression starting at\
    \ /tmp/tmpv6xjuriv.jl:59\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in arr[k:] \n            sum += i \n        return\
    \ sum + arr[k-1] \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfzdz4tvd.jl:19\nin expression\
    \ starting at /tmp/tmpfzdz4tvd.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for element in arr[k+1:end]\n        sum += element\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujvwv4f2.jl:24\nin expression starting at\
    \ /tmp/tmpujvwv4f2.jl:24\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. Test it on arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2pfhgpm.jl:25\nin expression starting at\
    \ /tmp/tmpa2pfhgpm.jl:25\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98cyxnax.jl:21\nin expression starting at\
    \ /tmp/tmp98cyxnax.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        if el % 10 > 0 \n            sum += el % 10\
    \ \n        else \n            sum += el % 10 + arr[1] \n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdz0tn7rw.jl:27\nin expression starting at\
    \ /tmp/tmpdz0tn7rw.jl:27\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphl4u5hc9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl4u5hc9.jl:1\n\
    in expression starting at /tmp/tmphl4u5hc9.jl:1\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    \n    sum = 0\n    \n    for i = 1:k\n        sum += arr[i]\n    end\n  \
    \  \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the\
    \ function should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbgyqrr45.jl:26\nin expression starting at\
    \ /tmp/tmpbgyqrr45.jl:26\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i = 2:k \n            sum += arr[i] \n        return\
    \ sum + arr[k-1] \nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the\
    \ function should return 24. Your function should use only a single for loop.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1t16r84.jl:23\nin expression starting at\
    \ /tmp/tmpe1t16r84.jl:23\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\
    \ + k\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, if arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24. Your function should work for any arr and k. Make sure to\
    \ handle errors. You can assume that arr is non-empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_jk6990.jl:24\nin expression starting at\
    \ /tmp/tmpu_jk6990.jl:24\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_pa9ute.jl:20\nin expression starting at\
    \ /tmp/tmpy_pa9ute.jl:20\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_pa9ute.jl:20\nin expression starting at\
    \ /tmp/tmpy_pa9ute.jl:20\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nProblem 3\nGiven a non-empty array of integers\
    \ arr and an integer k, return the sum of the elements with at most k digits.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgnc4ss_.jl:59\nin expression starting at\
    \ /tmp/tmphgnc4ss_.jl:59\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    else\n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2brwvo_2.jl:25\nin expression starting at\
    \ /tmp/tmp2brwvo_2.jl:25\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) || k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length of arr\"))\n    end\n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6avaomro.jl:24\nin expression starting at\
    \ /tmp/tmp6avaomro.jl:24\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:], k-1) \nend\n</cell>\n<text>\nQuestion\
    \ 9\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(k + 1):\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps8w3pxxg.jl:18\nin expression\
    \ starting at /tmp/tmps8w3pxxg.jl:18\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 2:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nPart III. Subsets\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdrws55t.jl:24\nin expression starting at\
    \ /tmp/tmpgdrws55t.jl:24\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwmrzp3au.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwmrzp3au.jl:1\n\
    in expression starting at /tmp/tmpwmrzp3au.jl:1\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr \n    \n    sum = 0\n\
    \    for x in arr \n        if x < 10 \n            sum += x \n        else \n\
    \            sum += 10 + x \n            \n        k -= 1\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgesua3t.jl:29\nin expression starting at\
    \ /tmp/tmphgesua3t.jl:29\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for element in arr[k:end]\n        if element < 10\n            sum += element\n\
    \        else\n            sum += element - 10\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ with at most two digits from the first k elements of arr. Test it on arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8uu9tl6y.jl:27\nin expression starting at\
    \ /tmp/tmp8uu9tl6y.jl:27\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0n8jsin0.jl:21\nin expression starting at\
    \ /tmp/tmp0n8jsin0.jl:21\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length of arr\")\n    end\n    sum = 0\n    for i = 1:k\n      \
    \  sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an array of integers and an integer k and returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgmzetr2.jl:24\nin expression starting at\
    \ /tmp/tmpwgmzetr2.jl:24\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nProblem 4\nWrite a function that returns the\
    \ number of elements in the array that have at most two digits.\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmparm0_7dk.jl:59\nin expression starting at\
    \ /tmp/tmparm0_7dk.jl:59\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwqayau7v.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwqayau7v.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqayau7v.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqayau7v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwqayau7v.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqayau7v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqayau7v.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoao3qcch.jl:25\nin expression starting at\
    \ /tmp/tmpoao3qcch.jl:25\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4qsv9qh.jl:20\nin expression starting at\
    \ /tmp/tmpw4qsv9qh.jl:20\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphq6gjrfh.jl:25\nin expression starting at\
    \ /tmp/tmphq6gjrfh.jl:25\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for element in arr[k:end]\n            sum += element\n \
    \       end\n        return sum\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the number of times a given element appears in an array.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1c5vzhi.jl:24\nin expression starting at\
    \ /tmp/tmph1c5vzhi.jl:24\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length of arr\"))\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp48hkopje.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp48hkopje.jl:1\n\
    in expression starting at /tmp/tmp48hkopje.jl:1\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 >\
    \ 2\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ecy536b.jl:23\nin expression starting at\
    \ /tmp/tmp9ecy536b.jl:23\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. \nFor example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9] and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7cg7rjp.jl:25\nin expression starting at\
    \ /tmp/tmpv7cg7rjp.jl:25\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ sum of the elements with at most two digits from the first k elements of arr.\
    \ For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24. Given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 5, the\
    \ function should return 125.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnxqwf31.jl:59\nin expression starting at\
    \ /tmp/tmpsnxqwf31.jl:59\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) || k > length(arr)\n        error(\"\
    k must be less than or equal to length(arr)\")\n    end\n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsbl6h7yy.jl:24\nin expression starting at\
    \ /tmp/tmpsbl6h7yy.jl:24\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x\n        else\n            sum += x - 10\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp17ad_3ch.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp17ad_3ch.jl:30\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 414 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17ad_3ch.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17ad_3ch.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp17ad_3ch.jl:31\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4216 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp17ad_3ch.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp17ad_3ch.jl:29\ntest set: Test Failed at /tmp/tmp17ad_3ch.jl:32\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 100 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17ad_3ch.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17ad_3ch.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp17ad_3ch.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4110 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17ad_3ch.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17ad_3ch.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp17ad_3ch.jl:34\n  Expression: candidate([1], 1) == 1\n   Evaluated:\
    \ -9 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia"
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k > length(arr)\n        return arr\n  \
    \  else\n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n  \
    \      end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh3dnhhd.jl:25\nin expression starting at\
    \ /tmp/tmpfh3dnhhd.jl:25\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. Test it on arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmk9iw14g.jl:24\nin expression starting at\
    \ /tmp/tmpmk9iw14g.jl:24\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i in\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. Test it on arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7_eho1h.jl:24\nin expression starting at\
    \ /tmp/tmpp7_eho1h.jl:24\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gaucgwe.jl:28\nin expression starting at\
    \ /tmp/tmp9gaucgwe.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tlt83_j.jl:21\nin expression starting at\
    \ /tmp/tmp4tlt83_j.jl:21\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\n</cell>\n<text>\nQuestion 7\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. \n\
    For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoktink6x.jl:23\nin expression starting at\
    \ /tmp/tmpoktink6x.jl:23\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. Test your function with arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and\
    \ k = 4.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4yynmer4.jl:21\nin expression starting at\
    \ /tmp/tmp4yynmer4.jl:21\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0taxlyp2.jl:28\nin expression starting at\
    \ /tmp/tmp0taxlyp2.jl:28\n"
  stdout: ''
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) \n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp37uv7lka.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp37uv7lka.jl:1\n\
    in expression starting at /tmp/tmp37uv7lka.jl:1\n"
  stdout: ''
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7ht8ukq.jl:20\nin expression starting at\
    \ /tmp/tmpl7ht8ukq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ifc4o3p.jl:59\nin expression starting at\
    \ /tmp/tmp7ifc4o3p.jl:59\n"
  stdout: ''
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    \n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvtg61ka3.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpvtg61ka3.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtg61ka3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtg61ka3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvtg61ka3.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtg61ka3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtg61ka3.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, your function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9bk912d.jl:25\nin expression starting at\
    \ /tmp/tmpp9bk912d.jl:25\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqye135s.jl:25\nin expression starting at\
    \ /tmp/tmpjqye135s.jl:25\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ifc4o3p.jl:59\nin expression starting at\
    \ /tmp/tmp7ifc4o3p.jl:59\n"
  stdout: ''
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns the sum of the elements with at most two digits from the\
    \ first k elements of arr. For example, add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgk_0nan.jl:21\nin expression starting at\
    \ /tmp/tmppgk_0nan.jl:21\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9cefyrh.jl:20\nin expression starting at\
    \ /tmp/tmpr9cefyrh.jl:20\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24. \nThe function should\
    \ return an Int64 value.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe5_oxhrv.jl:20\nin expression starting at\
    \ /tmp/tmpe5_oxhrv.jl:20\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51lwhypn.jl:25\nin expression starting at\
    \ /tmp/tmp51lwhypn.jl:25\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwqayau7v.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwqayau7v.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqayau7v.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqayau7v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwqayau7v.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqayau7v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqayau7v.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjbe7iq93.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjbe7iq93.jl:1\n\
    in expression starting at /tmp/tmpjbe7iq93.jl:1\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i = 1:k \n            sum += arr[i] \n        endfor\
    \ \n        return sum \n    end\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dwvg8nr.jl:25\nin expression starting at\
    \ /tmp/tmp4dwvg8nr.jl:25\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 2:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzxegkix.jl:24\nin expression starting at\
    \ /tmp/tmpgzxegkix.jl:24\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nSolution\n\
    Let's see how we would solve this problem manually.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptu63jc41.jl:20\nin expression starting at\
    \ /tmp/tmptu63jc41.jl:20\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98cyxnax.jl:21\nin expression starting at\
    \ /tmp/tmp98cyxnax.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr \n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nQuestion 4\nWrite a function that returns the\
    \ sum of the elements with at most two digits from the first k elements of arr.\
    \ For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_cycl_e.jl:24\nin expression starting at\
    \ /tmp/tmpe_cycl_e.jl:24\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktc403lk.jl:21\nin expression starting at\
    \ /tmp/tmpktc403lk.jl:21\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8j6kkvjz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp8j6kkvjz.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8j6kkvjz.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test Failed at /tmp/tmp8j6kkvjz.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8j6kkvjz.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test Failed at /tmp/tmp8j6kkvjz.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8j6kkvjz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp8j6kkvjz.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8j6kkvjz.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test Failed at /tmp/tmp8j6kkvjz.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8j6kkvjz.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test Failed at /tmp/tmp8j6kkvjz.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for x in arr[k:end]\n        if x % 10 == 0 \n            sum += x \n   \
    \     else \n            sum += x % 10 + x // 10 \n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7qxvycv.jl:27\nin expression starting at\
    \ /tmp/tmpg7qxvycv.jl:27\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dvojqda.jl:21\nin expression starting at\
    \ /tmp/tmp2dvojqda.jl:21\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzfbzlipu.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpzfbzlipu.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzfbzlipu.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test Failed at /tmp/tmpzfbzlipu.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzfbzlipu.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test Failed at /tmp/tmpzfbzlipu.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7y88z38c.jl:24\nin expression starting at\
    \ /tmp/tmp7y88z38c.jl:24\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcr4stexm.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpcr4stexm.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcr4stexm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcr4stexm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcr4stexm.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcr4stexm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcr4stexm.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for x in arr[k:end]\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzotss70h.jl:24\nin expression starting at\
    \ /tmp/tmpzotss70h.jl:24\n"
  stdout: ''
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    \n    sum = 0\n    for i in 1:k\n \
    \       sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dm7xcp1.jl:25\nin expression starting at\
    \ /tmp/tmp1dm7xcp1.jl:25\n"
  stdout: ''
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, if arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the\
    \ function should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcr17h0i.jl:21\nin expression starting at\
    \ /tmp/tmpdcr17h0i.jl:21\n"
  stdout: ''
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ number of elements in the array that have at most two digits.\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnni_myg.jl:59\nin expression starting at\
    \ /tmp/tmplnni_myg.jl:59\n"
  stdout: ''
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nQuestion 7\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyuyaq1dg.jl:25\nin expression starting at\
    \ /tmp/tmpyuyaq1dg.jl:25\n"
  stdout: ''
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7cqfmlz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpa7cqfmlz.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpa7cqfmlz.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\ntest set: Test Failed at /tmp/tmpa7cqfmlz.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        if el % 10 > 0 \n            sum += el\n  \
    \      else \n            sum += el % 10\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, your function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwwbu2k2.jl:27\nin expression starting at\
    \ /tmp/tmpdwwbu2k2.jl:27\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpbyatji.jl:24\nin expression starting at\
    \ /tmp/tmpcpbyatji.jl:24\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdhkekb98.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdhkekb98.jl:1\n\
    in expression starting at /tmp/tmpdhkekb98.jl:1\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvv_hbkz.jl:25\nin expression starting at\
    \ /tmp/tmpbvv_hbkz.jl:25\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8j6kkvjz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp8j6kkvjz.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8j6kkvjz.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test Failed at /tmp/tmp8j6kkvjz.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8j6kkvjz.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8j6kkvjz.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8j6kkvjz.jl:25\ntest set: Test Failed at /tmp/tmp8j6kkvjz.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 1:k\n        sum = sum + arr[i]\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwrui1uu9.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwrui1uu9.jl:1\n\
    in expression starting at /tmp/tmpwrui1uu9.jl:1\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 9: add_elements_recur\nWrite a recursive function add_elements_recur that takes\
    \ an array of integers arr and an integer k and returns the sum of the elements\
    \ with at most two digits from the first k elements of arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7dk6dqg.jl:20\nin expression starting at\
    \ /tmp/tmpt7dk6dqg.jl:20\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ifc4o3p.jl:59\nin expression starting at\
    \ /tmp/tmp7ifc4o3p.jl:59\n"
  stdout: ''
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfggt0x0p.jl:25\nin expression starting at\
    \ /tmp/tmpfggt0x0p.jl:25\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprwtvjf81.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmprwtvjf81.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwtvjf81.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwtvjf81.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprwtvjf81.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprwtvjf81.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprwtvjf81.jl:25\ntest set: Test Failed at /tmp/tmprwtvjf81.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprwtvjf81.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprwtvjf81.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 100000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nProblem 3\nGiven a non-empty array of integers\
    \ arr, return a new array with the elements of the given array arr added together.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl53em478.jl:61\nin expression starting at\
    \ /tmp/tmpl53em478.jl:61\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87elj7lk.jl:25\nin expression starting at\
    \ /tmp/tmp87elj7lk.jl:25\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. \n\
    For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_j4nfl3m.jl:23\nin expression starting at\
    \ /tmp/tmp_j4nfl3m.jl:23\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3angdvup.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp3angdvup.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3angdvup.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3angdvup.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3angdvup.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3angdvup.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3angdvup.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ifc4o3p.jl:59\nin expression starting at\
    \ /tmp/tmp7ifc4o3p.jl:59\n"
  stdout: ''
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be <= length(arr)\"))\n    end\n    sum = 0\n    for x in arr[k:end]\n     \
    \   sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_2dw64s.jl:24\nin expression starting at\
    \ /tmp/tmpz_2dw64s.jl:24\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbehvuukl.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbehvuukl.jl:1\n\
    in expression starting at /tmp/tmpbehvuukl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdy_r04c2.jl:21\nin expression starting at\
    \ /tmp/tmpdy_r04c2.jl:21\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd60x725i.jl:59\nin expression starting at\
    \ /tmp/tmpd60x725i.jl:59\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwqayau7v.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwqayau7v.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqayau7v.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqayau7v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwqayau7v.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqayau7v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqayau7v.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1659822640
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzfbzlipu.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpzfbzlipu.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzfbzlipu.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test Failed at /tmp/tmpzfbzlipu.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzfbzlipu.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzfbzlipu.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzfbzlipu.jl:25\ntest set: Test Failed at /tmp/tmpzfbzlipu.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659822642
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7cqfmlz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpa7cqfmlz.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpa7cqfmlz.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\ntest set: Test Failed at /tmp/tmpa7cqfmlz.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7cqfmlz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7cqfmlz.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i in\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpruygcujn.jl:24\nin expression starting at\
    \ /tmp/tmpruygcujn.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    sum = 0\n    for i = 1:k\n        sum\
    \ += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55jnb4jj.jl:24\nin expression starting at\
    \ /tmp/tmp55jnb4jj.jl:24\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 10000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 100000000000000 + x\n        elseif\
    \ x < 1000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 10000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 100000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 1000000000000000000 + x\n      \
    \  else\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qat5eso.jl:59\nin expression starting at\
    \ /tmp/tmp5qat5eso.jl:59\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24. Your function should work for any\
    \ arr and k. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k\
    \ = 5, your function should return 42000.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wqnvjk7.jl:25\nin expression starting at\
    \ /tmp/tmp0wqnvjk7.jl:25\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwt02xq6c.jl:24\nin expression starting at\
    \ /tmp/tmpwt02xq6c.jl:24\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. Test it on arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zn383gc.jl:24\nin expression starting at\
    \ /tmp/tmp7zn383gc.jl:24\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr\n        if n <= k\n      \
    \      sum += n\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp638x9vq1.jl:23\nin expression starting at\
    \ /tmp/tmp638x9vq1.jl:23\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 5\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. Test it on arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmbw0bhm.jl:21\nin expression starting at\
    \ /tmp/tmphmbw0bhm.jl:21\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgj_tjtvk.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgj_tjtvk.jl:1\n\
    in expression starting at /tmp/tmpgj_tjtvk.jl:1\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    \n    sum = 0\n    for i = 1:k\n  \
    \      sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6llfv7b6.jl:25\nin expression starting at\
    \ /tmp/tmp6llfv7b6.jl:25\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpma8slhfx.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma8slhfx.jl:1\n\
    in expression starting at /tmp/tmpma8slhfx.jl:1\n"
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e < 10\n      \
    \      sum += e\n        else\n            sum += e % 10 + 10 * (e / 10)\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjtnlup_.jl:24\nin expression starting at\
    \ /tmp/tmpfjtnlup_.jl:24\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in arr[k:end]\n        sum += i\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu0lcjain.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpu0lcjain.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0lcjain.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0lcjain.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu0lcjain.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu0lcjain.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpu0lcjain.jl:25\ntest set: Test Failed at /tmp/tmpu0lcjain.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu0lcjain.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu0lcjain.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphl4u5hc9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl4u5hc9.jl:1\n\
    in expression starting at /tmp/tmphl4u5hc9.jl:1\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e < 10\n      \
    \      sum += e\n        elseif e < 100\n            sum += e % 10 + 10 * (e /\
    \ 10)\n        elseif e < 1000\n            sum += e % 100 + 100 * (e / 100)\n\
    \        elseif e < 10000\n            sum += e % 1000 + 1000 * (e / 1000)\n \
    \       elseif e < 100000\n            sum += e % 10000 + 10000 * (e / 10000)\n\
    \        elseif e < 1000000\n            sum += e % 100000 + 100000 * (e / 100000)\n\
    \        elseif e < 10000000\n            sum += e % 1000000 + 1000000 * (e /\
    \ 1000000)\n        elseif e < 100000000\n            sum += e % 10000000 + 10000000\
    \ * (e / 10000000)\n        elseif e < 1000000000\n            sum += e % 100000000\
    \ + 100000000 * (e / 100000000)\n        elseif e < 10000000000\n            sum\
    \ += e % 1000000000 + 1000000000 * (e / 1000000000)\n        elseif e < 100000000000\n\
    \            sum += e % 10000000000 + 10000000000 * (e / 10000000000)\n      \
    \  elseif e < 1000000000000\n            sum += e % 100000000000 + 100000000000\
    \ * (e / 10000000000)\n        elseif e < 10000000000000\n            sum += e\
    \ % 1000000000000 + 1000000000000 * (e / 100000000000)\n        elseif e < 100000000000000\n\
    \            sum += e % 10000000000000 + 10000000000000 * (e / 1000000000000)\n\
    \        elseif e < 1000000000000000\n            sum += e % 100000000000000 +\
    \ 100000000000000 * (e / 10000000000000)\n        elseif e < 10000000000000000\n\
    \            sum += e % 1000000000000000 + 1000000000000000 * (e / 100000000000000)\n\
    \        elseif e < 100000000000000000\n            sum += e % 10000000000000000\
    \ + 10000000000000000 * (e / 1000000000000000)\n        elseif e < 1000000000000000000\n\
    \            sum += e % 100000000000000000 + 100000000000000000 * (e / 100000000000000000)\n\
    \        elseif e < 1000000000000000000\n            sum += e % 1000000000000000000\
    \ + 1000000000000000000 * (e / 1000000000000000000)\n        else\n          \
    \  sum += e\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24. Write a test for this\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_iokjp7.jl:61\nin expression starting at\
    \ /tmp/tmpu_iokjp7.jl:61\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.3>\n@assert\
    \ add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\n\
    Question 3.2\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, if arr = [111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mezqc9e.jl:25\nin expression starting at\
    \ /tmp/tmp5mezqc9e.jl:25\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nQuestion 7\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjnmpqde.jl:59\nin expression starting at\
    \ /tmp/tmpqjnmpqde.jl:59\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    \n \
    \   sum = 0\n    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8lhkwdy.jl:24\nin expression starting at\
    \ /tmp/tmpk8lhkwdy.jl:24\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl34zeuhz.jl:21\nin expression starting at\
    \ /tmp/tmpl34zeuhz.jl:21\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ sum of the elements with at most three digits from the first k elements of arr.\
    \ For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 30 (3 + 5 + 7).\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycuoaqp5.jl:59\nin expression starting at\
    \ /tmp/tmpycuoaqp5.jl:59\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1b_k4nq4.jl:25\nin expression starting at\
    \ /tmp/tmp1b_k4nq4.jl:25\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        else\n            sum += x % 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ your function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi49cxj07.jl:25\nin expression starting at\
    \ /tmp/tmpi49cxj07.jl:25\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphl4u5hc9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl4u5hc9.jl:1\n\
    in expression starting at /tmp/tmphl4u5hc9.jl:1\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for x in arr[k:end]\n        if x % 10 == 0 \n            sum += x \n   \
    \     else \n            sum += x % 10 + x % 100\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ with at most two digits from the first k elements of arr. For example, given\
    \ arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return\
    \ 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3siugomy.jl:27\nin expression starting at\
    \ /tmp/tmp3siugomy.jl:27\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomd78f6h.jl:23\nin expression starting at\
    \ /tmp/tmpomd78f6h.jl:23\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e > 0 && e <= 9\n\
    \            sum += e\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3kfq97z.jl:23\nin expression starting at\
    \ /tmp/tmpq3kfq97z.jl:23\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\n</cell>\n<text>\nProblem 4\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqbigen6.jl:23\nin expression starting at\
    \ /tmp/tmpiqbigen6.jl:23\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprd3l6v9_.jl:21\nin expression starting at\
    \ /tmp/tmprd3l6v9_.jl:21\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for e in arr[k+1:end]\n        if e < 10 \n            sum += e\n       \
    \ else\n            sum += e - 10\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoo757fbg.jl:1\nin expression starting at /tmp/tmpoo757fbg.jl:1\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbx9mjt1.jl:25\nin expression starting at\
    \ /tmp/tmpjbx9mjt1.jl:25\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e < 10\n      \
    \      sum += e\n        elseif e < 100\n            sum += e - 10\n        elseif\
    \ e < 1000\n            sum += e - 100\n        elseif e < 10000\n           \
    \ sum += e - 1000\n        elseif e < 100000\n            sum += e - 10000\n \
    \       elseif e < 1000000\n            sum += e - 100000\n        elseif e <\
    \ 10000000\n            sum += e - 1000000\n        elseif e < 100000000\n   \
    \         sum += e - 10000000\n        elseif e < 1000000000\n            sum\
    \ += e - 100000000\n        elseif e < 10000000000\n            sum += e - 1000000000\n\
    \        elseif e < 100000000000\n            sum += e - 10000000000\n       \
    \ elseif e < 1000000000000\n            sum += e - 100000000000\n        elseif\
    \ e < 10000000000000\n            sum += e - 1000000000000\n        elseif e <\
    \ 100000000000000\n            sum += e - 10000000000000\n        elseif e < 1000000000000000\n\
    \            sum += e - 100000000000000\n        elseif e < 10000000000000000\n\
    \            sum += e - 1000000000000000\n        elseif e < 100000000000000000\n\
    \            sum += e - 10000000000000000\n        elseif e < 1000000000000000000\n\
    \            sum += e - 100000000000000000\n        else\n            sum += e\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the sum of the elements with\
    \ at most three digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24\
    \ (3 + 5 + 8).\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t\
    @test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0179tu7y.jl:59\nin expression starting at\
    \ /tmp/tmp0179tu7y.jl:59\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzx1zv2s.jl:24\nin expression starting at\
    \ /tmp/tmpzzx1zv2s.jl:24\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    sum = 0\n    for i = 1:k\n        sum\
    \ += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg264xmlz.jl:24\nin expression starting at\
    \ /tmp/tmpg264xmlz.jl:24\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpamxtnh6e.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpamxtnh6e.jl:1\n\
    in expression starting at /tmp/tmpamxtnh6e.jl:1\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Question 7: Write a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. Test your function with arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nwnx9jq.jl:24\nin expression starting at\
    \ /tmp/tmp_nwnx9jq.jl:24\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomd78f6h.jl:23\nin expression starting at\
    \ /tmp/tmpomd78f6h.jl:23\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwmrzp3au.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwmrzp3au.jl:1\n\
    in expression starting at /tmp/tmpwmrzp3au.jl:1\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr \n    \n    sum = 0\n\
    \    for e in arr \n        if e < 10 \n            sum += e \n        else \n\
    \            sum += 10 + e \n            \n    return sum + add_elements(arr[k+1:],\
    \ k-1) \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(k + 1):\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp75zf_6t4.jl:25\nin expression\
    \ starting at /tmp/tmp75zf_6t4.jl:25\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nProblem 3\nGiven a non-empty array of integers\
    \ arr, return a new array where each element is the sum of the elements with two\
    \ digits in their decimal representation.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1tkhhi0.jl:59\nin expression starting at\
    \ /tmp/tmpu1tkhhi0.jl:59\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwn9b7wi0.jl:21\nin expression starting at\
    \ /tmp/tmpwn9b7wi0.jl:21\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i in arr[k:end]\n        sum += i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nProblem 7: add_elements_v2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijpi7osc.jl:24\nin expression starting at\
    \ /tmp/tmpijpi7osc.jl:24\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        if el < 10\n            sum += el\n       \
    \ else\n            sum += el - 10\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkto4hc_9.jl:1\nin expression starting at /tmp/tmpkto4hc_9.jl:1\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the sum of the elements with\
    \ at most three digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24\
    \ (3 + 5 + 8).\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t\
    @test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzqzundy.jl:59\nin expression starting at\
    \ /tmp/tmplzqzundy.jl:59\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nProblem 7: add_elements_v2\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctjslrhk.jl:21\nin expression starting at\
    \ /tmp/tmpctjslrhk.jl:21\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    \n    for i in 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnw7mb6s3.jl:26\nin expression starting at\
    \ /tmp/tmpnw7mb6s3.jl:26\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the sum of the elements with at most three digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24 (3 + 5 + 8).\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnk1r3de8.jl:59\nin expression starting at\
    \ /tmp/tmpnk1r3de8.jl:59\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyqf2woh.jl:20\nin expression starting at\
    \ /tmp/tmpoyqf2woh.jl:20\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k+1:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n@time add_elements(arr,\
    \ 4)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. Test it on\
    \ arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnib0y0__.jl:21\nin expression starting at\
    \ /tmp/tmpnib0y0__.jl:21\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2x0x8bwj.jl:59\nin expression starting at\
    \ /tmp/tmp2x0x8bwj.jl:59\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphl4u5hc9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl4u5hc9.jl:1\n\
    in expression starting at /tmp/tmphl4u5hc9.jl:1\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr[k+1:end]\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_eksblr6.jl:21\nin expression starting at\
    \ /tmp/tmp_eksblr6.jl:21\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6di3bwlm.jl:20\nin expression starting at\
    \ /tmp/tmp6di3bwlm.jl:20\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    \n \
    \   sum = 0\n    for e in arr[k:end]\n        if e < 10\n            sum += e\n\
    \        else\n            sum += e - 10\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j7zvfn4.jl:1\nin expression starting at /tmp/tmp3j7zvfn4.jl:1\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7ht8ukq.jl:20\nin expression starting at\
    \ /tmp/tmpl7ht8ukq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for element in arr[k:end]\n            sum += element\n \
    \       end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wsh47x6.jl:25\nin expression starting at\
    \ /tmp/tmp_wsh47x6.jl:25\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\
    \ + arr[k]\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nProblem 2b\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjp5u3xae.jl:24\nin expression starting at\
    \ /tmp/tmpjp5u3xae.jl:24\n"
  stdout: ''
  timestamp: 1659822647
