language: jl
name: HumanEval_85_add
results:
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function called sub that subtracts two lists.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesozoyyl.jl:14\nin expression starting at\
    \ /tmp/tmpesozoyyl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuyw0hm0.jl:14\nin expression starting at\
    \ /tmp/tmpnuyw0hm0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-2):end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements of a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprtx2jzkv.jl:13\nin expression starting at\
    \ /tmp/tmprtx2jzkv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"add([1,2]) should\
    \ equal 1\"\n@assert add([1,2,3]) == 6 \"add([1,2,3]) should equal 6\"\n@assert\
    \ add([1,3,5]) == 9 \"add([1,3,5]) should equal 9\"\n@assert add([1,3,5,7]) ==\
    \ 14 \"add([1,3,5,7]) should equal 14\"\n@assert add([1,3,5,7,9]) == 19 \"add([1,3,5,7,9])\
    \ should equal 19\"\n@assert add([1,3,5,7,9,11]) == 26 \"add([1,3,5,7,9,11]) should\
    \ equal 26\"\n@assert add([1,3,5,7,9,11,13]) == 33 \"add([1,3,5,7,9,11,13]) should\
    \ equal 33\"\n@assert add([1,3,5,7,9,11,13,15]) == 42 \"add([1,3,5,7,9,11,13,15])\
    \ should equal 42\"\n@assert add([1,3,5,7,9,11,13,15,17]) == 50 \"add([1,3,5,7,9,11,13,15,17])\
    \ should equal 50\"\n@assert add([1,3,5,7,9,11,13,15,17,19]) == 58 \"add([1,3,5,7,9,11,13,15,17,19])\
    \ should equal 58\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21]) == 66 \"add([1,3,5,7,9,11,13,15,17,19,21])\
    \ should equal 66\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23]) == 74 \"add([1,3,5,7,9,11,13,15,17,19,21,23])\
    \ should equal 74\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23,25]) == 82 \"\
    add([1,3,5,7,9,11,13,15,17,19,21,23,25]) should equal 82\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23,25,27])\
    \ == 90 \"add([1,3,5,7,9,11,13,15,17,19,21,23,25,27]) should equal 90\"\n@assert\
    \ add([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]) == 98 \"add([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29])\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto3pitjk.jl:13\nin expression starting at\
    \ /tmp/tmpto3pitjk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in the given list. For example, sum([4,\
    \ 9, 16, 25]) should return 52.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjqgrrbp.jl:13\nin expression starting at\
    \ /tmp/tmpbjqgrrbp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in the given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsu0xa53v.jl:13\nin expression starting at\
    \ /tmp/tmpsu0xa53v.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4doe_fc7.jl:13\nin expression starting at\
    \ /tmp/tmp4doe_fc7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return 1 given\
    \ an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ a list of length 3\"\n@assert add([4, 2, 6, 7]) == 4 \"add() should return 4\
    \ given a list of length 4\"\n@assert add([4, 2, 6, 7]) == 6 \"add() should return\
    \ 6 given a list of length 5\"\n@assert add([4, 2, 6, 7]) == 8 \"add() should\
    \ return 8 given a list of length 6\"\n@assert add([4, 2, 6, 7]) == 10 \"add()\
    \ should return 10 given a list of length 7\"\n@assert add([4, 2, 6, 7]) == 12\
    \ \"add() should return 12 given a list of length 8\"\n@assert add([4, 2, 6, 7])\
    \ == 14 \"add() should return 14 given a list of length 9\"\n@assert add([4, 2,\
    \ 6, 7]) == 16 \"add() should return 16 given a list of length 10\"\n@assert add([4,\
    \ 2, 6, 7]) == 18 \"add() should return 18 given a list of length 11\"\n@assert\
    \ add([4, 2, 6, 7]) == 20 \"add() should return 20 given a list of length 12\"\
    \n@assert add([4, 2, 6, 7]) == 22 \"add() should return 22 given a list of length\
    \ 13\"\n@assert add([4, 2, 6, 7]) == 24 \"add() should return 24 given a list\
    \ of length 14\"\n@assert add([4, 2, 6, 7]) == 26 \"add() should return 26 given\
    \ a list of length 15\"\n@assert add([4, 2, 6, 7]) == 28 \"add() should return\
    \ 28 given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 30 \"add() should\
    \ return 30 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 32 \"add()\
    \ should return 32 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 34\
    \ \"add() should return 34 given a list of length 19\"\n@assert add([4, 2, 6,\
    \ 7]) == 36 \"add() should return 36 given a list of length 20\"\n@assert add([4,\
    \ 2, 6, 7]) == 38 \"add() should return 38 given a list of length 21\"\n@assert\
    \ add([4, 2, 6, 7]) == 40 \"add() should return 40 given a list of length 22\"\
    \n@assert add([4, 2, 6, 7]) == 42 \"add() should return \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjdstvmsm.jl:13\nin expression starting at\
    \ /tmp/tmpjdstvmsm.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ all the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprva9l59u.jl:15\nin expression starting at\
    \ /tmp/tmprva9l59u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a list\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxdhqhr1q.jl:13\nin expression starting at\
    \ /tmp/tmpxdhqhr1q.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmwa7903.jl:13\nin expression starting at\
    \ /tmp/tmpbmwa7903.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even elements in a list\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yjaxs65.jl:14\nin expression starting at\
    \ /tmp/tmp7yjaxs65.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwocc4e_u.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwocc4e_u.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpwocc4e_u.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwocc4e_u.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwocc4e_u.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwocc4e_u.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpwocc4e_u.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n   "
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even elements in a list\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizsfe3sg.jl:13\nin expression starting at\
    \ /tmp/tmpizsfe3sg.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in the list lst\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtgepe48.jl:14\nin expression starting at\
    \ /tmp/tmpwtgepe48.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return\
    \ 1 given an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 3\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 4\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 5\"\n@assert add([4, 2, 6, 7]) == 2 \"\
    add() should return 2 given a list of length 6\"\n@assert add([4, 2, 6, 7]) ==\
    \ 2 \"add() should return 2 given a list of length 7\"\n@assert add([4, 2, 6,\
    \ 7]) == 2 \"add() should return 2 given a list of length 8\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 9\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 10\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length 11\"\n\
    @assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length\
    \ 12\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of\
    \ length 13\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a\
    \ list of length 14\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2\
    \ given a list of length 15\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 2\
    \ \"add() should return 2 given a list of length 19\"\n@assert add([4, 2, 6, 7])\
    \ == 2 \"add() should return 2 given a list of length 20\"\n@assert add([4, 2,\
    \ 6, 7]) == 2 \"add() should return 2 given a list of length 21\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 22\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa1afptu.jl:13\nin expression starting at\
    \ /tmp/tmpqa1afptu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the squares\
    \ of the elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhy_wg3o.jl:15\nin expression starting at\
    \ /tmp/tmpjhy_wg3o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = even.+odd\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1jtn5myq.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp1jtn5myq.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp1jtn5myq.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jtn5myq.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1jtn5myq.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1jtn5myq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp1jtn5myq.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jtn5myq.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.+2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called subtract that takes two vectors of integers and returns the\
    \ difference between them.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdf2z6vj3.jl:14\nin expression starting at\
    \ /tmp/tmpdf2z6vj3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7csfi594.jl:14\nin expression starting at\
    \ /tmp/tmp7csfi594.jl:14\n"
  stdout: ''
