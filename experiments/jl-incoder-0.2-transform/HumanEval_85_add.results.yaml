language: jl
name: HumanEval_85_add
results:
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function called sub that subtracts two lists.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesozoyyl.jl:14\nin expression starting at\
    \ /tmp/tmpesozoyyl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuyw0hm0.jl:14\nin expression starting at\
    \ /tmp/tmpnuyw0hm0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-2):end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements of a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprtx2jzkv.jl:13\nin expression starting at\
    \ /tmp/tmprtx2jzkv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"add([1,2]) should\
    \ equal 1\"\n@assert add([1,2,3]) == 6 \"add([1,2,3]) should equal 6\"\n@assert\
    \ add([1,3,5]) == 9 \"add([1,3,5]) should equal 9\"\n@assert add([1,3,5,7]) ==\
    \ 14 \"add([1,3,5,7]) should equal 14\"\n@assert add([1,3,5,7,9]) == 19 \"add([1,3,5,7,9])\
    \ should equal 19\"\n@assert add([1,3,5,7,9,11]) == 26 \"add([1,3,5,7,9,11]) should\
    \ equal 26\"\n@assert add([1,3,5,7,9,11,13]) == 33 \"add([1,3,5,7,9,11,13]) should\
    \ equal 33\"\n@assert add([1,3,5,7,9,11,13,15]) == 42 \"add([1,3,5,7,9,11,13,15])\
    \ should equal 42\"\n@assert add([1,3,5,7,9,11,13,15,17]) == 50 \"add([1,3,5,7,9,11,13,15,17])\
    \ should equal 50\"\n@assert add([1,3,5,7,9,11,13,15,17,19]) == 58 \"add([1,3,5,7,9,11,13,15,17,19])\
    \ should equal 58\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21]) == 66 \"add([1,3,5,7,9,11,13,15,17,19,21])\
    \ should equal 66\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23]) == 74 \"add([1,3,5,7,9,11,13,15,17,19,21,23])\
    \ should equal 74\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23,25]) == 82 \"\
    add([1,3,5,7,9,11,13,15,17,19,21,23,25]) should equal 82\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23,25,27])\
    \ == 90 \"add([1,3,5,7,9,11,13,15,17,19,21,23,25,27]) should equal 90\"\n@assert\
    \ add([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]) == 98 \"add([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29])\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto3pitjk.jl:13\nin expression starting at\
    \ /tmp/tmpto3pitjk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in the given list. For example, sum([4,\
    \ 9, 16, 25]) should return 52.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjqgrrbp.jl:13\nin expression starting at\
    \ /tmp/tmpbjqgrrbp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in the given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsu0xa53v.jl:13\nin expression starting at\
    \ /tmp/tmpsu0xa53v.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4doe_fc7.jl:13\nin expression starting at\
    \ /tmp/tmp4doe_fc7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return 1 given\
    \ an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ a list of length 3\"\n@assert add([4, 2, 6, 7]) == 4 \"add() should return 4\
    \ given a list of length 4\"\n@assert add([4, 2, 6, 7]) == 6 \"add() should return\
    \ 6 given a list of length 5\"\n@assert add([4, 2, 6, 7]) == 8 \"add() should\
    \ return 8 given a list of length 6\"\n@assert add([4, 2, 6, 7]) == 10 \"add()\
    \ should return 10 given a list of length 7\"\n@assert add([4, 2, 6, 7]) == 12\
    \ \"add() should return 12 given a list of length 8\"\n@assert add([4, 2, 6, 7])\
    \ == 14 \"add() should return 14 given a list of length 9\"\n@assert add([4, 2,\
    \ 6, 7]) == 16 \"add() should return 16 given a list of length 10\"\n@assert add([4,\
    \ 2, 6, 7]) == 18 \"add() should return 18 given a list of length 11\"\n@assert\
    \ add([4, 2, 6, 7]) == 20 \"add() should return 20 given a list of length 12\"\
    \n@assert add([4, 2, 6, 7]) == 22 \"add() should return 22 given a list of length\
    \ 13\"\n@assert add([4, 2, 6, 7]) == 24 \"add() should return 24 given a list\
    \ of length 14\"\n@assert add([4, 2, 6, 7]) == 26 \"add() should return 26 given\
    \ a list of length 15\"\n@assert add([4, 2, 6, 7]) == 28 \"add() should return\
    \ 28 given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 30 \"add() should\
    \ return 30 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 32 \"add()\
    \ should return 32 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 34\
    \ \"add() should return 34 given a list of length 19\"\n@assert add([4, 2, 6,\
    \ 7]) == 36 \"add() should return 36 given a list of length 20\"\n@assert add([4,\
    \ 2, 6, 7]) == 38 \"add() should return 38 given a list of length 21\"\n@assert\
    \ add([4, 2, 6, 7]) == 40 \"add() should return 40 given a list of length 22\"\
    \n@assert add([4, 2, 6, 7]) == 42 \"add() should return \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjdstvmsm.jl:13\nin expression starting at\
    \ /tmp/tmpjdstvmsm.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ all the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprva9l59u.jl:15\nin expression starting at\
    \ /tmp/tmprva9l59u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a list\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxdhqhr1q.jl:13\nin expression starting at\
    \ /tmp/tmpxdhqhr1q.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmwa7903.jl:13\nin expression starting at\
    \ /tmp/tmpbmwa7903.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even elements in a list\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yjaxs65.jl:14\nin expression starting at\
    \ /tmp/tmp7yjaxs65.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwocc4e_u.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwocc4e_u.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpwocc4e_u.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwocc4e_u.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwocc4e_u.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwocc4e_u.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpwocc4e_u.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n   "
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even elements in a list\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizsfe3sg.jl:13\nin expression starting at\
    \ /tmp/tmpizsfe3sg.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in the list lst\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtgepe48.jl:14\nin expression starting at\
    \ /tmp/tmpwtgepe48.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return\
    \ 1 given an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 3\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 4\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 5\"\n@assert add([4, 2, 6, 7]) == 2 \"\
    add() should return 2 given a list of length 6\"\n@assert add([4, 2, 6, 7]) ==\
    \ 2 \"add() should return 2 given a list of length 7\"\n@assert add([4, 2, 6,\
    \ 7]) == 2 \"add() should return 2 given a list of length 8\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 9\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 10\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length 11\"\n\
    @assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length\
    \ 12\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of\
    \ length 13\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a\
    \ list of length 14\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2\
    \ given a list of length 15\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 2\
    \ \"add() should return 2 given a list of length 19\"\n@assert add([4, 2, 6, 7])\
    \ == 2 \"add() should return 2 given a list of length 20\"\n@assert add([4, 2,\
    \ 6, 7]) == 2 \"add() should return 2 given a list of length 21\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 22\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa1afptu.jl:13\nin expression starting at\
    \ /tmp/tmpqa1afptu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the squares\
    \ of the elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhy_wg3o.jl:15\nin expression starting at\
    \ /tmp/tmpjhy_wg3o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = even.+odd\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1jtn5myq.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp1jtn5myq.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp1jtn5myq.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jtn5myq.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1jtn5myq.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1jtn5myq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp1jtn5myq.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1jtn5myq.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.+2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called subtract that takes two vectors of integers and returns the\
    \ difference between them.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdf2z6vj3.jl:14\nin expression starting at\
    \ /tmp/tmpdf2z6vj3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7csfi594.jl:14\nin expression starting at\
    \ /tmp/tmp7csfi594.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfg6sp9x.jl:15\nin expression starting at\
    \ /tmp/tmpmfg6sp9x.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6dvztmi.jl:14\nin expression starting at\
    \ /tmp/tmpb6dvztmi.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the elements.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxiixgbx.jl:14\nin expression starting at\
    \ /tmp/tmpkxiixgbx.jl:14\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjajp0ycl.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpjajp0ycl.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 4 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjajp0ycl.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjajp0ycl.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpjajp0ycl.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 12 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjajp0ycl.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjajp0ycl.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpjajp0ycl.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjajp0ycl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjajp0ycl.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpjajp0ycl.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjajp0ycl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjajp0ycl.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function called multiply that multiplies all the numbers in a list by 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdy0q1mat.jl:13\nin expression starting at\
    \ /tmp/tmpdy0q1mat.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf01f93jb.jl:13\nin expression starting at\
    \ /tmp/tmpf01f93jb.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a list. \nWrite a function\
    \ that returns the sum of the odd numbers in a list. \nWrite a function that returns\
    \ the sum of the even numbers in a list and the sum of the odd numbers in a list.\
    \ \nWrite a function that returns the sum of the even numbers in a list and the\
    \ sum of the odd numbers in a list and the sum of the even numbers in a list.\
    \ \nWrite a function that returns the sum of the even numbers in a list and the\
    \ sum of the odd numbers in a list and the sum of the even numbers in a list and\
    \ the sum of the odd numbers in a list. \nWrite a function that returns the sum\
    \ of the even numbers in a list and the sum of the odd numbers in a list and the\
    \ sum of the even numbers in a list and the sum of the odd numbers in a list and\
    \ the sum of the even numbers in a list. \nWrite a function that returns the sum\
    \ of the even numbers in a list and the sum of the odd numbers in a list and the\
    \ sum of the even numbers in a list and the sum of the odd numbers in a list and\
    \ the sum of the even numbers in a list and the sum of the odd numbers in a list.\
    \ \nWrite a function that returns the sum of the even numbers in a list and the\
    \ sum of the odd numbers in a list and the sum of the even numbers in a list and\
    \ the sum of the odd numbers in a list and the sum of the even numbers in a list\
    \ and the sum of the odd numbers in a list and the sum of the even numbers in\
    \ a list. \nWrite a function that returns the sum of the even numbers in a list\
    \ and the sum of the odd numbers in a list and the sum of the even numbers in\
    \ a list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list. \nWrite a function that\
    \ returns the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list. \nWrite a function that returns the sum of the even numbers in a\
    \ list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list. \nWrite a function that\
    \ returns the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11r5f74v.jl:14\nin expression starting at\
    \ /tmp/tmp11r5f74v.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1):end]\n    evens = filter(x -> x % 2 == 0, evens)\n   \
    \ odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n \
    \   odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of all the numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4pqyy5ad.jl:17\nin expression starting at\
    \ /tmp/tmp4pqyy5ad.jl:17\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sukzfpl.jl:15\nin expression starting at\
    \ /tmp/tmp_sukzfpl.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = even.+odd\n    return even\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert add([1]) == 1;\n@assert add([4, 2, 6, 7]) ==\
    \ 2;\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers in the list lst.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodykxdby.jl:14\nin expression starting at\
    \ /tmp/tmpodykxdby.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements in the vector. For example, sum([1, 2, 3]) should\
    \ return 10. Make sure you use reduce to solve this problem.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1igx0udg.jl:15\nin expression starting at\
    \ /tmp/tmp1igx0udg.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuwaqom0.jl:13\nin expression starting at\
    \ /tmp/tmpmuwaqom0.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even\
    \ = collect(even)\n    odd = collect(odd)\n    even = sum(even)\n    odd = sum(odd)\n\
    \    return even + odd\nend\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ even numbers in a given list. For example, sum([4, 2, 6, 7]) == 2 + 4 + 6 +\
    \ 7.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxifalmbs.jl:17\nin expression starting at\
    \ /tmp/tmpxifalmbs.jl:17\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of all elements in a vector.\
    \ \nWrite a function that returns the product of all elements in a vector. \n\
    Write a function that returns the mean of all elements in a vector. \nWrite a\
    \ function that returns the median of all elements in a vector. \nWrite a function\
    \ that returns the mode of all elements in a vector. \nWrite a function that returns\
    \ the standard deviation of all elements in a vector. \nWrite a function that\
    \ returns the variance of all elements in a vector. \nWrite a function that returns\
    \ the minimum of all elements in a vector. \nWrite a function that returns the\
    \ maximum of all elements in a vector. \nWrite a function that returns the absolute\
    \ maximum of all elements in a vector. \nWrite a function that returns the absolute\
    \ minimum of all elements in a vector. \nWrite a function that returns the absolute\
    \ mean of all elements in a vector. \nWrite a function that returns the absolute\
    \ median of all elements in a vector. \nWrite a function that returns the absolute\
    \ mode of all elements in a vector. \nWrite a function that returns the absolute\
    \ standard deviation of all elements in a vector. \nWrite a function that returns\
    \ the absolute variance of all elements in a vector. \nWrite a function that returns\
    \ the absolute minimum of all elements in a vector. \nWrite a function that returns\
    \ the absolute maximum of all elements in a vector. \nWrite a function that returns\
    \ the absolute mean of all elements in a vector. \nWrite a function that returns\
    \ the absolute median of all elements in a vector. \nWrite a function that returns\
    \ the absolute mode of all elements in a vector. \nWrite a function that returns\
    \ the absolute standard deviation of all elements in a vector. \nWrite a function\
    \ that returns the absolute variance of all elements in a vector. \nWrite a function\
    \ that returns the absolute minimum of all elements in a vector. \nWrite a function\
    \ that returns the absolute maximum of all elements in a vector. \nWrite a function\
    \ that returns the absolute mean of all elements in a vector. \nWrite a function\
    \ that returns the absolute median of all elements in a vector. \nWrite a function\
    \ that returns the absolute mode of all elements in a vector. \nWrite a function\
    \ that returns the absolute standard deviation of all elements in a vector. \n\
    Write a function that returns the absolute variance of all elements in a vector.\
    \ \nWrite a function that returns the absolute minimum of all elements in a vector.\
    \ \nWrite a function that returns the absolute maximum of all elements in a vector.\
    \ \nWrite a function that returns the absolute mean of all elements in a vector.\
    \ \nWrite a function that returns the absolute median of all elements in a vector.\
    \ \nWrite a function that returns the absolute mode of all elements in a vector.\
    \ \nWrite a function that returns the absolute standard deviation of all elements\
    \ in a vector. \nWrite a function that returns the absolute variance of all elements\
    \ in a vector. \nWrite a function that returns the absolute minimum of all elements\
    \ in a vector. \nWrite a function that returns the absolute maximum of all elements\
    \ in a vector\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1k0qhb8.jl:13\nin expression starting at\
    \ /tmp/tmpp1k0qhb8.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ For example, add([1,2,3]) should return 9. Hint: use map()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7l09yx2.jl:13\nin expression starting at\
    \ /tmp/tmpd7l09yx2.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([2, 3]) == 5 \n@assert add([4, 5, 6]) == 10\
    \ \n@assert add([7, 8, 9]) == 17 \n@assert add([10, 11, 12]) == 22 \n@assert add([13,\
    \ 14, 15]) == 29 \n@assert add([16, 17, 18]) == 36 \n@assert add([19, 20, 21])\
    \ == 45 \n@assert add([22, 23, 24]) == 52 \n@assert add([25, 26, 27]) == 59 \n\
    @assert add([28, 29, 30]) == 66 \n@assert add([31, 32, 33]) == 73 \n@assert add([34,\
    \ 35, 36]) == 80 \n@assert add([37, 38, 39]) == 87 \n@assert add([40, 41, 42])\
    \ == 94 \n@assert add([43, 44, 45]) == 101 \n@assert add([46, 47, 48]) == 107\
    \ \n@assert add([49, 50, 51]) == 114 \n@assert add([52, 53, 54]) == 121 \n@assert\
    \ add([55, 56, 57]) == 127 \n@assert add([58, 59, 60]) == 134 \n@assert add([61,\
    \ 62, 63]) == 141 \n@assert add([64, 65, 66]) == 148 \n@assert add([67, 68, 69])\
    \ == 155 \n@assert add([70, 71, 72]) == 162 \n@assert add([73, 74, 75]) == 169\
    \ \n@assert add([76, 77, 78]) == 176 \n@assert add([79, 80, 81]) == 183 \n@assert\
    \ add([82, 83, 84]) == 190 \n@assert add([85, 86, 87]) == 197 \n@assert add([88,\
    \ 89, 90]) == 204 \n@assert add([91, 92, 93]) == 211 \n@assert add([94, 95, 96])\
    \ == 218 \n@assert add([97, 98, 99]) == 225 \n@assert add([100, 101, 102]) ==\
    \ 232 \n@assert add([103, 104, 105]) == 239 \n@assert add([106, 107, 108]) ==\
    \ 24\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpco158lp_.jl:15\nin expression starting at\
    \ /tmp/tmpco158lp_.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv5mc_5_.jl:13\nin expression starting at\
    \ /tmp/tmpvv5mc_5_.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that subtracts the even elements that are at odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcq98wzlf.jl:14\nin expression starting at\
    \ /tmp/tmpcq98wzlf.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = sum(even)\n    odd = sum(odd)\n    return even\
    \ + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69jai1im.jl:15\nin expression starting at\
    \ /tmp/tmp69jai1im.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpvjy4_3h3.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvjy4_3h3.jl:12\n\
    in expression starting at /tmp/tmpvjy4_3h3.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of all the elements\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywj_tiqx.jl:14\nin expression starting at\
    \ /tmp/tmpywj_tiqx.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function called multiply\
    \ that multiplies all the numbers in a list together.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpkg39r1.jl:13\nin expression starting at\
    \ /tmp/tmpvpkg39r1.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a vector where each\
    \ element is the sum of the elements before it.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ndx3v79.jl:13\nin expression starting at\
    \ /tmp/tmp_ndx3v79.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even = even.+odd\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a list of integers and returns the sum of the even elements\
    \ that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprke6nvgi.jl:14\nin expression starting at\
    \ /tmp/tmprke6nvgi.jl:14\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even numbers in a given\
    \ list. \nWrite a function that returns the sum of the odd numbers in a given\
    \ list. \nWrite a function that returns the product of the even numbers in a given\
    \ list. \nWrite a function that returns the product of the odd numbers in a given\
    \ list. \nWrite a function that returns the maximum of a given list. \nWrite a\
    \ function that returns the minimum of a given list. \nWrite a function that returns\
    \ the product of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the squares of the odd numbers in a given list.\
    \ \nWrite a function that returns the sum of the squares of the even numbers in\
    \ a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the product of\
    \ the squares of the even numbers in a given list. \nWrite a function that returns\
    \ the product of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the cubes of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the cubes of the odd numbers in a given list.\
    \ \nWrite a function that returns the product of the cubes of the even numbers\
    \ in a given list. \nWrite a function that returns the product of the cubes of\
    \ the odd numbers in a given list. \nWrite a function that returns the sum of\
    \ the reciprocals of the even numbers in a given list. \nWrite a function that\
    \ returns the sum of the reciprocals of the odd numbers in a given list. \nWrite\
    \ a function that returns the product of the reciprocals of the even numbers in\
    \ a given list. \nWrite a function that returns the product of the reciprocals\
    \ of the odd numbers in a given list. \nWrite a function that returns the sum\
    \ of the reciprocals of the squares of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the reciprocals of the squares of the odd\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ reciprocals of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the reciprocals of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the reciprocals\
    \ of the cubes of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the reciprocals of the cubes of the odd numbers in a given list.\
    \ \nWrite a function that returns the product of the reciprocals of the cubes\
    \ of the even numbers in a given list. \nWrite a function that \nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2xxjenym.jl:15\nin expression starting at\
    \ /tmp/tmp2xxjenym.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the elements.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsu398zyu.jl:14\nin expression starting at\
    \ /tmp/tmpsu398zyu.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = sum(even)\n    odd = sum(odd)\n    return\
    \ even + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even numbers\
    \ in an array. \nWrite a function that returns the sum of the odd numbers in an\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyd97wjci.jl:15\nin expression starting at\
    \ /tmp/tmpyd97wjci.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgr8ahp52.jl:13\nin expression starting at\
    \ /tmp/tmpgr8ahp52.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list.\
    \ \n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljpfn0dd.jl:13\nin expression starting at\
    \ /tmp/tmpljpfn0dd.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+.(even.-odd))\n\
    \    return even\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the sum of the squares of the even elements of the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvek5lfm0.jl:11\nin expression starting at\
    \ /tmp/tmpvek5lfm0.jl:11\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list of integers and returns the sum of the even numbers in the list. \nWrite\
    \ a function that takes a list of integers and returns the sum of the odd numbers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2c232bb.jl:14\nin expression starting at\
    \ /tmp/tmpv2c232bb.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0yaw2jc.jl:14\nin expression starting at\
    \ /tmp/tmpj0yaw2jc.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the elements.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6f9ys2hl.jl:13\nin expression starting at\
    \ /tmp/tmp6f9ys2hl.jl:13\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the squares of the even numbers in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzem3hjj.jl:13\nin expression starting at\
    \ /tmp/tmpuzem3hjj.jl:13\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = filter(x -> x != 0, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9p9kztp.jl:13\nin expression starting at\
    \ /tmp/tmpk9p9kztp.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n  \
    \  return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyelzluw.jl:14\nin expression starting at\
    \ /tmp/tmpkyelzluw.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@assert add([1]) == 1 \n@assert add([2, 3]) == 5 \n@assert\
    \ add([4, 5, 6]) == 10 \n@assert add([7, 8, 9]) == 13 \n@assert add([10, 11, 12,\
    \ 13, 14, 15]) == 21 \n@assert add([16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == 101 \n</cell>\n\
    <text>\nExercise 3\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices from the odd elements that are at even indices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0sk761fd.jl:13\nin expression starting at\
    \ /tmp/tmp0sk761fd.jl:13\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in a\
    \ given vector. Your function should work for both vectors and matrices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnj0f92t.jl:14\nin expression starting at\
    \ /tmp/tmplnj0f92t.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi59a7yko.jl:14\nin expression starting at\
    \ /tmp/tmpi59a7yko.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :] \n\
    \    odd = lst[2 :]\n    even.+ odd.\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector that are greater than 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1il_vq8m.jl:13\nin expression starting at\
    \ /tmp/tmp1il_vq8m.jl:13\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the \nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsv8pg3fm.jl:14\nin expression starting at\
    \ /tmp/tmpsv8pg3fm.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = map(add, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjab4p_i.jl:14\nin expression starting at\
    \ /tmp/tmpvjab4p_i.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even numbers\
    \ in a given list. For example, sum([4, 2, 6, 7]) == 6.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnyo7or2.jl:13\nin expression starting at\
    \ /tmp/tmpcnyo7or2.jl:13\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4gtct08s.jl:18\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert,
    expected Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @
    Main /tmp/tmp4gtct08s.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gtct08s.jl:18 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gtct08s.jl:17\ntest set: Error
    During Test at /tmp/tmp4gtct08s.jl:19\n  Test threw exception\n  Expression: candidate([4,
    5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got a value
    of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp4gtct08s.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gtct08s.jl:19 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gtct08s.jl:17\ntest set: Error
    During Test at /tmp/tmp4gtct08s.jl:20\n  Test threw exception\n  Expression: candidate([4,
    0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got a value of type
    Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp4gtct08s.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gtct08s.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gtct08s.jl:17\ntest set: Error
    During Test at /tmp/tmp4gtct08s.jl:21\n  Test threw exception\n  Expression: candidate([4,
    4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got a value of type
    Int64'
  timestamp: 1659823067
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmput098lm9.jl:14\nin expression starting at\
    \ /tmp/tmput098lm9.jl:14\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpayhafvt9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpayhafvt9.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\ntest set: Test Failed at /tmp/tmpayhafvt9.jl:19\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 166 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpayhafvt9.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpayhafvt9.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659823067
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 4\nWrite a function called multiply that takes in a list of integers\
    \ and returns the product of the even elements that are at odd indices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvr9og_3h.jl:14\nin expression starting at\
    \ /tmp/tmpvr9og_3h.jl:14\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpxkej9x2n.jl:18\n  Expression: candidate([4,
    88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkej9x2n.jl:18 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkej9x2n.jl:17\ntest set: Test Failed
    at /tmp/tmpxkej9x2n.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated:
    128 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkej9x2n.jl:19 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkej9x2n.jl:17\n'''
  timestamp: 1659823067
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([1,2,3]) == 6 \n@assert\
    \ add([1,2,3,4,5]) == 10 \n@assert add([1,2,3,4,5,6,7,8,9,10]) == 15 \n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == 101 \n</cell>\n<text>\nExercise 2\nWrite a function called sub that takes\
    \ two vectors v1 and v2 as arguments and returns the difference between v1 and\
    \ v2. For example, v1 = [1,2,3] and v2 = [2,3,4] should return [1,2,0]. Write\
    \ a test that tests your function using @test. Make sure your function passes\
    \ all the tests.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_r2j3ji.jl:13\nin expression starting at\
    \ /tmp/tmp5_r2j3ji.jl:13\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\n@code_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3wber1s.jl:17\nin expression starting at\
    \ /tmp/tmpb3wber1s.jl:17\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp005y1o9r.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp005y1o9r.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp005y1o9r.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp005y1o9r.jl:17\ntest set: Test Failed at /tmp/tmp005y1o9r.jl:19\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 166 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp005y1o9r.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp005y1o9r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp005y1o9r.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp005y1o9r.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp005y1o9r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp005y1o9r.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp005y1o9r.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp005y1o9r.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659823067
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = sum(even)\n    odd = sum(odd)\n    return even\
    \ + odd\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the even numbers in a list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn5gzm87.jl:15\nin expression starting at\
    \ /tmp/tmpbn5gzm87.jl:15\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    even.+=(odd.*2)\n    return even\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp715totbw.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  DimensionMismatch("array
    could not be broadcast to match destination")\n  Stacktrace:\n    [1] check_broadcast_shape\n      @
    ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543
    [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n    [4]
    instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n      @
    ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868
    [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp715totbw.jl:11\n    [8]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmp715totbw.jl:19 [inlined]\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmp715totbw.jl:18\ntest set:
    Error During Test at /tmp/tmp715totbw.jl:20\n  Test threw exception\n  Expression:
    candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch("array could not be
    broadcast to match destination")\n  Stacktrace:\n    [1] check_broadcast_shape\n      @
    ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543
    [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n    [4]
    instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n      @
    ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868
    [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp715totbw.jl:11\n    [8]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmp715totbw.jl:20 [inlined]\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmp715totbw.jl:18\ntest set: '
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens + sum(odds)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the even elements\
    \ and the sum of the odd elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3137c9zs.jl:13\nin expression starting at\
    \ /tmp/tmp3137c9zs.jl:13\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgcmaq230.jl:14\nin expression starting at\
    \ /tmp/tmpgcmaq230.jl:14\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that takes two vectors v1 and v2 as arguments and returns\
    \ the element-wise difference between them.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplto9ndvg.jl:13\nin expression starting at\
    \ /tmp/tmplto9ndvg.jl:13\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2t2t3ja.jl:13\nin expression starting at\
    \ /tmp/tmpt2t2t3ja.jl:13\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[div(length(lst),2)]\n\
    \    lst = lst[div(length(lst),2):end]\n    lst = lst + even\n    return sum(lst)\n\
    end\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8brnwc3.jl:14\nin expression starting at\
    \ /tmp/tmpk8brnwc3.jl:14\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even elements of a given list. \nWrite a function that returns\
    \ the sum of the odd elements of a given list. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given list. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given list. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given list. \nWrite a\
    \ function that returns the sum of the even and odd elements of a given list.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ list. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given list. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given list. \nWrite a function that returns the sum of the even and odd\
    \ elements of a given list. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given list. \nWrite a function that returns the sum of\
    \ the even and odd elements of a given list. \nWrite a function that returns the\
    \ sum of the even and odd elements of a given list. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given list. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given list. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given list. \nWrite a\
    \ function that returns the sum of the even and odd elements of a given list.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ list. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given list. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given list. \nWrite a function that returns the sum of the even and odd\
    \ elements of a given list. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given list. \nWrite a function that returns the sum of\
    \ the even and odd elements of a given list. \nWrite a function that returns the\
    \ sum of the even and odd elements of a given list. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given list. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given list. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given list. \nWrite a\
    \ function that returns the sum of the even and odd elements of a given list.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ list. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given list. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given list\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftoi2fvr.jl:13\nin expression starting at\
    \ /tmp/tmpftoi2fvr.jl:13\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 2\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector v of n integers and returns a vector\
    \ where each element is the sum of the elements with the same index. For example,\
    \ v = [1, 2, 3, 4, 5] should return a vector [3, 7].\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgum_jsax.jl:14\nin expression starting at\
    \ /tmp/tmpgum_jsax.jl:14\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 == 1, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+,\
    \ odds)\n    return evens + odds\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsbyclaum.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpsbyclaum.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 4 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbyclaum.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbyclaum.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsbyclaum.jl:23\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 24 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbyclaum.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbyclaum.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsbyclaum.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbyclaum.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbyclaum.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsbyclaum.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbyclaum.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbyclaum.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659823067
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 4 \n@assert add([4, 2, 6, 7]) == 6 \n@assert\
    \ add([4, 2, 6, 7]) == 8 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2,\
    \ 6, 7]) == 12 \n@assert add([4, 2, 6, 7]) == 14 \n@assert add([4, 2, 6, 7]) ==\
    \ 16 \n@assert add([4, 2, 6, 7]) == 18 \n@assert add([4, 2, 6, 7]) == 20 \n@assert\
    \ add([4, 2, 6, 7]) == 22 \n@assert add([4, 2, 6, 7]) == 24 \n@assert add([4,\
    \ 2, 6, 7]) == 26 \n@assert add([4, 2, 6, 7]) == 28 \n@assert add([4, 2, 6, 7])\
    \ == 30 \n@assert add([4, 2, 6, 7]) == 32 \n@assert add([4, 2, 6, 7]) == 34 \n\
    @assert add([4, 2, 6, 7]) == 36 \n@assert add([4, 2, 6, 7]) == 38 \n@assert add([4,\
    \ 2, 6, 7]) == 40 \n@assert add([4, 2, 6, 7]) == 42 \n@assert add([4, 2, 6, 7])\
    \ == 44 \n@assert add([4, 2, 6, 7]) == 46 \n@assert add([4, 2, 6, 7]) == 48 \n\
    @assert add([4, 2, 6, 7]) == 50 \n@assert add([4, 2, 6, 7]) == 52 \n@assert add([4,\
    \ 2, 6, 7]) == 54 \n@assert add([4, 2, 6, 7]) == 56 \n@assert add([4, 2, 6, 7])\
    \ == 58 \n@assert add([4, 2, 6, 7]) == 60 \n@assert add([4, 2, 6, 7]) == 62 \n\
    @assert add([4, 2, 6, 7]) == 64 \n@assert add([4, 2, 6, 7]) == 66 \n@assert add([4,\
    \ 2, 6, 7]) == 68 \n@assert add([4, 2, 6, 7]) == 70 \n@assert add([4, 2, 6, 7])\
    \ == 72 \n@assert add([4, 2, 6, 7]) == 74 \n@assert add([4, 2, 6, 7]) == 76 \n\
    @assert add([4, 2, 6, 7]) == 78 \n@assert add([4, 2, 6, 7]) == 80 \n@assert add([4,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x6r5nz2.jl:14\nin expression starting at\
    \ /tmp/tmp4x6r5nz2.jl:14\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjmx0tzl.jl:14\nin expression starting at\
    \ /tmp/tmpfjmx0tzl.jl:14\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp96cy6lgw.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert,
    expected Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @
    Main /tmp/tmp96cy6lgw.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96cy6lgw.jl:19 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96cy6lgw.jl:18\ntest set: Error
    During Test at /tmp/tmp96cy6lgw.jl:20\n  Test threw exception\n  Expression: candidate([4,
    5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got a value
    of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp96cy6lgw.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96cy6lgw.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96cy6lgw.jl:18\ntest set: Error
    During Test at /tmp/tmp96cy6lgw.jl:21\n  Test threw exception\n  Expression: candidate([4,
    0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got a value of type
    Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp96cy6lgw.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96cy6lgw.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96cy6lgw.jl:18\ntest set: Error
    During Test at /tmp/tmp96cy6lgw.jl:22\n  Test threw exception\n  Expression: candidate([4,
    4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got a value of type
    Int64'
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxw4wli9w.jl:14\nin expression starting at\
    \ /tmp/tmpxw4wli9w.jl:14\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even + odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the even numbers in an array. For example, add([4, 2, 6, 7]) should return\
    \ 24.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaybkz3ox.jl:13\nin expression starting at\
    \ /tmp/tmpaybkz3ox.jl:13\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 1;\n@assert add([1,2,3]) == 3;\n@assert\
    \ add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 55;\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvb4x4dc.jl:14\nin expression starting at\
    \ /tmp/tmpyvb4x4dc.jl:14\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6jznjhq.jl:14\nin expression starting at\
    \ /tmp/tmpo6jznjhq.jl:14\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector and returns the sum of the squares of the even\
    \ elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4z7e0wt7.jl:17\nin expression starting at\
    \ /tmp/tmp4z7e0wt7.jl:17\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a list. For example,\
    \ sum([4, 2, 6, 7]) == 2.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps7f6dxm_.jl:12\nin expression starting at /tmp/tmps7f6dxm_.jl:12\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function called multiply that takes\
    \ in two vectors of integers and multiplies them elementwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ov7bv6p.jl:13\nin expression starting at\
    \ /tmp/tmp9ov7bv6p.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = filter(x -> x != 0, evens)\n    even\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgz_gmtki.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgz_gmtki.jl:1\n\
    in expression starting at /tmp/tmpgz_gmtki.jl:1\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpvjy4_3h3.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvjy4_3h3.jl:12\n\
    in expression starting at /tmp/tmpvjy4_3h3.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the even elements of lst\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8015n54.jl:13\nin expression starting at\
    \ /tmp/tmpn8015n54.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppaygfzhh.jl:12\nin expression starting at /tmp/tmppaygfzhh.jl:12\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return 1 given\
    \ an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptml7w3uy.jl:15\nin expression starting at\
    \ /tmp/tmptml7w3uy.jl:15\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6rhmkyb.jl:13\nin expression starting at\
    \ /tmp/tmpo6rhmkyb.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return\
    \ 1 for an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 for [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 4 \"add() should return 4\
    \ for [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 6 \"add() should return 6 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 8 \"add() should return 8 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 10 \"add() should return 10 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 12 \"add() should return 12 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 14 \"add() should return 14 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 16 \"add() should return 16 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 18 \"add() should return 18 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 20 \"add() should return 20 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 22 \"add() should return 22 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 24 \"add() should return 24 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 26 \"add() should return 26 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 28 \"add() should return 28 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 30 \"add() should return 30 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 32 \"add() should return 32 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 34 \"add() should return 34 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 36 \"add() should return 36 for [4,\
    \ 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 38 \"add() should return 38 for [4,\
    \ 2, 6, 7]\"\n@\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxu0begf1.jl:13\nin expression starting at\
    \ /tmp/tmpxu0begf1.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \"add() should return 1 given an empty list\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 2\"\n@assert add([4,\
    \ 2, 6, 7, 8]) == 5 \"add() should return 5 given a list of length 3\"\n@assert\
    \ add([4, 2, 6, 7]) == 6 \"add() should return 6 given a list of length 4\"\n\
    @assert add([4, 2, 6, 7]) == 7 \"add() should return 7 given a list of length\
    \ 5\"\n@assert add([4, 2, 6, 7]) == 8 \"add() should return 8 given a list of\
    \ length 6\"\n@assert add([4, 2, 6, 7]) == 9 \"add() should return 9 given a list\
    \ of length 7\"\n@assert add([4, 2, 6, 7]) == 10 \"add() should return 10 given\
    \ a list of length 8\"\n@assert add([4, 2, 6, 7]) == 11 \"add() should return\
    \ 11 given a list of length 9\"\n@assert add([4, 2, 6, 7]) == 12 \"add() should\
    \ return 12 given a list of length 10\"\n@assert add([4, 2, 6, 7]) == 13 \"add()\
    \ should return 13 given a list of length 11\"\n@assert add([4, 2, 6, 7]) == 14\
    \ \"add() should return 14 given a list of length 12\"\n@assert add([4, 2, 6,\
    \ 7]) == 15 \"add() should return 15 given a list of length 13\"\n@assert add([4,\
    \ 2, 6, 7]) == 16 \"add() should return 16 given a list of length 14\"\n@assert\
    \ add([4, 2, 6, 7]) == 17 \"add() should return 17 given a list of length 15\"\
    \n@assert add([4, 2, 6, 7]) == 18 \"add() should return 18 given a list of length\
    \ 16\"\n@assert add([4, 2, 6, 7]) == 19 \"add() should return 19 given a list\
    \ of length 17\"\n@assert add([4, 2, 6, 7]) == 20 \"add() should return 20 given\
    \ a list of length 18\"\n@assert add([4, 2, 6, 7]) == 21 \"add() should return\
    \ 21 given a list of length 19\"\n@assert add([4, 2, 6, 7]) == 22 \"add() should\
    \ return 22 given a list of length 20\"\n@assert add([4, 2, 6, 7]) == 23 \"add()\
    \ should return 23 given a list of length 21\"\n@assert \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9ppkwat.jl:14\nin expression starting at\
    \ /tmp/tmpw9ppkwat.jl:14\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the numbers in the list lst. \nIf the list\
    \ is empty return 0.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6sby_xso.jl:14\nin expression starting at\
    \ /tmp/tmp6sby_xso.jl:14\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector and returns the sum of the squares of the even\
    \ numbers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpya_lqomx.jl:13\nin expression starting at\
    \ /tmp/tmpya_lqomx.jl:13\n"
  stdout: ''
  timestamp: 1659823069
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(lst\
    \ .%2 == 0)]\n    odd = lst[findall(lst .%2 == 1)]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of integers.\
    \ \nThe function should work for any number of integers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfplhisk.jl:14\nin expression starting at\
    \ /tmp/tmpbfplhisk.jl:14\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the squares of the even numbers in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq534lnye.jl:14\nin expression starting at\
    \ /tmp/tmpq534lnye.jl:14\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even = even + sum(odd)\n    return even\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the even elements. \nWrite a function that takes a vector and returns the sum\
    \ of the odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouwnoqis.jl:14\nin expression starting at\
    \ /tmp/tmpouwnoqis.jl:14\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function called multiply that multiplies all elements of a list by 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp007tjmip.jl:14\nin expression starting at\
    \ /tmp/tmp007tjmip.jl:14\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.\nin expression starting at /tmp/tmpm4kk7o2e.jl:15\n'''
  stdout: 'b''test set: Test Failed at /tmp/tmpm4kk7o2e.jl:19\n  Expression: candidate([4,
    5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpm4kk7o2e.jl:19 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpm4kk7o2e.jl:17\ntest set: Test Failed at /tmp/tmpm4kk7o2e.jl:20\n  Expression:
    candidate([4, 0, 6, 7]) == 0\n   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpm4kk7o2e.jl:20 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpm4kk7o2e.jl:17\ntest set: Test Failed at /tmp/tmpm4kk7o2e.jl:21\n  Expression:
    candidate([4, 4, 6, 8]) == 12\n   Evaluated: 18 == 12\nStacktrace:\n [1] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4kk7o2e.jl:21 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4kk7o2e.jl:17\nTest Summary: |
    Pass  Fail  Total\ntest set      |    1     3      4\n'''
  timestamp: 1659823072
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the odd\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list. \nWrite\
    \ a function that returns the sum of the even numbers in a given list and the\
    \ sum of the odd numbers in a given list and the sum of the even numbers in a\
    \ given list. \nWrite a function that returns the sum of the even numbers in a\
    \ given list and the sum of the odd numbers in a given list and the sum of the\
    \ even numbers in a given list and the sum of the odd numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum of the even numbers in a given list and the sum of the odd numbers in a\
    \ given list and the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum of the even numbers in a given list and the sum of the odd numbers in a\
    \ given list and the sum\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpja2x9rlt.jl:13\nin expression starting at\
    \ /tmp/tmpja2x9rlt.jl:13\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ky9ib_l.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ky9ib_l.jl:1\n\
    in expression starting at /tmp/tmp3ky9ib_l.jl:1\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called multiply that multiplies all elements in a list by 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hjmtty5.jl:14\nin expression starting at\
    \ /tmp/tmp8hjmtty5.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called multiply that takes in a list of integers and multiplies\
    \ each element by 2.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp556tqum.jl:14\nin expression starting at\
    \ /tmp/tmpp556tqum.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zegiig3.jl:14\nin expression starting at\
    \ /tmp/tmp_zegiig3.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of integers and returns the sum of the even elements\
    \ of the vector\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwhhmn6f.jl:14\nin expression starting at\
    \ /tmp/tmphwhhmn6f.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called sub that subtracts the even elements that are at odd indices\
    \ from the even elements that are at even indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5rn6rcw.jl:13\nin expression starting at\
    \ /tmp/tmpi5rn6rcw.jl:13\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmwb22f2e.jl:58\nin expression starting at\
    \ /tmp/tmpmwb22f2e.jl:58\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"add([1,2]) should\
    \ return 1\"\n@assert add([1,2]) == 2 \"add([1,2]) should return 2\"\n@assert\
    \ add([1,2,3]) == 3 \"add([1,2,3]) should return 3\"\n@assert add([1,2,3,4]) ==\
    \ 4 \"add([1,2,3,4]) should return 4\"\n@assert add([1,2,3,4]) == 5 \"add([1,2,3,4])\
    \ should return 5\"\n@assert add([1,2,3,4]) == 6 \"add([1,2,3,4]) should return\
    \ 6\"\n@assert add([1,2,3,4]) == 7 \"add([1,2,3,4]) should return 7\"\n@assert\
    \ add([1,2,3,4]) == 8 \"add([1,2,3,4]) should return 8\"\n@assert add([1,2,3,4])\
    \ == 9 \"add([1,2,3,4]) should return 9\"\n@assert add([1,2,3,4]) == 10 \"add([1,2,3,4])\
    \ should return 10\"\n@assert add([1,2,3,4]) == 11 \"add([1,2,3,4]) should return\
    \ 11\"\n@assert add([1,2,3,4]) == 12 \"add([1,2,3,4]) should return 12\"\n@assert\
    \ add([1,2,3,4]) == 13 \"add([1,2,3,4]) should return 13\"\n@assert add([1,2,3,4])\
    \ == 14 \"add([1,2,3,4]) should return 14\"\n@assert add([1,2,3,4]) == 15 \"add([1,2,3,4])\
    \ should return 15\"\n@assert add([1,2,3,4]) == 16 \"add([1,2,3,4]) should return\
    \ 16\"\n@assert add([1,2,3,4]) == 17 \"add([1,2,3,4]) should return 17\"\n@assert\
    \ add([1,2,3,4]) == 18 \"add([1,2,3,4]) should return 18\"\n@assert add([1,2,3,4])\
    \ == 19 \"add([1,2,3,4]) should return 19\"\n@assert add([1,2,3,4]) == 20 \"add([1,2,3,4])\
    \ should return 20\"\n@assert add([1,2,3,4]) == 21 \"add([1,2,3,4]) should return\
    \ 21\"\n@assert add([1,2,3,4]) == 22 \"add([1,2,3,4]) should return 22\"\n@assert\
    \ add([1,2,3,4]) == 23 \"add([1,2,3,4]) should return 23\"\n@assert add([1,2,3,4])\
    \ == 24 \"add([1,2,3,4]) should return 24\"\n@assert add([1,2,3,4]) == 25 \"add([1,2,3,4])\
    \ should return 25\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nxzmi82.jl:14\nin expression starting at\
    \ /tmp/tmp3nxzmi82.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    even.+=(odd.+0)\n    return even\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_h2rx8wp.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  DimensionMismatch("array
    could not be broadcast to match destination")\n  Stacktrace:\n    [1] check_broadcast_shape\n      @
    ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543
    [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n    [4]
    instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n      @
    ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868
    [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp_h2rx8wp.jl:11\n    [8]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_h2rx8wp.jl:19 [inlined]\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_h2rx8wp.jl:18\ntest set:
    Error During Test at /tmp/tmp_h2rx8wp.jl:20\n  Test threw exception\n  Expression:
    candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch("array could not be
    broadcast to match destination")\n  Stacktrace:\n    [1] check_broadcast_shape\n      @
    ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543
    [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n    [4]
    instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n      @
    ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868
    [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp_h2rx8wp.jl:11\n    [8]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_h2rx8wp.jl:20 [inlined]\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_h2rx8wp.jl:18\ntest set: '
  timestamp: 1659823073
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.-even)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the even numbers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlvho3pk.jl:14\nin expression starting at\
    \ /tmp/tmpnlvho3pk.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the odd numbers in a given list of\
    \ integers. \nWrite a function that returns the product of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the product of the\
    \ odd numbers in a given list of integers. \nWrite a function that returns the\
    \ maximum of a given list of integers. \nWrite a function that returns the minimum\
    \ of a given list of integers. \nWrite a function that returns the product of\
    \ the squares of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the product of the squares of the odd numbers in a given list of\
    \ integers. \nWrite a function that returns the sum of the squares of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the squares of the odd numbers in a given list of integers. \nWrite a function\
    \ that returns the product of the squares of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the product of the squares of the\
    \ odd numbers in a given list of integers. \nWrite a function that returns the\
    \ sum of the cubes of the even numbers in a given list of integers. \nWrite a\
    \ function that returns the sum of the cubes of the odd numbers in a given list\
    \ of integers. \nWrite a function that returns the product of the cubes of the\
    \ even numbers in a given list of integers. \nWrite a function that returns the\
    \ product of the cubes of the odd numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the reciprocals of the even numbers in a\
    \ given list of integers. \nWrite a function that returns the sum of the reciprocals\
    \ of the odd numbers in a given list of integers. \nWrite a function that returns\
    \ the product of the reciprocals of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the product of the reciprocals of the odd numbers\
    \ in a given list of integers. \nWrite a function that returns the sum of the\
    \ reciprocals of the squares of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the reciprocals of the squares of\
    \ the odd numbers in a given list of integers. \nWrite a function that returns\
    \ the product of the reciprocals of the squares of the even numbers in a given\
    \ list of integers. \nWrite a function that returns the product of the reciprocals\
    \ of the squares of the odd numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the reciprocals of the cubes of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the reciprocals\
    \ of the cubes of the odd numbers in a given list of integers. \nWrite a function\
    \ that returns the product of the reciprocals of the cubes of the even \nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhbg_irl.jl:13\nin expression starting at\
    \ /tmp/tmpyhbg_irl.jl:13\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    return sum(even .+ odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even elements of a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi36hlcby.jl:13\nin expression starting at\
    \ /tmp/tmpi36hlcby.jl:13\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = reduce(add, evens)\n    odds =\
    \ reduce(add, odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5to4yv_b.jl:19\nin expression starting at\
    \ /tmp/tmp5to4yv_b.jl:19\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst, return the sum of the factorial of each number\
    \ in the list. Factorial of a number is the number of times that we can divide\
    \ it by itself without remainder.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwiuhe91.jl:13\nin expression starting at\
    \ /tmp/tmpdwiuhe91.jl:13\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = sum(even)\n    odd = sum(odd)\n    return\
    \ even + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called multiply that multiplies all elements\
    \ in a list by 2.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5ycdgw3.jl:15\nin expression starting at\
    \ /tmp/tmpp5ycdgw3.jl:15\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements in the vector.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3uz6c7d4.jl:14\nin expression starting at\
    \ /tmp/tmp3uz6c7d4.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sukzfpl.jl:15\nin expression starting at\
    \ /tmp/tmp_sukzfpl.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of integers\
    \ lst. For example, prod([4, 2, 6, 7]) == 24\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qlrtan6.jl:14\nin expression starting at\
    \ /tmp/tmp2qlrtan6.jl:14\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2) == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert add([1]) == 1 \n@assert add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert\
    \ add([1,2,3,4]) == 10\n@assert add([1,2,3,4,5]) == 15\n@assert add([1,2,3,4,5,6])\
    \ == 21\n@assert add([1,2,3,4,5,6,7]) == 28\n@assert add([1,2,3,4,5,6,7,8]) ==\
    \ 36\n@assert add([1,2,3,4,5,6,7,8,9]) == 45\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == 54\n@assert add([1,2,3,4,5,6,7,8,9,10,11]) == 63\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ == 72\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 81\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\
    \ == 90\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 100\n</cell>\n\
    <text>\nExercise 2\nWrite a function called sumsq that takes in a list of integers\
    \ and returns the sum of the squares of the numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkw0j3bw.jl:12\nin expression starting at\
    \ /tmp/tmprkw0j3bw.jl:12\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\n@time add([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nGiven a non-empty list of integers lst. add the odd elements that are at\
    \ even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawbig_42.jl:15\nin expression starting at\
    \ /tmp/tmpawbig_42.jl:15\n"
  stdout: ''
  timestamp: 1659823072
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(even)\
    \ + sum(odd)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdx23lb2.jl:13\nin expression starting at\
    \ /tmp/tmpzdx23lb2.jl:13\n"
  stdout: ''
  timestamp: 1659823072
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that subtracts the even elements that are at odd indices\
    \ from the given list. For example, given lst = [4, 2, 6, 7], the function should\
    \ return [3, 3, 2, 1].\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fxmwu87.jl:13\nin expression starting at\
    \ /tmp/tmp4fxmwu87.jl:13\n"
  stdout: ''
  timestamp: 1659823073
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers lst and returns the\
    \ sum of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqundq2dc.jl:13\nin expression starting at\
    \ /tmp/tmpqundq2dc.jl:13\n"
  stdout: ''
  timestamp: 1659823073
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the even elements\
    \ that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptm2d2bl2.jl:14\nin expression starting at\
    \ /tmp/tmptm2d2bl2.jl:14\n"
  stdout: ''
  timestamp: 1659823073
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\n@time add([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the number of elements that are not equal to zero.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mycsszr.jl:14\nin expression starting at\
    \ /tmp/tmp9mycsszr.jl:14\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1):end]\n    evens = filter(x -> x % 2 == 0, evens)\n   \
    \ odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) ==\
    \ 6\n</cell>\n<text>\nExercise 2\nWrite a function called sub that subtracts the\
    \ even elements that are at odd indices from the even elements that are at even\
    \ indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwh6ya5ax.jl:15\nin expression starting at\
    \ /tmp/tmpwh6ya5ax.jl:15\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9wadi72.jl:13\nin expression starting at\
    \ /tmp/tmpz9wadi72.jl:13\n"
  stdout: ''
  timestamp: 1659823073
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the list lst that\
    \ are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5gjq9zu.jl:13\nin expression starting at\
    \ /tmp/tmpu5gjq9zu.jl:13\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+ odd.+\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 # Passed\n@assert add([2, 3]) == 5 # Passed\n@assert add([4,\
    \ 5, 6]) == 10 # Passed\n@assert add([7, 8, 9]) == 13 # Passed\n@assert add([10,\
    \ 11, 12]) == 17 # Passed\n@assert add([13, 14, 15]) == 21 # Passed\n@assert add([16,\
    \ 17, 18]) == 24 # Passed\n@assert add([19, 20, 21]) == 29 # Passed\n@assert add([22,\
    \ 23, 24]) == 34 # Passed\n@assert add([25, 26, 27]) == 39 # Passed\n@assert add([28,\
    \ 29, 30]) == 43 # Passed\n@assert add([31, 32, 33]) == 48 # Passed\n@assert add([34,\
    \ 35, 36]) == 51 # Passed\n@assert add([37, 38, 39]) == 55 # Passed\n@assert add([40,\
    \ 41, 42]) == 60 # Passed\n@assert add([43, 44, 45]) == 65 # Passed\n@assert add([46,\
    \ 47, 48]) == 70 # Passed\n@assert add([49, 50, 51]) == 75 # Passed\n@assert add([52,\
    \ 53, 54]) == 80 # Passed\n@assert add([55, 56, 57]) == 85 # Passed\n@assert add([58,\
    \ 59, 60]) == 90 # Passed\n@assert add([61, 62, 63]) == 95 # Passed\n@assert add([64,\
    \ 65, 66]) == 100 # Passed\n@assert add([67, 68, 69]) == 105 # Passed\n@assert\
    \ add([70, 71, 72]) == 110 # Passed\n@assert add([73, 74, 75]) == 115 # Passed\n\
    @assert add([76, 77, 78]) == 120 # Passed\n@assert add([79, 80, 81]) == 125 #\
    \ Passed\n@assert add([82, 83, 84]) == 130 # Passed\n@assert add([85, 86, 87])\
    \ == 135 # Passed\n@assert add([88, 89, 90]) == 140 # Passed\n@assert add([91,\
    \ 92, 93]) == 145 # Passed\n@assert add([94, 95, \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo9edolmq.jl:12\nin expression starting at /tmp/tmpo9edolmq.jl:12\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2a4m3_9a.jl:13\nin expression starting at\
    \ /tmp/tmp2a4m3_9a.jl:13\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the even numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp999mirkw.jl:14\nin expression starting at\
    \ /tmp/tmp999mirkw.jl:14\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that subtracts the even elements that are at odd indices\
    \ from the even elements that are at even indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa71b98ih.jl:17\nin expression starting at\
    \ /tmp/tmpa71b98ih.jl:17\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = filter(x -> x != 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuaddped.jl:14\nin expression starting at\
    \ /tmp/tmpbuaddped.jl:14\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6jznjhq.jl:14\nin expression starting at\
    \ /tmp/tmpo6jznjhq.jl:14\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = sum(even)\n    odd = sum(odd)\n    return even\
    \ + odd\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1;\n@assert\
    \ add([4, 2, 6, 7]) == 2;\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_yo3qjk.jl:15\nin expression starting at\
    \ /tmp/tmpr_yo3qjk.jl:15\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \"add() should return 1 given an empty list\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 3\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 4\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 5\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 6\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 7\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 8\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 9\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 10\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length 11\"\n\
    @assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length\
    \ 12\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of\
    \ length 13\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a\
    \ list of length 14\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2\
    \ given a list of length 15\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 2\
    \ \"add() should return 2 given a list of length 19\"\n@assert add([4, 2, 6, 7])\
    \ == 2 \"add() should return 2 given a list of length 20\"\n@assert add([4, 2,\
    \ 6, 7]) == 2 \"add() should return 2 given a list of length 21\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 22\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length 23\"\n\
    @assert add([4, \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9juldyu.jl:12\nin expression starting at\
    \ /tmp/tmpo9juldyu.jl:12\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yzks5jr.jl:13\nin expression starting at\
    \ /tmp/tmp1yzks5jr.jl:13\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the given list. For example, sum([4, 9, 16]) should return 50.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jrychwn.jl:14\nin expression starting at\
    \ /tmp/tmp4jrychwn.jl:14\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpu5cuezr2.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert,
    expected Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @
    Main /tmp/tmpu5cuezr2.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu5cuezr2.jl:19 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu5cuezr2.jl:18\ntest set: Error
    During Test at /tmp/tmpu5cuezr2.jl:20\n  Test threw exception\n  Expression: candidate([4,
    5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got a value
    of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpu5cuezr2.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu5cuezr2.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu5cuezr2.jl:18\ntest set: Error
    During Test at /tmp/tmpu5cuezr2.jl:21\n  Test threw exception\n  Expression: candidate([4,
    0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got a value of type
    Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpu5cuezr2.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu5cuezr2.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu5cuezr2.jl:18\ntest set: Error
    During Test at /tmp/tmpu5cuezr2.jl:22\n  Test threw exception\n  Expression: candidate([4,
    4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got a value of type
    Int64'
  timestamp: 1659823076
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsp0_gecf.jl:16\nin expression starting at\
    \ /tmp/tmpsp0_gecf.jl:16\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd)\n    return even\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the numbers in the list lst\
    \ that have even indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wwn6evy.jl:14\nin expression starting at\
    \ /tmp/tmp6wwn6evy.jl:14\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(lst\
    \ .% 2 == 0)]\n    odd = lst[findall(lst .% 2 != 0)]\n    even.+ odd.\nend\n</cell>\n\
    <code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4__ydwli.jl:13\nin expression starting at\
    \ /tmp/tmp4__ydwli.jl:13\n"
  stdout: ''
  timestamp: 1659823074
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even elements in a given list. \nWrite\
    \ a function that returns the sum of the odd elements in a given list. \nWrite\
    \ a function that returns the product of the even elements in a given list. \n\
    Write a function that returns the product of the odd elements in a given list.\
    \ \nWrite a function that returns the maximum of a given list. \nWrite a function\
    \ that returns the minimum of a given list. \nWrite a function that returns the\
    \ product of the squares of the even elements in a given list. \nWrite a function\
    \ that returns the product of the squares of the odd elements in a given list.\
    \ \nWrite a function that returns the sum of the squares of the even elements\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ odd elements in a given list. \nWrite a function that returns the product of\
    \ the squares of the even elements in a given list. \nWrite a function that returns\
    \ the product of the squares of the odd elements in a given list. \nWrite a function\
    \ that returns the sum of the cubes of the even elements in a given list. \nWrite\
    \ a function that returns the sum of the cubes of the odd elements in a given\
    \ list. \nWrite a function that returns the product of the cubes of the even elements\
    \ in a given list. \nWrite a function that returns the product of the cubes of\
    \ the odd elements in a given list. \nWrite a function that returns the sum of\
    \ the reciprocals of the even elements in a given list. \nWrite a function that\
    \ returns the sum of the reciprocals of the odd elements in a given list. \nWrite\
    \ a function that returns the product of the reciprocals of the even elements\
    \ in a given list. \nWrite a function that returns the product of the reciprocals\
    \ of the odd elements in a given list. \nWrite a function that returns the sum\
    \ of the reciprocals of the squares of the even elements in a given list. \nWrite\
    \ a function that returns the sum of the reciprocals of the squares of the odd\
    \ elements in a given list. \nWrite a function that returns the product of the\
    \ reciprocals of the squares of the even elements in a given list. \nWrite a function\
    \ that returns the product of the reciprocals of the squares of the odd elements\
    \ in a given list. \nWrite a function that returns the sum of the reciprocals\
    \ of the cubes of the even elements in a given list. \nWrite a function that returns\
    \ the sum of the reciprocals of the cubes of the odd elements in a given list.\
    \ \nWrite a function that returns the product of the reciprocals of the cubes\
    \ of the even elements in a given list. \nWrite a function that returns the product\
    \ of the reciprocals of the cubes of the odd elements in a given list. \nWrite\
    \ a function that returns the sum of the reciprocals of the square\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqowtu22.jl:13\nin expression starting at\
    \ /tmp/tmpsqowtu22.jl:13\n"
  stdout: ''
  timestamp: 1659823075
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called add_all that takes in a list of integers and returns the sum\
    \ of all elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8enmkqjj.jl:13\nin expression starting at\
    \ /tmp/tmp8enmkqjj.jl:13\n"
  stdout: ''
  timestamp: 1659823075
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 2, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8lx2vd05.jl:17\nin expression starting at\
    \ /tmp/tmp8lx2vd05.jl:17\n"
  stdout: ''
  timestamp: 1659823076
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvh2yc003.jl:14\nin expression starting at\
    \ /tmp/tmpvh2yc003.jl:14\n"
  stdout: ''
  timestamp: 1659823076
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even = even.+odd\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobrlsk09.jl:14\nin expression starting at\
    \ /tmp/tmpobrlsk09.jl:14\n"
  stdout: ''
  timestamp: 1659823076
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even\
    \ = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = sum(even)\n    odd = sum(odd)\n    return even + odd\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector v of length n and returns a vector\
    \ where each element is the sum of the elements at the corresponding indices in\
    \ v.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67y0qhcd.jl:17\nin expression starting at\
    \ /tmp/tmp67y0qhcd.jl:17\n"
  stdout: ''
  timestamp: 1659823076
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the odd numbers in a given list of integers. \nWrite a function that returns\
    \ the product of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the product of the odd numbers in a given list of integers. \n\
    Write a function that returns the maximum of a given list of integers. \nWrite\
    \ a function that returns the minimum of a given list of integers. \nWrite a function\
    \ that returns the product of the even numbers in a given list of integers where\
    \ the even numbers are greater than the odd numbers. \nWrite a function that returns\
    \ the product of the odd numbers in a given list of integers where the odd numbers\
    \ are greater than the even numbers. \nWrite a function that returns the product\
    \ of the even numbers in a given list of integers where the even numbers are less\
    \ than the odd numbers. \nWrite a function that returns the product of the odd\
    \ numbers in a given list of integers where the odd numbers are less than the\
    \ even numbers. \nWrite a function that returns the product of the even numbers\
    \ in a given list of integers where the even numbers are equal to the odd numbers.\
    \ \nWrite a function that returns the product of the odd numbers in a given list\
    \ of integers where the odd numbers are equal to the even numbers. \nWrite a function\
    \ that returns the product of the even numbers in a given list of integers where\
    \ the even numbers are less than the odd numbers. \nWrite a function that returns\
    \ the product of the odd numbers in a given list of integers where the odd numbers\
    \ are less than the even numbers. \nWrite a function that returns the product\
    \ of the even numbers in a given list of integers where the even numbers are greater\
    \ than the odd numbers. \nWrite a function that returns the product of the odd\
    \ numbers in a given list of integers where the odd numbers are greater than the\
    \ even numbers. \nWrite a function that returns the product of the even numbers\
    \ in a given list of integers where the even numbers are equal to the odd numbers.\
    \ \nWrite a function that returns the product of the odd numbers in a given list\
    \ of integers where the odd numbers are equal to the even numbers. \nWrite a function\
    \ that returns the product of the even numbers in a given list of integers where\
    \ the even numbers are less than the odd numbers. \nWrite a function that returns\
    \ the product of the odd numbers in a given list of integers where the odd numbers\
    \ are less than the even numbers. \nWrite a function that returns the product\
    \ of the even numbers in a given list of integers where the even numbers are greater\
    \ than the odd numbers. \nWrite a function that returns the product of the odd\
    \ numbers in a given list of integers where the odd numbers are greater than the\
    \ even \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfkpgheky.jl:14\nin expression starting at\
    \ /tmp/tmpfkpgheky.jl:14\n"
  stdout: ''
  timestamp: 1659823076
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a list. For example, sum([4,\
    \ 2, 6, 7]) == 6.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpux74ysny.jl:13\nin expression starting at\
    \ /tmp/tmpux74ysny.jl:13\n"
  stdout: ''
  timestamp: 1659823076
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sum that takes in a list of numbers and returns the sum of\
    \ those numbers. If the list is empty return 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6zh8atp.jl:13\nin expression starting at\
    \ /tmp/tmpd6zh8atp.jl:13\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite \nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_1jdb97.jl:14\nin expression starting at\
    \ /tmp/tmpb_1jdb97.jl:14\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert\
    \ add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexne28c8.jl:14\nin expression starting at\
    \ /tmp/tmpexne28c8.jl:14\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of all the numbers in a vector. \nFor example,\
    \ prod([1, 2, 3]) should return 6. \nWrite a function that returns the sum of\
    \ the numbers in a vector. \nFor example, sum([1, 2, 3]) should return 6. \nWrite\
    \ a function that returns the maximum of a vector. \nFor example, max([1, 2, 3])\
    \ should return 3. \nWrite a function that returns the minimum of a vector. \n\
    For example, min([1, 2, 3]) should return 1. \nWrite a function that returns the\
    \ product of all the numbers in a vector. \nFor example, prod([1, 2, 3]) should\
    \ return 6. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nFor example, sum([1, 2, 3]) should return 6. \nWrite a function that returns\
    \ the maximum of a vector. \nFor example, max([1, 2, 3]) should return 3. \nWrite\
    \ a function that returns the minimum of a vector. \nFor example, min([1, 2, 3])\
    \ should return 1. \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygwmxuxb.jl:13\nin expression starting at\
    \ /tmp/tmpygwmxuxb.jl:13\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpayhafvt9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpayhafvt9.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\ntest set: Test Failed at /tmp/tmpayhafvt9.jl:19\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 166 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpayhafvt9.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpayhafvt9.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpayhafvt9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpayhafvt9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659823067
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even = even + odd\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the odd numbers in a given list. \nWrite\
    \ a function that returns the product of the even numbers in a given list. \n\
    Write a function that returns the product of the odd numbers in a given list.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2je69h2.jl:14\nin expression starting at\
    \ /tmp/tmpy2je69h2.jl:14\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum2dccyx.jl:14\nin expression starting at\
    \ /tmp/tmpum2dccyx.jl:14\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplix73gz_.jl:15\nin expression starting at\
    \ /tmp/tmplix73gz_.jl:15\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert\
    \ add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a vector. For example, sum([1,\
    \ 2, 3]) should return 6. Make sure you use sum, not sum!.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5whghh6.jl:14\nin expression starting at\
    \ /tmp/tmpi5whghh6.jl:14\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even.-odd)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the even numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkt8c082r.jl:13\nin expression starting at\
    \ /tmp/tmpkt8c082r.jl:13\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ztmi6t3.jl:15\nin expression starting at\
    \ /tmp/tmp3ztmi6t3.jl:15\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list. For example,\
    \ sum([4, 2, 6, 7]) == 6.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7faire3p.jl:14\nin expression starting at\
    \ /tmp/tmp7faire3p.jl:14\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwh5r0j8x.jl:14\nin expression starting at\
    \ /tmp/tmpwh5r0j8x.jl:14\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->mod(x,2)==1,lst)]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = sum(evens)\n \
    \   return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function called sum2 that takes in a list\
    \ of integers and returns the sum of the even numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5huj9wy9.jl:16\nin expression starting at\
    \ /tmp/tmp5huj9wy9.jl:16\n"
  stdout: ''
  timestamp: 1659823077
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function called sum that sums all the elements in a given vector. For example,\
    \ sum([1, 2, 3, 4]) should return 10. Make sure your function works with both\
    \ scalars and vectors.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcm5h6g21.jl:12\nin expression starting at /tmp/tmpcm5h6g21.jl:12\n"
  stdout: ''
  timestamp: 1659823078
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 :end]\
    \ \n    odds = lst[2 :end] \n    evens = filter(x -> x % 2 == 0, evens) \n   \
    \ odds = filter(x -> x % 2 == 1, odds) \n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ even elements and the sum of the odd elements.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lzyncvr.jl:15\nin expression starting at\
    \ /tmp/tmp9lzyncvr.jl:15\n"
  stdout: ''
  timestamp: 1659823078
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp96cy6lgw.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert,
    expected Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @
    Main /tmp/tmp96cy6lgw.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96cy6lgw.jl:19 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96cy6lgw.jl:18\ntest set: Error
    During Test at /tmp/tmp96cy6lgw.jl:20\n  Test threw exception\n  Expression: candidate([4,
    5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got a value
    of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp96cy6lgw.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96cy6lgw.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96cy6lgw.jl:18\ntest set: Error
    During Test at /tmp/tmp96cy6lgw.jl:21\n  Test threw exception\n  Expression: candidate([4,
    0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got a value of type
    Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp96cy6lgw.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96cy6lgw.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96cy6lgw.jl:18\ntest set: Error
    During Test at /tmp/tmp96cy6lgw.jl:22\n  Test threw exception\n  Expression: candidate([4,
    4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got a value of type
    Int64'
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwocc4e_u.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwocc4e_u.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpwocc4e_u.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwocc4e_u.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwocc4e_u.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwocc4e_u.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpwocc4e_u.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n   "
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7, 8]) == 5 \n@assert add([4, 2, 6, 7, 8,\
    \ 9]) == 10 \n@assert add([4, 2, 6, 7, 8, 10, 11]) == 17 \n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called sumsq that takes a list of numbers and returns the\
    \ sum of the squares of the numbers. For example, sumsq([4, 2, 6, 7]) == 52.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vzxunin.jl:13\nin expression starting at\
    \ /tmp/tmp1vzxunin.jl:13\n"
  stdout: ''
  timestamp: 1659823078
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjek3s3td.jl:13\nin expression starting at\
    \ /tmp/tmpjek3s3td.jl:13\n"
  stdout: ''
  timestamp: 1659823078
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time add([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the sum of the squares\
    \ of the even elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64r9dc5y.jl:13\nin expression starting at\
    \ /tmp/tmp64r9dc5y.jl:13\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the even elements. \n\
    Write a function that takes a vector and returns the sum of the odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnoyieg03.jl:15\nin expression starting at\
    \ /tmp/tmpnoyieg03.jl:15\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lorutdz.jl:13\nin expression starting at\
    \ /tmp/tmp9lorutdz.jl:13\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \"add() should return 1 given an empty list\"\n@assert add([4, 2, 6, 7])\
    \ == 2 \"add() should return 2 given a list of length 3\"\n@assert add([4, 2,\
    \ 6, 7]) == 4 \"add() should return 4 given a list of length 4\"\n@assert add([4,\
    \ 2, 6, 7]) == 6 \"add() should return 6 given a list of length 5\"\n@assert add([4,\
    \ 2, 6, 7]) == 8 \"add() should return 8 given a list of length 6\"\n@assert add([4,\
    \ 2, 6, 7]) == 10 \"add() should return 10 given a list of length 7\"\n@assert\
    \ add([4, 2, 6, 7]) == 12 \"add() should return 12 given a list of length 8\"\n\
    @assert add([4, 2, 6, 7]) == 14 \"add() should return 14 given a list of length\
    \ 9\"\n@assert add([4, 2, 6, 7]) == 16 \"add() should return 16 given a list of\
    \ length 10\"\n@assert add([4, 2, 6, 7]) == 18 \"add() should return 18 given\
    \ a list of length 11\"\n@assert add([4, 2, 6, 7]) == 20 \"add() should return\
    \ 20 given a list of length 12\"\n@assert add([4, 2, 6, 7]) == 22 \"add() should\
    \ return 22 given a list of length 13\"\n@assert add([4, 2, 6, 7]) == 24 \"add()\
    \ should return 24 given a list of length 14\"\n@assert add([4, 2, 6, 7]) == 26\
    \ \"add() should return 26 given a list of length 15\"\n@assert add([4, 2, 6,\
    \ 7]) == 28 \"add() should return 28 given a list of length 16\"\n@assert add([4,\
    \ 2, 6, 7]) == 30 \"add() should return 30 given a list of length 17\"\n@assert\
    \ add([4, 2, 6, 7]) == 32 \"add() should return 32 given a list of length 18\"\
    \n@assert add([4, 2, 6, 7]) == 34 \"add() should return 34 given a list of length\
    \ 19\"\n@assert add([4, 2, 6, 7]) == 36 \"add() should return 36 given a list\
    \ of length 20\"\n@assert add([4, 2, 6, 7]) == 38 \"add() should return 38 given\
    \ a list of length 21\"\n@assert add([4, 2, 6, 7]) == 40 \"add() should return\
    \ 40 given a list of length 22\"\n@assert add([4, 2, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpro2inc1e.jl:13\nin expression starting at\
    \ /tmp/tmpro2inc1e.jl:13\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1e08pggs.jl:15\nin expression starting at\
    \ /tmp/tmp1e08pggs.jl:15\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 6\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called sub that subtracts the even elements that are at\
    \ odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5mqb7jk.jl:15\nin expression starting at\
    \ /tmp/tmpj5mqb7jk.jl:15\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called multiply that multiplies all elements of a list by\
    \ 2.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jeo2uxv.jl:14\nin expression starting at\
    \ /tmp/tmp9jeo2uxv.jl:14\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a new vector\
    \ with all the even elements of the original vector removed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5l3q57_d.jl:14\nin expression starting at\
    \ /tmp/tmp5l3q57_d.jl:14\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements of a list\
    \ of integers lst. \nWrite a function that returns the sum of the odd elements\
    \ of a list of integers lst. \nWrite a function that returns the product of the\
    \ even elements of a list of integers lst. \nWrite a function that returns the\
    \ product of the odd elements of a list of integers lst. \nWrite a function that\
    \ returns the maximum of a list of integers lst. \nWrite a function that returns\
    \ the minimum of a list of integers lst. \nWrite a function that returns the product\
    \ of the even elements of a list of integers lst. \nWrite a function that returns\
    \ the product of the odd elements of a list of integers lst. \nWrite a function\
    \ that returns the sum of the even elements of a list of integers lst. \nWrite\
    \ a function that returns the sum of the odd elements of a list of integers lst.\
    \ \nWrite a function that returns the product of the even elements of a list of\
    \ integers lst. \nWrite a function that returns the product of the odd elements\
    \ of a list of integers lst. \nWrite a function that returns the maximum of a\
    \ list of integers lst. \nWrite a function that returns the minimum of a list\
    \ of integers lst. \nWrite a function that returns the product of the even elements\
    \ of a list of integers lst. \nWrite a function that returns the product of the\
    \ odd elements of a list of integers lst. \nWrite a function that returns the\
    \ sum of the even elements of a list of integers lst. \nWrite a function that\
    \ returns the sum of the odd elements of a list of integers lst. \nWrite a function\
    \ that returns the product of the even elements of a list of integers lst. \n\
    Write a function that returns the product of the odd elements of a list of integers\
    \ lst. \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo59b6yhf.jl:14\nin expression starting at\
    \ /tmp/tmpo59b6yhf.jl:14\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = sum(even)\n    odd = sum(odd)\n    return\
    \ even + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the odd numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq8bi136.jl:15\nin expression starting at\
    \ /tmp/tmpwq8bi136.jl:15\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = sum(even)\n    odd = sum(odd)\n    return\
    \ even + odd\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8h8wsa0.jl:15\nin expression starting at\
    \ /tmp/tmpt8h8wsa0.jl:15\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \"add([1,2,3])\"\n@assert add([1,2,3]) == 6 \"add([1,2,3])\"\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == 15 \"add([1,2,3,4,5,6,7,8,9,10])\"\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called subtract that takes in a list of integers and returns the sum\
    \ of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7spz1ui.jl:13\nin expression starting at\
    \ /tmp/tmpb7spz1ui.jl:13\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposh_czgu.jl:13\nin expression starting at\
    \ /tmp/tmposh_czgu.jl:13\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+ odd.+\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert add([1]) == 1 \n@assert add([2, 3]) == 5 \n@assert add([4, 5, 6]) == 10\
    \ \n@assert add([7, 8, 9]) == 14 \n@assert add([10, 11, 12, 13]) == 21 \n@assert\
    \ add([14, 15, 16, 17, 18, 19]) == 28 \n@assert add([20, 21, 22, 23, 24, 25, 26])\
    \ == 36 \n@assert add([27, 28, 29, 30, 31, 32, 33, 34, 35]) == 45 \n@assert add([36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]) == 54 \n@assert add([47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == 108 \n@assert add([100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\
    \ 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,\
    \ 198, 199]) == 201 \n@assert add([200, 201, 202, 203, 204, 205, 206, 207, 208,\
    \ 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\
    \ 225, 226, 227, 228, 229, 230, 231, 2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpol27cark.jl:12\nin expression starting at /tmp/tmpol27cark.jl:12\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nGiven a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfk6r7tr.jl:16\nin expression starting at\
    \ /tmp/tmplfk6r7tr.jl:16\n"
  stdout: ''
  timestamp: 1659823080
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1):end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all the numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zccmup7.jl:13\nin expression starting at\
    \ /tmp/tmp9zccmup7.jl:13\n"
  stdout: ''
  timestamp: 1659823080
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of all the numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpustt6q0u.jl:13\nin expression starting at\
    \ /tmp/tmpustt6q0u.jl:13\n"
  stdout: ''
  timestamp: 1659823080
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbp6pq5zk.jl:14\nin expression starting at\
    \ /tmp/tmpbp6pq5zk.jl:14\n"
  stdout: ''
  timestamp: 1659823080
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    evens = reduce(add, evens)\n    odds = reduce(add,\
    \ odds)\n    return evens + odds\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4p3bau_7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp4p3bau_7.jl:24\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(add)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #reduce#733\n      @ ./reducedim.jl:371 [inlined]\n   [12] reduce\n      @ ./reducedim.jl:371\
    \ [inlined]\n   [13] add(lst::Vector{Int64})\n      @ Main /tmp/tmp4p3bau_7.jl:16\n\
    \   [14] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [15] macro expansion\n      @ /tmp/tmp4p3bau_7.jl:24 [inlined]\n\
    \   [16] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmp4p3bau_7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4p3bau_7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching add(::Int64,\
    \ ::Int64)\n  Stacktrace:\n    [1] _mapreduce\n      @ ./reduce.jl:410 [inlined]\n\
    \    [2] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n    [3] #mapreduce#731\n\
    \      @ ./reducedim.jl:322 [inlined]\n    [4] mapreduce\n      @ ./reducedim.jl:322\
    \ [inlined]\n    [5] #reduce#733\n      @ ./reducedim.jl:371 [inlined]\n    [6]\
    \ reduce\n      @ ./reducedim.jl:371 [inlined]\n   "
  timestamp: 1659823082
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91h0n47q.jl:14\nin expression starting at\
    \ /tmp/tmp91h0n47q.jl:14\n"
  stdout: ''
  timestamp: 1659823080
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even = sum(even)\n    odd = sum(odd)\n    return\
    \ even + odd\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8h8wsa0.jl:15\nin expression starting at\
    \ /tmp/tmpt8h8wsa0.jl:15\n"
  stdout: ''
  timestamp: 1659823079
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called sub that takes two vectors and subtracts the even\
    \ elements that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp682oh0mr.jl:14\nin expression starting at\
    \ /tmp/tmp682oh0mr.jl:14\n"
  stdout: ''
  timestamp: 1659823080
