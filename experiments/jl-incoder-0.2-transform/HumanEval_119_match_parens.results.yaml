language: jl
name: HumanEval_119_match_parens
results:
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the letters capitalized.\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_lxo9zh.jl:40\nin expression starting at\
    \ /tmp/tmpy_lxo9zh.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zm_8835.jl:41\nin expression starting at\
    \ /tmp/tmp9zm_8835.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe940sbd9.jl:32\nin expression starting at\
    \ /tmp/tmpe940sbd9.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if length(lst) == 0 \n        return \"No\"\n    end1 = lst[end-1]\n\
    \    if end1 == \"(\" \n        return \"Yes\"\n    end2 = lst[end-2]\n    if\
    \ end2 == \")\" \n        return \"Yes\"\n    end3 = lst[end-3]\n    if end3 ==\
    \ \"(\" \n        return \"Yes\"\n    end4 = lst[end-4]\n    if end4 == \")\"\
    \ \n        return \"Yes\"\n    end5 = lst[end-5]\n    if end5 == \"(\" \n   \
    \     return \"Yes\"\n    end6 = lst[end-6]\n    if end6 == \")\" \n        return\
    \ \"Yes\"\n    end7 = lst[end-7]\n    if end7 == \"(\" \n        return \"Yes\"\
    \n    end8 = lst[end-8]\n    if end8 == \")\" \n        return \"Yes\"\n    end9\
    \ = lst[end-9]\n    if end9 == \"(\" \n        return \"Yes\"\n    end10 = lst[end-10]\n\
    \    if end10 == \")\" \n        return \"Yes\"\n    end11 = lst[end-11]\n   \
    \ if end11 == \"(\" \n        return \"Yes\"\n    end12 = lst[end-12]\n    if\
    \ end12 == \")\" \n        return \"Yes\"\n    end13 = lst[end-13]\n    if end13\
    \ == \"(\" \n        return \"Yes\"\n    end14 = lst[end-14]\n    if end14 ==\
    \ \")\" \n        return \"Yes\"\n    end15 = lst[end-15]\n    if end15 == \"\
    (\" \n        return \"Yes\"\n    end16 = lst[end-16]\n    if end16 == \")\" \n\
    \        return \"Yes\"\n    end17 = lst[end-17]\n    if end17 == \"(\" \n   \
    \     return \"Yes\"\n    end18 = lst[end-18]\n    if end18 == \")\" \n      \
    \  return \"Yes\"\n    end19 = lst[end-19]\n    if end19 == \"(\" \n        return\
    \ \"Yes\"\n    end20 = lst[end-20]\n    if end20 == \")\" \n        return \"\
    Yes\"\n    end21 = lst[end-21]\n    if end21 == \"(\" \n        return \"Yes\"\
    \n    end22 = lst[end-22]\n    if end22 == \")\" \n        return \"Yes\"\n  \
    \  end23 = lst[end-23]\n    if end23 == \"(\" \n        return \"Yes\"\n    end24\
    \ = lst[end-24]\n    if end24 == \")\" \n        return \"Yes\"\n    end25 = lst[end-25]\n\
    \    if end25 == \"(\" \n        return \"Yes\"\n    end26 = lst[end-26]\n   \
    \ if end26 == \")\" \nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk356c50.jl:1\nin expression starting at /tmp/tmpdk356c50.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.0>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string and returns a new string where all occurrences of \"(\" have\
    \ been replaced by \"(\" and all occurrences of \")\" have been replaced by \"\
    )\".\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwbwe8vlb.jl:32\nin expression starting at\
    \ /tmp/tmpwbwe8vlb.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis doesn't\
    \ work if the strings are of different lengths. For example, `match_parens([\"\
    ()(\", \")\"])` returns `\"No\"` instead of `\"Yes\"`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the problem you mentioned\n<|/ c |>\n<| a tags=string,julia |>\nHere is a solution\
    \ using regular expressions:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwy6tlgnh.jl:33\nin expression starting at\
    \ /tmp/tmpwy6tlgnh.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of parentheses.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8qv0nr5.jl:41\nin expression starting at\
    \ /tmp/tmpq8qv0nr5.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n\
    \        str = pop!(stack)\n        if str == \"(\"\n            push!(stack,\
    \ str)\n        elseif str == \")\"\n            if isempty(stack)\n         \
    \       return \"Yes\"\n            else\n                pop!(stack)\n      \
    \      end\n        end\n    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivas_y40.jl:35\nin expression starting at\
    \ /tmp/tmpivas_y40.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack{String}()\n    for s in lst\n        if s == \"(\"\n   \
    \         push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplb3ub7yp.jl:32\nin expression starting at\
    \ /tmp/tmplb3ub7yp.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nA number is prime if and only if it is a whole number greater\
    \ than 1.\nThe function should take one argument and return a boolean.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4kay53i.jl:45\nin expression starting at\
    \ /tmp/tmpt4kay53i.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nPart III: Matching Parentheses\nNow let's try to\
    \ solve the problem using Julia's built-in string manipulation functions. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defining a function which can match parentheses in a string. We'll\
    \ start by defin\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2c9tw40.jl:45\nin expression starting at\
    \ /tmp/tmp_2c9tw40.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g37cta7.jl:32\nin expression starting at\
    \ /tmp/tmp6g37cta7.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    \n    for i in lst\n        if i == \"(\"\n        \
    \    push!(stack, \"\")\n        elseif i == \")\"\n            if length(stack)\
    \ == 0 \n                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        elseif i == \"\"\n            if length(stack) == 0\
    \ \n                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            push!(stack, i)\n        end\n   \
    \ end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.\nA prime number is not divisible by any number other\
    \ than 1 and itself.\nA prime number is not divisible by any other number other\
    \ than 1 and itself.\nA prime number is called a prime number if its only positive\
    \ divisor is 1 and itself.\nA prime number is called a prime number if its only\
    \ positive divisor is 1 and itself.\nA prime number is called a prime number if\
    \ its only positive divisor is 1 and itself.\nA prime number is called a prime\
    \ number if its only positive divisor is 1 and itself.\nA prime number is called\
    \ a prime number if its only positive divisor is 1 and itself.\nA prime number\
    \ is called a prime number if its only positive divisor is 1 and itself.\nA prime\
    \ number is called a prime number if its only positive divisor is 1 and itself.\n\
    A prime number is called a prime number if its only positive divisor is 1 and\
    \ itself.\nA prime number is called a prime number if its only positive divisor\
    \ is 1 and itself.\nA prime number is called a prime number if its only positive\
    \ divisor is 1 and itself.\nA prime number is called a prime number if its only\
    \ positive divisor is 1 and itself.\nA prime number is called a prime number if\
    \ its only positive divisor is 1 and itself.\nA prime number is called a prime\
    \ number if its only positive divisor is 1 and itself.\nA prime number is called\
    \ a prime number if its only positive divisor is 1 and itself.\nA prime number\
    \ is called a prime number if its only positive divisor is 1 and itself.\nA prime\
    \ number is called a prime number if its only positive divisor is 1 and itself.\n\
    A prime number is called a prime number if its only positive divisor is 1 and\
    \ itself.\nA prime number is called a prime \nusing Test\n\n@testset begin\n\n\
    candidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t\
    @test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"\
    ())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\
    \t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoy8epu1l.jl:43\nin expression starting at\
    \ /tmp/tmpoy8epu1l.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkbryue_.jl:41\nin expression starting at\
    \ /tmp/tmpqkbryue_.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a valid mathematical expression. \nThe string can contain any characters,\
    \ including parentheses.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fdhljpq.jl:38\nin expression starting at\
    \ /tmp/tmp9fdhljpq.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    stack = push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplffs_rzi.jl:46\nin expression starting at\
    \ /tmp/tmplffs_rzi.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rfjiys8.jl:45\nin expression starting at\
    \ /tmp/tmp5rfjiys8.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbwv5la4.jl:45\nin expression starting at\
    \ /tmp/tmpjbwv5la4.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcuo5luqu.jl:40\nin expression starting at\
    \ /tmp/tmpcuo5luqu.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflsfuvp1.jl:33\nin expression starting at\
    \ /tmp/tmpflsfuvp1.jl:33\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.pop() != i\n                return \"No\"\n           \
    \ else\n                stack.pop()\n            end\n        end\n    end\n \
    \   return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nA number is prime if and only if it is a whole number greater than\
    \ 1.\nThe number 2 is considered a prime number.\nThe number 3 is considered a\
    \ prime number.\nThe number 5 is considered a prime number.\nThe number 7 is considered\
    \ a prime number.\nThe number 11 is considered a prime number.\nThe number 13\
    \ is considered a prime number.\nThe number 17 is considered a prime number.\n\
    The number 19 is considered a prime number.\nThe number 23 is considered a prime\
    \ number.\nThe number 29 is considered a prime number.\nThe number 31 is considered\
    \ a prime number.\nThe number 37 is considered a prime number.\nThe number 41\
    \ is considered a prime number.\nThe number 43 is considered a prime number.\n\
    The number 47 is considered a prime number.\nThe number 53 is considered a prime\
    \ number.\nThe number 59 is considered a prime number.\nThe number 61\nThe number\
    \ 67 is considered a prime number.\nThe number 71 is considered a prime number.\n\
    The number 73 is considered a prime number.\nThe number 79 is considered a prime\
    \ number.\nThe number 83 is considered a prime number.\nThe number 89 is considered\
    \ a prime number.\nThe number 97 is considered a prime number.\nThe number 101\n\
    The number 103 is considered a prime number.\nThe number 107 is considered a prime\
    \ number.\nThe number 109 is considered a prime number.\nThe number 113 is considered\
    \ a prime number.\nThe number 127 is considered a prime number.\nThe number 131\
    \ is considered a prime number.\nThe number 137 is considered a prime number.\n\
    The number 139 is considered a prime number.\nThe number 149 is considered a prime\
    \ number.\nThe number 151 is considered a prime number.\nThe number 157 is considered\
    \ a prime number.\nThe number 163 is considered a prime number.\nThe number 167\
    \ is considered a prime number.\nThe number 173 is considered a prime number.\n\
    The number 179 is considered a prime number.\nThe number 181 is considered a prime\
    \ number.\nThe number 191 is \nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w03a2yl.jl:34\nin expression starting at\
    \ /tmp/tmp0w03a2yl.jl:34\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyiz7ds71.jl:41\nin expression starting at\
    \ /tmp/tmpyiz7ds71.jl:41\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if lst.size == 0\n        return \"No\"\n    \n    if lst.size ==\
    \ 1\n        if lst[0] == \"(\"\n            return \"Yes\"\n        else\n  \
    \          return \"No\"\n    end\n    \n    stack = Vector{String}()\n    \n\
    \    for x in lst\n        if x == \"(\"\n            push!(stack, x)\n      \
    \  elseif x == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    \n    if isempty(stack)\n        return \"No\"\n    else\n\
    \        return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u1sou_c.jl:49\nin expression starting at\
    \ /tmp/tmp4u1sou_c.jl:49\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst)\
    \ == 1 \n        if lst[1] == \"(\" \n            return \"Yes\"\n        else\
    \ \n            return \"No\"\n    end\n    \n    if lst[1] == \"(\" \n      \
    \  if lst[2] == \")\" \n            return \"Yes\"\n        else \n          \
    \  return \"No\"\n    end\n    \n    if lst[2] == \")\" \n        if lst[1] ==\
    \ \")\" \n            return \"Yes\"\n        else \n            return \"No\"\
    \n    end\n    \n    if lst[1] == \"(\" and lst[2] == \")\" \n        return \"\
    Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \"(\" \n        return\
    \ \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \")\" \n      \
    \  return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2] == \"(\" \n\
    \        return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \"\
    (\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2]\
    \ == \")\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and\
    \ lst[2] == \")\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"\
    (\" and lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if lst[1]\
    \ == \")\" and lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if\
    \ lst[1] == \"(\" and lst[2] == \")\" \n        return \"Yes\"\n    end\n    \n\
    \    if lst[1] == \")\" and lst[2] == \")\" \n        return \"Yes\"\n    end\n\
    \    \n    if lst[1] == \"(\" and lst[2] == \"(\" \n        return \"Yes\"\n \
    \   end\n    \n    if lst[1] == \")\" and lst[2] == \"(\" \n        return \"\
    Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2] == \")\" \n        return\
    \ \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \")\" \n      \
    \  return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2] == \"(\" \n\
    \        return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \"\
    (\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2]\
    \ == \")\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and\
    \ lst[2] == \")\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"\
    (\" and lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if lst[1]\
    \ == \")\" and lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if\
    \ lst[1] == \"(\" and lst\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"lst\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_ethdmvn.jl:43\nin expression starting at /tmp/tmp_ethdmvn.jl:43\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9466ip95.jl:45\nin expression starting at\
    \ /tmp/tmp9466ip95.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gk0p69i.jl:39\nin expression starting at\
    \ /tmp/tmp6gk0p69i.jl:39\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime or not. \nThe function should take one integer number\
    \ as input and return 'Yes' if it's prime and 'No' otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeg3mju2t.jl:32\nin expression starting at\
    \ /tmp/tmpeg3mju2t.jl:32\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of occurrences of its first character in that\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhbkowc7.jl:45\nin expression starting at\
    \ /tmp/tmpnhbkowc7.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nA prime number is not divisible by any number\
    \ other than 1 and itself.\nA prime number is not divisible by any other number.\n\
    A prime number is called a prime number if all prime factors of the number are\
    \ also prime.\nA prime number is called a prime number if all prime factors of\
    \ the number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if \nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmiojy4o.jl:38\nin expression starting at\
    \ /tmp/tmpfmiojy4o.jl:38\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. You may use any number theoretic function you like.\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb96j1yuh.jl:39\nin expression starting at\
    \ /tmp/tmpb96j1yuh.jl:39\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. You may use any number as input.\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcswo7vuy.jl:39\nin expression starting at\
    \ /tmp/tmpcswo7vuy.jl:39\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjg0dzla5.jl:33\nin expression starting at\
    \ /tmp/tmpjg0dzla5.jl:33\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90mbsy3n.jl:35\nin expression starting at\
    \ /tmp/tmp90mbsy3n.jl:35\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    for i in lst[2:end]\n \
    \       if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\n\
    \            if stack.pop() != i\n                return \"No\"\n            else\n\
    \                return \"Yes\"\n        end\n    end\n    return \"No\"\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis code doesn't work. Try it with `match_parens([\"\
    ()(\", \")\"])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test\
    \ case you mentioned.\n<|/ c |>\n<| c |>\nThe test case you mentioned doesn't\
    \ work. Try it with `match_parens([\"()(\", \")\"])`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case you mentioned.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I added the test case you mentioned.\n<|/ c |>\n<| a\
    \ tags=string,julia,recursion |>\nI believe this can be solved using regular expressions:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp000sgmp1.jl:32\nin expression starting at\
    \ /tmp/tmp000sgmp1.jl:32\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    for i in lst\n        if i == \"(\"\n            push!(stack,\
    \ \"\")\n        elseif i == \")\"\n            if isempty(stack)\n          \
    \      return \"No\"\n            else\n                pop!(stack)\n        \
    \    end\n        else\n            push!(stack, i)\n        end\n    end\n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree is\
    \ a binary search tree. Assume that the tree is balanced.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvofp9m7.jl:36\nin expression starting at\
    \ /tmp/tmphvofp9m7.jl:36\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_paren\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wm9vkdn.jl:39\nin expression starting at\
    \ /tmp/tmp7wm9vkdn.jl:39\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. You may use any number as input.\nusing Test\n\n@testset begin\n\n\
    candidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t\
    @test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"\
    ())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\
    \t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiutgwv94.jl:41\nin expression starting at\
    \ /tmp/tmpiutgwv94.jl:41\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            pop!(stack)\n   \
    \         if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            push!(stack,\
    \ s)\n        end\n    end\n    \n    if isempty(stack)\n        return \"No\"\
    \n    else\n        return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgf7a6oc.jl:43\nin expression starting at\
    \ /tmp/tmpdgf7a6oc.jl:43\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic3fmo0z.jl:45\nin expression starting at\
    \ /tmp/tmpic3fmo0z.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg702rodu.jl:38\nin expression starting at\
    \ /tmp/tmpg702rodu.jl:38\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1eahnye9.jl:45\nin expression starting at\
    \ /tmp/tmp1eahnye9.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.0>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprv04xcdy.jl:39\nin expression starting at\
    \ /tmp/tmprv04xcdy.jl:39\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz8ky90b.jl:38\nin expression starting at\
    \ /tmp/tmplz8ky90b.jl:38\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as an argument and return\
    \ a string \"Yes\" or \"No\".\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4io28i6.jl:38\nin expression starting at\
    \ /tmp/tmpo4io28i6.jl:38\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lty5czp.jl:38\nin expression starting at\
    \ /tmp/tmp6lty5czp.jl:38\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g37cta7.jl:32\nin expression starting at\
    \ /tmp/tmp6g37cta7.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst)\
    \ == 1 \n        if lst[1] == \"(\" \n            return \"Yes\"\n        else\
    \ \n            return \"No\"\n    end\n    \n    if lst[1] == \"(\" \n      \
    \  match_parens(lst[2:end])\n    else \n        match_parens(lst[1:end-1])\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmn8gbsp2.jl:35\nin expression starting at\
    \ /tmp/tmpmn8gbsp2.jl:35\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of occurrences of every character\
    \ in the string. For example, the string \"abcabc\" should return [('a', 3), ('b',\
    \ 3), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rs64wtu.jl:40\nin expression starting at\
    \ /tmp/tmp4rs64wtu.jl:40\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in\
    \ lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n     \
    \   elseif elem == \")\"\n            if stack.pop() == elem\n               \
    \ return \"Yes\"\n            else\n                return \"No\"\n        end\n\
    \    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmo80h7nz.jl:34\nin expression starting at\
    \ /tmp/tmpmo80h7nz.jl:34\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. \nThe function should take one argument,\
    \ an integer number. \nThe function should return 'Yes' if number is prime and\
    \ 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5w8jccjj.jl:40\nin expression starting at\
    \ /tmp/tmp5w8jccjj.jl:40\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhv2a0fi.jl:38\nin expression starting at\
    \ /tmp/tmphhv2a0fi.jl:38\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns a string with all the characters in lower\
    \ case.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2n7rzj6.jl:33\nin expression starting at\
    \ /tmp/tmpn2n7rzj6.jl:33\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxyqryojy.jl:45\nin expression starting at\
    \ /tmp/tmpxyqryojy.jl:45\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if lst.size == 0\n        return \"No\"\n    \n    if lst.size ==\
    \ 1\n        if lst[0] == \"()\"\n            return \"Yes\"\n        else\n \
    \           return \"No\"\n    end\n    \n    stack = Vector{String}()\n    \n\
    \    for x in lst\n        if x == \"(\"\n            push!(stack, x)\n      \
    \  elseif x == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"No\"\n    else\n        return\
    \ \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpife6llzv.jl:55\nin expression starting at\
    \ /tmp/tmpife6llzv.jl:55\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. You may want to use the\nisqrt function\
    \ from the MATH package. You may want to check out this discussion.\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum1o7wst.jl:40\nin expression starting at\
    \ /tmp/tmpum1o7wst.jl:40\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8_xbxaj.jl:40\nin expression starting at\
    \ /tmp/tmph8_xbxaj.jl:40\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. Recall that prime numbers are only divisible by 1 and themselves.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e1gxghg.jl:45\nin expression starting at\
    \ /tmp/tmp5e1gxghg.jl:45\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of occurrences of 'a' in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkew2l0xw.jl:45\nin expression starting at\
    \ /tmp/tmpkew2l0xw.jl:45\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekvhnwv0.jl:32\nin expression starting at\
    \ /tmp/tmpekvhnwv0.jl:32\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=juli\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzq6u9o1.jl:38\nin expression starting at\
    \ /tmp/tmpjzq6u9o1.jl:38\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a palindrome. Palindromes are strings that read the same backward\
    \ as forward.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjb2zkwap.jl:45\nin expression starting at\
    \ /tmp/tmpjb2zkwap.jl:45\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ao_2rga.jl:38\nin expression starting at\
    \ /tmp/tmp6ao_2rga.jl:38\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\"\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgavhr5x.jl:41\nin expression starting at\
    \ /tmp/tmptgavhr5x.jl:41\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in\
    \ lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n     \
    \   elseif elem == \")\"\n            if stack.pop() != elem\n               \
    \ return \"No\"\n            else\n                stack.pop()\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjmgnf87.jl:35\nin expression starting at\
    \ /tmp/tmpvjmgnf87.jl:35\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n\
    \    \n    for paren in lst[1]\n        if paren == \"(\" \n            stack.append(paren)\n\
    \        elseif paren == \")\"\n            if stack.pop() == \"(\"\n        \
    \        stack.pop()\n            else\n                return \"No\"\n      \
    \      end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is prime. \nA prime number is a natural number greater\
    \ than 1 that has no positive divisors other than 1 and itself.\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqvbascj.jl:35\nin expression starting at\
    \ /tmp/tmpuqvbascj.jl:35\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in\
    \ lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n     \
    \   elseif elem == \")\"\n            if stack.pop() != elem\n               \
    \ return \"No\"\n            else\n                stack.pop()\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing definition of a prime:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvvq9retr.jl:34\nin expression starting at\
    \ /tmp/tmpvvq9retr.jl:34\n"
  stdout: ''
  timestamp: 1659822063
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if lst.length==0\n        return \"No\"\n    \n    if lst.length==1\n\
    \        return \"Yes\"\n    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]=='('\n        return match_parens(lst\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbdkjqev.jl:108\nin expression starting at\
    \ /tmp/tmppbdkjqev.jl:108\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a given string is a palindrome or not.\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgw6n5cf.jl:41\nin expression starting at\
    \ /tmp/tmpqgw6n5cf.jl:41\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaikqyqpv.jl:45\nin expression starting at\
    \ /tmp/tmpaikqyqpv.jl:45\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as its only argument.\
    \ Your function should return 'Yes' if a number is prime and 'No' otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ovamne7.jl:38\nin expression starting at\
    \ /tmp/tmp6ovamne7.jl:38\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g37cta7.jl:32\nin expression starting at\
    \ /tmp/tmp6g37cta7.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. You may want to use the following formula to check if a number is\
    \ prime:\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevb471tz.jl:45\nin expression starting at\
    \ /tmp/tmpevb471tz.jl:45\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9466ip95.jl:45\nin expression starting at\
    \ /tmp/tmp9466ip95.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack{String}()\n    for s in lst\n        if s == \"(\"\n   \
    \         push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpei1brdoi.jl:38\nin expression starting at\
    \ /tmp/tmpei1brdoi.jl:38\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9466ip95.jl:45\nin expression starting at\
    \ /tmp/tmp9466ip95.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.pop() == \"(\"\n                stack.pop()\n         \
    \   else\n                return \"No\"\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6690xap1.jl:35\nin expression starting at\
    \ /tmp/tmp6690xap1.jl:35\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is even.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvskhivu.jl:45\nin expression starting at\
    \ /tmp/tmpmvskhivu.jl:45\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nWrite a\
    \ function that takes a string and returns the number of words in the string.\
    \ \nWrite a function that takes a string and returns the number of lines in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces. \nWrite a function that takes a string and\
    \ returns the number of words in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of lines in the string that are not\
    \ spaces. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces that do not end with a period. \nWrite a function\
    \ that takes a string and returns the number of words in the string that are not\
    \ spaces that do not end with a period. \nWrite a function that takes a string\
    \ and returns the number of lines in the string that are not spaces that do not\
    \ end with a period. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces that do not end with a period\
    \ and that do not start with a period. \nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces that do not\
    \ end with a period and that do not start with a period. \nWrite a function that\
    \ takes a string and returns the number of lines in the string that are not spaces\
    \ that do not end with a period and that do not start with a period. \nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces that do not end with a period and that do not start with\
    \ a period and that do not end with a period. \nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces that\
    \ do not end with a period and that do not start with a period and that do not\
    \ end with a period. \nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces that do not end with a period and\
    \ that do not start with a period and that do not end with a period. \nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces that do not end with a period and that do not start with\
    \ a period and that do not end with a period and that do not start with a \nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8gf_2zc.jl:41\nin expression starting at\
    \ /tmp/tmpc8gf_2zc.jl:41\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may assume that all numbers are positive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_rc1qk5.jl:33\nin expression starting at\
    \ /tmp/tmpa_rc1qk5.jl:33\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string where all occurrences of \"(\" have been\
    \ replaced by \"((\", and all occurrences of \")\" have been replaced by \")(\"\
    . For example, given \"(())()\", the function should return \"(()())\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16rdkn9g.jl:32\nin expression starting at\
    \ /tmp/tmp16rdkn9g.jl:32\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. Your function should take in a number as\
    \ input and output \"Yes\" if it's a prime number, and \"No\" otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2_6rzuv.jl:32\nin expression starting at\
    \ /tmp/tmpn2_6rzuv.jl:32\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\", \"(\",\
    \ \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrmazfg6.jl:39\nin expression starting at\
    \ /tmp/tmphrmazfg6.jl:39\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise: Write a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4lj839_.jl:39\nin expression starting at\
    \ /tmp/tmpb4lj839_.jl:39\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime or not. You may use the\nfollowing algorithm:\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxi1vruu.jl:32\nin expression starting at\
    \ /tmp/tmpxxi1vruu.jl:32\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    \n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ elseif isempty(stack)\n            return \"No\"\n        else\n           \
    \ pop!(stack)\n            push!(stack, s)\n        end\n    end\n    \n    if\
    \ isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    \nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2xr5wdvt.jl:45\nin expression starting at\
    \ /tmp/tmp2xr5wdvt.jl:45\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. You may use any number as input.\nusing Test\n\n@testset begin\n\n\
    candidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t\
    @test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"\
    ())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\
    \t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7dfjo0ns.jl:38\nin expression starting at\
    \ /tmp/tmp7dfjo0ns.jl:38\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n\
    \        \n        str = pop(stack)\n        \n        if str == \"(\"\n     \
    \       push!(stack, str)\n        elseif str == \")\"\n            if !isempty(stack)\n\
    \                pop!(stack)\n            else\n                return \"No\"\n\
    \            end\n        else\n            return \"No\"\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yy941tb.jl:40\nin expression starting at\
    \ /tmp/tmp0yy941tb.jl:40\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.size == 0\n                return \"No\"\n            else\n\
    \                popped = stack.pop()\n                if popped != \"(\"\n  \
    \                  return \"No\"\n                else\n                    stack.append(i)\n\
    \            end\n        else\n            if stack.size == 0\n             \
    \   return \"No\"\n            else\n                popped = stack.pop()\n  \
    \              if popped != i\n                    return \"No\"\n           \
    \     else\n                    stack.append(i)\n                end\n       \
    \     end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpe07_dotj.jl:26 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe07_dotj.jl:35\n\
    in expression starting at /tmp/tmpe07_dotj.jl:35\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6bh4usv.jl:39\nin expression starting at\
    \ /tmp/tmpp6bh4usv.jl:39\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe940sbd9.jl:32\nin expression starting at\
    \ /tmp/tmpe940sbd9.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyyfiuxx.jl:33\nin expression starting at\
    \ /tmp/tmpkyyfiuxx.jl:33\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as an argument and return\
    \ a boolean value.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvemsgwke.jl:38\nin expression starting at\
    \ /tmp/tmpvemsgwke.jl:38\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime or not. You may use the\nfollowing algorithm:\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_u_4iel.jl:32\nin expression starting at\
    \ /tmp/tmpt_u_4iel.jl:32\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in\
    \ lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n     \
    \   elseif elem == \")\"\n            if stack.pop() != elem\n               \
    \ return \"No\"\n            else\n                return \"Yes\"\n        end\n\
    \    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4qecqw3.jl:34\nin expression starting at\
    \ /tmp/tmpr4qecqw3.jl:34\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime. You may want to use the\nfollowing functions:\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1vvx4j0.jl:39\nin expression starting at\
    \ /tmp/tmpn1vvx4j0.jl:39\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghg0iel_.jl:35\nin expression starting at\
    \ /tmp/tmpghg0iel_.jl:35\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjb7luon8.jl:45\nin expression starting at\
    \ /tmp/tmpjb7luon8.jl:45\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9466ip95.jl:45\nin expression starting at\
    \ /tmp/tmp9466ip95.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. You may use any number as input.\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgyc2sld7.jl:35\nin expression starting at\
    \ /tmp/tmpgyc2sld7.jl:35\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90mbsy3n.jl:35\nin expression starting at\
    \ /tmp/tmp90mbsy3n.jl:35\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5hb1jco.jl:38\nin expression starting at\
    \ /tmp/tmpo5hb1jco.jl:38\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. You may use the\nfollowing formula to determine\
    \ whether a number is prime or not:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiaj3sfr9.jl:39\nin expression starting at\
    \ /tmp/tmpiaj3sfr9.jl:39\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst)\
    \ == 1 \n        if lst[1] == \"(\" \n            return \"Yes\"\n        else\
    \ \n            return \"No\"\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeo7p4ucd.jl:1\nin expression starting at /tmp/tmpeo7p4ucd.jl:1\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is even.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvskhivu.jl:45\nin expression starting at\
    \ /tmp/tmpmvskhivu.jl:45\n"
  stdout: ''
  timestamp: 1659822064
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n\
    \    \n    while !isempty(stack)\n        top = stack.pop()\n        if top ==\
    \ \"(\"\n            stack.append(top)\n        elseif top == \")\"\n        \
    \    if isempty(stack)\n                return \"Yes\"\n            else\n   \
    \             stack.pop()\n            end\n        else\n            return \"\
    No\"\n        end\n    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. Your function should take one integer number as input and return 'Yes'\
    \ if it's prime and 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpud5984og.jl:38\nin expression starting at\
    \ /tmp/tmpud5984og.jl:38\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise: Write a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_v4iiiu.jl:32\nin expression starting at\
    \ /tmp/tmpi_v4iiiu.jl:32\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack{String}()\n    stack.append(lst[1])\n    \n    for elem\
    \ in lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n  \
    \      elseif elem == \")\"\n            if stack.pop() != elem\n            \
    \    return \"No\"\n            else\n                stack.pop()\n          \
    \  end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_qzowcj.jl:34\nin expression starting at\
    \ /tmp/tmp9_qzowcj.jl:34\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime. Your function should\
    \ take in a number as an argument and return a boolean.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsr2zdta.jl:35\nin expression starting at\
    \ /tmp/tmplsr2zdta.jl:35\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nThe function should take one integer number as input and return\
    \ 'Yes' if it is prime and 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjbzgqst.jl:41\nin expression starting at\
    \ /tmp/tmpfjbzgqst.jl:41\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. Your function should take in a single number\
    \ as an argument and return a boolean value.\nusing Test\n\n@testset begin\n\n\
    candidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t\
    @test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"\
    ())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\
    \t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4h29p3z.jl:32\nin expression starting at\
    \ /tmp/tmpq4h29p3z.jl:32\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if lst.size == 0\n        return \"No\"\n    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that takes a list of strings as\
    \ input and returns a list of strings as output. \nThe function should return\
    \ a list of strings that satisfy the conditions described above. \nThe function\
    \ should return an empty list if there are no strings that satisfy the conditions.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x3a2oce.jl:48\nin expression starting at\
    \ /tmp/tmp0x3a2oce.jl:48\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(\"\")\n    stack.append(\"\")\n    for\
    \ i in lst\n        if i == \"(\"\n            stack.append(\"\")\n        elseif\
    \ i == \")\"\n            if stack.pop() == \"\"\n                return \"No\"\
    \n            else\n                stack.pop()\n        end\n        stack[end]\
    \ = i\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppke_kor8.jl:34\nin expression starting at\
    \ /tmp/tmppke_kor8.jl:34\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself. \nThe number 5 is considered\
    \ a prime number.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpquk4e1vb.jl:35\nin expression starting at\
    \ /tmp/tmpquk4e1vb.jl:35\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    for i in lst\n        if i == \"(\"\n            push!(stack,\
    \ \"\")\n        elseif i == \")\"\n            if isempty(stack)\n          \
    \      return \"No\"\n            else\n                pop!(stack)\n        \
    \    end\n        else\n            push!(stack, i)\n        end\n    end\n  \
    \  if isempty(stack)\n        return \"No\"\n    else\n        return \"Yes\"\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work.\
    \ `match_parens([\")\", \")\"])` returns `\"No\"`, but `match_parens([\"()(\"\
    , \")\"])` returns `\"Yes\"`.\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ Did you copy and paste my code exactly?\n<|/ c |>\n<| c |>\nYes, I did. I'm\
    \ running Julia 0.6.0.\n<|/ c |>\n<| c |>\nI tested it on 0.6.0 as well. Maybe\
    \ the problem is with your version of Julia?\n<|/ c |>\n<| c |>\nI tested it on\
    \ 0.6.0 as well. Maybe the problem is with your version of Julia?\n<|/ c |>\n\
    <| a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnahwwy2.jl:40\nin expression starting at\
    \ /tmp/tmprnahwwy2.jl:40\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may use the\nfollowing algorithm:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzm1r3m44.jl:45\nin expression starting at\
    \ /tmp/tmpzm1r3m44.jl:45\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may use the\nfollowing algorithm:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpublqu_6l.jl:38\nin expression starting at\
    \ /tmp/tmpublqu_6l.jl:38\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst)\
    \ == 1 \n        if lst[1] == \"(\" \n            return \"Yes\"\n        else\
    \ \n            return \"No\"\n    end\n    \n    stack = Stack()\n    \n    for\
    \ x in lst\n        if x == \"(\" \n            push!(stack, x)\n        else\
    \ \n            if x == \"(\" \n                pop!(stack)\n            else\n\
    \                if stack == [] \n                    return \"No\"\n        \
    \        else\n                    pop!(stack)\n                end\n        \
    \    end\n        end\n    end\n    \n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of occurrences of 'a' in that string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_55go2v.jl:49\nin expression starting at\
    \ /tmp/tmpx_55go2v.jl:49\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for x in lst[2:end]\n\
    \        if x == \"(\"\n            stack.append(x)\n        elseif x == \")\"\
    \n            if stack.pop() == \"(\"\n                return \"Yes\"\n      \
    \      else\n                return \"No\"\n        end\n    end\n    return \"\
    No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. Your function\
    \ should take one integer number as input and return a string \"Yes\" or \"No\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5obfcu5a.jl:34\nin expression starting at\
    \ /tmp/tmp5obfcu5a.jl:34\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdlsalrn.jl:39\nin expression starting at\
    \ /tmp/tmpcdlsalrn.jl:39\n"
  stdout: ''
  timestamp: 1659822066
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may want to use isPrime() from the Base package.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkohjthy.jl:40\nin expression starting at\
    \ /tmp/tmplkohjthy.jl:40\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as an argument and return\
    \ a boolean value.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpjr62zr.jl:38\nin expression starting at\
    \ /tmp/tmpjpjr62zr.jl:38\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. You may use the\nfollowing definition of\
    \ a prime:\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgem0bwxz.jl:32\nin expression starting at\
    \ /tmp/tmpgem0bwxz.jl:32\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n\
    \        str = pop!(stack)\n        if str == \"(\"\n            push!(stack,\
    \ str)\n        elseif str == \")\"\n            if isempty(stack)\n         \
    \       return \"Yes\"\n            else\n                pop!(stack)\n      \
    \      end\n        end\n    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise: Write a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ej86oui.jl:35\nin expression starting at\
    \ /tmp/tmp0ej86oui.jl:35\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as an argument and return\
    \ a boolean value.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppm0d4bwa.jl:38\nin expression starting at\
    \ /tmp/tmppm0d4bwa.jl:38\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    for s in lst\n        if s == \")\"\n            stack\
    \ = pop!(stack)\n        elseif s == \"(\"\n            stack = push!(stack, \"\
    \")\n        else\n            stack = push!(stack, s)\n        end\n    end\n\
    \    if stack[1] == \"\"\n        return \"Yes\"\n    else\n        return \"\
    No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyiewiqv.jl:36\nin expression starting at\
    \ /tmp/tmpqyiewiqv.jl:36\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nA prime number is not divisible by any other\
    \ natural number.\nA prime number is not divisible by 1 and itself.\nA prime number\
    \ is not divisible by 1 and itself.\nA prime number is not divisible by 1 and\
    \ itself.\nA prime number is not divisible by 1 and itself.\nA prime number is\
    \ not divisible by 1 and itself.\nA prime number is not divisible by 1 and itself.\n\
    A prime number is not divisible by 1 and itself.\nA prime number is not divisible\
    \ by 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime\
    \ number is not divisible by 1 and itself.\nA prime number is not divisible by\
    \ 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime number\
    \ is not divisible by 1 and itself.\nA prime number is not divisible by 1 and\
    \ itself.\nA prime number is not divisible by 1 and itself.\nA prime number is\
    \ not divisible by 1 and itself.\nA prime number is not divisible by 1 and itself.\n\
    A prime number is not divisible by 1 and itself.\nA prime number is not divisible\
    \ by 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime\
    \ number is not divisible by 1 and itself.\nA prime number is not divisible by\
    \ 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime number\
    \ is not divisible by 1 and itself.\nA prime number is not divisible by 1 and\
    \ itself.\nA prime number is not divisible by 1 and itself.\nA prime number is\
    \ not divisible by 1 and itself.\nA prime number is not divisible by 1 and itself.\n\
    A prime number is not divisible by 1 and itself.\nA prime number is not divisible\
    \ by 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime\
    \ number is not di\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7l0k3xwc.jl:45\nin expression starting at\
    \ /tmp/tmp7l0k3xwc.jl:45\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3llmp846.jl:45\nin expression starting at\
    \ /tmp/tmp3llmp846.jl:45\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22pu6n6b.jl:32\nin expression starting at\
    \ /tmp/tmp22pu6n6b.jl:32\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a given string is a valid mathematical expression.\nA valid mathematical\
    \ expression is one that has only numbers and operators (+, -, *, /).\nThe function\
    \ should return 'Yes' if it is valid, and 'No' otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqgnvre_.jl:32\nin expression starting at\
    \ /tmp/tmpeqgnvre_.jl:32\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5r4f73xh.jl:38\nin expression starting at\
    \ /tmp/tmp5r4f73xh.jl:38\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise: Write a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhqaciij.jl:41\nin expression starting at\
    \ /tmp/tmpkhqaciij.jl:41\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyi93g7p.jl:45\nin expression starting at\
    \ /tmp/tmpyyi93g7p.jl:45\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as input, and return\
    \ 'Yes' if it is prime and 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22hc_bh8.jl:45\nin expression starting at\
    \ /tmp/tmp22hc_bh8.jl:45\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| c |>\nThis code does not work for the example given in the question.\
    \ `match_parens([\"()(\", \")\"])` returns `\"No\"` instead of `\"Yes\"`.\n<|/\
    \ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a tags=string,julia |>\nI wrote a recursive solution that works for\
    \ any number of parentheses:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyrcj43y.jl:38\nin expression starting at\
    \ /tmp/tmpdyrcj43y.jl:38\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppc6j4_t7.jl:40\nin expression starting at\
    \ /tmp/tmppc6j4_t7.jl:40\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. Hint: use Sieve of Eratosthenes.\nusing Test\n\n@testset begin\n\n\
    candidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t\
    @test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"\
    ())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\
    \t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0db8jsr.jl:45\nin expression starting at\
    \ /tmp/tmpc0db8jsr.jl:45\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpex5rf96z.jl:32\nin expression starting at\
    \ /tmp/tmpex5rf96z.jl:32\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a valid phone number.\nA valid phone number has the following properties:\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5w0_ys_.jl:38\nin expression starting at\
    \ /tmp/tmpm5w0_ys_.jl:38\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. You may want to use the\nfollowing functions:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim000_6s.jl:45\nin expression starting at\
    \ /tmp/tmpim000_6s.jl:45\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may use the\nfollowing definition of a prime:\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplg2kkx21.jl:45\nin expression starting at\
    \ /tmp/tmplg2kkx21.jl:45\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmtx65r02.jl:32\nin expression starting at\
    \ /tmp/tmpmtx65r02.jl:32\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9466ip95.jl:45\nin expression starting at\
    \ /tmp/tmp9466ip95.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.length() == 0\n                return \"No\"\n        \
    \    else\n                popped = stack.pop()\n                if popped ==\
    \ \"(\"\n                    stack.append(i)\n                else\n         \
    \           return \"No\"\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wh9lcsa.jl:38\nin expression starting at\
    \ /tmp/tmp5wh9lcsa.jl:38\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. You may want to use the\nfollowing algorithm:\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfc0gjvrj.jl:32\nin expression starting at\
    \ /tmp/tmpfc0gjvrj.jl:32\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in\
    \ lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n     \
    \   elseif elem == \")\"\n            if stack.size == 0\n                return\
    \ \"No\"\n            else\n                stack.pop()\n            end\n   \
    \     end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in that string.\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb473t53.jl:35\nin expression starting at\
    \ /tmp/tmpcb473t53.jl:35\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. Your function should take in a single integer\
    \ number as an argument, and return 'Yes' if it is prime and 'No' otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3xf2z3z.jl:39\nin expression starting at\
    \ /tmp/tmpq3xf2z3z.jl:39\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for i in\
    \ lst\n        if i == \"(\"\n            push!(stack, \"\")\n        elseif i\
    \ == \")\"\n            if length(stack) == 0\n                return \"No\"\n\
    \            else\n                pop!(stack)\n            end\n        else\n\
    \            push!(stack, i)\n        end\n    end\n    return \"Yes\"\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a binary tree is balanced.\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp06pgyts.jl:35\nin expression starting at\
    \ /tmp/tmpp06pgyts.jl:35\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2746urck.jl:45\nin expression starting at\
    \ /tmp/tmp2746urck.jl:45\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n\
    \        str = pop!(stack)\n        if str == \"(\"\n            push!(stack,\
    \ str)\n        elseif str == \")\"\n            if isempty(stack)\n         \
    \       return \"No\"\n            else\n                pop!(stack)\n       \
    \     end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of occurrences of the character 'a' in that\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiljm2_qc.jl:35\nin expression starting at\
    \ /tmp/tmpiljm2_qc.jl:35\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. Your function should take in a number as an argument and return a\
    \ boolean indicating whether it is prime or not.\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_c12getj.jl:45\nin expression starting at\
    \ /tmp/tmp_c12getj.jl:45\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. \nA number is prime if and only if it is\
    \ a whole number greater than 1.\nThe number 2 is considered a prime number.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxh2qc0xd.jl:39\nin expression starting at\
    \ /tmp/tmpxh2qc0xd.jl:39\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9466ip95.jl:45\nin expression starting at\
    \ /tmp/tmp9466ip95.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5pdgo1s.jl:33\nin expression starting at\
    \ /tmp/tmpm5pdgo1s.jl:33\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n\
    \    \n    for i in 1:length(lst)\n        if stack.length() == 0\n          \
    \  return \"No\"\n        if lst[i] == \"(\"\n            stack.append(lst[i])\n\
    \        elseif lst[i] == \")\"\n            if stack.pop() != lst[i]\n      \
    \          return \"No\"\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_paren\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6uyt2if.jl:34\nin expression starting at\
    \ /tmp/tmpp6uyt2if.jl:34\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rfjiys8.jl:45\nin expression starting at\
    \ /tmp/tmp5rfjiys8.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</code>\n<|/\
    \ a tags=string,julia |>\n<| a tags=string,julia |>\nA simple recursive function\
    \ will do the trick:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wqjm64e.jl:32\nin expression starting at\
    \ /tmp/tmp1wqjm64e.jl:32\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for s in lst[2:end]\n\
    \        if s == \"(\"\n            stack.append(s)\n        elseif s == \")\"\
    \n            if stack.length() == 0\n                return \"No\"\n        \
    \    else\n                stack.pop()\n        end\n    end\n    return \"Yes\"\
    \nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a given string is a palindrome.\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15m83y3c.jl:34\nin expression starting at\
    \ /tmp/tmp15m83y3c.jl:34\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime or not. \nThe function should take in a number as\
    \ input and return a boolean value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cpjm8iy.jl:32\nin expression starting at\
    \ /tmp/tmp1cpjm8iy.jl:32\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. Recall that prime numbers are only divisible by 1 and themselves.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplpldqidx.jl:40\nin expression starting at\
    \ /tmp/tmplpldqidx.jl:40\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack =\
    \ push!(stack, \"\")\n    for i in lst\n        if i == \"(\"\n            push!(stack,\
    \ \"\")\n        elseif i == \")\"\n            if length(stack) == 0\n      \
    \          return \"No\"\n            else\n                pop!(stack)\n    \
    \        end\n        else\n            push!(stack, i)\n        end\n    end\n\
    \    return \"Yes\"\nend\n</code>\n<|/ a tags=string,julia,regex |>\n<| a tags=string,julia,regex\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ziywdsv.jl:36\nin expression starting at\
    \ /tmp/tmp_ziywdsv.jl:36\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.0>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qe0vd2w.jl:38\nin expression starting at\
    \ /tmp/tmp4qe0vd2w.jl:38\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take one argument, an integer number.\
    \ \nThe function should return 'Yes' if and only if the number is prime, and return\
    \ 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphm3u7ssr.jl:39\nin expression starting at\
    \ /tmp/tmphm3u7ssr.jl:39\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n\
    \    \n    while !isempty(stack)\n        top = stack.pop()\n        if top ==\
    \ \"(\"\n            stack.append(lst[1])\n            stack.append(lst[2])\n\
    \        elseif top == \")\"\n            if isempty(stack)\n                return\
    \ \"Yes\"\n            else\n                stack.pop()\n            end\n  \
    \      else\n            push!(stack, top)\n        end\n    end\n    return \"\
    No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime. You may want to\
    \ use the\nfollowing functions:\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zubdhgh.jl:39\nin expression starting at\
    \ /tmp/tmp3zubdhgh.jl:39\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. Recall that prime numbers are only divisible by 1 and themselves.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpina1js.jl:40\nin expression starting at\
    \ /tmp/tmpvpina1js.jl:40\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n\
    \        str = pop!(stack)\n        if str == \"(\"\n            push!(stack,\
    \ str)\n        elseif str == \")\"\n            if isempty(stack)\n         \
    \       return \"No\"\n            else\n                pop!(stack)\n       \
    \     end\n        else\n            return \"No\"\n        end\n    end\n   \
    \ return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7nrwpfc.jl:37\nin expression starting at\
    \ /tmp/tmpv7nrwpfc.jl:37\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3ztzrs3.jl:40\nin expression starting at\
    \ /tmp/tmpq3ztzrs3.jl:40\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.length() == 0\n                return \"No\"\n        \
    \    else\n                popped = stack.pop()\n                if popped !=\
    \ i\n                    return \"No\"\n                end\n            end\n\
    \        else\n            if stack.length() == 0\n                return \"No\"\
    \n            else\n                popped = stack.pop()\n                if popped\
    \ != i\n                    return \"No\"\n                end\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_p7epop.jl:47\nin expression starting at\
    \ /tmp/tmpu_p7epop.jl:47\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. You may use any number theoretic function you like.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolmrqhq6.jl:32\nin expression starting at\
    \ /tmp/tmpolmrqhq6.jl:32\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    if lst.length != 2 \n        return \"No\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1taozeie.jl:1\nin expression starting at /tmp/tmp1taozeie.jl:1\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4alolkn.jl:32\nin expression starting at\
    \ /tmp/tmpe4alolkn.jl:32\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may use the\nfollowing algorithm:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_s5x91m.jl:38\nin expression starting at\
    \ /tmp/tmpo_s5x91m.jl:38\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is a binary search tree.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpypq9hovz.jl:45\nin expression starting at\
    \ /tmp/tmpypq9hovz.jl:45\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzj5iaob.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzj5iaob.jl:1\n\
    in expression starting at /tmp/tmppzj5iaob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may want to use isPrime() from Julia's Base package.\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy743c0ve.jl:39\nin expression starting at\
    \ /tmp/tmpy743c0ve.jl:39\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpex5rf96z.jl:32\nin expression starting at\
    \ /tmp/tmpex5rf96z.jl:32\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgv75_m38.jl:32\nin expression starting at\
    \ /tmp/tmpgv75_m38.jl:32\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string where all occurrences of '(' and ')' have been replaced\
    \ by '-'.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hukuvb6.jl:40\nin expression starting at\
    \ /tmp/tmp6hukuvb6.jl:40\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime. Hint: use Julia's isa() function.\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxko_7fxf.jl:32\nin expression starting at\
    \ /tmp/tmpxko_7fxf.jl:32\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfe2eo7o.jl:45\nin expression starting at\
    \ /tmp/tmpzfe2eo7o.jl:45\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in\
    \ lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n     \
    \   elseif elem == \")\"\n            if stack.pop() != elem\n               \
    \ return \"No\"\n            else\n                stack.pop()\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"\
    , \")\", \"(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79m8cnbw.jl:34\nin expression starting at\
    \ /tmp/tmp79m8cnbw.jl:34\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppc6j4_t7.jl:40\nin expression starting at\
    \ /tmp/tmppc6j4_t7.jl:40\n"
  stdout: ''
  timestamp: 1659822068
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for x in lst[2:end]\n\
    \        if x == \"(\"\n            stack.append(x)\n        elseif x == \")\"\
    \n            if stack.pop() == \"(\"\n                return \"Yes\"\n      \
    \      else\n                return \"No\"\n        end\n    end\n    return \"\
    No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a given string is a palindrome or\
    \ not.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87dwzi4p.jl:34\nin expression starting at\
    \ /tmp/tmp87dwzi4p.jl:34\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpox4bo19q.jl:38\nin expression starting at\
    \ /tmp/tmpox4bo19q.jl:38\n"
  stdout: ''
  timestamp: 1659822071
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a given string is a valid mathematical expression. \nA valid mathematical\
    \ expression is one that does not contain any unbalanced parentheses.\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugg8r4ds.jl:32\nin expression starting at\
    \ /tmp/tmpugg8r4ds.jl:32\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n\
    \        \n        str = pop!(stack)\n        \n        if str == \"(\"\n    \
    \        push!(stack, str)\n        elseif str == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            return \"No\"\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given string\
    \ is a valid mathematical expression. For example, the string \"(1+2)\" is a valid\
    \ expression, but \"(1+2+3)\" isn't.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdn6sdnjk.jl:40\nin expression starting at\
    \ /tmp/tmpdn6sdnjk.jl:40\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwfo7twm.jl:45\nin expression starting at\
    \ /tmp/tmpnwfo7twm.jl:45\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjs142pj4.jl:32\nin expression starting at\
    \ /tmp/tmpjs142pj4.jl:32\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9466ip95.jl:45\nin expression starting at\
    \ /tmp/tmp9466ip95.jl:45\n"
  stdout: ''
  timestamp: 1659822061
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjs142pj4.jl:32\nin expression starting at\
    \ /tmp/tmpjs142pj4.jl:32\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwfo7twm.jl:45\nin expression starting at\
    \ /tmp/tmpnwfo7twm.jl:45\n"
  stdout: ''
  timestamp: 1659822072
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2746urck.jl:45\nin expression starting at\
    \ /tmp/tmp2746urck.jl:45\n"
  stdout: ''
  timestamp: 1659822070
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g37cta7.jl:32\nin expression starting at\
    \ /tmp/tmp6g37cta7.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
    )\", \")\"])\n    \"No\"\n    \"\"\"\nfunction match_parens(lst::Vector{String})::String\
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjs142pj4.jl:32\nin expression starting at\
    \ /tmp/tmpjs142pj4.jl:32\n"
  stdout: ''
  timestamp: 1659822072
