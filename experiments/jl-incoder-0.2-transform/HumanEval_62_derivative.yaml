name: HumanEval_62_derivative
language: jl
prompt: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x\
  \ + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
  \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
  \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
  \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1])\
  \ == Vector{Int64}([]))\nend\n"
completions: ["    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\n\
    end\n</cell>\n<code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n   \
    \ for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ integral of a polynomial using trapezoidal rule. \nThe function should take\
    \ as input a vector of coefficients xs and a vector of values ys.\nThe function\
    \ should return a single value that is the integral of the polynomial using trapezoidal\
    \ rule.\nThe function should return an error if the input vectors are not of the\
    \ same length.\nThe function should return an error if the input vectors contain\
    \ negative values.\nThe function should return an error if the input vectors contain\
    \ values greater than 1.\nThe function should return an error if the input vectors\
    \ contain values less than 0.\nThe function should return an error if the input\
    \ vectors contain values equal to 0.\nThe function should return an error if the\
    \ input vectors contain values equal to 1.\nThe function should return an error\
    \ if the input vectors contain values greater than 1.\nThe function should return\
    \ an error if the input vectors contain values less than 0.\nThe function should\
    \ return an error if the input vectors contain values equal to 0.\nThe function\
    \ should return an error if the input vectors contain values equal to 1.\nThe\
    \ function should return an error if the input vectors contain values greater\
    \ than 1.\nThe function should return an error if the input vectors contain values\
    \ less than 0.\nThe function should return an error if the input vectors contain\
    \ values equal to 0.\nThe function should return an error if the input vectors\
    \ contain values equal to 1.\nThe function should return an error if the input\
    \ vectors contain values greater than 1.\nThe function should return an error\
    \ if the input vectors contain values less than 0.\nThe function should return\
    \ an error if the input vectors contain values equal to 0.\nThe function should\
    \ return an error if the input vectors contain values equal to 1.\nThe function\
    \ should return an error if the input vectors contain values greater than 1.\n\
    The function should return an error if the input vectors contain values less than\
    \ 0.\nThe function should return an error if the input vectors contain values\
    \ equal to 0.\nThe function should return an error if the input vectors contain\
    \ values equal to 1.\nThe function should return an error if the input vectors\
    \ contain values greater than 1.\nThe function should return an error if the input\
    \ vectors contain values less than 0.\nThe function should return an error if\
    \ the input vectors contain values equal to 0.\nThe function should return an\
    \ error if the input vectors contain values equal to 1.\nThe function should return\
    \ an error if the input vectors contain values greater than 1.\nThe function should\
    \ return an error if the input vectors contain values less than 0.\nThe function\
    \ should return an error if the input vectors contain values equal to 0.\nThe\
    \ function should return an error if the input vectors contain values equal to\
    \ 1.\nThe function should return an error if the input vectors contain values\
    \ greater than 1.\nThe function should return an error if the input vectors contain ",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a vector of coefficients and returns the polynomial\
    \ evaluated at x.", "    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n   \
    \ end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.4>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that calculates the derivative\
    \ of a polynomial\n$$\nx^3 + 2x^2 + 4x + 5\n$$\nand returns the result as a vector.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n    \
    \    deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial with one variable.",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first derivative of a polynomial\
    \ given its coefficients.\nThe function should take in an array of coefficients\
    \ and return an array of derivatives.\nThe function should return an array of\
    \ length equal to the number of coefficients.\nThe first element of the returned\
    \ array should be the derivative of the polynomial evaluated at 0.\nThe second\
    \ element of the returned array should be the derivative of the polynomial evaluated\
    \ at 1.\nThe third element of the returned array should be the derivative of the\
    \ polynomial evaluated at 2.\nThe fourth element of the returned array should\
    \ be the derivative of the polynomial evaluated at 3.\nThe fifth element of the\
    \ returned array should be the derivative of the polynomial evaluated at 4.\n\
    The sixth element of the returned array should be the derivative of the polynomial\
    \ evaluated at 5.\nThe function should return an array of length equal to the\
    \ number of coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend", "    \n    derivative = zeros(length(xs))\n  \
    \  \n    derivative[1] = xs[1]\n    \n    for i in 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial using Horner's method.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.\nThe function\
    \ should take in a vector of coefficients and return its derivative.\nThe function\
    \ should return an array of coefficients.\nThe function should return an array\
    \ of coefficients.\nThe function should return an array of coefficients.\nThe\
    \ function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function ", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. For example, sum([1, 2, 3, 4]) should return 10. Make sure you\
    \ use sum and no other built-in functions.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n   \
    \ for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative of\
    \ a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend", "    \n    # Initialize a vector to store the\
    \ derivative\n    deriv = zeros(length(xs))\n    \n    # Compute the first derivative\n\
    \    deriv[1] = xs[1]\n    \n    # Compute the second derivative\n    for i =\
    \ 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    \n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.3>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.3>",
  "    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[2]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a polynomial\
    \ and returns the derivative polynomial. \nThe derivative polynomial is represented\
    \ as a vector of coefficients.\nThe first element of the vector is the coefficient\
    \ of x^0, the second element is the coefficient of x^1, the third element is the\
    \ coefficient of x^2, the fourth element is the coefficient of x^3, and so on.\
    \ \nThe derivative polynomial is represented as a vector of coefficients.\nThe\
    \ first element of the vector is the coefficient of x^0, the second element is\
    \ the coefficient of x^1, the third element is the coefficient of x^2, the fourth\
    \ element is the coefficient of x^3, and so on. \nThe derivative polynomial is\
    \ represented as a vector of coefficients.\nThe first element of the vector is\
    \ the coefficient of x^0, the second element is the coefficient of x^1, the third\
    \ element is the coefficient of x^2, the fourth element is the coefficient of\
    \ x^3, and so on. \nThe derivative polynomial is represented as a vector of coefficients.\n\
    The first element of the vector is the coefficient of x^0, the second element\
    \ is the coefficient of x^1, the third element is the coefficient of x^2, the\
    \ fourth element is the coefficient of x^3, and so on. \nThe derivative polynomial\
    \ is represented as a vector of coefficients.\nThe first element of the vector\
    \ is the coefficient of x^0, the second element is the coefficient of x^1, the\
    \ third element is the coefficient of x^2, the fourth element is the coefficient\
    \ of x^3, and so on. \nThe derivative polynomial is represented as a vector of\
    \ coefficients.\nThe first element of the vector is the coefficient of x^0, the\
    \ second element is the coefficient of x^1, the third element is the coefficient\
    \ of x^2, the fourth element is the coefficient of x^3, and so on. \nThe derivative\
    \ polynomial is represented as a vector of coefficients.\nThe first element of\
    \ the vector is the coefficient of x^0, the second element is the coefficient\
    \ of x^1, the third element is the coefficient of x^2, the fourth element is the\
    \ coefficient of x^3, and so on. \nThe derivative polynomial is represented as\
    \ a vector of coefficients.\nThe first element of the vector is the coefficient\
    \ of x^0, the second element is the coefficient of x^1, the third element is the\
    \ coefficient of x^2, the fourth element is the coefficient of x^3, and so on.\
    \ \nThe derivative polynomial is represented as a vector of ", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial using Horner's method.", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n    \
    \    deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.",
  "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. For example, sum([1, 2, 3]) should return 10.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = xs[1]\n    for x in\
    \ xs[2:end]\n        deriv = deriv * x + xs[1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ from 1 to n.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative of\
    \ a polynomial with n coefficients.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers in the list.\
    \ For example, sum([1, 2, 3]) should return 10. Make sure you use sum and no other\
    \ built-in functions. You can test your function by calling it on a few different\
    \ lists. What happens when you call your function on a list that has non-numeric\
    \ elements?", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the derivative of a polynomial of degree $n$. \n$$ f(x) = x^n + 2x^(n-1)\
    \ + ... + 1 $$\nThe function should take $n$ as a parameter. \nThe function should\
    \ return an array of $n$ elements.\nThe function should return $0$ if $n$ is less\
    \ than or equal to 0.\nThe function should return $0$ if $n$ is greater than or\
    \ equal to 1.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return\
    \ deriv\nend", "    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv +=\
    \ xs[i] * deriv\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.4>", "    deriv = zeros(length(xs)-1)\n    for i=1:length(xs)-1\n\
    \        deriv[i] = xs[i+1] - xs[i] * deriv[i-1]\n    end\n    return deriv\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the derivative of a polynomial given its coefficients.", "   \
    \ deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial with given coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers in the\
    \ list.", "    deriv = zeros(Int, length(xs)-1)\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative of\
    \ a polynomial given its coefficients.", "    derivative = zeros(length(xs))\n\
    \    derivative[1] = xs[1]\n    for i = 2:length(xs)\n        derivative[i] =\
    \ xs[i] - derivative[i-1]\n    end\n    return derivative\nend\n</cell>\n<code\
    \ language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.4>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(Int, length(xs))\n    for i = 1:length(xs)\n        deriv[i] = xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with coefficients\
    \ given as a vector. \nThe function should take as input a vector of coefficients\
    \ and output a vector of derivatives.\nThe function should return an error if\
    \ the input vector is empty or if the length of the input vector is not equal\
    \ to the number of coefficients.\nThe function should return an error if the input\
    \ vector contains non-integer coefficients.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains duplicate coefficients.\n\
    The function should return an error if the input vector contains coefficients\
    \ outside the range $[-1,1]$.\nThe function should return an error if the input\
    \ vector contains coefficients outside the range $[-1,1]$.\nThe function should\
    \ return an error if the input vector contains coefficients outside the range\
    \ $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains ",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend", "   \
    \ \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n\
    \    for i in 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n\
    \    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    derivative = zeros(length(xs)) \n    derivative[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    return derivative\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.3>", "    \n    derivative = zeros(length(xs)) \n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\nFor example,\
    \ sum([1, 2, 3, 4]) should return 10 (1 + 2 + 3 + 4).\nHint: Remember that you\
    \ can use the sum function.", "    deriv = zeros(length(xs)) \n    deriv[1] =\
    \ xs[1] \n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n \
    \   end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. Use a for loop\
    \ to do this.", "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend", " \
    \   \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n  \
    \  \n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    \n  \
    \  derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)-1)\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i\
    \ - 1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<text>\nNow let's try it out!", "    deriv = zeros(Int,\
    \ length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i]\
    \ = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(Int, length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    \n    # initialize\
    \ a vector to store the derivative\n    d::Vector{Int64} = zeros(length(xs))\n\
    \    \n    # loop through each element in the vector\n    for i in 1:length(xs)\n\
    \        # calculate the derivative of the ith element\n        d[i] = xs[i]\n\
    \        # loop through each element in the vector\n        for j in i+1:length(xs)\n\
    \            # calculate the derivative of the ith element and add it to the ith\
    \ element\n            d[i] += xs[j] * d[j]\n        end\n    end\n    \n    return\
    \ d\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(Int, length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i - 1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the integral of a polynomial\
    \ using trapezoidal rule. \nThe function should take as input a vector of coefficients\
    \ xs and a vector of points x. \nThe function should return an vector of integral\
    \ values ys.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function should return an error if the input is not of the correct\
    \ length.\nThe function should return an error if the input is not of the correct\
    \ type.\nThe function ", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n   \
    \ end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial using central differences.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n terms of the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$\
    \ and $F_1 = 1$. \nWrite a function that returns the first n terms of the Fibonacci\
    \ sequence using recursion.\nThe Fibonacci sequence is defined by the recurrence\
    \ \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function\
    \ that returns the first n terms of the Fibonacci sequence using recursion.\n\
    The Fibonacci sequence is defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2}\
    \ $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function that returns the first\
    \ n terms of the Fibonacci sequence using recursion.\nThe Fibonacci sequence is\
    \ defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and\
    \ $F_1 = 1$. \nWrite a function that returns the first n terms of the Fibonacci\
    \ sequence using recursion.\nThe Fibonacci sequence is defined by the recurrence\
    \ \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function\
    \ that returns the first n terms of the Fibonacci sequence using recursion.\n\
    The Fibonacci sequence is defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2}\
    \ $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function that returns the first\
    \ n terms of the Fibonacci sequence using recursion.\nThe Fibonacci sequence is\
    \ defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and\
    \ $F_1 = 1$. \nWrite a function that returns the first n terms of the Fibonacci\
    \ sequence using ", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n  \
    \  for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ derivative of a polynomial using Horner's method.", "    \n    derivative =\
    \ zeros(length(xs)) \n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the derivative of\
    \ a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n   \
    \ end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of number", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the integral of a\
    \ polynomial from 0 to infinity using trapezoidal rule. \nThe function should\
    \ take two arguments: \nthe polynomial coefficients xs and the lower limit of\
    \ the integral.\nThe function should return an array: \nthe integral of the polynomial\
    \ from 0 to infinity using the trapezoidal rule.\nThe function should return an\
    \ array of size $n+1$, where $n$ is the number of terms in the polynomial.\nThe\
    \ first element of the array should be the value of the integral from 0 to $x_0$,\
    \ \nthe second element should be the value of the integral from $x_0$ to $x_1$,\
    \ \nand so on. \nThe function should return an array of size $n+1$, where $n$\
    \ is the number of terms in the polynomial.\nThe first element of the array should\
    \ be the value of the integral from 0 to $x_0$, \nthe second element should be\
    \ the value of the integral from $x_0$ to $x_1$, \nand so on. \nThe function should\
    \ return an array of size $n+1$, where $n$ is the number of terms in the polynomial.\n\
    The first element of the array should be the value of the integral from 0 to $x_0$,\
    \ \nthe second element should be the value of the integral from $x_0$ to $x_1$,\
    \ \nand so on. \nThe function should return an array of size $n+1$, where $n$\
    \ is the number of terms in the polynomial.\nThe first element of the array should\
    \ be the value of the integral from 0 to $x_0$, \nthe second element should be\
    \ the value of the integral from $x_0$ to $x_1$, \nand so on. \nThe function should\
    \ return an array of size $n+1$, where $n$ is the number of terms in the polynomial.\n\
    The first element of the array should be the value of the integral from 0 to $x_0$,\
    \ \nthe second element should be the value of the integral from $x_0$ to $x_1$,\
    \ \nand so on. \nThe function should return an array of size $n+1$, where $n$\
    \ is the number of terms in the polynomial.\nThe first element of the array should\
    \ be the value of the integral from 0 to $x_0$, \nthe second element should be\
    \ the value of the integral from $x_0$ to $x_1$, \nand so on. \nThe function should\
    \ return an array of size ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.0>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.0>", "    derivative = zeros(length(xs)) \n    derivative[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise: Write a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i = 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise: Write a function that calculates the derivative of a polynomial\
    \ using Newton's method. Implement the Newton's method using Julia's built-in\
    \ function optimize.", "    \n    derivative = zeros(length(xs))\n    \n    for\
    \ i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = xs[1]\n    for x in xs\n        deriv\
    \ = deriv * x + xs[1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial using Newton's method.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes as input a polynomial and returns\
    \ the derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients.\nThe first element of the vector is the constant term of the\
    \ derivative.\nThe remaining elements are the coefficients of the polynomial evaluated\
    \ at xs.\nThe function should work for polynomials of any order.\nThe function\
    \ should work for polynomials of degree less than or equal to 2.\nThe function\
    \ should work for polynomials of degree greater than or equal to 1.\nThe function\
    \ should work for polynomials of degree 0.\nThe function should work for polynomials\
    \ of degree 1.\nThe function should work for polynomials of degree 2.\nThe function\
    \ should work for polynomials of degree 3.\nThe function should work for polynomials\
    \ of degree 4.\nThe function should work for polynomials of degree 5.\nThe function\
    \ should work for polynomials of degree 6.\nThe function should work for polynomials\
    \ of degree 7.\nThe function should work for polynomials of degree 8.\nThe function\
    \ should work for polynomials of degree 9.\nThe function should work for polynomials\
    \ of degree 10.\nThe function should work for polynomials of degree 11.\nThe function\
    \ should work for polynomials of degree 12.\nThe function should work for polynomials\
    \ of degree 13.\nThe function should work for polynomials of degree 14.\nThe function\
    \ should work for polynomials of degree 15.\nThe function should work for polynomials\
    \ of degree 16.\nThe function should work for polynomials of degree 17.\nThe function\
    \ should work for polynomials of degree 18.\nThe function should work for polynomials\
    \ of degree 19.\nThe function should work for polynomials of degree 20.\nThe function\
    \ should work for polynomials of degree 21.\nThe function should work for polynomials\
    \ of degree 22.\nThe function should work for polynomials of degree 23.\nThe function\
    \ should work for polynomials of degree 24.\nThe function should work for polynomials\
    \ of degree 25.\nThe function should work for polynomials of degree 26.\nThe function\
    \ should work for polynomials of degree 27.\nThe function should work for polynomials\
    \ of degree 28.\nThe function should work for polynomials of degree 29.\nThe function\
    \ should work for polynomials of degree 30.\nThe function should work for polynomials\
    \ of degree 31.\nThe function should work for polynomials of degree 32.\nThe function\
    \ should work for polynomials of degree 33.\nThe function should work for polynomials\
    \ of degree 34.\nThe function should work for polynomials of degree 35.\nThe function\
    \ should work for polynomials of degree 36.\nThe function should work for polynomials\
    \ of degree 37.\nThe function should work for polynomials of degree 38.\nThe function\
    \ should work for polynomials of degree 39.\nThe function should work for polynomials\
    \ of degree 40.\nThe function should work for polynomials of degree 41.\nThe function ",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    The function should only take in numbers that are integers.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] -\
    \ deriv[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the derivative of a polynomial given its coefficients.", " \
    \   \n    deriv = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        deriv[i]\
    \ = xs[i]\n    end\n    \n    return deriv\nend", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend", "    deriv = zeros(length(xs)) \n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n  \
    \  end\n    return deriv\nend", "    \n    derivative = zeros(length(xs))\n  \
    \  \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a polynomial and returns the\
    \ derivative of the polynomial in reverse order.", "    \n    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers.\
    \ \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers. \nFor\
    \ example, sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in ", "  \
    \  deriv = zeros(Int, length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nFor example, sum([1, 2, 3, 4]) should return\
    \ 10 (1 + 4 + 9 + 16).\nHint: use the sum function.", "    \n    derivative =\
    \ zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n\
    \        derivative[i] = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    derivative = zeros(length(xs))\n\
    \    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i] =\
    \ xs[i] * derivative[i-1]\n    end\n    return derivative\nend", "    deriv =\
    \ zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i]\
    \ = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that computes the derivative of a polynomial given its coefficients.\nThe function\
    \ should take in a vector of coefficients and return a vector of derivatives.\n\
    The function should return an error if the input vector is empty.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\nThe function\
    \ should return an error if the input vector is not of length 3.\n", "    \n \
    \   derivative = zeros(length(xs)-1)\n    \n    for i = 1:length(xs)-1\n     \
    \   derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    \n    derivative = zeros(length(xs))\
    \ \n    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n \
    \   \n    return derivative\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n  \
    \  end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ derivative of a polynomial given its coefficients.", "    derivative = zeros(length(xs))\
    \ \n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i]\
    \ = xs[i] - derivative[i-1]\n    end\n    return derivative\nend", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    deriv[2] = xs[2]\n    for i\
    \ = 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\n\
    end", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs)-1)\n    \n\
    \    for i = 1:length(xs)-1\n        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the integral of a polynomial from 0 to infinity using trapezoidal\
    \ rule.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a polynomial and returns the derivative of\
    \ the polynomial. \nThe function should take in a vector of coefficients xs and\
    \ return a vector of coefficients ds \nwhere ds[0] is the derivative of xs[0]\
    \ and so on.\nHint: Use a for loop to iterate through the vector. \nHint: Use\
    \ a for loop to iterate through the vector. \nHint: Use a for loop to iterate\
    \ through the vector. \nHint: Use a for loop to iterate through the vector. \n\
    Hint: Use a for loop to iterate through the vector. \nHint: Use a for loop to\
    \ iterate through the vector. \nHint: Use a for loop to iterate through the vector.\
    \ \nHint: Use a for loop to iterate through the vector. \nHint: Use a for loop\
    \ to iterate through the vector. \nHint: Use a for loop to iterate through the\
    \ vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use a\
    \ for loop to iterate through the vector. \nHint: Use a for loop to iterate through\
    \ the vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use\
    \ a for loop to iterate through the vector. \nHint: Use a for loop to iterate\
    \ through the vector. \nHint: Use a for loop to iterate through the vector. \n\
    Hint: Use a for loop to iterate through the vector. \nHint: Use a for loop to\
    \ iterate through the vector. \nHint: Use a for loop to iterate through the vector.\
    \ \nHint: Use a for loop to iterate through the vector. \nHint: Use a for loop\
    \ to iterate through the vector. \nHint: Use a for loop to iterate through the\
    \ vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use a\
    \ for loop to iterate through the vector. \nHint: Use a for loop to iterate through\
    \ the vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use\
    \ a for loop to iterate through the vector. \nHint: Use a for loop to iterate\
    \ through the vector. \nHint: Use a for loop to iterate through the vector. \n\
    Hint: Use a for loop to iterate through the vector. \nHint: Use a for loop to\
    \ iterate through the vector. \nHint: Use a for loop to iterate through the vector.\
    \ \nHint: Use a for loop to iterate through the vector. ", "    deriv = zeros(length(xs)-1)\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ polynomial and returns the derivative polynomial in its simplest form. \nThe\
    \ simplest form is one in which all coefficients are non-zero and are in ascending\
    \ order.\nFor example, \n$$\nx^3 + 2x^2 + 3x + 4\n$$\nhas derivative \n$$\n3x^2\
    \ + 2x + 1\n$$\nThe function should return this derivative polynomial.\nHint:\
    \ Use a for loop to iterate through the coefficients and use if statements to\
    \ check whether the coefficient is non-zero.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\nend", "   \
    \ deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] *\
    \ deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial with coefficients in reverse order.\
    \ \nFor example, derivative([3, 1, 2, 4, 5]) should return [1, 4, 12, 20].", " \
    \   deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a polynomial\
    \ and returns the derivative of the polynomial. \nHint: Use a for loop to iterate\
    \ through the polynomial", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs)-1)\n    for i\
    \ = 1:length(xs)-1\n        deriv[i] = xs[i+1] - xs[i] * deriv[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the derivative of a polynomial\
    \ with n terms.\nThe function should take in an array of integers and return an\
    \ array of integers.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function should return an array of integers containing\
    \ the derivative.\nThe function ", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a polynomial and returns the derivative of the polynomial in the\
    \ same form.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for\
    \ i = 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return\
    \ deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    deriv\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv = deriv * xs[i] + xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a polynomial and returns the\
    \ derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients. \nThe first element of the vector is the coefficient for the\
    \ constant term in the polynomial. \nThe rest of the elements in the vector are\
    \ the coefficients for the terms other than the first one. \nFor example, if the\
    \ polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is $[1,\
    \ 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and returns\
    \ the derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients. \nThe first element of the vector is the coefficient for the\
    \ constant term in the polynomial. \nThe rest of the elements in the vector are\
    \ the coefficients for the terms other than the first one. \nFor example, if the\
    \ polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is $[1,\
    \ 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and returns\
    \ the derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients. \nThe first element of the vector is the coefficient for the\
    \ constant term in the polynomial. \nThe rest of the elements in the vector are\
    \ the coefficients for the terms other than the first one. \nFor example, if the\
    \ polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is $[1,\
    \ 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and returns\
    \ the derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients. \nThe first element of the vector is the coefficient for the\
    \ constant term in the polynomial. \nThe rest of the elements in the vector are\
    \ the coefficients for the terms other than the first one. \nFor example, if the\
    \ polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is $[1,\
    \ 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and returns\
    \ the derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients. \nThe first element of the vector is the coefficient for the\
    \ constant term in the polynomial. \nThe rest of the elements in the vector are\
    \ the coefficients for the terms other than the first one. \nFor example, if the\
    \ polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is $[1,\
    \ 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and returns\
    \ the derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients. \nThe first element of the vector is the coefficient for the\
    \ constant term in the polynomial. \nThe rest of the elements in the ", "    \n\
    \    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n \
    \   for i = 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n  \
    \  end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    \n  \
    \  derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = xs[1]\n    for i in\
    \ 2:length(xs)\n        deriv += xs[i] * deriv\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative of\
    \ a polynomial with given coefficients.", "    deriv = zeros(length(xs)-1)\n \
    \   for i = 1:length(xs)-1\n        deriv[i] = xs[i+1] - xs[i] * xs[i+1]\n   \
    \ end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with coefficients given as a vector of integers.\
    \ \nThe function should return the same vector as the derivative function above.\n\
    Hint: Use a for loop.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial with given coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial with n coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n    \
    \    deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    The function should take in a vector of coefficients and return a vector of coefficients.\n\
    The function should return an error if the input vector is empty.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a polynomial and returns\
    \ the derivative of the polynomial. \nThe function should take in a vector of\
    \ coefficients and return another vector of coefficients.\nThe function should\
    \ return an error if the input vector is of length less than 2.\nThe function\
    \ should return an error if the input vector is of length greater than 2.\nThe\
    \ function should return an error if the input vector is of length not equal to\
    \ 2.\nThe function should return an error if the input vector contains non-integer\
    \ values.\nThe function should return an error if the input vector contains negative\
    \ values.\nThe function should return an error if the input vector contains values\
    \ greater than 1.\nThe function should return an error if the input vector contains\
    \ values less than 0.\nThe function should return an error if the input vector\
    \ contains values equal to 0.\nThe function should return an error if the input\
    \ vector contains values equal to 1.\nThe function should return an error if the\
    \ input vector contains values equal to 2.\nThe function should return an error\
    \ if the input vector contains values equal to 3.\nThe function should return\
    \ an error if the input vector contains values equal to 4.\nThe function should\
    \ return an error if the input vector contains values equal to 5.\nThe function\
    \ should return an error if the input vector contains values equal to 6.\nThe\
    \ function should return an error if the input vector contains values equal to\
    \ 7.\nThe function should return an error if the input vector contains values\
    \ equal to 8.\nThe function should return an error if the input vector contains\
    \ values equal to 9.\nThe function should return an error if the input vector\
    \ contains values equal to 10.\nThe function should return an error if the input\
    \ vector contains values equal to 11.\nThe function should return an error if\
    \ the input vector contains values equal to 12.\nThe function should return an\
    \ error if the input vector contains values equal to 13.\nThe function should\
    \ return an error if the input vector contains values equal to 14.\nThe function\
    \ should return an error if the input vector contains values equal to 15.\nThe\
    \ function should return an error if the input vector contains values equal to\
    \ 16.\nThe function should return an error if the input vector contains values\
    \ equal to 17.\nThe function should return an error if the input vector contains\
    \ values equal to 18.\nThe function should return an error if the input vector\
    \ contains values equal to 19.\nThe function should return an error if the input\
    \ vector contains values equal to 20.\nThe function should return an error if\
    \ the input vector contains values equal to 21.\nThe function should return an\
    \ error if the input vector contains values equal to 22.\nThe function should\
    \ return an error if the input vector contains values equal to 23.\nThe function\
    \ should return an error if the input vector contains values equal to 24.\nThe\
    \ function should ", "    \n    derivative = zeros(length(xs))\n    \n    derivative[1]\
    \ = xs[1]\n    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial with coefficients given as a vector\
    \ of integers. \nThe function should take as input a vector of integers representing\
    \ the coefficients of a polynomial.\nThe function should return the same vector\
    \ but with the derivative of the polynomial computed.\nThe function should return\
    \ an error if the input vector is empty.\nThe function should return an error\
    \ if the input vector has less than two elements.\nThe function should return\
    \ an error if the input vector has more than two elements.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    \n    derivative = zeros(length(xs))\
    \ \n    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n \
    \   \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    derivative\
    \ = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i = 2:length(xs)\n \
    \       derivative[i] = xs[i] - xs[i-1]\n    end\n    return derivative\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial using\
    \ central differences.", "    \n    derivative = zeros(length(xs))\n    \n   \
    \ for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    derivative = zeros(length(xs))\n    \n    derivative[1]\
    \ = xs[1]\n    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n   \
    \     deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with given coefficients.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] * deriv[i\
    \ - 1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ polynomial and returns the derivative of the polynomial. \nThe function should\
    \ take in a vector of coefficients and return the vector of coefficients of the\
    \ derivative.\nThe function should return an error if the input vector is empty\
    \ or if the length of the input vector is not equal to the number of coefficients\
    \ in the polynomial.\nThe function should return an error if the input vector\
    \ is not in the form of a vector of coefficients.\nThe function should return\
    \ an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a ", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    deriv = zeros(Int, length(xs)-1)\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers in the list.\n\
    For example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 +\
    \ 16).\nWrite a function that takes in a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should\
    \ return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 +\
    \ 16).\nWrite a function that takes in a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should\
    \ return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 +\
    \ 16).\nWrite a function that takes in a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should\
    \ return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 +\
    \ 16).\nWrite a function that takes in a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should\
    \ return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that\
    \ takes in ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial with n terms.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial with given coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n    \
    \    deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial using central differences.", "    derivative\
    \ = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        derivative[i] = xs[i] - derivative[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the integral of a polynomial\
    \ using trapezoidal method.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the integral of a polynomial function using trapezoidal rule.", "    deriv =\
    \ zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n      \
    \  deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n<text>\n\
    Now let's try it out on a few examples:", "    deriv = zeros(length(xs))\n   \
    \ deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend", "    deriv = xs[1]\n    for x in xs[2:end]\n\
    \        deriv += x\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    \n  \
    \  derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i]\
    \ = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial of degree $n$ with respect to $x$.",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the derivative of a polynomial using Horner's method.",
  "    \n    # xs is a vector\n    # xs[0] is the coefficient of x^0\n    # xs[1]\
    \ is the coefficient of x^1\n    # xs[2] is the coefficient of x^2\n    # ...\n\
    \    # xs[len(xs)-1] is the coefficient of x^len(xs)\n    \n    # Return derivative\
    \ of polynomial\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1)\
    \ + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1)\
    \ + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1)\
    \ + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nNow let's use our derivative function to find the derivative of our polynomial\
    \ $f(x) = x^3 + x^2 + x + 1$:", "    \n    derivative = zeros(length(xs))\n  \
    \  \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i]\
    \ * deriv[i-1]\n    end\n    return deriv\nend", "    deriv = xs[1]\n    for x\
    \ in xs[2:end]\n        deriv = deriv * x + xs[1]\n    end\n    return deriv\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the derivative of a polynomial given its coefficients.",
  "    \n    # initialize a vector to store the derivative\n    d::Vector{Int64} =\
    \ zeros(length(xs))\n    \n    # loop through each element of xs\n    for i in\
    \ 1:length(xs)\n        # compute the product of xs and i\n        product = xs[i]\
    \ * i\n        # compute the sum of xs and product\n        sum = xs[i] + product\n\
    \        # update the ith element of d\n        d[i] = sum\n    end\n    return\
    \ d\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\
    \ \n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in ", "  \
    \  deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the derivative of\
    \ a polynomial using Horner's method.", "    \n    derivative = zeros(length(xs))\
    \ \n    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n \
    \   \n    return derivative\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
