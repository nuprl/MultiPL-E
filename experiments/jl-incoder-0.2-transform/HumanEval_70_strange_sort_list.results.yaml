language: jl
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    \n   \
    \ minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst[minimum:maximum]\n    \n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ymwh80c.jl:25\nin expression starting at\
    \ /tmp/tmp1ymwh80c.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if the list has duplicates.\n<|/ c |>\n<| c |>\n\
    It does work if you sort the list first. `sort(lst)` sorts the list in-place.\n\
    <|/ c |>\n<| c |>\nYes, but `sort` returns a new list with the sorted elements.\
    \ So `sort(lst)` returns a new list with the sorted elements. `sort(sort(lst))`\
    \ returns a new list with the sorted elements. `sort(sort(sort(lst)))` returns\
    \ a new list with the sorted elements. `sort(sort(sort(sort(lst))))` returns a\
    \ new list with the sorted elements. `sort(sort(sort(sort(sort(lst)))))` returns\
    \ a new list with the sorted elements. `sort(sort(sort(sort(sort(sort(sort(lst)))))`\
    \ returns a new list with the sorted elements. `sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(lst))))))))`\
    \ returns a new list with the sorted elements. `sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoakjdpxc.jl:19\nin expression starting at\
    \ /tmp/tmpoakjdpxc.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpymrn7o4t.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpymrn7o4t.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:25\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:26\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:27\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:30\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst.[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the list sorted in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavwi8fbk.jl:27\nin expression starting at\
    \ /tmp/tmpavwi8fbk.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum_index = findfirst(x -> x == minimum, lst, 0)\n    maximum_index\
    \ = findfirst(x -> x == maximum, lst, length(lst))\n    \n    lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is even, false otherwise. \nWrite a function that returns true if the given\
    \ number is odd, false otherwise. \nWrite a function that returns the factorial\
    \ of a given number. \nWrite a function that returns the factorial of a given\
    \ number modulo 10. \nWrite a function that returns the factorial of a given number\
    \ modulo 100. \nWrite a function that returns the factorial of a given number\
    \ modulo 1000. \nWrite a function that returns the factorial of a given number\
    \ modulo 10000. \nWrite a function that returns the factorial of a given number\
    \ modulo 100000. \nWrite a function that returns the factorial of a given number\
    \ modulo 1000000. \nWrite a function that returns the factorial of a given number\
    \ modulo 10000000. \nWrite a function that returns the factorial of a given number\
    \ modulo 100000000. \nWrite a function that returns the factorial of a given number\
    \ modulo 1000000000. \nWrite a function that returns the factorial of a given\
    \ number modulo 10000000000. \nWrite a function that returns the factorial of\
    \ a given number modulo 100000000000. \nWrite a function that returns the factorial\
    \ of a given number modulo 1000000000000. \nWrite a function that returns the\
    \ factorial of a given number modulo 10000000000000. \nWrite a function that returns\
    \ the factorial of a given number modulo 100000000000000. \nWrite a function that\
    \ returns the factorial of a given number modulo 1000000000000000. \nWrite a function\
    \ that returns the factorial of a given number modulo 10000000000000000. \nWrite\
    \ a function that returns the factorial of a given number modulo 100000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 1000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 10000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 100000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 1000000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 10000000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 100000000000000000000000.\
    \ \nWrite a function that returns the factorial \nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_7tvoekm.jl:28\nin expression starting at\
    \ /tmp/tmp_7tvoekm.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0 \n        return [] \n    end\n    \n    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z8b2irs.jl:117\nin expression starting at\
    \ /tmp/tmp_z8b2irs.jl:117\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpymrn7o4t.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpymrn7o4t.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:25\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:26\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:27\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:30\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of integers sorted from\
    \ smallest to largest.\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcg_ls8k.jl:19\nin expression starting at\
    \ /tmp/tmprcg_ls8k.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't work for `strange_sort_list([5, 5, 5, 5])` because\
    \ `sort` sorts in ascending order and `reverse` reverses the order of the elements.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kk7vfdc.jl:19\nin expression starting at\
    \ /tmp/tmp_kk7vfdc.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    \n   \
    \ if length(lst) == 0\n        return lst\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp57209k76.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp57209k76.jl:1\n\
    in expression starting at /tmp/tmp57209k76.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers and returns the same vector, except with all\
    \ the integers sorted from smallest to largest.\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1in8ikb.jl:19\nin expression starting at\
    \ /tmp/tmpd1in8ikb.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpre4cxnp2.jl:1\nin expression starting at /tmp/tmpre4cxnp2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    \n   \
    \ lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n        \n\
    \        if lst[i] > lst[i + 1]\n            \n            lst[i], lst[i + 1]\
    \ = lst[i + 1], lst[i]\n            \n            i += 1\n            \n     \
    \   elseif lst[i] < lst[i + 1]\n            \n            lst[i], lst[i + 1] =\
    \ lst[i + 1], lst[i]\n            \n            i += 1\n            \n       \
    \ else\n            \n            i += 1\n        end\n    end\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3cl6va5.jl:42\nin expression starting at\
    \ /tmp/tmpr3cl6va5.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst) \n    maximum =\
    \ maximum(lst) \n    \n    lst = sort(lst) \n    \n    lst = lst.[minimum:maximum]\
    \ \n    \n    return lst \nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwey_hn9.jl:27\nin expression starting at\
    \ /tmp/tmpcwey_hn9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a dscore=2 |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a tags=julia,sorting,arrays |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| a tags=julia,sorting,arrays\
    \ |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting,arrays |>\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a tags=julia,sorting,arrays |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| a |>\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptemen6n6.jl:19\nin expression starting at\
    \ /tmp/tmptemen6n6.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpymrn7o4t.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpymrn7o4t.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:25\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:26\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:27\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:30\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a list of integers and returns a new list with all the even numbers first,\
    \ then all the odd numbers, then all the numbers that are not even.\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdumyh7vu.jl:19\nin expression starting at\
    \ /tmp/tmpdumyh7vu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = min(lst) \n    maximum = max(lst)\
    \ \n    \n    middle = minimum + maximum/2 \n    \n    lst1 = strange_sort_list(lst[minimum:middle])\
    \ \n    lst2 = strange_sort_list(lst[middle:maximum]) \n    \n    lst3 = lst1\
    \ + lst2 \n    \n    return lst3 \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzrm9vht.jl:30\nin expression starting at\
    \ /tmp/tmpmzrm9vht.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpymrn7o4t.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpymrn7o4t.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:25\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:26\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:27\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpymrn7o4t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpymrn7o4t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymrn7o4t.jl:30\n  Expression: ca"
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>>\
    \ strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5,\
    \ 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\
    \"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a function that sorts any list with any number\
    \ of elements:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1gm74jhj.jl:19\nin expression starting at\
    \ /tmp/tmp1gm74jhj.jl:19\n"
  stdout: ''
