name: HumanEval_84_solve
language: jl
prompt: "\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\
  \    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"110\"\
  \n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n        @N integer\n \
  \            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
  \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
  \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
  )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
completions: ["    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n  \
    \      return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n  \
    \  \n    digits = string(\"0\", N)\n    \n    digits = digits[2:end]\n    \n \
    \   digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[", "    if N < 0\n        error(\"\
    N must be positive\")\n    end\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ n in 1:N\n        digits[n] = digits[n-1] + digits[n-2]\n    end\n    \n   \
    \ return join(digits, \"\")\nend\n</cell>\n<text>\nExercise 3\nWrite a Julia function\
    \ to compute the sum of all digits of an integer.", "    \n    if N < 0\n    \
    \    return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum += N\
    \ % 2\n        N /= 2\n    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(5)\n</cell>\n<code language=julia-1.5>\n\
    solve(4)\n</cell>\n<code language=julia-1.5>\nsolve(3)\n</cell>\n<code language=julia-1.5>\n\
    solve(7)\n</cell>\n<code language=julia-1.5>\nsolve(6)\n</cell>\n<code language=julia-1.5>\n\
    solve(8)\n</cell>\n<code language=julia-1.5>\nsolve(9)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(11)\n</cell>\n<code language=julia-1.5>\n\
    solve(12)\n</cell>\n<code language=julia-1.5>\nsolve(13)\n</cell>\n<code language=julia-1.5>\n\
    solve(14)\n</cell>\n<code language=julia-1.5>\nsolve(15)\n</cell>\n<code language=julia-1.5>\n\
    solve(16)\n</cell>\n<code language=julia-1.5>\nsolve(17)\n</cell>\n<code language=julia-1.5>\n\
    solve(18)\n</cell>\n<code language=julia-1.5>\nsolve(19)\n</cell>\n<code language=julia-1.5>\n\
    solve(20)\n</cell>\n<code language=julia-1.5>\nsolve(21)\n</cell>\n<code language=julia-1.5>\n\
    solve(22)\n</cell>\n<code language=julia-1.5>\nsolve(23)\n</cell>\n<code language=julia-1.5>\n\
    solve(24)\n</cell>\n<code language=julia-1.5>\nsolve(25)\n</cell>\n<code language=julia-1.5>\n\
    solve(26)\n</cell>\n<code language=julia-1.5>\nsolve(27)\n</cell>\n<code language=julia-1.5>\n\
    solve(28)\n</cell>\n<code language=julia-1.5>\nsolve(29)\n</cell>\n<code language=julia-1.5>\n\
    solve(30)\n</cell>\n<code language=julia-1.5>\nsolve(31)\n</cell>\n<code language=julia-1.5>\n\
    solve(32)\n</cell>\n", "    if N < 0\n        return \"0\"\n    \n    digits =\
    \ zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i]\
    \ = digits[i-1] * 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    solve(N, digits)\n    \n    Recursive function\
    \ that solves the problem of finding the sum of its digits in binary \n    \n\
    \    Variables:\n        @N integer\n        @digits array of integers\n     \
    \        Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n\"\"\"", "    if N < 0\n        return \"0\"\n    if N < 10\n\
    \        return String(N)\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   digits = solve(digits)\n    \n    return digits + String(N)\nend", "    \n\
    \    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\
    \n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits = string(\"\
    0\", N)\n    \n    for d in digits[2:end]\n        digits[2] = digits[2] + digits[1]\n\
    \        digits[1] = digits[1] * 2\n    \n    return digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 3\nGiven\
    \ a positive integer N, return the sum of its digits in binary.\n    \n    Example\n\
    \    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"110\"\n    >>> solve(147)\n\
    \    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n\
    \    \"\"\"", "    \n    if N < 0\n        error(\"N must be positive\")\n   \
    \ end\n    \n    digits = zeros(Int, 10)\n    \n    for i = 1:10\n        digits[i]\
    \ = N % 2\n        N = N / 2\n    end\n    \n    digits[end] = N % 2\n    \n \
    \   return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called solve that\
    \ takes an integer N and returns the sum of the digits of N in binary.", "   \
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = String[]\n    \n  \
    \  digits = digits[0..N-1]\n    \n    sum = 0\n    \n    for i in digits\n   \
    \     sum = sum + i\n    \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7", "    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits(N)\n    \n    binary = \"\"\n    \n    for digit in\
    \ digits\n        binary += digit\n    \n    return binary\nend", "    \n    digits\
    \ = zeros(Int, 10)\n    \n    for i in 1:N\n        digits[i] = digits[i-1] +\
    \ N % 10\n        N = N / 10\n    end\n    \n    digits = digits[digits[end] ==\
    \ 0]\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(5) == \"1010\"\n@assert solve(7) == \"11101\"\n@assert solve(9)\
    \ == \"11110\"\n@assert solve(10) == \"11111\"\n@assert solve(15) == \"111111\"\
    \n@assert solve(17) == \"1111111\"\n@assert solve(18) == \"11111110\"\n@assert\
    \ solve(20) == \"111111110\"\n@assert solve(25) == \"1111111101\"\n@assert solve(30)\
    \ == \"11111111011\"\n@assert solve(35) == \"111111110111\"\n@assert solve(40)\
    \ == \"1111111101111\"\n@assert solve(45) == \"11111111011111\"\n@assert solve(50)\
    \ == \"111111110111111\"\n@assert solve(55) == \"1111111101111111\"\n@assert solve(60)\
    \ == \"11111111011111111\"\n@assert solve(70) == \"111111110111111111\"\n@assert\
    \ solve(75) == \"1111111101111111110\"\n@assert solve(80) == \"11111111011111111110\"\
    \n@assert solve(90) == \"111111110111111111101\"\n@assert solve(100) == \"1111111101111111111010\"\
    \n@assert solve(1000) == \"11111111011111111110100\"\n@assert solve(10000) ==\
    \ \"111111110111111111101000\"\n@assert solve(100000) == \"1111111101111111111010000\"\
    \n@assert solve(1000000) == \"11111111011111111110100000\"\n@assert solve(10000000)\
    \ == \"111111110111111111101000000\"\n@assert solve(100000000) == \"1111111101111111111010000000\"\
    \n@assert solve(1000000000) == \"11111111011111111110100000000\"\n@assert solve(10000000000)\
    \ == \"111111110111111111101000000000\"\n@assert solve(100000000000) == \"1111111101111111111010000000000\"\
    \n@assert solve(1000000000000) == \"11111111011111111110100000000000\"\n@assert\
    \ solve(10000000000000) == \"111111110111111111101000000000000\"\n@assert solve(100000000000000)\
    \ == \"1111111101111111111010000000000000\"\n@assert solve(1000000000000000) ==\
    \ \"11111111011", "    if N < 0\n        return \"-1\"\n    if N == 0 \n     \
    \   return \"0\"\n    if N == 1 \n        return \"1\"\n    \n    digits = N %\
    \ 10\n    N = N / 10\n    \n    digits = solve(digits)\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = ", " \
    \   \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n       \
    \ sum += d\n    \n    return string(digits, sum)\nend", "    if N < 0\n      \
    \  error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int, N)\n\
    \    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N\
    \ / 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1000) == \"1\"\n@assert solve(150) == \"110\"\n@assert solve(147)\
    \ == \"1100\"\n</cell>\n<text>\nProblem 7: Binary to Decimal\nA binary number\
    \ is represented in Julia as a vector of 1s and 0s, where each element of the\
    \ vector is either 1 or 0. The binary number represented is $10101$. How many\
    \ decimal digits does it have?", "    \n    if N < 0\n        return \"-1\"\n\
    \    \n    if N == 0 \n        return \"0\"\n    \n    if N == 1\n        return\
    \ \"1\"\n    \n    if N > 1\n        \n        digits = floor(log10(N))\n    \
    \    \n        binary = \"\"\n        \n        for i = digits+1 downto 1 do\n\
    \            \n            binary = string(binary, digits, digits-i) + string(i,\
    \ digits)\n            \n        end\n        \n        return binary\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Given a positive integer N, return\
    \ the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n\
    \    \"1\"\n    >>> solve(150)\n    \"110\"\n    >>> solve(147)\n    \"1100\"\n\
    \    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264\
    \ N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"",
  "    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    binary\
    \ = \"\"\n    \n    for d in digits(N)\n        binary += d\n    end\n    \n \
    \   return binary\nend", "    if N < 0\n        return \"-1\"\n    \n    digits\
    \ = N % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    binary =\
    \ \"\"\n    \n    while N > 0\n        digit = N % 10\n        N = N / 10\n  \
    \      binary = digit + binary\n    end\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5",
  "    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1]\
    \ + N % 2\n        N = N / 2\n    end\n    \n    digits[N] = digits[N] + 1\n \
    \   \n    return join(digits, \"\")\nend\n</cell>\n<text>\nProblem 3\nWrite a\
    \ Julia function that takes a positive integer N and returns the number of digits\
    \ in the binary representation of N.", "    if N < 0\n        error(\"N must be\
    \ positive\")\n    end\n    \n    binary = zeros(Int, N+1)\n    binary[1] = 1\n\
    \    \n    for i = 2:N\n        binary[i] = binary[i-1]*10 + N % 2\n        N\
    \ = N/2\n    end\n    \n    return string(binary)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100001\"\
    \n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\n@assert solve(31)\
    \ == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33) == \"100006\"\
    \n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\n@assert solve(36)\
    \ == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38) == \"100011\"\
    \n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\n@assert solve(41)\
    \ == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43) == \"100016\"\
    \n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\n@assert solve(46)\
    \ == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48) == \"100021\"\
    \n@assert solve(49) == \"100022\"\n@assert solve(50) == \"100023\"\n@assert solve(51)\
    \ == \"100024\"\n@assert solve(", "    \n    digits = digits(N)\n    \n    binary\
    \ = \"\"\n    \n    for digit in digits\n        binary += digit\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell", "    if N\
    \ < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N ==\
    \ 1\n        return \"1\"\n    \n    digits = digits(N)\n    \n    digits_str\
    \ = join(digits, \"\")\n    \n    digits_str = reverse(digits_str)\n    \n   \
    \ digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(",
  "    if N < 0\n        return \"0\"\n    \n    digits = String[Int64]()\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n", "    \n    digits = digits(N)\n    \n \
    \   if N == 0 \n        return \"0\"\n    \n    if N < 0\n        return \"-1\"\
    \n    \n    if N < 10\n        return digits[1]\n    \n    digits_sum = 0\n  \
    \  \n    for i in digits[2:end]\n        digits_sum += digits(i)\n    \n    return\
    \ digits_sum.to_s\nend\n</cell>\n<code language=julia-1.5>", "    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = String[1..N]\n    \n    binary =\
    \ \"\"\n    \n    for digit in digits\n        binary += digit\n    end\n    \n\
    \    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 3\nGiven a positive integer N, return the number of trailing\
    \ zeroes in N's binary representation.", "    if N < 0\n        return \"0\"\n\
    \    if N < 10\n        return string(\"0\", N)\n    \n    digits = zeros(Int,\
    \ 10)\n    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1]\
    \ * 2\n    end\n    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same backward\
    \ as forward, for example, 9876 is a palindrome while 98754321 is a palindrome.\
    \ Find the largest palindrome made from the product of two 3-digit numbers.",
  "    \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits = digits +\
    \ solve(digits)\n    \n    return digits\nend", "    if N < 0\n        return\
    \ \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits\
    \ = digits(N)\n    \n    binary = \"\"\n    \n    for digit in digits\n      \
    \  binary += string(\"1\", digit)\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\nsolve(176)\n</cell>\n<code language=julia-1.5>\n\
    solve(177)\n</cell>\n", "    if N < 0\n        return \"0\"\n    if N < 10\n \
    \       return string(\"1\",N)\n    if N < 100\n        return string(\"10\",N)\n\
    \    if N < 1000\n        return string(\"100\",N)\n    if N < 10000\n       \
    \ return string(\"1000\",N)\n    if N < 100000\n        return string(\"10000\"\
    ,N)\n    if N < 1000000\n        return string(\"100000\",N)\n    if N < 10000000\n\
    \        return string(\"1000000\",N)\n    if N < 100000000\n        return string(\"\
    10000000\",N)\n    if N < 1000000000\n        return string(\"100000000\",N)\n\
    \    if N < 10000000000\n        return string(\"1000000000\",N)\n    if N < 100000000000\n\
    \        return string(\"10000000000\",N)\n    if N < 1000000000000\n        return\
    \ string(\"100000000000\",N)\n    if N < 10000000000000\n        return string(\"\
    1000000000000\",N)\n    if N < 100000000000000\n        return string(\"10000000000000\"\
    ,N)\n    if N < 1000000000000000\n        return string(\"100000000000000\",N)\n\
    \    if N < 10000000000000000\n        return string(\"1000000000000000\",N)\n\
    \    if N < 100000000000000000\n        return string(\"10000000000000000\",N)\n\
    \    if N < 1000000000000000000\n        return string(\"100000000000000000\"\
    ,N)\n    if N < 10000000000000000000\n        return string(\"1000000000000000000\"\
    ,N)\n    if N < 100000000000000000000\n        return string(\"10000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000\n        return string(\"100000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000\n        return string(\"1000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000\n        return string(\"10000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000\n        return string(\"100000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000\n        return string(\"10000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000\n        return string(\"100000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000\n        return string(\"1000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000\n        return string(\"10000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000\n        return string(\"100000000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000000\n        return string(\"1000000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000000\n        return string(\"10000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\n        return string(\"100000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000", "    \n    digits = digits(N)\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return digits[0]\n    \n    digits = digits(N)\n\
    \    \n    sum = 0\n    \n    for i in digits\n        sum += i\n    \n    return\
    \ digits_to_binary(sum)\nend\n</cell>\n<code language=julia-1.5>", "    if N <\
    \ 0\n        error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    return join(digits, \"\")\nend", "    if N < 0\n\
    \        error(\"N must be positive\")\n    end\n    \n    binary = \"\"\n   \
    \ \n    for i = 1:N\n        binary = binary + string(i, 2)\n    end\n    \n \
    \   return binary\nend\n</cell>\n<text>\nProblem 3\nWrite a Julia function that\
    \ takes a positive integer N and returns the number of digits in binary representation\
    \ of N.", "    if N < 0\n        return \"0\"\n    \n    digits = String[1..N]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[digits[digits.length-1]\
    \ == \"1\"]\n    \n    digits = digits[digits.length..-1]\n    \n    digits =\
    \ digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n  \
    \  \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digits.length..-1]\n\
    \    \n    digits = digits[digits.length..-1]\n    \n    digits = digits[digit",
  "    \n    if N < 0\n        error(\"N must be positive\")\n    \n    if N == 0\n\
    \        return \"0\"\n    \n    if N < 10\n        return string(N)\n    \n \
    \   digits = string(0)\n    \n    for d in digits(N)\n        digits = digits\
    \ + string(d*2)\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.", "    if N < 0\n        return \"-1\"\n    if N == 0 \n\
    \        return \"0\"\n    if N == 1 \n        return \"1\"\n    \n    digits\
    \ = N % 10\n    N = N / 10\n    \n    digits = solve(digits)\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digit",
  "    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n    end\n\
    \    if N == 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n\
    \    digits[1] = 1\n    \n    sum = 0\n    for i in 1:N\n        digit = digits[i]\n\
    \        sum += digit\n        digits[i] = digit\n    end\n    \n    return string(digits)\n\
    end", "    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n       \
    \ return tostring(N)\n    \n    digits = tostring(N)\n    \n    sum = 0\n    \n\
    \    for i in digits\n        sum += tointeger(i)\n    \n    return tostring(sum)\n\
    end", "    if N == 0 \n        return \"0\"\n    if N < 0 \n        return \"\
    0\"\n    if N < 10 \n        return string(\"0\", N)\n    \n    digits = string(\"\
    0\", N)\n    \n    for i = 2:N\n        digits = digits[1:] + string(\"1\", N\
    \ - i)\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nThe Fibonacci sequence is defined by the\
    \ formula:\n$$ Fn = \\begin{cases} 1 & n = 0 \\ 1 & n = 1 \\ F{n-1} + F_{n-2}\
    \ & n > 1 \\end{cases}$$\nwhere $F_0=1$ and $F_1=2$.\nThe first few terms of the\
    \ sequence are $F_0=1, F_1=2$. \nBy iterating starting with $F_0=2$ and $F_1=3$,\
    \ \nwe generate the following sequence:\n$$ F_n = F_{n-1} + F_{n-2} + F_{n-3}\
    \ + ... + F_1 $$\nFor example, \n$$ F_5 = F_4 + F_3 + F_2 + F_1 + F_0 $$\nHence\
    \ $F_5 = 21 + 34 + 21 + 21 + 34 = 285$.\nThe first ten terms would be:\n$$ F_0=1,\
    \ F_1=3, F_2=5, F_3=8, F_4=13, F_5=21, F_6=34, F_7=53, F_8=85, F_9=149, F_10=233,$$\n\
    which is $285 \xD7 10^5$. \nThe sum of the first ten terms is $285 + 288 + 294\
    \ + 298 + ... + 324 = 2,025,055,460,036,820,976,584,645,635,465,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,455,535,4",
  "    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n        sum\
    \ = sum + Int(d)\n    \n    return String(sum)\nend", "    \n    if N < 0\n  \
    \      error(\"N must be positive\")\n    end\n    \n    if N == 0\n        return\
    \ \"0\"\n    end\n    \n    if N < 10\n        return string(N, \"0\")\n    end\n\
    \    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2:N\n\
    \        digits[i] = digits[i-1] * 2\n    end\n    \n    return string(digits)\n\
    end", "    \n    if N < 0\n        return \"0\"\n    \n    if N == 0 \n      \
    \  return \"0\"\n    \n    if N == 1 \n        return \"1\"\n    \n    digits\
    \ = zeros(Int, N)\n    \n    digits[1] = 1\n    \n    for i = 2 to N\n       \
    \ digits[i] = digits[i-1] * 2\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[digits[1:end-1] .== 1]\n    \n    digits = digits[digits[1:end-1] .==\
    \ 0]\n    \n    digits = digits[digits[1:end-1] .== 1]\n    \n    digits = digits[digits[1:end-1]\
    \ .== 0]\n    \n    digits = digits[digits[1:end-1] .== 1]\n    \n    digits =\
    \ digits[digits[1:end-1] .== 0]\n    \n    digits = digits[digits[1:end-1] .==\
    \ 1]\n    \n    digits = digits[digits[1:end-1] .== 0]\n    \n    digits = digits[digits[1:end-1]\
    \ .== 1]\n    \n    digits = digits[digits[1:end-1] .== 0]\n    \n    digits =\
    \ digits[digits[1:end-1] .== 1]\n    \n    digits = digits[digits[1:end-1] .==\
    \ 0]\n    \n    digits = digits[digits[1:end-1] .== 1]\n    \n    digits = digits[digits[1:end-1]\
    \ .== 0]\n    \n    digits = digits[digits[1:end-1] .== 1]\n    \n    digits =\
    \ digits[digits[1:end-1] .== 0]\n    \n    digits = digits[digits[1:end-1] .==\
    \ 1]\n    \n    digits = digits[digits[1:end-1] .== 0]\n    \n    digits = digits[digits[1:end-1]\
    \ .== 1]\n    \n    digits = digits[digits[1:end-1] .== 0]\n    \n    digits =\
    \ digits[digits[1:end-1] .== 1]\n    \n    digits = digits[digits[1:end-1] .==\
    \ 0]\n    \n    digits = digits[digits[1:end-1] .== 1]\n    \n    digits = digits[digits[1:end-1]\
    \ .== 0]\n    \n    digits = digits[digits[1:end-1] .== 1]\n    \n    digits =\
    \ digits[digits[1:end-1] .== 0]\n    \n    digits = digits[digits[1:end-1] .==\
    \ 1]\n    \n    digits = digits[digits[1:end-1] .== 0]\n    \n    digits = digits[digits[1:end-1]\
    \ .== 1]\n    \n    digit", "    \n    digits = N % 10\n    \n    if N < 10\n\
    \        return digits::String\n    else\n        return solve(floor(N / 10))\
    \ ++ digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function called sum_to_ten(N) that returns the sum of\
    \ its digits in binary (base 10).", "    if N < 0\n        return \"0\"\n    \n\
    \    if N < 10\n        return string(\"0\", N)\n    \n    digits = string(\"\
    0\", N)\n    \n    for i in 1:N\n        digits = digits[2:end-2] + digits[2:end-2]\
    \ + digits[2:end-2]\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"",
  "    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n  \
    \  for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N / 2\n \
    \   end\n    \n    return join(digits)\nend", "    \n    digits = zeros(Int, N)\n\
    \    \n    for d in digits:\n        digits[d] = sum(digits[d-1:d+1])\n    \n\
    \    return digits[N-1].to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n\
    @assert solve(4) == \"1010\"\n@assert solve(5) == \"1011\"\n@assert solve(6) ==\
    \ \"11001\"\n@assert solve(7) == \"11010\"\n@assert solve(8) == \"11011\"\n@assert\
    \ solve(9) == \"11100\"\n@assert solve(10) == \"11101\"\n@assert solve(11) ==\
    \ \"11111\"\n@assert solve(12) == \"111010\"\n@assert solve(13) == \"111011\"\n\
    @assert solve(14) == \"111101\"\n@assert solve(15) == \"111110\"\n@assert solve(16)\
    \ == \"111111\"\n@assert solve(17) == \"111100\"\n@assert solve(18) == \"111101\"\
    \n@assert solve(19) == \"111111\"\n@assert solve(20) == \"111110\"\n@assert solve(21)\
    \ == \"111100\"\n@assert solve(22) == \"111101\"\n@assert solve(23) == \"111100\"\
    \n@assert solve(24) == \"111101\"\n@assert solve(25) == \"111100\"\n@assert solve(26)\
    \ == \"111101\"\n@assert solve(27) == \"111100\"\n@assert solve(28) == \"111101\"\
    \n@assert solve(29) == \"111100\"\n@assert solve(30) == \"111101\"\n@assert solve(31)\
    \ == \"111100\"\n@assert solve(32) == \"111101\"\n@assert solve(33) == \"111100\"\
    \n@assert solve(34) == \"111101\"\n@assert solve(35) == \"111100\"\n@assert solve(36)\
    \ == \"111101\"\n@assert solve(37) == \"111100\"\n@assert solve(38) == \"111101\"\
    \n@assert solve(39) == \"111100\"\n@assert solve(40) == \"111101\"\n@assert solve(41)\
    \ == \"111100\"\n@assert solve(42) == \"111101\"\n@assert solve(43) == \"111100\"\
    \n@assert solve(44) == \"111101\"\n@assert solve(45) == \"111100\"\n@assert solve(46)\
    \ == \"111101\"\n@assert solve(47) == \"111100\"\n@assert solve(48) == \"111101\"\
    \n@assert solve(49) == \"111100\"\n@assert solve(50) == \"111101\"\n@assert solve(51)\
    \ == \"111100\"\n@assert solve(52) == \"111101\"\n@assert solve(53) == \"111100\"\
    \n@assert solve(54) == \"11110", "    if N < 0\n        error(\"N must be positive\"\
    )\n    end\n    if N == 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int,\
    \ N)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1]\
    \ * 2\n    end\n    \n    digits = digits[2:end]\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if N == 0 \n        return \"0\"\
    \n    if N < 0 \n        return \"0\"\n    if N < 10 \n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    ", "  \
    \  if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N+1)\n    digits[1]\
    \ = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] * 2\n    end\n\
    \    \n    return join(digits, \"\")\nend", "    if N < 0\n        error(\"N must\
    \ be positive\")\n    end\n    \n    binary = \"\"\n    \n    for i = 1:N\n  \
    \      binary = string(binary, i) + string(i, N)\n    end\n    \n    return binary\n\
    end", "    if N < 0\n        error(\"N must be positive\")\n    end\n    \n  \
    \  digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2:N\n       \
    \ digits[i] = digits[i-1] * 10 + digits[i-2]\n    end\n    \n    return join(digits,\
    \ \"\")\nend", "    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n\
    \    N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return \"0\"\n    \n    digits = digits + N % 10\n   \
    \ N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N ==\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return \"0\"\n    \n    digits = digits + N % 10\n   \
    \ N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N ==\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    ", "    if N < 0\n        return \"-1\"\n    if N == 0\n\
    \        return \"0\"\n    if N == 1\n        return \"1\"\n    \n    digits =\
    \ String[Int]()\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-3]\n    \n    digits = digits[digits.length-1] + digits[digits.length-2]\
    \ + digits[digits.length-", "    if N < 0\n        return \"0\"\n    if N < 10\n\
    \        return string(\"0\", N)\n    if N < 100\n        return string(\"1\"\
    , N)\n    if N < 1000\n        return string(\"10\", N)\n    if N < 10000\n  \
    \      return string(\"11\", N)\n    if N < 100000\n        return string(\"100\"\
    , N)\n    if N < 1000000\n        return string(\"101\", N)\n    if N < 10000000\n\
    \        return string(\"110\", N)\n    if N < 100000000\n        return string(\"\
    111\", N)\n    if N < 1000000000\n        return string(\"1000\", N)\n    if N\
    \ < 10000000000\n        return string(\"1001\", N)\n    if N < 100000000000\n\
    \        return string(\"1010\", N)\n    if N < 1000000000000\n        return\
    \ string(\"1011\", N)\n    if N < 10000000000000\n        return string(\"1100\"\
    , N)\n    if N < 100000000000000\n        return string(\"1101\", N)\n    if N\
    \ < 1000000000000000\n        return string(\"1110\", N)\n    if N < 10000000000000000\n\
    \        return string(\"1111\", N)\n    if N < 100000000000000000\n        return\
    \ string(\"10000\", N)\n    if N < 1000000000000000000\n        return string(\"\
    10001\", N)\n    if N < 10000000000000000000\n        return string(\"10010\"\
    , N)\n    if N < 100000000000000000000\n        return string(\"10011\", N)\n\
    \    if N < 1000000000000000000000\n        return string(\"10100\", N)\n    if\
    \ N < 10000000000000000000000\n        return string(\"10101\", N)\n    if N <\
    \ 100000000000000000000000\n        return string(\"10110\", N)\n    if N < 1000000000000000000000000\n\
    \        return string(\"10111\", N)\n    if N < 10000000000000000000000000\n\
    \        return string(\"11000\", N)\n    if N < 100000000000000000000000000\n\
    \        return string(\"11001\", N)\n    if N < 1000000000000000000000000000\n\
    \        return string(\"11010\", N)\n    if N < 10000000000000000000000000000\n\
    \        return string(\"11011\", N)\n    if N < 100000000000000000000000000000\n\
    \        return string(\"11100\", N)\n    if N < 1000000000000000000000000000000\n\
    \        return string(\"11101\", N)\n    if N < 10000000000000000000000000000000\n\
    \        return string(\"11110\", N)\n    if N < 100000000000000000000000000000000\n\
    \        return string(\"11111\", N)\n    if N < 1000000000000000000000000000000000\n\
    \        return string(\"100000\", N)\n    if N < 1000000000000000000000000000000000\n\
    \        return string(\"100001\", N)\n    if N < 1000000000000000000000000000000000\n\
    \        return string(\"100010\", N)\n    if N < 1000000000000000000000000000000000\n\
    \        return ", "    if N < 0\n        return \"0\"\n    if N < 10\n      \
    \  return string(\"0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for\
    \ i = length(digits) - 1, j = 1, k = 1\n        while i >= k\n            digits[i]\
    \ = digits[i] + digits[j]\n            digits[j] = 0\n            j = j + 1\n\
    \            k = k + 1\n            \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called solve that\
    \ takes an integer N and returns the sum of its digits in binary.", "    if N\
    \ < 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"1\"\
    ,N)\n    \n    digits = string(\"0\",N)\n    \n    digits = digits[2:end]\n  \
    \  \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    ", "    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N\
    \ = N / 10\n    \n    digits = solve(digits)\n    \n    digits = digits + N %\
    \ 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits +\
    \ N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digit", "    if N < 0\n        return \"\
    -1\"\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i =\
    \ 2:N\n        digits[i] = digits[i-1] * 2\n    end\n    \n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert solve(51)\
    \ == \"111111\"\n@assert solve(52) == \"10000000", "    if N == 0 \n        return\
    \ \"0\"\n    \n    if N < 0 \n        return \"0\"\n    \n    if N < 10 \n   \
    \     return string(\"0\", N)\n    \n    binary = string(\"1\", N)\n    \n   \
    \ for i = 2 to N\n        binary = string(\"0\", i) + binary\n    end\n    \n\
    \    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>", "    \n    if N < 0\n       \
    \ return \"-1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n       \
    \ return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n        \n   \
    \     digit = N % 10\n        \n        if digit == 0\n            binary += \"\
    0\"\n            \n        else\n            binary += digit2binary(digit)\n \
    \           \n        N = N / 10\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7: Binary\
    \ to Decimal\nGiven a binary number represented as a string, convert it to its\
    \ decimal equivalent.\nThe binary number consists of an even number of digits,\
    \ and the decimal number should be the sum of the individual digits.", "    \n\
    \    if N < 0\n        error(\"N must be positive\")\n    \n    digits = N % 10\n\
    \    \n    if digits == 0\n        return \"\"\n    \n    binary = \"\"\n    \n\
    \    while N > 0\n        digit = N % 10\n        \n        if digit == 0\n  \
    \          binary = binary + \"0\"\n        else\n            binary = binary\
    \ + \"1\"\n        \n        N = N / 10\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</", "    if N == 0 \n        return \"0\"\n    \n    sum = 0\n  \
    \  \n    for i in 1:N \n        sum += (i mod 2)\n        i /= 2\n    \n    return\
    \ show(sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\
    \n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"111001\"\n@assert solve(7) == \"1110101\"\n@assert solve(8) == \"11110101\"\
    \n@assert solve(9) == \"111100111\"\n@assert solve(10) == \"1111100111\"\n@assert\
    \ solve(11) == \"11111010101\"\n@assert solve(12) == \"11111101011\"\n@assert\
    \ solve(13) == \"11111110011\"\n@assert solve(14) == \"111111101010\"\n@assert\
    \ solve(15) == \"1111111101011\"\n@assert solve(16) == \"1111111101101\"\n@assert\
    \ solve(17) == \"11111111011010\"\n@assert solve(18) == \"11111111011011\"\n@assert\
    \ solve(19) == \"111111110110100\"\n@assert solve(20) == \"111111110110101\"\n\
    @assert solve(21) == \"1111111101101001\"\n@assert solve(22) == \"11111111011010010\"\
    \n@assert solve(23) == \"111111110110100111\"\n@assert solve(24) == \"111111110110101001\"\
    \n@assert solve(25) == \"1111111101101010010\"\n@assert solve(26) == \"11111111011010100111\"\
    \n@assert solve(27) == \"111111110110101011\"\n@assert solve(28) == \"111111110110101001110\"\
    \n@assert solve(29) == \"11111111011010100111001\"\n@assert solve(30) == \"111111110110101001110010\"\
    \n@assert solve(31) == \"1111111101101010011100111\"\n@assert solve(32) == \"\
    111111110110101001110101\"\n@assert solve(33) == \"1111111101101010011101001\"\
    \n@assert solve(34) == \"11111111011010100111010010\"\n@assert solve(35) == \"\
    111111110110101001110100111\"\n@assert solve(36) == \"1111111101101010011101001110\"\
    \n@assert solve(37) == \"111111110110101001110100111001\"\n@", "    if N < 0\n\
    \        return \"0\"\n    if N < 10\n        return string(\"0\", N)\n    \n\
    \    digits = digits(N)\n    \n    binary = \"\"\n    \n    for i in digits\n\
    \        binary += string(\"1\", i)\n    \n    return binary\nend", "    if N\
    \ < 0\n        error(\"N must be positive\")\n    end\n    if N == 0\n       \
    \ return \"0\"\n    end\n    if N < 10\n        return string(N, \"b\")\n    end\n\
    \    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    digits[2] = 1\n   \
    \ digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n   \
    \ digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    digits[1] = digits[2]\
    \ = digits[3] = digits[4] = digits[5] = digits[6] = digits[7] = digits[8] = digits[9]\
    \ = 0\n    \n    digits[1] = digits[2] = digits[3] = digits[4] = digits[5] = digits[6]\
    \ = digits[7] = digits[8] = digits[9] = 0\n    \n    digits[1] = digits[2] = digits[3]\
    \ = digits[4] = digits[5] = digits[6] = digits[7] = digits[8] = digits[9] = 0\n\
    \    \n    digits[1] = digits[2] = digits[3] = digits[4] = digits[5] = digits[6]\
    \ = digits[7] = digits[8] = digits[9] = 0\n    \n    digits[1] = digits[2] = digits[3]\
    \ = digits[4] = digits[5] = digits[6] = digits[7] = digits[8] = digits[9] = 0\n\
    \    \n    digits[1] = digits[2] = digits[3] = digits[4] = digits[5] = digits[6]\
    \ = digits[7] = digits[8] = digits[9] = 0\n    \n    digits[1] = digits[2] = digits[3]\
    \ = digits[4] = digits[5] = digits[6] = digits[7] = digits[8] = digits[9] = 0\n\
    \    \n    digits[1] = digits[2] = digits[3] = digits[4] = digits[5] = digits[6]\
    \ = digits[7] = digits[8] = digits[9] = 0\n    \n    digits[1] = digits[2] = digits[3]\
    \ = digits[4] = digits[5] = digits[6] = digits[7] = digits[8] = digits[9] = 0\n\
    \    \n    digits[1] = digits[2] = digits[3] = digits[4] = digits[5] = digits[6]\
    \ = digits[7] = digits[8] = digits[9] = 0\n    \n    digits[1] = digits[2] = digits[3]\
    \ = digits[4] = digits[5] = digits[6] = digits[7] = digits[8] = digits[9] = 0\n\
    \    \n    digits[1] = digit", "    \n    digits = zeros(Int, N)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    digits = digits[2:end]\n    \n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"1010\"\n@assert solve(6) == \"1011\"\n@assert solve(7) == \"11001\"\n@assert\
    \ solve(8) == \"110010\"\n@assert solve(9) == \"110011\"\n@assert solve(10) ==\
    \ \"110100\"\n@assert solve(11) == \"110101\"\n@assert solve(12) == \"110110\"\
    \n@assert solve(13) == \"110111\"\n@assert solve(14) == \"111001\"\n@assert solve(15)\
    \ == \"111010\"\n@assert solve(16) == \"111011\"\n@assert solve(17) == \"111101\"\
    \n@assert solve(18) == \"1111010\"\n@assert solve(19) == \"1111011\"\n@assert\
    \ solve(20) == \"111100\"\n@assert solve(21) == \"111101\"\n@assert solve(22)\
    \ == \"111110\"\n@assert solve(23) == \"111111\"\n@assert solve(24) == \"100001\"\
    \n@assert solve(25) == \"1000010\"\n@assert solve(26) == \"1000011\"\n@assert\
    \ solve(27) == \"1000100\"\n@assert solve(28) == \"1000101\"\n@assert solve(29)\
    \ == \"1000111\"\n@assert solve(30) == \"1001000\"\n@assert solve(31) == \"1001001\"\
    \n@assert solve(32) == \"1001010\"\n@assert solve(33) == \"1001011\"\n@assert\
    \ solve(34) == \"1001100\"\n@assert solve(35) == \"1001101\"\n@assert solve(36)\
    \ == \"1001110\"\n@assert solve(37) == \"1001111\"\n@assert solve(38) == \"1010000\"\
    \n@assert solve(39) == \"1010001\"\n@assert solve(40) == \"1010010\"\n@assert\
    \ solve(41) == \"1010011\"\n@assert solve(42) == \"1010100\"\n@assert solve(43)\
    \ == \"1010101\"\n@assert solve(44) == \"1010111\"\n@assert solve(45) == \"1011000\"\
    \n@assert solve(46) == \"1011001\"\n@assert solve(47) == \"1011010\"\n@assert\
    \ solve(48) == \"1011011\"\n@assert solve(49) == \"1011100\"\n@assert solve(50)\
    \ == \"1011101\"\n@assert solve(", "    if N < 0\n        return \"0\"\n    \n\
    \    digits = N % 10\n    \n    if digits == 0\n        return \"1\"\n    \n \
    \   digits = N % 10\n    \n    if digits == 0\n        return \"1\"\n    \n  \
    \  digits = N % 10\n    \n    if digits == 0\n        return \"1\"\n    \n   \
    \ digits = N % 10\n    \n    if digits == 0\n        return \"1\"\n    \n    digits\
    \ = N % 10\n    \n    if digits == 0\n        return \"1\"\n    \n    digits =\
    \ N % 10\n    \n    if digits == 0\n        return \"1\"\n    \n    digits = N\
    \ % 10\n    \n    if digits == 0\n        return \"1\"\n    \n    digits = N %\
    \ 10\n    \n    if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n\
    \    \n    if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n \
    \   \n    if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n  \
    \  \n    if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n   \
    \ \n    if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n    \n\
    \    if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n    \n \
    \   if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n    \n  \
    \  if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n    \n   \
    \ if digits == 0\n        return \"1\"\n    \n    digits = N % 10\n    \n    if\
    \ digits == 0\n        return \"1\"\n    \n    digits = N % 10\n    \n    if digits\
    \ == 0\n        return \"1\"\n    \n    digits = N % 10\n    \n    if digits ==\
    \ 0\n        return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n\
    \        return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n \
    \       return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n  \
    \      return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n   \
    \     return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n    \
    \    return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n     \
    \   return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n      \
    \  return \"1\"\n    \n    digits = N % 10\n    ", "    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7", "    \n    if N < 0\n        return \"\
    -1\"\n    \n    if N == 0\n        return \"0\"\n    \n    digits = N % 10\n \
    \   \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"", "    if N < 0\n        return \"\
    -1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n        return \"1\"\
    \n    \n    digits = digits(N)\n    \n    binary = \"\"\n    for digit in digits\n\
    \        binary += digit\n    \n    return binary\nend", "    if N < 0\n     \
    \   error(\"N must be positive\")\n    end\n    \n    binary = \"\"\n    \n  \
    \  for d in digits(N)\n        binary += d\n    end\n    \n    return binary\n\
    end", "    if N < 0\n        error(\"N must be positive\")\n    \n    if N ==\
    \ 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n\
    \    \n    digits = string(\"0\", N)\n    \n    digits[1:end-1] = digits[1:end-1]\
    \ * 2\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    digits = digits + solve(digits)\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0)\
    \ == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3)\
    \ == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert\
    \ solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\
    \n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11)\
    \ == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n\
    @assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16)\
    \ == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\
    \n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21)\
    \ == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\
    \n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert solve(51)\
    \ == \"111111\"\n@assert solve(52) == \"10000000\"", "    if N < 0\n        error(\"\
    N must be positive\")\n    end\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N / 2\n    end\n\
    \    \n    digits[N] = digits[N] - 1\n    \n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 4\nA\
    \ palindromic number reads the same both ways. The largest palindrome made from\
    \ the product of two 2-digit numbers is 9009 = 91 \xD7 99.", "    if N < 0\n \
    \       return \"0\"\n    \n    digits = digits(N)\n    \n    if length(digits)\
    \ == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n    \n    if\
    \ digits[1] == \"1\"\n        return digits[1]\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"0\"\n        return digits[1]\n    \n    digits =\
    \ reverse(digits)\n    \n    if digits[1] == \"1\"\n        return digits[1]\n\
    \    \n    digits = reverse(digits)\n    \n    if digits[1] == \"0\"\n       \
    \ return digits[1]\n    \n    digits = reverse(digits)\n    \n    if digits[1]\
    \ == \"1\"\n        return digits[1]\n    \n    digits = reverse(digits)\n   \
    \ \n    if digits[1] == \"0\"\n        return digits[1]\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"1\"\n        return digits[1]\n    \n    digits =\
    \ reverse(digits)\n    \n    if digits[1] == \"0\"\n        return digits[1]\n\
    \    \n    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n       \
    \ return digits[1]\n    \n    digits = reverse(digits)\n    \n    if digits[1]\
    \ == \"0\"\n        return digits[1]\n    \n    digits = reverse(digits)\n   \
    \ \n    if digits[1] == \"1\"\n        return digits[1]\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"0\"\n        return digits[1]\n    \n    digits =\
    \ reverse(digits)\n    \n    if digits[1] == \"1\"\n        return digits[1]\n\
    \    \n    digits = reverse(digits)\n    \n    if digits[1] == \"0\"\n       \
    \ return digits[1]\n    \n    digits = reverse(digits)\n    \n    if digits[1]\
    \ == \"1\"\n        return digits[1]\n    \n    digits = reverse(digits)\n   \
    \ \n    if digits[1] == \"0\"\n        return digits[1]\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"1\"\n        return digits[1]\n    \n    digits =\
    \ reverse(digits)\n    \n    if digits[1] == \"0\"\n        return digits[1]\n\
    \    \n    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n       \
    \ return digits[1]\n    \n    digits = reverse(digits)\n    \n    if digits[1]\
    \ == \"0\"\n        return digits[1]\n    \n    digits = reverse(digits)\n   \
    \ \n    if digits[1] == \"1\"\n        return digits[1]\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"0\"\n        return digits[1]\n    \n    digits =\
    \ reverse(digits)\n    \n    if digits[1] == \"1\"\n        return digits[1]\n\
    \    ", "    if N == 0 \n        return \"0\"\n    if N < 0 \n        return \"\
    0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    digits = solve(digits)\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = ", "    if N == 0 \n        return\
    \ \"0\"\n    \n    digits = N % 10\n    \n    if digits == 0 \n        return\
    \ \"0\"\n    \n    binary = \"\"\n    \n    for digit in digits:\n        binary\
    \ += digit2binary(digit)\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nThe Fibonacci sequence is defined by the\
    \ formula:", "    if N < 0\n        throw(ArgumentError(\"N must be positive\"\
    ))\n    \n    if N == 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n\
    \    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n", "    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n   \
    \ \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2:N\n  \
    \      digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return join(digits,\
    \ \"\")\nend", "    if N < 0\n        return \"-1\"\n    \n    if N < 10\n   \
    \     return string(n)\n    \n    sum = 0\n    \n    for n in N\n        sum +=\
    \ n % 2\n        \n    return string(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert\
    \ solve(53", "    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n\
    \        sum += d\n    \n    return string(digits, sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called digits that\
    \ takes a positive integer N and returns the number of digits in binary representation\
    \ of N.", "    \n    digits = digits(N)\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits(N)\n\
    \    \n    sum = 0\n    \n    for i in digits\n        sum += i\n    \n    return\
    \ show(sum)\nend", "    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int,\
    \ N)\n    digits[1] = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] =\
    \ 1\n    digits[5] = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] =\
    \ 1\n    digits[9] = 1\n    \n    sum = 0\n    \n    for i = 1:N\n        sum\
    \ = sum + digits[i]\n    end\n    \n    return string(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a Julia function called solve that takes a positive integer N and returns the\
    \ number of digits in binary representation of N. For example, solve(1000) should\
    \ return \"1\".", "    \n    digits = digits(N)\n    \n    if N < 0\n        return\
    \ \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n    if N == 1\n  \
    \      return digits[1]\n    \n    digits_sum = 0\n    \n    for i in digits\n\
    \        digits_sum += i\n    \n    digits_sum *= 2\n    \n    if digits_sum >\
    \ N\n        return \"0\"\n    \n    digits_sum -= N\n    \n    digits_sum *=\
    \ 2\n    \n    for i in digits\n        digits_sum += i\n    \n    return digits_sum.to_s(2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert\
    \ solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\
    \n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10)\
    \ == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n\
    @assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15)\
    \ == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n\
    @assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20)\
    \ == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\
    \n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25)\
    \ == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\
    \n@assert solve(28) == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30)\
    \ == \"100010\"\n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\
    \n@assert solve(33) == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35)\
    \ == \"100111\"\n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\
    \n@assert solve(38) == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40)\
    \ == \"101100\"\n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\
    \n@assert solve(43) == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45)\
    \ == \"11100", "    if N < 0\n        error(\"N must be positive\")\n    end\n\
    \    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    digits[2] = 1\n   \
    \ digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n   \
    \ digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    sum = 0\n   \
    \ \n    for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n    return\
    \ string(digits)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n", "    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0\
    \ \n        return \"0\"\n    \n    digits = digits + solve(N)\n    \n    return\
    \ digits\nend", "    if N < 0\n        throw(ArgumentError(\"N must be positive\"\
    ))\n    end\n    if N == 0\n        return \"0\"\n    end\n    \n    digits =\
    \ zeros(Int, N)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] =\
    \ digits[i-1] * 10\n    end\n    \n    return join(digits, \"\")\nend", "    if\
    \ N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if N <\
    \ 10\n        return string(\"0\", N)\n    \n    digits = string(\"0\", N)\n \
    \   digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digit", "    if N < 0\n        return \"0\"\n    if N < 10\n\
    \        return string(\"0\", N)\n    \n    binary = string(\"0\", N)\n    \n\
    \    for i = N - 1, j = 0, k = 1\n        while i >= k\n            binary = string(\"\
    0\", i) + binary + string(\"1\", j)\n            i /= 2\n            j += 1\n\
    \            k += 1\n            \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"10101\"\n@assert solve(6) == \"111001\"\n@assert solve(7) == \"1110101\"\
    \n@assert solve(8) == \"11110101\"\n@assert solve(9) == \"111101101\"\n@assert\
    \ solve(10) == \"111100111\"\n@assert solve(11) == \"1111001001\"\n@assert solve(12)\
    \ == \"11110010101\"\n@assert solve(13) == \"111100110101\"\n@assert solve(14)\
    \ == \"11110011110101\"\n@assert solve(15) == \"111100111100111\"\n@assert solve(16)\
    \ == \"111100111101001\"\n@assert solve(17) == \"1111001111010101\"\n@assert solve(18)\
    \ == \"11110011110110101\"\n@assert solve(19) == \"11110011110110111\"\n@assert\
    \ solve(20) == \"111100111100111001\"\n@assert solve(21) == \"1111001111001110101\"\
    \n@assert solve(22) == \"11110011110011110101\"\n@assert solve(23) == \"11110011110011110111\"\
    \n@assert solve(24) == \"111100111100100111\"\n@assert solve(25) == \"1111001111001001001\"\
    \n@assert solve(26) == \"11110011110010010101\"\n@assert solve(27) == \"111100111100100110101\"\
    \n@assert solve(28) == \"11110011110010011110101\"\n@assert solve(29) == \"1111001111001010100111\"\
    \n@assert solve(30) == \"111100111100101010101\"\n@assert solve(31) == \"1111001111001010110101\"\
    \n@assert solve(32) == \"11110011110010101100101\"\n@assert solve(33) == \"1111001111001010110100111\"\
    \n@assert solve(34) == \"111100111100101011010101\"\n@assert solve(35) == \"1111001111001010110110101\"\
    \n@assert solve(36) == \"111100111100", "    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits = solve(digits)\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n",
  "    \n    if N < 0\n        return \"0\"\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    if N == 1 \n        return \"1\"\n    \n    digits = digits(N)\n\
    \    \n    sum = 0\n    \n    for i in digits\n        sum += i\n    \n    return\
    \ bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0) == \"\
    0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) ==\
    \ \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if N < 0\n    \
    \    error(\"N must be positive\")\n    end\n    \n    binary = \"\"\n    \n \
    \   for i = 1:N\n        binary = binary + string(i, 2)\n    end\n    \n    return\
    \ binary\nend\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary\
    \ number to a decimal number.", "    \n    if N < 0\n        return \"-1\"\n \
    \   \n    if N == 0 \n        return \"0\"\n    \n    if N == 1 \n        return\
    \ \"1\"\n    \n    if N % 2 == 0 \n        return solve(N div 2) + \"0\"\n   \
    \ \n    sum = 0\n    \n    while N > 0 \n        sum += N mod 2\n        N = N\
    \ div 2\n    \n    return solve(sum) + \"1\"\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(", "    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    binary = string(\"0\", N)\n    \n    for i = N - 1, j = 0,\
    \ k = 1\n        while i >= k\n            binary = string(\"0\", i) + binary\
    \ + string(\"1\", j)\n            i -= 1\n            j += 1\n            k +=\
    \ 1\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal and return the decimal number.",
  "    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    \n    sum = 0\n    \n    for i in 1:N\n        digit = digits[i]\n\
    \        digits[i] = digits[i-1] + digit\n        sum += digit\n    end\n    \n\
    \    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\nsolve(176)\n</cell>\n<code language=julia-1.5>\n\
    solve(", "    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n\
    \        sum += Int(d)\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Find the sum of all numbers between 1\
    \ and N that are divisible by 3.", "    \n    \n    if N < 0\n        return \"\
    -1\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n       \
    \ return \"1\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if N < 0\n\
    \        return \"0\"\n    if N < 10\n        return string(N)\n    \n    digits\
    \ = digits(N)\n    \n    binary = \"\"\n    \n    for d in digits\n        binary\
    \ += string(d) \n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100001\"\n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\
    \n@assert solve(31) == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33)\
    \ == \"100006\"\n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\
    \n@assert solve(36) == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38)\
    \ == \"100011\"\n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\
    \n@assert solve(41) == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43)\
    \ == \"100016\"\n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\
    \n@assert solve(46) == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48)\
    \ == \"100021\"\n@assert solve(49) == \"100022\"\n@assert solve(50) == \"100023\"\
    \n@assert solve(51) == \"100024\"\n@assert solve(52) == \"100025\"", "    if N\
    \ < 0\n        error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int,\
    \ N)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1]\
    \ * 2\n    end\n    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n\
    \    \n    if digits == 0\n        return solve(floor(N/10))\n    \n    digits\
    \ = floor(N/10)\n    \n    digits = digits * 10\n    \n    return solve(floor(digits))\
    \ + digits(digits)\nend", "    if N < 0\n        error(\"N must be positive\"\
    )\n    \n    digits = zeros(Int64, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    digits[N] = digits[N]\
    \ - 1\n    \n    return join(digits, \"\")\nend", "    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n\
    \        sum += d\n    \n    return string(digits, sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.", "    \n    binary = \"\"\n    \n    if N < 0\n        throw(ArgumentError(\"\
    N must be positive\"))\n    \n    if N == 0\n        throw(ArgumentError(\"N must\
    \ be positive\"))\n    \n    if N == 1\n        binary = \"1\"\n    \n    if N\
    \ > 0\n        \n        digits = floor(log2(N))\n        \n        if digits\
    \ == 0\n            throw(ArgumentError(\"N must be positive\"))\n        \n \
    \       digits = digits(digits)\n        \n        if digits == 0\n          \
    \  throw(ArgumentError(\"N must be positive\"))\n        \n        digits = digits(digits)\n\
    \        \n        if digits == 0\n            throw(ArgumentError(\"N must be\
    \ positive\"))\n        \n        digits = digits(digits)\n        \n        if\
    \ digits == 0\n            throw(ArgumentError(\"N must be positive\"))\n    \
    \    \n        digits = digits(digits)\n        \n        if digits == 0\n   \
    \         throw(ArgumentError(\"N must be positive\"))\n        \n        digits\
    \ = digits(digits)\n        \n        if digits == 0\n            throw(ArgumentError(\"\
    N must be positive\"))\n        \n        digits = digits(digits)\n        \n\
    \        if digits == 0\n            throw(ArgumentError(\"N must be positive\"\
    ))\n        \n        digits = digits(digits)\n        \n        if digits ==\
    \ 0\n            throw(ArgumentError(\"N must be positive\"))\n        \n    \
    \    digits = digits(digits)\n        \n        if digits == 0\n            throw(ArgumentError(\"\
    N must be positive\"))\n        \n        digits = digits(digits)\n        \n\
    \        if digits == 0\n            throw(ArgumentError(\"N must be positive\"\
    ))\n        \n        digits = digits(digits)\n        \n        if digits ==\
    \ 0\n            throw(ArgumentError(\"N must be positive\"))\n        \n    \
    \    digits = digits(digits)\n        \n        if digits == 0\n            throw(ArgumentError(\"\
    N must be positive\"))\n        \n        digits = digits(digits)\n        \n\
    \        if digits == 0\n            throw(ArgumentError(\"N must be positive\"\
    ))\n        \n        digits = digits(digits)\n        \n        if digits ==\
    \ 0\n            throw(ArgumentError(\"N must be positive\"))\n        \n    \
    \    digits = digits(digits)\n        \n        if digits == 0\n            throw(ArgumentError(\"\
    N must be positive\"))\n        \n        digits = digits(digits)\n        \n\
    \        if digits == 0\n            throw(ArgumentError(\"N must be positive\"\
    ))\n        \n        digits = digits(digits)\n        \n        if digits ==\
    \ 0\n            throw(Argument", "    if N < 0\n        return \"0\"\n    \n\
    \    digits = N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\
    \n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n   \
    \     return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if ", "    if N < 0\n        return\
    \ \"-1\"\n    if N < 10\n        return string(\"0\", N)\n    \n    digits = digits(N)\n\
    \    \n    binary = \"\"\n    for d in digits\n        binary += string(\"0\"\
    , d)\n    \n    return binary\nend", "    if N < 0\n        error(\"N must be\
    \ positive\")\n    end\n    if N == 0\n        return \"0\"\n    end\n    \n \
    \   digits = zeros(Int, 10)\n    digits[1] = 1\n    digits[2] = 1\n    digits[3]\
    \ = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n    digits[7]\
    \ = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    sum = 0\n    \n    for\
    \ d in digits\n        sum += d\n    end\n    \n    binary = \"\"\n    \n    while\
    \ sum > 0\n        binary = string(digits[sum % 10], digits[sum % 10], digits[sum\
    \ % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10],\
    \ digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum\
    \ % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10],\
    \ digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum\
    \ % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10],\
    \ digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum\
    \ % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10],\
    \ digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum\
    \ % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10],\
    \ digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum\
    \ % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10],\
    \ digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum\
    \ % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10],\
    \ digits[sum % 10], digits[sum % 10], digits[sum % 10], digits[sum % 10], digit",
  "    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if\
    \ N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n  \
    \  \n    digits = solve(digits)\n    \n    digits = digits + solve(digits)\n \
    \   \n    return digits\nend", "    if N < 0\n        return \"0\"\n    \n   \
    \ digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1]\
    \ + N % 2\n        N = N / 2\n    end\n    \n    digits[N] = digits[N] - 1\n \
    \   \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"1010\"\n@assert solve(6) == \"1011\"\n@assert solve(7) == \"11000\"\n@assert\
    \ solve(8) == \"111001\"\n@assert solve(9) == \"111010\"\n@assert solve(10) ==\
    \ \"111011\"\n@assert solve(11) == \"1111010\"\n@assert solve(12) == \"11110110\"\
    \n@assert solve(13) == \"11110011\"\n@assert solve(14) == \"1111001001\"\n@assert\
    \ solve(15) == \"1111001010\"\n@assert solve(16) == \"1111001011\"\n@assert solve(17)\
    \ == \"11110011001\"\n@assert solve(18) == \"111100111001\"\n@assert solve(19)\
    \ == \"111100111010\"\n@assert solve(20) == \"111100111011\"\n@assert solve(21)\
    \ == \"1111001101001\"\n@assert solve(22) == \"1111001101010\"\n@assert solve(23)\
    \ == \"1111001101011\"\n@assert solve(24) == \"111100111001001\"\n@assert solve(25)\
    \ == \"111100111001010\"\n@assert solve(26) == \"111100111001011\"\n@assert solve(27)\
    \ == \"111100111010001\"\n@assert solve(28) == \"111100111010010\"\n@assert solve(29)\
    \ == \"111100111010011\"\n@assert solve(30) == \"1111001110101001\"\n@assert solve(31)\
    \ == \"11110011101010010\"\n@assert solve(32) == \"11110011101010011\"\n@assert\
    \ solve(33) == \"11110011101011001\"\n@assert solve(34) == \"111100111010110010\"\
    \n@assert solve(35) == \"111100111010110011\"\n@assert solve(36) == \"11110011110100001\"\
    \n@assert solve(37) == \"111100111101000010\"\n@assert solve(38) == \"111100111101000011\"\
    \n@assert solve(39) == \"1111001111010001101\"\n@assert solve(40) == \"11110011110100011010\"\
    \n@assert solve(41) == \"11110011110", "    \n    if N < 0\n        error(\"N\
    \ must be positive\")\n    end\n    \n    if N == 0\n        return \"0\"\n  \
    \  end\n    \n    if N < 10\n        return string(N)\n    end\n    \n    digits\
    \ = string(N % 10)\n    \n    if N > 10\n        digits = digits + string(N %\
    \ 10)\n    end\n    \n    return digits\nend", "    if N < 0\n        return \"\
    0\"\n    if N == 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digit",
  "    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if\
    \ N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n  \
    \  \n    digits = solve(digits)\n    \n    digits = digits + digits\n    \n  \
    \  return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 3\nWrite a Julia function called solve that takes an\
    \ integer N and returns the sum of the digits of N in binary.", "    if N < 0\n\
    \        error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int,\
    \ N)\n    digits[1] = 1\n    \n    for i in 2:N\n        digits[i] = digits[i-1]*10\
    \ + digits[i-2]\n    end\n    \n    digits = digits[2:end]\n    \n    return join(digits,\
    \ \"\")\nend", "    if N < 0\n        return \"0\"\n    if N == 0\n        return\
    \ \"0\"\n    if N == 1\n        return \"1\"\n    \n    digits = digits(N)\n \
    \   \n    binary = \"\"\n    for digit in digits\n        binary += digit\n  \
    \  \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 9\nWrite a Julia function called digits that\
    \ takes a positive integer N and returns the number of digits in binary representation\
    \ of N.", "    \n    if N < 0\n        return \"0\"\n    \n    binary = \"\"\n\
    \    \n    for n in N\n        binary = binary + string(n)\n    \n    return binary\n\
    end", "    \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n \
    \   \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits % 10",
  "    if N < 0\n        error(\"N must be positive\")\n    end\n    if N == 0\n \
    \       return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5]\
    \ = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9]\
    \ = 1\n    \n    sum = 0\n    \n    for i in 1:N\n        digit = digits[i]\n\
    \        sum += digit\n    end\n    \n    return string(digits)\nend\n</cell>\n\
    <code language=julia-1.3>\nsolve(1000)\n</cell>\n<code language=julia-1.3>\nsolve(150)\n\
    </cell>\n<code language=julia-1.3>\nsolve(147)\n</cell>\n<text>\nProblem 8\nA\
    \ palindromic number reads the same both ways. The largest palindrome made from\
    \ the product of two 2-digit numbers is 9009 = 91 \xD7 99.", "    if N < 0\n \
    \       return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n \
    \   \n    digits = string(\"0\", N)\n    \n    for i = N - 1, j = N - 1, k = N\
    \ - 1\n        digits[k] = digits[k] + digits[i]\n        digits[i] = digits[i]\
    \ - digits[j]\n        digits[j] = digits[j] - digits[i]\n    end\n    \n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nWrite a Julia function called solve that takes an\
    \ integer N and returns the number of digits in binary that equal N.", "    if\
    \ N < 0\n        error(\"N must be positive\")\n    end\n    \n    binary = \"\
    \"\n    \n    for d in digits(N)\n        binary = binary + string(d, digits(d))\n\
    \    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n\
    @assert solve(5) == \"101\"\n@assert solve(7) == \"1110\"\n@assert solve(8) ==\
    \ \"11110\"\n@assert solve(9) == \"11111\"\n@assert solve(10) == \"111111\"\n\
    @assert solve(11) == \"1111111\"\n@assert solve(12) == \"11111110\"\n@assert solve(13)\
    \ == \"111111110\"\n@assert solve(14) == \"1111111101\"\n@assert solve(15) ==\
    \ \"11111111010\"\n@assert solve(16) == \"111111110100\"\n@assert solve(17) ==\
    \ \"1111111101010\"\n@assert solve(18) == \"11111111010100\"\n@assert solve(19)\
    \ == \"111111110101000\"\n@assert solve(20) == \"1111111101010000\"\n@assert solve(21)\
    \ == \"11111111010100000\"\n@assert solve(22) == \"111111110101000000\"\n@assert\
    \ solve(23) == \"1111111101010000000\"\n@assert solve(24) == \"11111111010100000000\"\
    \n@assert solve(25) == \"111111110101000000000\"\n@assert solve(26) == \"1111111101010000000000\"\
    \n@assert solve(27) == \"11111111010100000000000\"\n@assert solve(28) == \"111111110101000000000000\"\
    \n@assert solve(29) == \"1111111101010000000000000\"\n@assert solve(30) == \"\
    11111111010100000000000000\"\n@assert solve(31) == \"111111110101000000000000000\"\
    \n@assert solve(32) == \"1111111101010000000000000000\"\n@assert solve(33) ==\
    \ \"11111111010100000000000000000\"\n@assert solve(34) == \"111111110101000000000000000000\"\
    \n@assert solve(35) == \"1111111101010000000000000000000\"\n@assert solve(36)\
    \ == \"11111111010100000000000000000000\"\n@assert solve(37) == \"111111110101000000000000000000000\"\
    \n@assert solve(38) == \"1111111101010000000000000000000000\"\n@assert solve(39)\
    \ == \"11111111010100000000000000000000000\"\n@assert solve(40) == \"111111110101000000000000000000000000\"\
    \n@assert solve(41) == \"1111111101010000000000000000000000000", "    \n    digits\
    \ = zeros(Int, 10)\n    \n    for i = 1:10\n        digits[i] = N % 2\n      \
    \  N = N / 2\n    end\n    \n    sum = \"\"\n    for i = 1:10\n        sum = sum\
    \ + digits[i]\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same backward\
    \ as forward, for example the number 121 is a palindrome while 14321 is not. \n\
    A palindromic number reads the same forward as backward, for example the number\
    \ 7993 is a palindrome while 90660 is not. \nA palindromic number reads the same\
    \ backward as forward, for example the number 923 is a palindrome while 9923 is\
    \ not a palindrome.", "    if N < 0\n        error(\"N must be positive\")\n \
    \   \n    binary = \"\"\n    \n    for d in digits(N)\n        binary += d\n \
    \   \n    return binary\nend", "    \n    digits = digits(N)\n    \n    sum =\
    \ 0\n    for d in digits\n        sum += d\n    \n    return sum.to_s(2)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 8\nA palindromic number reads the same both ways. The largest palindrome\
    \ made from the product of two 2-digit numbers is 9009 = 91 \xD7 99.", "    \n\
    \    if N < 0\n        return \"0\"\n    \n    if N == 0 \n        return \"0\"\
    \n    \n    if N == 1\n        return \"1\"\n    \n    digits = String[]\n   \
    \ \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n   \
    \ digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[", "    \n    if N < 0\n        throw(DomainError(string(\"N must be\
    \ positive\")))\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n\
    \    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n    \n \
    \   return string(digits)\nend", "    if N < 0\n        error(\"N must be positive\"\
    )\n    end\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n    for\
    \ i in 2:N\n        digits[i] = digits[i-1] * 2\n    end\n    \n    return join(digits,\
    \ \"\")\nend", "    if N < 0\n        error(\"N must be positive\")\n    end\n\
    \    \n    digits = zeros(Int, 10)\n    \n    for i = 1:N\n        digits[N %\
    \ 10] += 1\n        N /= 10\n    end\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]", "    if N < 0\n        return \"\
    0\"\n    if N < 10\n        return string(N, \"0\") \n    \n    binary = \"\"\n\
    \    \n    for i in 1:N\n        binary = string(N - i) + binary\n    end\n  \
    \  \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0)\
    \ == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3)\
    \ == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert\
    \ solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\
    \n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11)\
    \ == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n\
    @assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16)\
    \ == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\
    \n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21)\
    \ == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\
    \n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert solve(51)\
    \ == \"111111\"\n@assert solve(52) == \"10000000", "    if N == 0 \n        return\
    \ \"0\"\n    \n    binary = \"\"\n    \n    for d in digits(N) \n        binary\
    \ = binary + string(d)\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"10101\"\n@assert solve(6) == \"111001\"\n@assert solve(7) == \"1110101\"\
    \n@assert solve(8) == \"11110101\"\n@assert solve(9) == \"111110101\"\n@assert\
    \ solve(10) == \"1111110101\"\n@assert solve(11) == \"11111110101\"\n@assert solve(12)\
    \ == \"111111110101\"\n@assert solve(13) == \"111111110110\"\n@assert solve(14)\
    \ == \"1111111101011\"\n@assert solve(15) == \"11111111010111\"\n@assert solve(16)\
    \ == \"111111110101101\"\n@assert solve(17) == \"1111111101011010\"\n@assert solve(18)\
    \ == \"111111110101101011\"\n@assert solve(19) == \"1111111101011010111\"\n@assert\
    \ solve(20) == \"1111111101011010110\"\n@assert solve(21) == \"11111111010110101101\"\
    \n@assert solve(22) == \"111111110101101011010\"\n@assert solve(23) == \"11111111010110101101011\"\
    \n@assert solve(24) == \"111111110101101011010111\"\n@assert solve(25) == \"111111110101101011010110\"\
    \n@assert solve(26) == \"1111111101011010110101101\"\n@assert solve(27) == \"\
    11111111010110101101011010\"\n@assert solve(28) == \"1111111101011010110101101011\"\
    \n@assert solve(29) == \"11111111010110101101011010111\"\n@assert solve(30) ==\
    \ \"11111111010110101101011010110\"\n@assert solve(31) == \"111111110101101011010110101101\"\
    \n@assert solve(32) == \"1111111101011010110101101011010\"\n@assert solve(33)\
    \ == \"111111110101101011010110101101011\"\n@assert solve(34) == \"1111111101011010110101101011010110\"\
    \n@assert solve(35) == \"11111111010110101101011010", "    if N < 0\n        return\
    \ \"-1\"\n    \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n    digits[2]\
    \ = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6]\
    \ = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    sum\
    \ = 0\n    \n    for i in digits[1..N]\n        sum += i\n        \n    return\
    \ String(digits[1..N], digits[1..N]) + String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"1100011\"\n@assert solve(7) == \"1100010011\"\n@assert solve(8) == \"1100010010011\"\
    \n@assert solve(9) == \"1100010010010011\"\n@assert solve(10) == \"1100010010010010011\"\
    \n@assert solve(11) == \"1100010010010010010011\"\n@assert solve(12) == \"1100010010010010010010011\"\
    \n@assert solve(13) == \"1100010010010010010010010011\"\n@assert solve(14) ==\
    \ \"1100010010010010010010010010011\"\n@assert solve(15) == \"1100010010010010010010010010010011\"\
    \n@assert solve(16) == \"1100010010010010010010010010010010011\"\n@assert solve(17)\
    \ == \"1100010010010010010010010010010010010011\"\n@assert solve(18) == \"1100010010010010010010010010010010010010011\"\
    \n@assert solve(19) == \"1100010010010010010010010010010010010010010011\"\n@assert\
    \ solve(20) == \"1100010010010010010010010010010010010010010010011\"\n@assert\
    \ solve(21) == \"1100010010010010010010010010010010010010010010010011\"\n@assert\
    \ solve(22) == \"1100010010010010010010010010010010010010010010010010011\"\n@assert\
    \ solve(23) == \"1100010010010010010010010010010010010010010010010010010011\"\n\
    @assert solve(24) == \"11000100100100100100100100100", "    if N < 0\n       \
    \ return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n        return\
    \ \"1\"\n    \n    digits = digits(N)\n    \n    binary = \"\"\n    \n    for\
    \ digit in digits\n        binary += digit\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"\n@assert solve(52) == \"10000000\"", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if N < 0\n        error(\"\
    N must be positive\")\n    end\n    \n    binary = \"\"\n    \n    for d in digits(N)\n\
    \        binary += d\n    end\n    \n    return binary\nend", "    if N < 0\n\
    \        throw(ArgumentError(\"N must be positive\"))\n    end\n    \n    if N\
    \ == 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n   \
    \ digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    return join(digits, \"\")\nend", "    if N < 0\n        error(\"\
    N must be positive\")\n    end\n    \n    if N == 0\n        return \"0\"\n  \
    \  end\n    \n    digits = zeros(Int, 10)\n    \n    for i = 1:10\n        digits[i]\
    \ = 0\n    end\n    \n    for i = 1:N\n        digits[N % 10] += 1\n        N\
    \ /= 10\n    end\n    \n    digits = digits[digits[end] == 1]\n    \n    digits\
    \ = digits[digits[end] == 1]\n    \n    digits = digits[digits[end] == 1]\n  \
    \  \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    digits = digits[digits[end] == 1]", "    if N < 0\n       \
    \ return \"0\"\n    \n    digits = zeros(Int64, N)\n    \n    for i = 1:N\n  \
    \      digits[i] = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n   \
    \ return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(177)\n</cell>\n<code language=julia-1.5>\n\
    solve(", "    if N == 0 \n        return \"0\"\n    \n    digits = zeros(Int,\
    \ N+1)\n    digits[1] = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4]\
    \ = 1\n    digits[5] = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8]\
    \ = 1\n    digits[9] = 1\n    \n    digits[10] = 1\n    digits[11] = 1\n    digits[12]\
    \ = 1\n    digits[13] = 1\n    digits[14] = 1\n    digits[15] = 1\n    \n    digits[16]\
    \ = 1\n    digits[17] = 1\n    digits[18] = 1\n    digits[19] = 1\n    digits[20]\
    \ = 1\n    digits[21] = 1\n    digits[22] = 1\n    digits[23] = 1\n    \n    digits[24]\
    \ = 1\n    digits[25] = 1\n    digits[26] = 1\n    digits[27] = 1\n    digits[28]\
    \ = 1\n    digits[29] = 1\n    digits[30] = 1\n    digits[31] = 1\n    \n    digits[32]\
    \ = 1\n    digits[33] = 1\n    digits[34] = 1\n    digits[35] = 1\n    digits[36]\
    \ = 1\n    digits[37] = 1\n    digits[38] = 1\n    digits[39] = 1\n    digits[40]\
    \ = 1\n    digits[41] = 1\n    \n    digits[42] = 1\n    digits[43] = 1\n    digits[44]\
    \ = 1\n    digits[45] = 1\n    digits[46] = 1\n    digits[47] = 1\n    digits[48]\
    \ = 1\n    digits[49] = 1\n    digits[50] = 1\n    digits[51] = 1\n    \n    digits[52]\
    \ = 1\n    digits[53] = 1\n    digits[54] = 1\n    digits[55] = 1\n    digits[56]\
    \ = 1\n    digits[57] = 1\n    digits[58] = 1\n    digits[59] = 1\n    digits[60]\
    \ = 1\n    digits[61] = 1\n    \n    digits[62] = 1\n    digits[63] = 1\n    digits[64]\
    \ = 1\n    digits[65] = 1\n    digits[66] = 1\n    digits[67] = 1\n    digits[68]\
    \ = 1\n    digits[69] = 1\n    digits[70] = 1\n    digits[71] = 1\n    \n    digits[72]\
    \ = 1\n    digits[73] = 1\n    digits[74] = 1\n    digits[75] = 1\n    digits[76]\
    \ = 1\n    digits[77] = 1\n    digits[78] = 1\n    digit", "    if N < 0\n   \
    \     error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int, N)\n\
    \    digits[1] = 1\n    \n    for i in 2:N\n        digits[i] = digits[i-1] *\
    \ 10 + digits[i-2]\n    end\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1]\
    \ .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n\
    \    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits\
    \ = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1]\
    \ .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n\
    \    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits\
    \ = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1]\
    \ .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n\
    \    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits\
    \ = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1]\
    \ .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n\
    \    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits\
    \ = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1]\
    \ .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n\
    \    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits\
    \ = digits[digits[1:end-1] .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1]\
    \ .!= digits[2:end]]\n    \n    digits = digits[digits[1:end-1] .!= digits[2:end]]\n\
    \    \n    digits = digits[digits[1:end-1] .!= digits[", "    if N < 0\n     \
    \   error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int, 10)\n\
    \    \n    for i = 1:N\n        digits[N % 10] += 1\n        N /= 10\n    end\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]",
  "    if N < 0\n        return \"0\"\n    if N < 10\n        return string(N)\n \
    \   \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n       \
    \ sum += d\n    \n    return string(sum)\nend", "    if N < 0\n        error(\"\
    N must be positive\")\n    \n    digits = zeros(Int, N)\n    \n    for d in digits\n\
    \        digits[d] = digits[d] + 1\n    \n    digits = digits[digits[digits] ==\
    \ digits[digits]]\n    \n    if length(digits) == 0\n        error(\"N must be\
    \ positive\")\n    \n    digits = digits[digits[digits] == digits[digits]]\n \
    \   \n    if length(digits) == 0\n        error(\"N must be positive\")\n    \n\
    \    digits = digits[digits[digits] == digits[digits]]\n    \n    if length(digits)\
    \ == 0\n        error(\"N must be positive\")\n    \n    digits = digits[digits[digits]\
    \ == digits[digits]]\n    \n    if length(digits) == 0\n        error(\"N must\
    \ be positive\")\n    \n    digits = digits[digits[digits] == digits[digits]]\n\
    \    \n    if length(digits) == 0\n        error(\"N must be positive\")\n   \
    \ \n    digits = digits[digits[digits] == digits[digits]]\n    \n    if length(digits)\
    \ == 0\n        error(\"N must be positive\")\n    \n    digits = digits[digits[digits]\
    \ == digits[digits]]\n    \n    if length(digits) == 0\n        error(\"N must\
    \ be positive\")\n    \n    digits = digits[digits[digits] == digits[digits]]\n\
    \    \n    if length(digits) == 0\n        error(\"N must be positive\")\n   \
    \ \n    digits = digits[digits[digits] == digits[digits]]\n    \n    if length(digits)\
    \ == 0\n        error(\"N must be positive\")\n    \n    digits = digits[digits[digits]\
    \ == digits[digits]]\n    \n    if length(digits) == 0\n        error(\"N must\
    \ be positive\")\n    \n    digits = digits[digits[digits] == digits[digits]]\n\
    \    \n    if length(digits) == 0\n        error(\"N must be positive\")\n   \
    \ \n    digits = digits[digits[digits] == digits[digits]]\n    \n    if length(digits)\
    \ == 0\n        error(\"N must be positive\")\n    \n    digits = digits[digits[digits]\
    \ == digits[digits]]\n    \n    if length(digits) == 0\n        error(\"N must\
    \ be positive\")\n    \n    digits = digits[digits[digits] == digits[digits]]\n\
    \    \n    if length(digits) == 0\n        error(\"N must be positive\")\n   \
    \ \n    digits = digits[digits[digits]", "    if N < 0\n        return \"0\"\n\
    \    \n    digits = N % 10\n    \n    if digits == 0\n        return \"0\"\n \
    \   \n    binary = \"\"\n    \n    for i = digits, 0, -1\n        binary = binary\
    \ + string(i)\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"", "    if N < 0\n        return \"-1\"\n   \
    \ \n    digits = String[]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    ", "    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    digits = digits[1:end-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    ", "    if N < 0\n        return \"0\"\n    if N < 10\n\
    \        return string(N)\n    if N < 100\n        return string(N, \"010\")\n\
    \    if N < 1000\n        return string(N, \"0100\")\n    if N < 10000\n     \
    \   return string(N, \"01000\")\n    if N < 100000\n        return string(N, \"\
    010000\")\n    if N < 1000000\n        return string(N, \"0100000\")\n    if N\
    \ < 10000000\n        return string(N, \"01000000\")\n    if N < 100000000\n \
    \       return string(N, \"10000000\")\n    if N < 1000000000\n        return\
    \ string(N, \"100000000\")\n    if N < 10000000000\n        return string(N, \"\
    1000000000\")\n    if N < 100000000000\n        return string(N, \"10000000000\"\
    )\n    if N < 1000000000000\n        return string(N, \"100000000000\")\n    if\
    \ N < 10000000000000\n        return string(N, \"1000000000000\")\n    if N <\
    \ 100000000000000\n        return string(N, \"10000000000000\")\n    if N < 1000000000000000\n\
    \        return string(N, \"100000000000000\")\n    if N < 10000000000000000\n\
    \        return string(N, \"1000000000000000\")\n    if N < 100000000000000000\n\
    \        return string(N, \"10000000000000000\")\n    if N < 1000000000000000000\n\
    \        return string(N, \"100000000000000000\")\n    if N < 10000000000000000000\n\
    \        return string(N, \"1000000000000000000\")\n    if N < 100000000000000000000\n\
    \        return string(N, \"10000000000000000000\")\n    if N < 1000000000000000000000\n\
    \        return string(N, \"100000000000000000000\")\n    if N < 10000000000000000000000\n\
    \        return string(N, \"1000000000000000000000\")\n    if N < 100000000000000000000000\n\
    \        return string(N, \"10000000000000000000000\")\n    if N < 1000000000000000000000000\n\
    \        return string(N, \"100000000000000000000000\")\n    if N < 10000000000000000000000000\n\
    \        return string(N, \"1000000000000000000000000\")\n    if N < 100000000000000000000000000\n\
    \        return string(N, \"10000000000000000000000000\")\n    if N < 1000000000000000000000000000\n\
    \        return string(N, \"100000000000000000000000000\")\n    if N < 10000000000000000000000000000\n\
    \        return string(N, \"1000000000000000000000000000\")\n    if N < 100000000000000000000000000000\n\
    \        return string(N, \"10000000000000000000000000000\")\n    if N < 1000000000000000000000000000000\n\
    \        return string(N, \"100000000000000000000000000000\")\n    if N < 10000000000000000000000000000000\n\
    \        return string(N, \"1000000000000000000000000000000\")\n    if N < 100000000000000000000000000000000\n\
    \        return string(N, \"10000000000000000000000000000000\")\n    if N < 1000000000000000000000000000000000\n\
    \        return string(N, \"100000000000000000000000000000000\")", "    if N <\
    \ 0\n        error(\"N must be positive\")\n    end\n    if N == 0\n        return\
    \ \"0\"\n    end\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n\
    \    for i = 2:N\n        digits[i] = digits[i-1] * 10 + digits[i-2]\n    end\n\
    \    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.", "    if N < 0\n        return \"-1\"\n    \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    if N == 1 \n        return \"1\"\n    \n\
    \    digits = zeros(Int, N)\n    \n    for i = 2:N\n        digits[i] = digits[i-1]\
    \ + digits[i-2]\n    end\n    \n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5",
  "    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = floor(log2(N))\n\
    \    \n    binary = zeros(digits, String)\n    \n    binary = fill!(binary, 0)\n\
    \    \n    binary[digits-1] = \"1\"\n    \n    binary = reverse!(binary)\n   \
    \ \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n \
    \   binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary", "    if N == 0 \n   \
    \     return \"0\"\n    \n    if N < 0 \n        return \"-1\"\n    \n    if N\
    \ < 10 \n        return string(N, \"b\")\n    \n    digits = floor(log10(N))\n\
    \    \n    if digits == 0 \n        return \"0\"\n    \n    digits = digits -\
    \ 1\n    \n    binary = string(N, \"b\")\n    \n    binary = replace(binary, digits,\
    \ digits, \"1\")\n    \n    binary = replace(binary, digits, digits, \"0\")\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0)\
    \ == \"0\"\n@assert solve(10) == \"1\"\n@assert solve(100) == \"10\"\n@assert\
    \ solve(101) == \"11\"\n@assert solve(1000) == \"1001\"\n@assert solve(10000)\
    \ == \"10101\"\n@assert solve(100000) == \"101011\"\n@assert solve(1000000) ==\
    \ \"10110101\"\n@assert solve(10000000) == \"1011010101011\"\n@assert solve(100000000)\
    \ == \"101101010101111\"\n@assert solve(1000000000) == \"10110101010111110\"\n\
    @assert solve(10000000000) == \"10110101010111110101\"\n@assert solve(100000000000)\
    \ == \"10110101010111110101011\"\n@assert solve(1000000000000) == \"1011010101011111010101111\"\
    \n@assert solve(10000000000000) == \"101101010101111101010111110\"\n@assert solve(100000000000000)\
    \ == \"101101010101111101010111110101\"\n@assert solve(1000000000000000) == \"\
    101101010101111101010111110101011\"\n@assert solve(10000000000000000) == \"10110101010111110101011111010101111\"\
    \n@assert solve(100000000000000000) == \"1011010101011111010101111101010111110\"\
    \n@assert solve(1000000000000000000) == \"1011010101011111010101111101010111110101011\"\
    \n@assert solve(10000000000000000000) == \"101101010101111101010111110101011111010101111\"\
    \n@assert solve(100000000000000000000) == \"10110101010111110101011111010101111101010111110\"\
    \n@assert solve(1000000000000000000000) == \"10110101010111110101011111010101111101010111110101\"\
    \n@assert solve(10000000000000000000000) == \"10110101010111110101011111010101111101010111110101011\"\
    \n@assert solve(100000000000000000000000) == \"1011010101011111010101111101010111110101011111010101111\"\
    \n@assert solve(1000000000000000000000000) == \"", "    \n    if N < 0\n     \
    \   return \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n    if N\
    \ == 1 \n        return \"1\"\n    \n    digits = N % 10\n    \n    if digits\
    \ == 0 \n        return \"0\"\n    \n    binary = \"\"\n    \n    for i = digits,\
    \ 0, -1 \n        binary = binary + string(i)\n    \n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function called sumdigits(N) that takes an integer N\
    \ and returns the sum of the digits in N in binary.", "    \n    if N < 0\n  \
    \      return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n  \
    \  \n    digits = string(\"0\", N)\n    \n    for i = N - 1, j = 0, k = 1\n  \
    \      while i >= k\n            digits[j] += digits[i]\n            i /= 10\n\
    \            j += 1\n            k += 1\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7: Binary\
    \ to Decimal\nGiven a binary number represented as a string, convert it to decimal\
    \ and return the decimal number.", "    if N == 0 \n        return \"0\"\n   \
    \ \n    digits = digits(N)\n    \n    digits_sum = 0\n    for digit in digits\n\
    \        digits_sum += digit\n    \n    binary_digits = bin(digits_sum)[2:]\n\
    \    \n    return binary_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert\
    \ solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\
    \n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) ==\
    \ \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11000\"\n@assert solve(25) == \"11001\"\
    \n@assert solve(26) == \"11010\"\n@assert solve(27) == \"11011\"\n@assert solve(28)\
    \ == \"11100\"\n@assert solve(29) == \"11101\"\n@assert solve(30) == \"11110\"\
    \n@assert solve(31) == \"11111\"\n@assert solve(32) == \"100000\"\n@assert solve(33)\
    \ == \"100001\"\n@assert solve(34) == \"100010\"\n@assert solve(35) == \"100011\"\
    \n@assert solve(36) == \"100100\"\n@assert solve(37) == \"100101\"\n@assert solve(38)\
    \ == \"100110\"\n@assert solve(39) == \"100111\"\n@assert solve(40) == \"101000\"\
    \n@assert solve(41) == \"101001\"\n@assert solve(42) == \"101010\"\n@assert solve(43)\
    \ == \"101011\"\n@assert solve(44) == \"101100\"\n@assert solve(45) == \"101101\"\
    \n@assert solve(46) == \"101110\"\n@assert solve(47) == \"101111\"\n@assert solve(48)\
    \ == \"110000\"\n@assert solve(49) == \"110001\"\n@assert solve(50) == \"110010\"\
    \n@assert solve(51) == \"110011\"\n", "    if N < 0\n        return \"0\"\n  \
    \  if N < 10\n        return string(\"0\", N)\n    \n    digits = string(\"0\"\
    , N)\n    digits = digits[2:end]\n    \n    digits = digits[digits[digits.length-1]\
    \ == \"1\":end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length-1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = ", "    \n    if N < 0\n\
    \        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n    if\
    \ N == 1\n        return \"1\"\n    \n    if N < 10\n        return string(N)\n\
    \    \n    digits = string(0)\n    \n    for i = 2 to N\n        digits = digits\
    \ + string(N % i)\n        N = N / i\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n", "    \n    if N\
    \ < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n    if N ==\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int64, N+1)\n    digits[1]\
    \ = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] * 2\n    end\n\
    \    \n    digits[N] = 0\n    \n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(131)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(121)\n</cell>\n<code language=julia-1.5>\nsolve(129)\n</cell>\n<code language=julia-1.5>\n\
    solve(127)\n</cell>\n<code language=julia-1.5>\nsolve(125)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(121)\n</cell>\n<code language=julia-1.5>\n\
    solve(129)\n</cell>\n<code language=julia-1.5>\nsolve(127)\n</cell>\n<code language=julia-1.5>\n\
    solve(125)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(121)\n</cell>\n<code language=julia-1.5>\nsolve(129)\n</cell>\n<code language=julia-1.5>\n\
    solve(127)\n</cell>\n<code language=julia-1.5>\nsolve(125)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(121)\n</cell>\n<code language=julia-1.5>\n\
    solve(129)\n</cell>\n<code language=julia-1.5>\nsolve(127)\n</cell>\n<code language=julia-1.5>\n\
    solve(125)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(121)\n</cell>\n<code language=julia-1.5>\nsolve(129)\n</cell>\n<code language=julia-1.5>\n\
    solve(127)\n</cell>\n<code language=julia-1.5>\nsolve(125)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(121)\n", "    if N < 0\n\
    \        error(\"N must be positive\")\n    end\n    \n    if N == 0\n       \
    \ return \"0\"\n    end\n    \n    binary = \"\"\n    \n    for d in digits(N)\n\
    \        binary = string(binary, d)\n    end\n    \n    return binary\nend", " \
    \   if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if\
    \ N == 1\n        return \"1\"\n    \n    digits = zeros(Int, N-1)\n    digits[1]\
    \ = 1\n    \n    digits[2::2] = 1\n    \n    digits[1::2] = digits[2::2]\n   \
    \ \n    digits = digits[2:end]\n    \n    digits = digits[digits[1:end-1]]\n \
    \   \n    digits = digits[digits[1:end-2]]\n    \n    digits = digits[digits[1:end-3]]\n\
    \    \n    digits = digits[digits[1:end-4]]\n    \n    digits = digits[digits[1:end-5]]\n\
    \    \n    digits = digits[digits[1:end-6]]\n    \n    digits = digits[digits[1:end-7]]\n\
    \    \n    digits = digits[digits[1:end-8]]\n    \n    digits = digits[digits[1:end-9]]\n\
    \    \n    digits = digits[digits[1:end-10]]\n    \n    digits = digits[digits[1:end-11]]\n\
    \    \n    digits = digits[digits[1:end-12]]\n    \n    digits = digits[digits[1:end-13]]\n\
    \    \n    digits = digits[digits[1:end-14]]\n    \n    digits = digits[digits[1:end-15]]\n\
    \    \n    digits = digits[digits[1:end-16]]\n    \n    digits = digits[digits[1:end-17]]\n\
    \    \n    digits = digits[digits[1:end-18]]\n    \n    digits = digits[digits[1:end-19]]\n\
    \    \n    digits = digits[digits[1:end-20]]\n    \n    digits = digits[digits[1:end-21]]\n\
    \    \n    digits = digits[digits[1:end-22]]\n    \n    digits = digits[digits[1:end-23]]\n\
    \    \n    digits = digits[digits[1:end-24]]\n    \n    digits = digits[digits[1:end-25]]\n\
    \    \n    digits = digits[digits[1:end-26]]\n    \n    digits = digits[digits[1:end-27]]\n\
    \    \n    digits = digits[digits[1:end-28]]\n    \n    digits = digits[digits[1:end-29]]\n\
    \    \n    digits = digits[digits[1:end-30]]\n    \n    digits = digits[digits[1:end-31]]\n\
    \    \n    digits = digits[digits[1:end-32]]\n    \n    digits = digits[digits[1:end-33]]\n\
    \    \n    digits = digits[digits[1:", "    if N < 0\n        return \"-1\"\n\
    \    \n    if N < 10\n        return string(N)\n    \n    digits = N % 10\n  \
    \  \n    if digits == 0\n        return solve(N / 10)\n    \n    digits = solve(digits)\n\
    \    \n    return digits + string(digits)\nend", "    \n    if N < 0\n       \
    \ return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N < 10\n\
    \        return tostring(N)\n    \n    digits = zeros(Int, 10)\n    \n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 10 + digits[i-2]\n\
    \    \n    return tostring(digits)\nend", "    \n    digits = digits(N)\n    \n\
    \    sum = 0\n    for d in digits\n        sum += d\n    \n    return string(digits,\
    \ sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert\
    \ solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\
    \n@assert solve(5) == \"10101\"\n@assert solve(6) == \"111001\"\n@assert solve(7)\
    \ == \"1110101\"\n@assert solve(8) == \"11110101\"\n@assert solve(9) == \"111110101\"\
    \n@assert solve(10) == \"1111110101\"\n@assert solve(11) == \"11111110101\"\n\
    @assert solve(12) == \"111111110101\"\n@assert solve(13) == \"1111111110101\"\n\
    @assert solve(14) == \"11111111110101\"\n@assert solve(15) == \"111111111110101\"\
    \n@assert solve(16) == \"1111111111110101\"\n@assert solve(17) == \"1111111111110101\"\
    \n@assert solve(18) == \"1111111111110101\"\n@assert solve(19) == \"1111111111110101\"\
    \n@assert solve(20) == \"1111111111110101\"\n@assert solve(21) == \"1111111111110101\"\
    \n@assert solve(22) == \"1111111111110101\"\n@assert solve(23) == \"1111111111110101\"\
    \n@assert solve(24) == \"1111111111110101\"\n@assert solve(25) == \"1111111111110101\"\
    \n@assert solve(26) == \"1111111111110101\"\n@assert solve(27) == \"1111111111110101\"\
    \n@assert solve(28) == \"1111111111110101\"\n@assert solve(29) == \"1111111111110101\"\
    \n@assert solve(30) == \"1111111111110101\"\n@assert solve(31) == \"1111111111110101\"\
    \n@assert solve(32) == \"1111111111110101\"\n@assert solve(33) == \"1111111111110101\"\
    \n@assert solve(34) == \"1111111111110101\"\n@assert solve(35) == \"1111111111110101\"\
    \n@assert solve(36) == \"1111111111110101\"\n@assert solve(37) == \"1111111111110101\"\
    \n@assert solve(38) == \"1111111111110101\"\n@assert solve(39) == \"1111111111110101\"\
    \n@assert solve(40) == \"1111111111110101\"\n@", "    \n    if N < 0\n       \
    \ return \"0\"\n    \n    digits = zeros(Int64, N)\n    \n    for i = 1:N\n  \
    \      digits[i] = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n   \
    \ return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same backward\
    \ as forward, for example, 9876 is a palindrome while 9874 is a not. Find the\
    \ largest palindrome made from the product of two 3-digit numbers.", "    \n \
    \   if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\
    \n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n\
    \    if digits == 0\n        return solve(floor(N / 10))\n    \n    digits = floor(N\
    \ / 10)\n    \n    sum = \"\"\n    \n    while digits > 0\n        sum = sum +\
    \ digit2bin(digits)\n        digits = floor(digits / 10)\n    \n    return sum\n\
    end", "    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\
    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    digits = solve(digits)\n    \n    digits = digits + N % 10\n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n   \
    \ digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits ", "  \
    \  if N == 0 \n        return \"0\"\n    \n    digits = digits(N)\n    \n    digits_sum\
    \ = digits[end]\n    \n    binary_sum = \"\"\n    \n    for i in digits\n    \
    \    binary_sum <- binary_sum + i\n    \n    return binary_sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7\nA\
    \ palindromic number reads the same both ways. The largest palindrome made from\
    \ the product of two 2-digit numbers is 9009 = 91 \xD7 99.", "    if N < 0\n \
    \       return \"0\"\n    if N < 10\n        return string(\"1\",N)\n    if N\
    \ < 100\n        return string(\"10\",N)\n    if N < 1000\n        return string(\"\
    100\",N)\n    if N < 10000\n        return string(\"1000\",N)\n    if N < 100000\n\
    \        return string(\"10000\",N)\n    if N < 1000000\n        return string(\"\
    100000\",N)\n    if N < 10000000\n        return string(\"1000000\",N)\n    if\
    \ N < 100000000\n        return string(\"10000000\",N)\n    if N < 1000000000\n\
    \        return string(\"100000000\",N)\n    if N < 10000000000\n        return\
    \ string(\"1000000000\",N)\n    if N < 100000000000\n        return string(\"\
    10000000000\",N)\n    if N < 1000000000000\n        return string(\"100000000000\"\
    ,N)\n    if N < 10000000000000\n        return string(\"1000000000000\",N)\n \
    \   if N < 100000000000000\n        return string(\"10000000000000\",N)\n    if\
    \ N < 1000000000000000\n        return string(\"100000000000000\",N)\n    if N\
    \ < 10000000000000000\n        return string(\"1000000000000000\",N)\n    if N\
    \ < 100000000000000000\n        return string(\"10000000000000000\",N)\n    if\
    \ N < 1000000000000000000\n        return string(\"100000000000000000\",N)\n \
    \   if N < 10000000000000000000\n        return string(\"1000000000000000000\"\
    ,N)\n    if N < 100000000000000000000\n        return string(\"10000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000\n        return string(\"100000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000\n        return string(\"1000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000\n        return string(\"10000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000\n        return string(\"100000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000\n        return string(\"10000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000\n        return string(\"100000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000\n        return string(\"1000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000\n        return string(\"10000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000\n        return string(\"100000000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000000\n        return string(\"1000000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000000\n        return string(\"10000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\n        return string(\"100000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000", "    \n    digits = zeros(Int,\
    \ 10)\n    \n    for i in 1:10\n        digits[i] = N % 2\n        N = N / 2\n\
    \    end\n    \n    digits[9] = N % 2\n    \n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"1011\"\n@assert solve(6) == \"11001\"\n@assert solve(7) == \"11010\"\n\
    @assert solve(8) == \"11100\"\n@assert solve(9) == \"111101\"\n@assert solve(10)\
    \ == \"111100\"\n@assert solve(11) == \"111111\"\n@assert solve(12) == \"100001\"\
    \n@assert solve(13) == \"1000001\"\n@assert solve(14) == \"1000000\"\n@assert\
    \ solve(15) == \"10000001\"\n@assert solve(16) == \"10000000\"\n@assert solve(17)\
    \ == \"100000000\"\n@assert solve(18) == \"1000000000\"\n@assert solve(19) ==\
    \ \"10000000000\"\n@assert solve(20) == \"100000000000\"\n@assert solve(21) ==\
    \ \"1000000000000\"\n@assert solve(22) == \"10000000000000\"\n@assert solve(23)\
    \ == \"100000000000000\"\n@assert solve(24) == \"1000000000000000\"\n@assert solve(25)\
    \ == \"10000000000000000\"\n@assert solve(26) == \"100000000000000000\"\n@assert\
    \ solve(27) == \"1000000000000000000\"\n@assert solve(28) == \"10000000000000000000\"\
    \n@assert solve(29) == \"100000000000000000000\"\n@assert solve(30) == \"1000000000000000000000\"\
    \n@assert solve(31) == \"10000000000000000000000\"\n@assert solve(32) == \"100000000000000000000000\"\
    \n@assert solve(33) == \"1000000000000000000000000\"\n@assert solve(34) == \"\
    10000000000000000000000000\"\n@assert solve(35) == \"100000000000000000000000000\"\
    \n@assert solve(36) == \"1000000000000000000000000000\"\n@assert solve(37) ==\
    \ \"10000000000000000000000000000\"\n@assert solve(38) == \"100000000000000000000000000000\"\
    \n@assert solve(39) == \"1000000000000000000000000000000\"\n@assert solve(40)\
    \ == \"10000000000000000000000000000000\"\n@assert solve(41) == \"100000000000000000000000000000000\"\
    \n@assert solve(42) == \"1000000000000000000000000000000000\"\n@assert solve(43)\
    \ == \"1000000000000000000000000000000000\"\n@assert solve(44) == \"1000000000000000000000000000000000\"\
    \n@assert solve(45) == \"1000000000000000000000000000000000\"\n@assert solve(46)\
    \ == \"1000000000000000000000000000000000\"\n@assert solve(47) == \"1000000000000000000000000000000000\"\
    \n@assert solve(48) == \"100", "    \n    if N < 0\n        throw(ArgumentError(\"\
    N must be positive\"))\n    end\n    \n    binary = \"\"\n    \n    for i = 1:N\n\
    \        binary = binary + string(i, 2)\n    end\n    \n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47)\
    \ == \"100020\"\n@assert solve(48) == \"100021\"\n@assert solve(49) == \"100022\"\
    \n@assert solve(50) == \"100023\"\n@assert solve(51) == \"100024\"\n@assert solve(52)\
    \ == \"100025\"\n@", "    \n    if N < 0\n        return \"0\"\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    binary = zeros(Int, N)\n    \n  \
    \  for i = 1:N\n        binary[i] = digits[i] > 0 ? \"1\" : \"0\"\n        digits[i]\
    \ = digits[i] - 1\n    end\n    \n    return join(binary, digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<text>\nProblem 4\nWrite a Julia\
    \ function called solve that takes a positive integer N and returns the number\
    \ of digits in binary that come after N in decimal.", "    \n    if N < 0\n  \
    \      return \"0\"\n    \n    digits = String[1..N]\n    \n    digits_bin = digits[digits[digits.length-1]\
    \ == \"1\"]\n    \n    sum_digits_bin = digits_bin.reduce(+) \n    \n    return\
    \ String(sum_digits_bin)\nend", "    if N < 0\n        error(\"N must be positive\"\
    )\n    end\n    \n    digits = zeros(Int, N)\n    \n    for n in 1:N\n       \
    \ digits[n] = digits[n-1] + digits[n-2]\n    end\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[digits[end] == 1]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    digits = digits[digits[end] == 0]\n    ", "    if N < 0\n \
    \       error(\"N must be positive\")\n    end\n    \n    digits = zeros(Int,\
    \ N)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1]\
    \ * 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a Julia function that takes a positive integer N and returns the number\
    \ of digits in binary representation of N. For example, solve(1000) should return\
    \ 3.", "    if N == 0 \n        return \"0\"\n    if N < 0 \n        return \"\
    0\"\n    if N < 10 \n        return string(\"0\", N)\n    \n    digits = string(\"\
    0\", N)\n    digits = digits[2:end]\n    \n    digits = digits[digits.length ..\
    \ -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length .. -1]\n    \n    digits = digits[digits.length\
    \ .. -1]\n    \n    digits = digits[digits.length ", "    if N == 0 \n       \
    \ return \"0\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n  \
    \  for i in 2:N\n        digits[i] = digits[i-1] * 2\n    \n    sum = 0\n    for\
    \ i in digits[2:end]\n        sum += i\n    \n    return String(sum)\nend", " \
    \   \n    digits = digits(N)\n    \n    sum = 0\n    for i in digits\n       \
    \ sum += i\n    \n    return string(digits, sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.", "    if N < 0\n        return \"-1\"\n    \n    if N ==\
    \ 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n\
    \    \n    digits = string(\"0\", N)\n    \n    digits[1:end-1] = digits[1:end-1]\
    \ .+ digits[2:end]\n    \n    return digits\nend", "    \n    if N < 0\n     \
    \   return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    ", "    \n  \
    \  if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n  \
    \  for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N / 2\n \
    \   end\n    \n    return join(digits, \"\")\nend", "    if N < 0\n        return\
    \ \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n        return \"\
    1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    digits = solve(digits)\n\
    \    \n    return digits + solve(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(177)\n</cell>\n<code language=julia-1.5",
  "    \n    digits = N % 10\n    \n    if digits == 0\n        digits = N / 10\n\
    \    \n    binary = digits:: Int64\n    \n    sum = 0\n    \n    for i in binary\n\
    \        sum += i\n    \n    return sum::String\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(140)\n</cell>\n<code language=julia-1.5>\nsolve(141)\n</cell>\n<code language=julia-1.5>\n\
    solve(142)\n</cell>\n<code language=julia-1.5>\nsolve(143)\n</cell>\n<code language=julia-1.5>\n\
    solve(144)\n</cell>\n<code language=julia-1.5>\nsolve(145)\n</cell>\n<code language=julia-1.5>\n\
    solve(146)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(140)\n</cell>\n<code language=julia-1.5>\n\
    solve(141)\n</cell>\n<code language=julia-1.5>\nsolve(142)\n</cell>\n<code language=julia-1.5>\n\
    solve(143)\n</cell>\n<code language=julia-1.5>\nsolve(144)\n</cell>\n<code language=julia-1.5>\n\
    solve(145)\n</cell>\n<code language=julia-1.5>\nsolve(146)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(140)\n</cell>\n<code language=julia-1.5>\nsolve(141)\n</cell>\n<code language=julia-1.5>\n\
    solve(142)\n</cell>\n<code language=julia-1.5>\nsolve(143)\n</cell>\n<code language=julia-1.5>\n\
    solve(144)\n</cell>\n<code language=julia-1.5>\nsolve(145)\n</cell>\n<code language=julia-1.5>\n\
    solve(146)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(140)\n</cell>\n<code language=julia-",
  "    if N < 0\n        error(\"N must be positive\")\n    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    return join(digits, \"\")\nend", "    if N < 0\n\
    \        throw(ArgumentError(\"N must be positive\"))\n    \n    digits = zeros(Int,\
    \ N)\n    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1]\
    \ * 2\n    end\n    \n    return join(digits, \"\")\nend", "    if N < 0\n   \
    \     return \"0\"\n    if N < 10\n        return string(\"0\", N)\n    \n   \
    \ digits = string(\"0\", N)\n    \n    for i in 1:N\n        digits = digits[1:]\
    \ + string(\"1\", digits[2:end-1])\n    end\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7", " \
    \   \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n    digits[2] = 1\n   \
    \ digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n   \
    \ digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    digits[10] = 1\n  \
    \  digits[11] = 1\n    digits[12] = 1\n    digits[13] = 1\n    digits[14] = 1\n\
    \    digits[15] = 1\n    digits[16] = 1\n    digits[17] = 1\n    digits[18] =\
    \ 1\n    digits[19] = 1\n    digits[20] = 1\n    digits[21] = 1\n    digits[22]\
    \ = 1\n    digits[23] = 1\n    digits[24] = 1\n    digits[25] = 1\n    digits[26]\
    \ = 1\n    digits[27] = 1\n    digits[28] = 1\n    digits[29] = 1\n    digits[30]\
    \ = 1\n    digits[31] = 1\n    digits[32] = 1\n    digits[33] = 1\n    digits[34]\
    \ = 1\n    digits[35] = 1\n    digits[36] = 1\n    digits[37] = 1\n    digits[38]\
    \ = 1\n    digits[39] = 1\n    digits[40] = 1\n    digits[41] = 1\n    digits[42]\
    \ = 1\n    digits[43] = 1\n    digits[44] = 1\n    digits[45] = 1\n    digits[46]\
    \ = 1\n    digits[47] = 1\n    digits[48] = 1\n    digits[49] = 1\n    digits[50]\
    \ = 1\n    digits[51] = 1\n    digits[52] = 1\n    digits[53] = 1\n    digits[54]\
    \ = 1\n    digits[55] = 1\n    digits[56] = 1\n    digits[57] = 1\n    digits[58]\
    \ = 1\n    digits[59] = 1\n    digits[60] = 1\n    digits[61] = 1\n    digits[62]\
    \ = 1\n    digits[63] = 1\n    digits[64] = 1\n    digits[65] = 1\n    digits[66]\
    \ = 1\n    digits[67] = 1\n    digits[68] = 1\n    digits[69] = 1\n    digits[70]\
    \ = 1\n    digits[71] = 1\n    digits[72] = 1\n    digits[73] = 1\n    digits[74]\
    \ = 1\n    digits[75] = 1\n    digits[76] = 1\n    digits[77] = 1\n    digits[78]\
    \ = 1\n    digits[79] = 1\n    digits[80] = 1\n    digits[81] = 1\n    digits[82]\
    \ = 1\n", "    \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    digits[N] = 1\n    \n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell", "    \n    binary = \"\"\n    \n    for n in N:\n       \
    \ binary += format(n, \"b\")\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"11100\"\n@assert solve(7) == \"1110101\"\n@assert solve(8) == \"11110100\"\
    \n@assert solve(9) == \"1111010101\"\n@assert solve(10) == \"11110110100\"\n@assert\
    \ solve(11) == \"1111011010101\"\n@assert solve(12) == \"11110110110100\"\n@assert\
    \ solve(13) == \"1111011011010101\"\n@assert solve(14) == \"11110110110110100\"\
    \n@assert solve(15) == \"1111011011011010101\"\n@assert solve(16) == \"11110110110110110100\"\
    \n@assert solve(17) == \"1111011011011011010101\"\n@assert solve(18) == \"11110110110110110110100\"\
    \n@assert solve(19) == \"111101101101101101010101\"\n@assert solve(20) == \"1111011011011011011010010\"\
    \n@assert solve(21) == \"111101101101101101101001011\"\n@assert solve(22) == \"\
    11110110110110110110100101111\"\n@assert solve(23) == \"1111011011011011011010010111112\"\
    \n@assert solve(24) == \"111101101101101101101001011111213\"\n@assert solve(25)\
    \ == \"11110110110110110110100101111121314\"\n@assert solve(26) == \"1111011011011011011010010111112131415\"\
    \n@assert solve(27) == \"111101101101101101101001011111213141516\"\n@assert solve(28)\
    \ == \"11110110110110110110100101111121314151617\"\n@assert solve(29) == \"1111011011011011011010010111112131415161718\"\
    \n@assert solve(30) == \"111101101101101101101001011111213141516171819\"\n@assert\
    \ solve(31) == \"11110110110110110110100101111121314151617181920\"\n@assert solve(32)\
    \ == \"1111011011011011011010010111112131415161718192020\"\n@assert solve(33)\
    \ == \"11", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ N < 0\n        error(\"N must be positive\")\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits\
    \ = digits(N)\n    \n    sum = 0\n    \n    for digit in digits\n        sum +=\
    \ digit\n    \n    return string(\"1\", sum)\nend", "    \n    digits = digits(N)\n\
    \    \n    binary = \"\"\n    \n    for digit in digits\n        binary += digit\n\
    \        \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n\
    @assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"111001\"\n@assert solve(7) == \"1110101\"\n@assert solve(8) == \"11110101\"\
    \n@assert solve(9) == \"111110101\"\n@assert solve(10) == \"1111110101\"\n@assert\
    \ solve(11) == \"11111110101\"\n@assert solve(12) == \"111111110101\"\n@assert\
    \ solve(13) == \"1111111110101\"\n@assert solve(14) == \"11111111110101\"\n@assert\
    \ solve(15) == \"111111111110101\"\n@assert solve(16) == \"1111111111110101\"\n\
    @assert solve(17) == \"1111111111110101\"\n@assert solve(18) == \"1111111111110101\"\
    \n@assert solve(19) == \"1111111111110101\"\n@assert solve(20) == \"1111111111110101\"\
    \n@assert solve(21) == \"1111111111110101\"\n@assert solve(22) == \"1111111111110101\"\
    \n@assert solve(23) == \"1111111111110101\"\n@assert solve(24) == \"1111111111110101\"\
    \n@assert solve(25) == \"1111111111110101\"\n@assert solve(26) == \"1111111111110101\"\
    \n@assert solve(27) == \"1111111111110101\"\n@assert solve(28) == \"1111111111110101\"\
    \n@assert solve(29) == \"1111111111110101\"\n@assert solve(30) == \"1111111111110101\"\
    \n@assert solve(31) == \"1111111111110101\"\n@assert solve(32) == \"1111111111110101\"\
    \n@assert solve(33) == \"1111111111110101\"\n@assert solve(34) == \"1111111111110101\"\
    \n@assert solve(35) == \"1111111111110101\"\n@assert solve(36) == \"1111111111110101\"\
    \n@assert solve(37) == \"1111111111110101\"\n@assert solve(38) == \"1111111111110101\"\
    \n@assert solve(39) == \"1111111111110101\"\n@assert solve(40) == \"1111111111110101\"\
    \n", "    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n \
    \   digits[1] = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n \
    \   digits[5] = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n \
    \   digits[9] = 1\n    \n    sum = 0\n    for i in digits\n        sum += i\n\
    \    \n    return String(sum)\nend", "    \n    digits = digits(N)\n    \n   \
    \ if N == 0 \n        return \"0\"\n    \n    if N < 0 \n        return \"-1\"\
    \n    \n    if N == 1 \n        return \"1\"\n    \n    if N > 1 \n        digits\
    \ = digits(N)\n        \n        binary = \"\"\n        \n        for digit in\
    \ digits\n            binary += digit\n            \n        return binary\n \
    \   \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(N::Int64)",
  "    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for d in digits[0..N-1]\n        digits[d] = digits[d]\
    \ + 1\n    end\n    \n    sum = \"\"\n    for d in digits\n        sum = sum *\
    \ \"1\" * d\n    end\n    \n    return sum\nend", "    if N < 0\n        error(\"\
    N must be positive\")\n    \n    digits = N % 10\n    \n    if digits == 0\n \
    \       return \"0\"\n    \n    binary = \"\"\n    \n    while N > 0\n       \
    \ digit = N % 10\n        N = N / 10\n        binary = string(digit) + binary\n\
    \    \n    return binary\nend\n</cell>\n<text>\nProblem 7\nWrite a Julia function\
    \ that returns the number of digits in binary representation of a positive integer\
    \ N. For example, solve(1000) should return 3.", "    \n    if N < 0\n       \
    \ error(\"N must be positive\")\n    \n    binary = \"\"\n    \n    for d in digits(N)\n\
    \        binary += d\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"111001\"\n@assert solve(7) == \"1110101\"\n@assert solve(8) == \"11110101\"\
    \n@assert solve(9) == \"111110101\"\n@assert solve(10) == \"1111111001\"\n@assert\
    \ solve(11) == \"11111110101\"\n@assert solve(12) == \"111111110101\"\n@assert\
    \ solve(13) == \"111111110110\"\n@assert solve(14) == \"1111111101011\"\n@assert\
    \ solve(15) == \"1111111101101\"\n@assert solve(16) == \"11111111011010\"\n@assert\
    \ solve(17) == \"111111110110100\"\n@assert solve(18) == \"1111111101101000\"\n\
    @assert solve(19) == \"11111111011010000\"\n@assert solve(20) == \"111111110110100000\"\
    \n@assert solve(21) == \"1111111101101000000\"\n@assert solve(22) == \"11111111011010000000\"\
    \n@assert solve(23) == \"111111110110100000000\"\n@assert solve(24) == \"1111111101101000000000\"\
    \n@assert solve(25) == \"11111111011010000000000\"\n@assert solve(26) == \"111111110110100000000000\"\
    \n@assert solve(27) == \"1111111101101000000000000\"\n@assert solve(28) == \"\
    11111111011010000000000000\"\n@assert solve(29) == \"111111110110100000000000000\"\
    \n@assert solve(30) == \"1111111101101000000000000000\"\n@assert solve(31) ==\
    \ \"11111111011010000000000000000\"\n@assert solve(32) == \"1111111101101000000000000000000\"\
    \n@assert solve(33) == \"11111111011010000000000000000000\"\n@assert solve(34)\
    \ == \"111111110110100000000000000000000\"\n@assert solve(35) == \"1111111101101000000000000000000000\"\
    \n@assert solve(36) == \"11111111011010000000000000000000000\"\n@assert solve(37)\
    \ == \"111111110110100000000000000000000000\"\n@assert solve(38) == \"1111111101101000000000000000000000000\"\
    \n@assert solve(39) == \"11111111011010000000000000000000000000\"\n@assert solve(40)\
    \ == \"1111", "    if N < 0\n        error(\"N must be positive\")\n    end\n\
    \    if N == 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n\
    \    digits[1] = 1\n    \n    digits[2::2] = 1\n    digits[2::2] = digits[2::2]\
    \ * 2\n    \n    digits[5::2] = 1\n    digits[5::2] = digits[5::2] * 2\n    \n\
    \    digits[8::2] = 1\n    digits[8::2] = digits[8::2] * 2\n    \n    digits[10::2]\
    \ = 1\n    digits[10::2] = digits[10::2] * 2\n    \n    digits[12::2] = 1\n  \
    \  digits[12::2] = digits[12::2] * 2\n    \n    digits[15::2] = 1\n    digits[15::2]\
    \ = digits[15::2] * 2\n    \n    digits[18::2] = 1\n    digits[18::2] = digits[18::2]\
    \ * 2\n    \n    digits[21::2] = 1\n    digits[21::2] = digits[21::2] * 2\n  \
    \  \n    digits[24::2] = 1\n    digits[24::2] = digits[24::2] * 2\n    \n    digits[27::2]\
    \ = 1\n    digits[27::2] = digits[27::2] * 2\n    \n    digits[30::2] = 1\n  \
    \  digits[30::2] = digits[30::2] * 2\n    \n    digits[33::2] = 1\n    digits[33::2]\
    \ = digits[33::2] * 2\n    \n    digits[36::2] = 1\n    digits[36::2] = digits[36::2]\
    \ * 2\n    \n    digits[39::2] = 1\n    digits[39::2] = digits[39::2] * 2\n  \
    \  \n    digits[42::2] = 1\n    digits[42::2] = digits[42::2] * 2\n    \n    digits[45::2]\
    \ = 1\n    digits[45::2] = digits[45::2] * 2\n    \n    digits[48::2] = 1\n  \
    \  digits[48::2] = digits[48::2] * 2\n    \n    digits[51::2] = 1\n    digits[51::2]\
    \ = digits[51::2] * 2\n    \n    digits[54::2] = 1\n    digits[54::2] = digits[54::2]\
    \ * 2\n    \n    digits[57::2] = 1\n    digits[57::2] = digits[", "    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n\
    \    \n    for i in 2:N\n        digits[i] = digits[i-1] * 10 + digits[i-2]\n\
    \    end\n    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert solve(51)\
    \ == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert solve(53", "    if\
    \ N < 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"0\"\
    , N)\n    \n    digits = string(\"0\", N)\n    \n    for i = N - 1, j = 0, k =\
    \ 1\n        while i >= k\n            digits[j] += digits[i]\n            i /=\
    \ 10\n            j += 1\n            k += 1\n    \n    return digits\nend", " \
    \   \n    binary = \"\"\n    \n    if N < 0\n        error(\"N must be positive\"\
    )\n    \n    if N == 0\n        binary = \"0\"\n    \n    if N < 10\n        binary\
    \ = \"0\"\n    \n    if N < 100\n        binary = \"0\"\n    \n    if N < 1000\n\
    \        binary = \"0\"\n    \n    if N < 10000\n        binary = \"0\"\n    \n\
    \    if N < 100000\n        binary = \"0\"\n    \n    if N < 1000000\n       \
    \ binary = \"0\"\n    \n    if N < 10000000\n        binary = \"0\"\n    \n  \
    \  if N < 100000000\n        binary = \"0\"\n    \n    if N < 1000000000\n   \
    \     binary = \"0\"\n    \n    if N < 10000000000\n        binary = \"0\"\n \
    \   \n    if N < 100000000000\n        binary = \"0\"\n    \n    if N < 1000000000000\n\
    \        binary = \"0\"\n    \n    if N < 10000000000000\n        binary = \"\
    0\"\n    \n    if N < 100000000000000\n        binary = \"0\"\n    \n    if N\
    \ < 1000000000000000\n        binary = \"0\"\n    \n    if N < 10000000000000000\n\
    \        binary = \"0\"\n    \n    if N < 100000000000000000\n        binary =\
    \ \"0\"\n    \n    if N < 1000000000000000000\n        binary = \"0\"\n    \n\
    \    if N < 10000000000000000000\n        binary = \"0\"\n    \n    if N < 100000000000000000000\n\
    \        binary = \"0\"\n    \n    if N < 1000000000000000000000\n        binary\
    \ = \"0\"\n    \n    if N < 10000000000000000000000\n        binary = \"0\"\n\
    \    \n    if N < 100000000000000000000000\n        binary = \"0\"\n    \n   \
    \ if N < 1000000000000000000000000\n        binary = \"0\"\n    \n    if N < 10000000000000000000000000\n\
    \        binary = \"0\"\n    \n    if N < 100000000000000000000000000\n      \
    \  binary = \"0\"\n    \n    if N < 1000000000000000000000000000\n        binary\
    \ = \"0\"\n    \n    if N < 10000000000000000000000000000\n        binary = \"\
    0\"\n    \n    if N < 100000000000000000000000000000\n        binary = \"0\"\n\
    \    \n    if N < 1000000000000000000000000000000\n        binary = \"0\"\n  \
    \  \n    if N < 10000000000000000000000000000000\n        binary = \"0\"\n   \
    \ \n    if N < 100000000000000000000000000000000\n        binary = \"0\"\n   \
    \ \n    if N < 1000000000000000000000000000000000\n        binary = \"0\"\n  \
    \  \n    if N < 1000000000000000000000000000000000\n        binary = \"0\"\n \
    \   \n    if N < 1000000000000000000000000000000000\n        binary = \"", " \
    \   \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n   \
    \ \n    if N == 0\n        return \"0\"\n    \n    digits = N % 10\n    \n   \
    \ if digits == 0\n        return \"1\"\n    \n    digits = N / 10\n    \n    if\
    \ digits == 0\n        return \"0\"\n    \n    digits = N / 10\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    digits = N / 10\n    \n    if digits ==\
    \ 0\n        return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n\
    \        return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n \
    \       return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n  \
    \      return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n   \
    \     return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n    \
    \    return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n     \
    \   return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n      \
    \  return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n       \
    \ return \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n        return\
    \ \"0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n        return \"\
    0\"\n    \n    digits = N / 10\n    \n    if digits == 0\n        return \"0\"\
    \n    \n    digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n\
    \    \n    digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n \
    \   \n    digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n  \
    \  \n    digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n   \
    \ \n    digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n    \n\
    \    digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n    \n \
    \   digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n    \n  \
    \  digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n    \n   \
    \ digits = N / 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = N / 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits =\
    \ N / 10\n    \n", "    \n    if N < 0\n        return \"-1\"\n    \n    if N\
    \ == 0\n        return \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n\
    \    digits = String[]\n    \n    digits = digits[0..N-1]\n    \n    digits =\
    \ digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n\
    \    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n    \n    digits = digits[0..N-1]\n\
    \    \n    digits = digits[", "    if N < 0\n        error(\"N must be positive\"\
    )\n    end\n    \n    if N == 0\n        return \"0\"\n    end\n    \n    if N\
    \ < 10\n        return string(N, \"0\") \n    end\n    \n    digits = string(0,\
    \ \"0\")\n    \n    for i = 1:N\n        digits = string(digits, string(i, digits[i-1]))\n\
    \    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n \
    \   \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N\
    \ / 2\n    end\n    \n    return join(digits)\nend", "    if N < 0\n        error(\"\
    N must be positive\")\n    end\n    if N == 0\n        return \"0\"\n    end\n\
    \    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n    for i = 2:N\n\
    \        digits[i] = digits[i-1] * 2\n    end\n    \n    sum = 0\n    for i =\
    \ 2:N\n        sum = sum + digits[i]\n    end\n    \n    return string(digits,\
    \ digits[N])\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ \xD7 99.", "    if N < 0\n        error(\"N must be positive\")\n    \n    if\
    \ N == 0 \n        return \"0\"\n    \n    if N == 1\n        return \"1\"\n \
    \   \n    digits = zeros(Int, N)\n    \n    digits[1] = 1\n    \n    for i = 2\
    \ to N\n        digits[i] = digits[i-1] * 2\n    \n    digits = digits[2..N]\n\
    \    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Given a positive integer N, return the total sum of its digits in binary.\n\
    \    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"\
    110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"", "    \n    digits = digits(N)\n    \n    if N\
    \ < 0\n        return \"0\"\n    \n    sum = 0\n    \n    for digit in digits\n\
    \        sum += digit\n    \n    return bin(sum)[2:]\nend", "    \n    digits\
    \ = digits(N)\n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n\
    \        return \"0\"\n    \n    if N < 10\n        return digits[1]\n    \n \
    \   digits_reversed = reverse(digits)\n    \n    if digits_reversed[1] == \"0\"\
    \n        return digits_reversed[0]\n    \n    digits_reversed_reversed = reverse(digits_reversed)\n\
    \    \n    if digits_reversed_reversed[1] == \"0\"\n        return digits_reversed_reversed[0]\n\
    \    \n    digits_reversed_reversed_reversed = reverse(digits_reversed_reversed)\n\
    \    \n    if digits_reversed_reversed_reversed[1] == \"0\"\n        return digits_reversed_reversed_reversed[0]\n\
    \    \n    digits_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed)\n\
    \    \n    if digits_reversed_reversed_reversed_reversed[1] == \"0\"\n       \
    \ return digits_reversed_reversed_reversed_reversed[0]\n    \n    digits_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed)\n    \n    if digits_reversed_reversed_reversed_reversed_reversed[1]\
    \ == \"0\"\n        return digits_reversed_reversed_reversed_reversed_reversed[0]\n\
    \    \n    digits_reversed_reversed_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    \n    if digits_reversed_reversed_reversed_reversed_reversed_reversed[1]\
    \ == \"0\"\n        return digits_reversed_reversed_reversed_reversed_reversed_reversed[0]\n\
    \    \n    digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    \n    if digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[1]\
    \ == \"0\"\n        return digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed[0]\n\
    \    \n    digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    \n    if digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[1]\
    \ == \"0\"\n        return digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed[0]\n\
    \    \n    digits_reversed_reversed_reversed_"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
