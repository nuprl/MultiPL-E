name: HumanEval_0_has_close_elements
language: jl
prompt: "\"\"\" Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0],\
  \ 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
  \    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0,\
  \ 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\
  \ == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
  \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
  end\n"
completions: ["    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    return\
    \ any(distances <= maximum(distances))\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes in a list of numbers and returns the number of elements\
    \ in the list that are greater than the given threshold.", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_closest = findfirst(\n        x -> abs(x\
    \ - numbers_sorted[1]) < threshold,\n        numbers_sorted\n    )\n    \n   \
    \ if index_of_closest == length(numbers_sorted)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<text>\nExercise 3: Implement the\
    \ function has_close_elements_v2() that has the same functionality as has_close_elements(),\
    \ but uses vectorized operations.", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ - numbers[i-1] > threshold\n            return true\n        end\n        \n\
    \        i = i + 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of elements in a list that satisfy\
    \ a given condition. \nFor example, if the list is [1, 2, 3, 4] and we want the\
    \ number of elements that are greater than 3, the function should return 2.",
  "    \n    numbers = sort(numbers)\n    \n    if length(numbers) < 2\n        return\
    \ false\n    end\n    \n    i = 2\n    while i < length(numbers)\n        if numbers[i]\
    \ - numbers[i - 1] < threshold\n            return true\n        end\n       \
    \ i += 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns true if a number is divisible by another number. Hint:\
    \ use the % operator.", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i >= 2\n        if numbers[i-1] - numbers[i] > threshold\n  \
    \          return true\n        end\n        i -= 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns a vector with its elements sorted. \nThe function should return\
    \ a new vector that has the same length as the original vector. \nThe function\
    \ should sort the elements of the original vector in ascending order. \nThe function\
    \ should return a new vector that has the same length as the original vector.\
    \ \nThe function should sort the elements of the original vector in descending\
    \ order. \nThe function should return a new vector that has the same length as\
    \ the original vector. \nThe function should sort the elements of the original\
    \ vector in ascending order. \nThe function should return a new vector that has\
    \ the same length as the original vector. \nThe function should sort the elements\
    \ of the original vector in descending order. \nThe function should return a new\
    \ vector that has the same length as the original vector. \nThe function should\
    \ sort the elements of the original vector in ascending order. \nThe function\
    \ should return a new vector that has the same length as the original vector.\
    \ \nThe function should sort the elements of the original vector in descending\
    \ order. \nThe function should return a new vector that has the same length as\
    \ the original vector. \nThe function should sort the elements of the original\
    \ vector in ascending order. \nThe function should return a new vector that has\
    \ the same length as the original vector. \nThe function should sort the elements\
    \ of the original vector in descending order. \nThe function should return a new\
    \ vector that has the same length as the original vector. \nThe function should\
    \ sort the elements of the original vector in ascending order. \nThe function\
    \ should return a new vector that has the same length as the original vector.\
    \ \nThe function should sort the elements of the original vector in descending\
    \ order. \nThe function should return a new vector that has the same length as\
    \ the original vector. \nThe function should sort the elements of the original\
    \ vector in ascending order. \nThe function should return a new vector that has\
    \ the same length as the original vector. \nThe function should sort the elements\
    \ of the original vector in descending order. \nThe function should return a new\
    \ vector that has the same length as the original vector. \nThe function should\
    \ sort the elements of the original vector in ascending order. \nThe function\
    \ should return a new vector that has the same length as the original vector.\
    \ \nThe function should sort the elements of the original vector in descending\
    \ order. \nThe function should return a new vector that has the same length as\
    \ the original vector. \nThe function should sort the elements of the original\
    \ vector in ascending order. \nThe function ", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a vector has all elements\
    \ of a given set. For example, given [1,2,3], return true.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n    \n    while i\
    \ < j\n        if numbers[i] == numbers[j] \n            i += 1\n            j\
    \ += 1\n        elseif abs(numbers[i] - numbers[j]) < threshold\n            i\
    \ += 1\n        else\n            j += 1\n        end\n    end\n    \n    return\
    \ i == j\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and a threshold and returns a list containing only the numbers that\
    \ are closer to each other than the given threshold.", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n \
    \   \n    idx = 0\n    while idx < length(numbers)\n        if numbers[idx] -\
    \ numbers[idx - 1] > threshold\n            return true\n        end\n       \
    \ idx += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] < threshold\n            return true\n\
    \        end\n        i += 1\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given number appears in a given list.\n    >>> count_elements([1, 2, 3, 4,\
    \ 4, 5])\n    3\n    >>> count_elements([1, 2, 3, 4, 4, 5], 5)\n    1\n    \"\"\
    \"", "    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers_sorted)\n        \n        j = i + 1\n        \n        while\
    \ j < length(numbers_sorted)\n            \n            if numbers_sorted[j] -\
    \ numbers_sorted[i] > threshold\n                \n                return false\n\
    \            \n            j += 1\n            \n        i += 1\n        \n  \
    \  return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_first_element = findfirst(numbers_sorted\
    \ .< threshold)\n    \n    if index_of_first_element == nothing\n        false\n\
    \    else\n        index_of_second_element = findfirst(numbers_sorted .> threshold)\n\
    \        \n        if index_of_second_element == nothing\n            true\n \
    \       else\n            index_of_third_element = findfirst(numbers_sorted .==\
    \ numbers[index_of_second_element])\n            \n            if index_of_third_element\
    \ == nothing\n                false\n            else\n                index_of_fourth_element\
    \ = findfirst(numbers_sorted .== numbers[index_of_third_element])\n          \
    \      \n                if index_of_fourth_element == nothing\n             \
    \       false\n                else\n                    index_of_fifth_element\
    \ = findfirst(numbers_sorted .== numbers[index_of_fourth_element])\n         \
    \           \n                    if index_of_fifth_element == nothing\n     \
    \                   false\n                    else\n                        index_of_sixth_element\
    \ = findfirst(numbers_sorted .== numbers[index_of_fifth_element])\n          \
    \              \n                        if index_of_sixth_element == nothing\n\
    \                            false\n                        else\n           \
    \                 true\n                    end\n                end\n       \
    \     end\n        end\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the number of elements in a vector that are less than a given threshold.",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - threshold) < abs(numbers_sorted[end] - threshold), numbers_sorted)\n\
    \    \n    return index_of_closest != nothing\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ == numbers[i+1]\n            i += 1\n        else\n            \n          \
    \  if abs(numbers[i] - numbers[i+1]) < threshold\n                return true\n\
    \            end\n            \n            i += 1\n        end\n    end\n   \
    \ \n    return false\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the numbers in the list. \nIf the list\
    \ is empty, return 0.\nIf the list has only one number, return that number.\n\
    If the list has two or more numbers, return the sum of the two numbers.\nWrite\
    \ a test function that tests your function.", "    \n    numbers = sort(numbers)\n\
    \    \n    if length(numbers) < 2\n        return false\n    end\n    \n    i\
    \ = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i] ==\
    \ numbers[i+1]\n            i += 1\n        else\n            \n            if\
    \ abs(numbers[i] - numbers[i+1]) < threshold\n                return true\n  \
    \          end\n            \n            i += 1\n        end\n    end\n    \n\
    \    return false\nend\n</cell>\n<code language=julia-1.4>", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n    \
    \    \n        j = i + 1\n        \n        while j < length(numbers)\n      \
    \      \n            if abs(numbers[i] - numbers[j]) < threshold\n           \
    \     return true\n            \n            j += 1\n        end\n        \n \
    \       i += 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = sqrt((numbers[i] - numbers[i - 1]) * (numbers[i] - numbers[i\
    \ - 1]))\n    end\n    \n    for i in 1:length(numbers)\n        if distances[i]\
    \ <= threshold\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        j = i\
    \ + 1\n        \n        while j < length(numbers)\n            \n           \
    \ if abs(numbers[i] - numbers[j]) < threshold\n                return true\n \
    \           \n            j += 1\n        end\n        \n        i += 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of numbers and a threshold and returns a vector of booleans indicating\
    \ which numbers are in the given vector that are closer to each other than the\
    \ given threshold.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given array contains any two numbers that are closer\
    \ to each other than the given threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ - numbers[i - 1] < threshold\n            return true\n        end\n       \
    \ \n        i = i + 1\n    end\n    \n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers.\nTest your function with lists of numbers from\
    \ 1 to 10.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\
    \ - 1\n    \n    while i < j\n        if numbers[i] + threshold < numbers[j]\n\
    \            i += 1\n        elseif numbers[j] + threshold < numbers[i]\n    \
    \        j -= 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nThe function above checks if any two numbers are\
    \ closer to each other than the given threshold. Let's see how it works:", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 2\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] - numbers[i-1] > threshold\n            return\
    \ true\n        end\n        \n        i = i + 1\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector and returns\
    \ a new vector with elements multiplied by a constant factor.\nFor example, if\
    \ the input vector is [1.0, 2.0, 3.0], the output vector should be [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0].\nHint: use map!.", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nNow let's try it out!", "    \n    numbers = sort(numbers)\n    \n   \
    \ idx = 0\n    while idx < length(numbers)-1 do\n        if numbers[idx] == numbers[idx+1]\
    \ then\n            idx += 1\n        else\n            if abs(numbers[idx] -\
    \ numbers[idx+1]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a number is in a given list of numbers, ignoring order.",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    \n    while i > 1\n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        \n \
    \       i = i - 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i >= 2\n        if numbers[i] - numbers[i - 1] < threshold\n            return\
    \ true\n        end\n        i -= 1\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    j = length(numbers) - 1\n    \n    while i < j\n        if numbers[i]\
    \ + threshold < numbers[j] + threshold\n            return true\n        else\n\
    \            i += 1\n            j = i\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers. \nThe function\
    \ should raise an error if the vector is empty.\nHint: use the reduce function.",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] < threshold\n            return true\n\
    \        end\n        idx += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers.\nThe function should raise an error if the vector\
    \ is empty.\nThe function should raise an error if the vector contains non-numbers.\n\
    The function should raise an error if the vector contains negative numbers.\n\
    The function should raise an error if the vector contains duplicate numbers.\n\
    The function should raise an error if the vector contains numbers that are not\
    \ integers.\nThe function should raise an error if the vector contains numbers\
    \ that are not in the range 0 to 100.\nThe function should raise an error if the\
    \ vector contains numbers that are not in the range 0 to 100.\nThe function should\
    \ raise an error if the vector contains numbers that are not in the range 0 to\
    \ 100.\nThe function should raise an error if the vector contains numbers that\
    \ are not in the range 0 to 100.\nThe function should raise an error if the vector\
    \ contains numbers that are not in the range 0 to 100.\nThe function should raise\
    \ an error if the vector contains numbers that are not in the range 0 to 100.\n\
    The function should raise an error if the vector contains numbers that are not\
    \ in the range 0 to 100.\nThe function should raise an error if the vector contains\
    \ numbers that are not in the range 0 to 100.\nThe function should raise an error\
    \ if the vector contains numbers that are not in the range 0 to 100.\nThe function\
    \ should raise an error if the vector contains numbers that are not in the range\
    \ 0 to 100.\nThe function should raise an error if the vector contains numbers\
    \ that are not in the range 0 to 100.\nThe function should raise an error if the\
    \ vector contains numbers that are not in the range 0 to 100.\nThe function should\
    \ raise an error if the vector contains numbers that are not in the range 0 to\
    \ 100.\nThe function should raise an error if the vector contains numbers that\
    \ are not in the range 0 to 100.\nThe function should raise an error if the vector\
    \ contains numbers that are not in the range 0 to 100.\nThe function should raise\
    \ an error if the vector contains numbers that are not in the range 0 to 100.\n\
    The function should raise an error if the vector contains numbers that are not\
    \ in the range 0 to 100.\nThe function should raise an error if the vector contains\
    \ numbers that are not in the range 0 to 100.\nThe function should raise an error\
    \ if the vector contains numbers that are not in the range 0 to 100.\nThe function\
    \ should raise an error if the vector contains numbers that are not in the range\
    \ 0 to 100.\nThe function should raise an error if the vector contains numbers\
    \ that are not in the range 0 to 100.\nThe function should raise an error if the\
    \ vector contains numbers that are not in the range 0 to 100.\nThe function should\
    \ raise an error if the vector contains numbers that are not in the range 0 to\
    \ 100.\nThe function should raise an error if the vector contains numbers that\
    \ are not in the range 0 to ", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i >= 2\n        if numbers[i] - numbers[i - 1] < threshold\n\
    \            return true\n        end\n        i -= 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nThe function above checks if there are any two numbers in\
    \ the given list that are closer to each other than the given threshold. Let's\
    \ see how it works.", "    \n    numbers = sort(numbers)\n    \n    idx1 = 1\n\
    \    idx2 = length(numbers)\n    \n    while idx1 < idx2\n        if numbers[idx1]\
    \ - numbers[idx2] < threshold\n            return false\n        else\n      \
    \      idx1 += 1\n            idx2 -= 1\n        end\n    end\n    return true\n\
    end", "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] < threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in the list.\n>>> square_sum([1.0, 2.0, 3.0])\n25.0\n\
    >>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8,\
    \ 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_", "  \
    \  \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nNow let's test our function", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 0\n    \
    \    \n        if numbers[i-1] - numbers[i] > threshold\n            return true\n\
    \        end\n        \n        i = i - 1\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.4>", "    \n    numbers = sort(numbers)\n    \n\
    \    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if n == numbers[1]\n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) -\
    \ 1\n    \n    while i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n\
    \            i += 1\n        elseif numbers[j] + threshold < numbers[i] + threshold\n\
    \            j -= 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers = sort(numbers)\n    \n    for n in numbers\n        if n == numbers[1]\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of elements\
    \ in a list that satisfy a given condition.", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n          \
    \  return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of elements in a list that\
    \ satisfy a given condition.", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    idx1 = 1\n    idx2 = length(numbers)\n\
    \    \n    while idx1 < idx2\n        if abs(numbers[idx1] - numbers[idx2]) <\
    \ threshold\n            return true\n        end\n        idx1 += 1\n       \
    \ idx2 -= 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if a vector has all unique elements and false otherwise.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\
    \ \nThe function should ", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 1\n        \n        j = i - 1\n        \n        while j\
    \ > 1\n            \n            if numbers[j] - numbers[j - 1] < threshold\n\
    \                return true\n            \n            j = j - 1\n        end\n\
    \        \n        i = i - 1\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n\
    \    \n    while i < j\n        if numbers[i] == numbers[j] \n            i +=\
    \ 1\n            j += 1\n        elseif numbers[i] - numbers[j] < threshold\n\
    \            i += 1\n        else\n            j += 1\n        end\n    end\n\
    \    \n    return j == length(numbers)\nend\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns the number of elements in a list that satisfy a given\
    \ condition. For example, a list with elements [1.0, 2.0, 3.0, 4.0, 5.0] should\
    \ return 3 because there are 3 elements in the list that satisfy the condition\
    \ numbers > 2.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n\
    \        if n == numbers[1]\n            return false\n        end\n    end\n\
    \    \n    return true\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a list of numbers and returns the sum of the numbers in the list. \nIf\
    \ the list is empty return 0.\nIf the list has one number return that number.\n\
    If the list has two or more numbers, return the sum of the numbers in the list.\n\
    If the list has three or more numbers, return the sum of the numbers in the list.\n\
    If the list has four or more numbers, return the sum of the numbers in the list.\n\
    If the list has five or more numbers, return the sum of the numbers in the list.\n\
    If the list has six or more numbers, return the sum of the numbers in the list.\n\
    If the list has seven or more numbers, return the sum of the numbers in the list.\n\
    If the list has eight or more numbers, return the sum of the numbers in the list.\n\
    If the list has nine or more numbers, return the sum of the numbers in the list.\n\
    If the list has ten or more numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten numbers, return the sum of the numbers in the list.\n\
    If the list has more than ten ", "    \n    numbers = sort(numbers)\n    \n  \
    \  if length(numbers) < 2\n        return false\n    end\n    \n    i = 0\n  \
    \  \n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    if length(numbers) < 2\n        return false\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n      \
    \  if numbers[i] - numbers[i-1] > threshold\n            return true\n       \
    \ end\n        i += 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    closest_numbers = numbers_sorted[1..end]\n\
    \    \n    closest_numbers_sorted = sort(closest_numbers)\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    closest_numbers_sorted\
    \ = sort(closest_numbers_sorted)\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    \n    if\
    \ length(closest_numbers_sorted) == length(numbers_sorted)\n        return true\n\
    \    end\n    \n    if length(closest_numbers_sorted) == length(numbers_sorted)\n\
    \        return true\n    end\n    \n    if length(closest_numbers_sorted) ==\
    \ length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true\n    end\n    \n    if length(closest_numbers_sorted)\
    \ == length(numbers_sorted)\n        return true", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)-1 do\n        \n       \
    \ if numbers[i+1] - numbers[i] < threshold then\n            return true\n   \
    \     end\n        \n        i = i + 1\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nThe function above checks if any two numbers are closer to each other\
    \ than the given threshold. Let's see how it works.", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if n == numbers[1]\n            return true\n\
    \        end\n    end\n    \n    return false\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend", "    \n\
    \    numbers = sort(numbers)\n    \n    if length(numbers) < 2\n        return\
    \ false\n    end\n    \n    threshold = sort(threshold)\n    \n    i = 2\n   \
    \ \n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold[i-1]\n\
    \            return true\n        end\n        i += 1\n    end\n    \n    return\
    \ false\nend", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    minimum\
    \ = min(distances)\n    maximum = max(distances)\n    \n    return minimum < maximum\n\
    end\n</cell>\n<text>\nProblem 4\nWrite a function that takes a list of numbers\
    \ and a threshold and returns a new list containing only the numbers that are\
    \ greater than the threshold.\n>>> numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    >>> threshold = 0.5\n>>> new_numbers = filter_numbers(numbers, threshold)\n>>>\
    \ new_numbers\n[2.0, 3.0]\n\"\"\"", "    \n    numbers = sort(numbers)\n    \n\
    \    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n   \
    \         return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    distances = Vector{Float64}(undef, 0)\n\
    \    for n in numbers\n        distances = push!(distances, norm(n-threshold))\n\
    \    end\n    \n    return distances[1] < distances[2]\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and a threshold and\
    \ returns the number of numbers in the list that are closer to each other than\
    \ the threshold.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ has_close_elements([1.0, 2.0, 3.0], 0.5)\n@test has_close_elements([1.0, 2.8,\
    \ 3.0, 4.0, 5.0, 2.0], 0.3)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a second function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector. \nWrite a third\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers in the vector. \nWrite a fourth function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector. \n\
    Write a fifth function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a sixth function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a seventh function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector. \nWrite a eighth function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a ninth function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a tenth function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a eleventh function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector. \nWrite a twelfth\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers in the vector. \nWrite a thirteenth function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a fourteenth function that takes a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector. \nWrite a fifteenth function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a sixteenth function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector. \nWrite a seventeenth\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers in the vector. \nWrite a eighteenth function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a nineteenth function that takes a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector. \nWrite a twentieth function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a twenty-first function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector. \nWrite a twenty-second\
    \ function that takes a ", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    j = length(numbers) - 1\n    \n    while i < j\n        if numbers[i] + threshold\
    \ < numbers[j]\n            i += 1\n        elseif numbers[j] + threshold < numbers[i]\n\
    \            j -= 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nNow let's test our function", " \
    \   \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    while i\
    \ > 1\n        if numbers[i-1] - numbers[i] > threshold\n            return true\n\
    \        end\n        i -= 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and a threshold and\
    \ returns a new list with the numbers that exceed the threshold.\nThe new list\
    \ should contain all the numbers in the original list that exceed the threshold.\n\
    The function should return an empty list if the list is empty.\nThe function should\
    \ return a list of numbers if there is only one number in the list that exceeds\
    \ the threshold.\nThe function should return a list of two numbers if there are\
    \ two numbers in the list that exceed the threshold.\nThe function should return\
    \ a list of three numbers if there are three numbers in the list that exceed the\
    \ threshold.\nThe function should return a list of four numbers if there are four\
    \ numbers in the list that exceed the threshold.\nThe function should return a\
    \ list of five numbers if there are five numbers in the list that exceed the threshold.\n\
    The function should return a list of six numbers if there are six numbers in the\
    \ list that exceed the threshold.\nThe function should return a list of seven\
    \ numbers if there are seven numbers in the list that exceed the threshold.\n\
    The function should return a list of eight numbers if there are eight numbers\
    \ in the list that exceed the threshold.\nThe function should return a list of\
    \ nine numbers if there are nine numbers in the list that exceed the threshold.\n\
    The function should return a list of ten numbers if there are ten numbers in the\
    \ list that exceed the threshold.\nThe function should return a list of eleven\
    \ numbers if there are eleven numbers in the list that exceed the threshold.\n\
    The function should return a list of twelve numbers if there are twelve numbers\
    \ in the list that exceed the threshold.\nThe function should return a list of\
    \ thirteen numbers if there are thirteen numbers in the list that exceed the threshold.\n\
    The function should return a list of fourteen numbers if there are fourteen numbers\
    \ in the list that exceed the threshold.\nThe function should return a list of\
    \ fifteen numbers if there are fifteen numbers in the list that exceed the threshold.\n\
    The function should return a list of sixteen numbers if there are sixteen numbers\
    \ in the list that exceed the threshold.\nThe function should return a list of\
    \ seventeen numbers if there are seventeen numbers in the list that exceed the\
    \ threshold.\nThe function should return a list of eighteen numbers if there are\
    \ eighteen numbers in the list that exceed the threshold.\nThe function ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = 0\n    while i < length(numbers_sorted)\n   \
    \     j = i + 1\n        while j < length(numbers_sorted)\n            if numbers_sorted[j]\
    \ - numbers_sorted[i] < threshold\n                return false\n            else\n\
    \                j += 1\n            end\n        end\n        i = j\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that checks\
    \ if a number is in a given list of numbers, sorted in ascending order.\nHint:\
    \ Use a for loop.\n>>> has_in([1.0, 2.0, 3.0], 2.0)\ntrue\n>>> has_in([1.0, 2.0,\
    \ 3.0], 3.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 4.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 5.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 6.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 7.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 8.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 9.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 10.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 11.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 12.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 13.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 14.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 15.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 16.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 17.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 18.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 19.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 20.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 21.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 22.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 23.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 24.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 25.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 26.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 27.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 28.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 29.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 30.0)\nfalse\n>>> has_in([1.0,\
    \ 2.0, 3.0], 31.0)\nfalse\n>>> has_in([1.0, 2.0, 3.0], 32.0)\nfalse\n>>> ", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n\
    \    \n    while i < j\n        if numbers[i] == numbers[j] \n            i +=\
    \ 1\n            j += 1\n        elseif abs(numbers[i] - numbers[j]) < threshold\n\
    \            i += 1\n        else\n            j += 1\n        end\n    end\n\
    \    \n    return i == j\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns the mean of the vector.\nHint: use the reduce function.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that checks if a given\
    \ number is in a given list of numbers. \nThe function should return true if the\
    \ number is in the list and false otherwise.\nThe function should work for both\
    \ numbers and vectors.", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 1\n        \n        if numbers[i-1] - numbers[i] > threshold\n\
    \            return true\n        end\n        \n        i = i - 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers)\n  \
    \          \n            if abs(numbers[i] - numbers[j]) < threshold\n       \
    \         return true\n            \n            j += 1\n            \n      \
    \  end\n        \n        i += 1\n        \n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    while i > 1\n        if numbers[i-1] - numbers[i]\
    \ > threshold\n            return true\n        end\n        i = i-1\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    if length(numbers) < 2\n        return false\n  \
    \  end\n    \n    i = 0\n    j = length(numbers)-1\n    \n    while i <= j\n \
    \       if numbers[i] == numbers[j]\n            i += 1\n            j += 1\n\
    \        elseif abs(numbers[i] - numbers[j]) < threshold\n            i += 1\n\
    \        else\n            j += 1\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<text>\nLet's test the function with some examples:", "    \n  \
    \  numbers_sorted = sort(numbers)\n    \n    index_of_first_element = findfirst(numbers_sorted\
    \ .< threshold)\n    index_of_last_element = findlast(numbers_sorted .> threshold)\n\
    \    \n    if index_of_first_element == index_of_last_element\n        return\
    \ false\n    else\n        return true\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a vector has all elements equal, except for\
    \ one element.\n    >>> has_all_except_one(Vector{Float64}([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0]))\n    false\n    >>> has_all_except_one(Vector{Float64}([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0]))\n    true\n    \"\"\"", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        j = i\
    \ + 1\n        \n        while j < length(numbers)\n            \n           \
    \ if numbers[i] - numbers[j] < threshold\n                return true\n      \
    \      \n            j += 1\n        end\n        \n        i += 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ checks if a number is in a given list of numbers, sorted in ascending order.\n\
    Hint: use has_close_elements(numbers, threshold).", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] > threshold\n            return true\n        end\n        i += 1\n   \
    \ end\n    return false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers.\
    \ \nFor example, given [1,2,3], the function should return 9.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n    \
    \    \n        j = i + 1\n        \n        while j < length(numbers)\n      \
    \      \n            if numbers[j] - numbers[i] < threshold\n                return\
    \ false\n            \n            j += 1\n            \n        i += 1\n    \
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i >= 2\n   \
    \     \n        if numbers[i] - numbers[i-1] <= threshold\n            return\
    \ true\n        end\n        \n        i -= 1\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nhas_close_elements", "    \n    distances = Vector{Float64}(undef,\
    \ length(numbers))\n    for i in 1:length(numbers)\n        distances[i] = abs(numbers[i]\
    \ - threshold)\n    end\n    \n    minimum = min(distances)\n    maximum = max(distances)\n\
    \    \n    return minimum < maximum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a list of numbers and a threshold and returns a list of\
    \ numbers that are\ncloser to each other than the given threshold.", "    \n \
    \   numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n  \
    \  \n    while i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n\
    \            return true\n        end\n        if numbers[j] + threshold < numbers[i]\
    \ + threshold\n            return false\n        end\n        i += 1\n       \
    \ j -= 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are less than or equal to 10. Test your function with some example numbers.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    \n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is in a given list of numbers,\
    \ in increasing order.\n    >>> in_increasing_order([1.0, 2.0, 3.0])\n    true\n\
    \    >>> in_increasing_order([1.0, 2.0, 3.0, 4.0])\n    false\n    >>> in_increasing_order([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    true\n    \"\"\"", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j] \n            i += 1\n            j += 1\n        else\n     \
    \       if abs(numbers[i] - numbers[j]) < threshold\n                i += 1\n\
    \            else\n                j += 1\n            end\n        end\n    end\n\
    \    \n    return i == j\nend\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list.\n    >>> square_of_numbers([1, 2, 3, 4])\n    25\n    >>> square_of_numbers([1,\
    \ 2, 3, 4, 5])\n    25.0\n    >>> square_of_numbers([])\n    0.0\n    \"\"\"",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 0\n        \n        j = i - 1\n        \n        while j > 0\n        \
    \    \n            if abs(numbers[i] - numbers[j]) < threshold\n             \
    \   return true\n            \n            j = j - 1\n        end\n        \n\
    \        i = i - 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)-1\
    \ do\n        if numbers[idx+1] - numbers[idx] > threshold then\n            return\
    \ true\n        end\n        idx += 1\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    closest_numbers = numbers_sorted[1..end-1]\n    \n    if numbers_sorted[1]\
    \ < threshold\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<text>\nProblem 4\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the numbers in the list.\nThe function should only take\
    \ in lists of numbers and return a number.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    \n    while i > 1\n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        \n \
    \       i -= 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] < threshold\n            return true\n \
    \       else\n            i += 1\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i = 0\n  \
    \  \n    while i < length(numbers)\n        \n        if numbers[i] > threshold\
    \ \n            \n            i += 1\n            \n        elseif numbers[i]\
    \ < threshold\n            \n            i -= 1\n            \n        else\n\
    \            \n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    \n    while i > 1\n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        \n \
    \       i -= 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of elements in a list that satisfy\
    \ a given condition. For example, given a list of numbers, return how many numbers\
    \ in the list are greater than or equal to 2.", "    \n    numbers = sort(numbers)\n\
    \    \n    idx = 0\n    \n    while idx < length(numbers)\n        if numbers[idx]\
    \ - numbers[idx - 1] > threshold\n            return true\n        end\n     \
    \   idx += 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes a list of\
    \ numbers and returns the sum of the squares of the numbers.\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while\
    \ i < length(numbers)\n        if abs(numbers[i] - numbers[i-1]) < threshold\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i += 1\n    end\n\
    \    return false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers in the list.\nFor example,\
    \ sum([1, 2, 3]) should return 6.\nWrite a function that takes in a list of numbers\
    \ and returns the product of the numbers in the list.\nFor example, prod([1, 2,\
    \ 3]) should return 6.\nWrite a function that takes in a list of numbers and returns\
    \ the average of the numbers in the list.\nFor example, avg([1, 2, 3]) should\
    \ return 2.5.\nWrite a function that takes in a list of numbers and returns the\
    \ median of the numbers in the list.\nFor example, median([1, 2, 3]) should return\
    \ 1.5.\nWrite a function that takes in a list of numbers and returns the mode\
    \ of the numbers in the list.\nFor example, mode([1, 2, 3]) should return 1.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ numbers in the list.\nFor example, variance([1, 2, 3]) should return 0.6666666.\n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list.\nFor example, stddev([1, 2, 3]) should return 0.7071067811865475.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ numbers in the list.\nFor example, variance([1, 2, 3]) should return 0.6666666.\n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list.\nFor example, stddev([1, 2, 3]) should return 0.7071067811865475.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ numbers in the list.\nFor example, variance([1, 2, 3]) should return 0.6666666.\n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list.\nFor example, stddev([1, 2, 3]) should return 0.7071067811865475.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ numbers in the list.\nFor example, variance([1, 2, 3]) should return 0.6666666.\n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list.\nFor example, stddev([1, 2, 3]) should return 0.7071067811865475.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ numbers in the list.\nFor example, variance([1, 2, 3]) should return 0.6666666.\n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list.\nFor example, stddev([1, 2, 3]) should return 0.7071067811865475.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ numbers in the list.\nFor example, variance([1, 2, 3]) should return 0.6666666.\n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list.\nFor example, stddev([1, 2, 3]", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 1\n    \
    \    \n        if numbers[i-1] - numbers[i] > threshold\n            return true\n\
    \        end\n        \n        i -= 1\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nFor example, given\
    \ [1.0, 2.0, 3.0, 4.0], return 14.0.\nThe function should work for any list of\
    \ numbers.\nIf the list is empty, return 0.0.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    \n    while i < length(numbers)\n        \n        j = i + 1\n      \
    \  \n        while j < length(numbers)\n            \n            if numbers[j]\
    \ - numbers[i] < threshold\n                return true\n            \n      \
    \      j += 1\n        end\n        \n        i += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nProblem 4\nWrite a function that takes a vector and returns a\
    \ new vector with only unique elements. \nThe function should return a new vector\
    \ with unique elements and a count of how many times each element occurred.\n\
    For example, given [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], your function should return\
    \ [1.0, 2.0, 3.0, 4.0, 5.0] and a count of how many times each element occurred.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers)\n  \
    \          \n            if numbers[j] - numbers[i] <= threshold\n           \
    \     return true\n            \n            j += 1\n        end\n        \n \
    \       i += 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        \n        if numbers[i-1] - numbers[i] > threshold\n        \
    \    return true\n        end\n        \n        i = i - 1\n    end\n    \n  \
    \  return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and a threshold and returns a vector of booleans indicating\
    \ whether each number in the vector is greater than or equal to the threshold.",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if n ==\
    \ numbers[1]\n            return true\n        end\n    end\n    \n    return\
    \ false\nend", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n   \
    \ while i < length(numbers)\n        \n        if numbers[i] - numbers[i-1] >\
    \ threshold\n            return true\n        end\n        \n        i = i + 1\n\
    \    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is in a given list of numbers, sorted in ascending order.\n\
    \    >>> is_in_ascending_order([1.0, 2.0, 3.0])\n    true\n    >>> is_in_ascending_order([1.0,\
    \ 2.0, 3.0, 4.0])\n    false\n    >>> is_in_ascending_order([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    true\n    \"\"\"", "    \n    numbers_sorted = sort(numbers)\n  \
    \  \n    closest_number = numbers_sorted[1]\n    \n    for number in numbers_sorted[2:end]\n\
    \        if abs(number - closest_number) < threshold\n            return true\n\
    \        else\n            closest_number = number\n        end\n    end\n   \
    \ \n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of numbers and a threshold and returns a vector of booleans indicating\
    \ whether each number is closer to its neighbour than the given threshold.", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    for n in numbers_sorted\n\
    \        if abs(n - numbers_sorted[end-1]) < threshold\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers\n        if n < threshold\n    \
    \        return false\n        end\n    end\n    \n    return true\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is in a given list\
    \ of numbers, sorted in ascending order.\nThe function should return true if the\
    \ number is in the list, false otherwise.\nThe function should return false if\
    \ the number is not in the list.\nThe function should return false if the list\
    \ is not sorted in ascending order.\nThe function should return false if the list\
    \ contains any duplicates.\nThe function should return false if the list contains\
    \ any negative numbers.\nThe function should return false if the list contains\
    \ any floating point numbers.\nThe function should return false if the list contains\
    \ any strings that do not represent numbers.\nThe function should return false\
    \ if the list contains any strings that represent numbers but are not in ascending\
    \ order.\nThe function should return false if the list contains any strings that\
    \ represent numbers but are not in ascending order.\nThe function should return\
    \ false if the list contains any strings that represent numbers but are not in\
    \ ascending order.\nThe function should return false if the list contains any\
    \ strings that represent numbers but are not in ascending order.\nThe function\
    \ should return false if the list contains any strings that represent numbers\
    \ but are not in ascending order.\nThe function should return false if the list\
    \ contains any strings that represent numbers but are not in ascending order.\n\
    The function should return false if the list contains any strings that represent\
    \ numbers but are not in ascending order.\nThe function should return false if\
    \ the list contains any strings that represent numbers but are not in ascending\
    \ order.\nThe function should return false if the list contains any strings that\
    \ represent numbers but are not in ascending order.\nThe function should return\
    \ false if the list contains any strings that represent numbers but are not in\
    \ ascending order.\nThe function should return false if the list contains any\
    \ strings that represent numbers but are not in ascending order.\nThe function\
    \ should return false if the list contains any strings that represent numbers\
    \ but are not in ascending order.\nThe function should return false if the list\
    \ contains any strings that represent numbers but are not in ascending order.\n\
    The function should return false if the list contains any strings that represent\
    \ numbers but are not in ascending order.\nThe function should return false if\
    \ the list contains any strings that represent numbers but are not in ascending\
    \ order.\nThe function should return false if the list contains any strings that\
    \ represent numbers but are not in ascending order.\nThe function should return\
    \ false if the list contains any strings that represent numbers but are not in\
    \ ascending order.\nThe function should return false if the list contains any\
    \ strings that represent numbers but are not in ascending order.\nThe function\
    \ should ", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nThe function has_close_elements\
    \ checks if any two numbers are closer to each other than the given threshold.\
    \ For example, if the given threshold is 0.3, then any two numbers that are closer\
    \ to each other than the threshold will be considered as close to each other.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n\
    \    \n    while i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n\
    \            return true\n        end\n        if numbers[j] + threshold < numbers[i]\
    \ + threshold\n            return false\n        end\n        i += 1\n       \
    \ j -= 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of numbers and a threshold and returns the number\
    \ of numbers in the list that are closer to each other than the threshold.", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if abs(numbers[i] - numbers[i-1]) < threshold\n            return true\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ elements in a list that satisfy a given condition. For example, if the list\
    \ contains only integers, then the function should return 3.", "    \n    distances\
    \ = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    return\
    \ distances.min < distances.max\nend", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    index_of_closest = findfirst(x -> abs(x - numbers_sorted[1]) < threshold,\
    \ numbers_sorted)\n    \n    if index_of_closest == length(numbers_sorted)\n \
    \       return true\n    else\n        return false\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that will return the sum of the numbers in a given\
    \ vector.\nThe function should take one argument, a list of numbers.\nThe function\
    \ should return the sum of the numbers in the list.\nThe function should raise\
    \ an error if the list is empty.\nThe function should raise an error if the list\
    \ contains non-numbers.\nThe function should raise an error if the list contains\
    \ duplicate numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains negative or\
    \ non-positive numbers.\nThe function should raise an error if the list contains\
    \ non-integers or non-floats.\nThe function should raise an error if the list\
    \ contains non-integers or non-floats.\nThe function should raise an error if\
    \ the list contains non-integers or non-floats.\nThe function should raise an\
    \ error if the list contains non-integers or non-floats.\nThe function should\
    \ raise an error if the list contains non-integers or non-floats.\nThe function\
    \ should raise an error if the list contains non-integers or non-floats.\nThe\
    \ function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or non-floats.\n\
    The function should raise an error if the list contains non-integers or ", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n       \
    \ if abs(numbers[1] - n) < threshold\n            return true\n        end\n \
    \   end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and a threshold and returns a list of all numbers\
    \ in the list that are closer to each other than the threshold.", "    \n    numbers\
    \ = sort(numbers)\n    \n    idx = 0\n    \n    while idx < length(numbers)-1\
    \ do\n        if numbers[idx+1] - numbers[idx] > threshold then\n            return\
    \ true\n        end\n        idx += 1\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is in a\
    \ given list of numbers, ignoring order.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        j = i\
    \ + 1\n        \n        while j < length(numbers)\n            \n           \
    \ if numbers[j] - numbers[i] < threshold\n                return false\n     \
    \       \n            j += 1\n        end\n        \n        i += 1\n    end\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    for n in numbers_sorted\n        if abs(n - numbers_sorted[1])\
    \ < threshold\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers.\n>>> square_sums([1.0, 2.0,\
    \ 3.0])\n25.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n53.0\n>>> square_sums([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 2.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 4.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 5.0)\n53.0\n\
    >>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 6.0)\n53.0\n>>> square_sums([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 7.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 8.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 9.0)\n53.0\n\
    >>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 10.0)\n53.0\n>>> square_sums([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 11.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0], 12.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 13.0)\n\
    53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 14.0)\n53.0\n>>> square_sums([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 15.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0], 16.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 17.0)\n\
    53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 18.0)\n53.0\n>>> square_sums([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 19.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0], 20.0)\n53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 21.0)\n\
    53.0\n>>> square_sums([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 22.0)\n53.0\n>>> square_sums([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 23.0)\n5", "    \n    numbers = sort(numbers)\n  \
    \  \n    for n in numbers[1:end-1]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n    \n    i =\
    \ 0\n    \n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            i += 1\n\
    \        end\n    end\n    \n    if i == length(numbers_sorted)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is in a given list of numbers. Hint:\
    \ use function has_close_elements().", "    \n    numbers = sort(numbers)\n  \
    \  \n    for n in numbers\n        if n == numbers[1]\n            return true\n\
    \        end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n    \n    while\
    \ i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n        \
    \    i += 1\n        elseif numbers[j] + threshold < numbers[i] + threshold\n\
    \            j -= 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if a number is evenly divisible by another number.", "    \n  \
    \  numbers_sorted = sort(numbers)\n    \n    i = numbers_sorted.length - 1\n \
    \   j = numbers_sorted.length - 1\n    \n    while i >= 0 and j >= 0\n       \
    \ if numbers_sorted[i] < numbers_sorted[j]\n            i -= 1\n        elseif\
    \ numbers_sorted[i] > numbers_sorted[j]\n            j -= 1\n        else\n  \
    \          if abs(numbers_sorted[i] - numbers_sorted[j]) < threshold\n       \
    \         return true\n            else\n                i -= 1\n            \
    \    j -= 1\n            end\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    index_of_closest = findfirst(x -> abs(x - threshold) < abs(numbers_sorted[end]\
    \ - threshold), numbers_sorted)\n    \n    if index_of_closest == length(numbers_sorted)\n\
    \        return false\n    else\n        return true\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\n>>> sum_square_elements([1.0, 2.0, 3.0])\n\
    25.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, ", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n   \
    \ while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i = i + 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] > threshold\n            return true\n        end\n        i = i + 1\n\
    \    end\n    return false\nend\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\
    \ \nThe function should work for both vectors and matrices.\nThe function should\
    \ work for both positive and negative numbers.\nThe function should work for both\
    \ positive and negative numbers with different signs.\nThe function should work\
    \ for both vectors and matrices with different sizes.\nThe function should work\
    \ for both vectors and matrices with different numbers of elements.\nThe function\
    \ should work for both vectors and matrices with different numbers of rows and\
    \ columns.\nThe function should work for both vectors and matrices with different\
    \ numbers of rows and columns and different signs.\nThe function should work for\
    \ both vectors and matrices with different numbers of rows and columns and different\
    \ signs and different sizes.\nThe function should work for both vectors and matrices\
    \ with different numbers of rows and columns and different signs and different\
    \ sizes and different numbers.\nThe function should work for both vectors and\
    \ matrices with different numbers of rows and columns and different signs and\
    \ different sizes and different numbers and different signs.\nThe function should\
    \ work for both vectors and matrices with different numbers of rows and columns\
    \ and different signs and different sizes and different numbers and different\
    \ signs and different sizes.\nThe function should work for both vectors and matrices\
    \ with different numbers of rows and columns and different signs and different\
    \ sizes and different numbers and different signs and different sizes and different\
    \ numbers.\nThe function should work for both vectors and matrices with different\
    \ numbers of rows and columns and different signs and different sizes and different\
    \ numbers and different signs and different sizes and different numbers and different\
    \ signs.\nThe function should work for both vectors and matrices with different\
    \ numbers of rows and columns and different signs and different sizes and different\
    \ numbers and different signs and different sizes and different numbers and different\
    \ signs and different sizes.\nThe function should work for both vectors and matrices\
    \ with different numbers of rows and columns and different signs and different\
    \ sizes and different numbers and different signs and different sizes and different\
    \ numbers and different signs and different sizes and different numbers.\nThe\
    \ function should work for both vectors and matrices with different numbers of\
    \ rows and columns and different signs and different sizes and different numbers\
    \ and different signs and different sizes and different numbers and different\
    \ signs and different sizes and different numbers and different signs.\nThe function\
    \ should work for both vectors and matrices with different numbers of rows and\
    \ columns and different signs and different sizes and different numbers and different\
    \ signs and different sizes and different number", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ - numbers[i-1] > threshold\n            return true\n        end\n        \n\
    \        i = i + 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns a new vector with elements\
    \ multiplied by two. \nFor example, \n[1,2,3]\nshould become\n[2,4,6]\nHint: use\
    \ map!", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest\
    \ = findfirst(x -> abs(x - threshold) < abs(numbers_sorted[end] - threshold),\
    \ numbers_sorted)\n    \n    return index_of_closest != end\nend\n</cell>\n<text>\n\
    The function above is called has_close_elements and is implemented in the file\
    \ has_close_elements.jl. Let's take a look at the implementation:", "    \n  \
    \  numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list\
    \ of numbers and a threshold and returns a list of numbers that are closer to\
    \ each other than the given threshold.\nFor example, if the given list is [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0] and the threshold is 0.3, the function should return\
    \ [1.0, 2.8, 3.0, 4.0, 5.0, 2.0].", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j] \n            i += 1\n            j += 1\n        elseif abs(numbers[i]\
    \ - numbers[j]) <= threshold\n            i += 1\n        else\n            j\
    \ += 1\n        end\n    end\n    \n    return i == j\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n\
    \    \n    while i < j\n        if numbers[i] + threshold < numbers[j]\n     \
    \       i += 1\n        elseif numbers[j] + threshold < numbers[i]\n         \
    \   j -= 1\n        else\n            return true\n        end\n    end\n    \n\
    \    return false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a list of numbers and returns the number of elements in the list that are greater\
    \ than or equal to 0.5", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 1\n        \n        if numbers[i-1] - numbers[i] > threshold\n\
    \            return true\n        end\n        \n        i -= 1\n    end\n   \
    \ \n    return false\nend", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i - 1] < threshold\n\
    \            return true\n        else\n            i += 1\n        end\n    end\n\
    \    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of number", "    \n   \
    \ numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes a vector\
    \ and returns the sum of the squares of the elements in the vector.\n>>> square_sum([1,2,3])\n\
    25\n>>> square_sum([1,2,3])\n25\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n4\n>>> square_sum([1,2])\n\
    4\n>>> square_sum([1,2])\n", "    \n    numbers = sort(numbers)\n    \n    idx\
    \ = 0\n    while idx < length(numbers)\n        if numbers[idx] - numbers[idx\
    \ - 1] > threshold\n            return true\n        else\n            idx +=\
    \ 1\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that checks if a number is in a given list of numbers, in any\
    \ order.\n    >>> has_close_elements([1.0, 2.0, 3.0], 2.0)\n    true\n    >>>\
    \ has_close_elements([1.0, 2.0, 3.0], 3.0)\n    false\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 4.0)\n    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 5.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 6.0)\n    false\n    >>>\
    \ has_close_elements([1.0, 2.0, 3.0], 7.0)\n    false\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 8.0)\n    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 9.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 10.0)\n    false\n   \
    \ >>> has_close_elements([1.0, 2.0, 3.0], 11.0)\n    false\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 12.0)\n    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 13.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 14.0)\n    false\n   \
    \ >>> has_close_elements([1.0, 2.0, 3.0], 15.0)\n    false\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 16.0)\n    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 17.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 18.0)\n    false\n   \
    \ >>> has_close_elements([1.0, 2.0, 3.0], 19.0)\n    false\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 20.0)\n    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 21.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 22.0)\n    false\n   \
    \ >>> has_close_elements([1.0, 2.0, 3.0], 23.0)\n    false\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 24.0)\n    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 25.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 26.0)\n    false\n   \
    \ >>> has_close_elements([1.0, 2.0, 3.0], 27.0)\n    false\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 28.0)\n    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 29.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 30.0)\n    false\n   \
    \ >>> ", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a list of numbers and a threshold and returns the number of numbers\
    \ in the list that are closer to each other than the threshold.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 1\n    \
    \    if numbers[i-1] - numbers[i] > threshold\n            return true\n     \
    \   end\n        \n        i = i - 1\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of numbers and returns\
    \ the sum of the numbers in the list. \nWrite a function that takes a list of\
    \ numbers and returns the mean of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the median of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the mode of the\
    \ numbers in the list. \nWrite a function that takes a list of numbers and returns\
    \ the variance of the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the standard deviation of the numbers in the list. \n\
    Write a function that takes a list of numbers and returns the minimum of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ maximum of the numbers in the list. \nWrite a function that takes a list of\
    \ numbers and returns the number of elements in the list. \nWrite a function that\
    \ takes a list of numbers and returns the number of non-zero elements in the list.\
    \ \nWrite a function that takes a list of numbers and returns the number of non-negative\
    \ elements in the list. \nWrite a function that takes a list of numbers and returns\
    \ the number of non-positive elements in the list. \nWrite a function that takes\
    \ a list of numbers and returns the number of non-NaN elements in the list. \n\
    Write a function that takes a list of numbers and returns the number of non-finite\
    \ elements in the list. \nWrite a function that takes a list of numbers and returns\
    \ the number of NaNs in the list. \nWrite a function that takes a list of numbers\
    \ and returns the number of Infs in the list. \nWrite a function that takes a\
    \ list of numbers and returns the number of non-finite elements in the list. \n\
    Write a function that takes a list of numbers and returns the number of non-finite\
    \ elements in the list. \nWrite a function that takes a list of numbers and returns\
    \ the number of non-finite elements in the list. \nWrite a function that takes\
    \ a list of numbers and returns the number of non-finite elements in the list.\
    \ \nWrite a function that takes a list of numbers and returns the number of non-finite\
    \ elements in the list. \nWrite a function that takes a list of numbers and returns\
    \ the number of non-finite elements in the list. \nWrite a function that takes\
    \ a list of numbers and returns the number of non-finite elements in the list.\
    \ \nWrite a function that takes a list of numbers and returns the number of non-finite\
    \ elements in the list. \nWrite a function that takes a list of numbers and returns\
    \ the number of non-finite elements in the list. \nWrite a function that takes\
    \ a list of numbers and returns the number of non-finite elements in the list.\
    \ \nWrite a function that takes a list of numbers and returns the number of non-finite\
    \ elements in the list. \nWrite a function that takes a list of numbers and returns\
    \ the number of non-finite elements in the list. \nWrite a function that takes\
    \ a list of numbers and returns the number of non-finite elements in the list",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is in a given list of numbers,\
    \ ignoring order.", "    \n    numbers_sorted = sort(numbers)\n    \n    for index\
    \ in 1:length(numbers_sorted)\n        if numbers_sorted[index] - numbers_sorted[index-1]\
    \ > threshold\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is\
    \ in a given list of numbers, in sorted order.\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 2.0)\n    true\n    >>> has_close_elements([1.0, 2.0, 3.0], 3.0)\n\
    \    false\n    >>> has_close_elements([1.0, 2.0, 3.0], 4.0)\n    false\n    \"\
    \"\"", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n   \
    \ \n    while i > 0\n        \n        j = i - 1\n        \n        while j >\
    \ 0\n            \n            if abs(numbers[j] - numbers[i]) < threshold\n \
    \               return true\n            \n            j = j - 1\n        end\n\
    \        \n        i = i - 1\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nThe function above checks if there are any two numbers in the given list\
    \ that are closer to each other than the given threshold. Let's see how it works.",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if n ==\
    \ numbers[1]\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes a list of\
    \ numbers and returns the sum of the squares of the numbers.\n    >>> square_sum([1.0,\
    \ 2.0, 3.0])\n    25.0\n    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0])\n    25.0\n\
    \    \"\"\"", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    \n    return false\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        end\n        i = i + 1\n\
    \    end\n    return false\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the number of elements in a list that satisfy a given condition.",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns true if the given array contains any\
    \ two numbers that are closer to each other than the given threshold.", "    \n\
    \    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(numbers_sorted\
    \ .< threshold)\n    \n    if index_of_closest == nothing\n        return false\n\
    \    else\n        return index_of_closest == 1\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the sum\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the average of the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the median of the numbers in the list. \n\
    Write a function that takes a list of numbers and returns the mode of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ variance of the numbers in the list. \nWrite a function that takes a list of\
    \ numbers and returns the standard deviation of the numbers in the list. \nWrite\
    \ a function that takes a list of numbers and returns the minimum of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ maximum of the numbers in the list. \nWrite a function that takes a list of\
    \ numbers and returns the number of elements in the list. \nWrite a function that\
    \ takes a list of numbers and returns the number of elements in the list that\
    \ are less than the given threshold. \nWrite a function that takes a list of numbers\
    \ and returns the number of elements in the list that are greater than the given\
    \ threshold. \nWrite a function that takes a list of numbers and returns the number\
    \ of elements in the list that are equal to the given threshold. \nWrite a function\
    \ that takes a list of numbers and returns the number of elements in the list\
    \ that are less than or equal to the given threshold. \nWrite a function that\
    \ takes a list of numbers and returns the number of elements in the list that\
    \ are greater than or equal to the given threshold. \nWrite a function that takes\
    \ a list of numbers and returns the number of elements in the list that satisfy\
    \ the given condition. \nWrite a function that takes a list of numbers and returns\
    \ the number of elements in the list that satisfy the given condition and are\
    \ less than the given threshold. \nWrite a function that takes a list of numbers\
    \ and returns the number of elements in the list that satisfy the given condition\
    \ and are greater than the given threshold. \nWrite a function that takes a list\
    \ of numbers and returns the number of elements in the list that satisfy the given\
    \ condition and are equal to the given threshold. \nWrite a function that takes\
    \ a list of numbers and returns the number of elements in the list that satisfy\
    \ the given condition and are less than or equal to the given threshold. \nWrite\
    \ a function that takes a list of numbers and returns the number of elements in\
    \ the list that satisfy the given condition and are greater than or equal to the\
    \ given threshold. \nWrite a function that takes a list of numbers and returns\
    \ the number of elements in the list that satisfy the given condition. \nWrite\
    \ a function that takes a list of numbers and returns the number of elements in\
    \ the list that satisfy the given condition. \nWrite a function that takes a list\
    \ of numbers and returns the number of elements in the list that satisfy the given\
    \ condition. \nWrite a function that takes a list of numbers and returns the ",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i = i + 1\n    end\n    \n    return false\nend", "    \n\
    \    numbers = sort(numbers)\n    \n    idx = 0\n    \n    while idx < length(numbers)\n\
    \        \n        if numbers[idx] > threshold\n            \n            if idx\
    \ != length(numbers)-1\n                \n                if numbers[idx+1] -\
    \ numbers[idx] > threshold\n                    \n                    return true\n\
    \                end\n            end\n            \n            return false\n\
    \        end\n        \n        idx += 1\n    end\n    \n    return true\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is in a\
    \ given list of numbers, sorted in ascending order.\nThe function should return\
    \ true if the number is in the list, false otherwise.\nThe function should also\
    \ return true if the number is in the list, sorted in descending order.\nThe function\
    \ should also return true if the number is in the list, sorted in ascending order\
    \ and in descending order.\nThe function should also return true if the number\
    \ is in the list, sorted in ascending order, sorted in descending order, and in\
    \ descending order.\nThe function should also return true if the number is in\
    \ the list, sorted in ascending order, sorted in descending order, and sorted\
    \ in ascending order and in descending order.\nThe function should also return\
    \ true if the number is in the list, sorted in ascending order, sorted in descending\
    \ order, and sorted in ascending order and in descending order.\nThe function\
    \ should also return true if the number is in the list, sorted in ascending order,\
    \ sorted in descending order, and sorted in ascending order and in descending\
    \ order.\nThe function should also return true if the number is in the list, sorted\
    \ in ascending order, sorted in descending order, and sorted in ascending order\
    \ and in descending order.\nThe function should also return true if the number\
    \ is in the list, sorted in ascending order, sorted in descending order, and sorted\
    \ in ascending order and in descending order.\nThe function should also return\
    \ true if the number is in the list, sorted in ascending order, sorted in descending\
    \ order, and sorted in ascending order and in descending order.\nThe function\
    \ should also return true if the number is in the list, sorted in ascending order,\
    \ sorted in descending order, and sorted in ascending order and in descending\
    \ order.\nThe function should also return true if the number is in the list, sorted\
    \ in ascending order, sorted in descending order, and sorted in ascending order\
    \ and in descending order.\nThe function should also return true if the number\
    \ is in the list, sorted in ascending order, sorted in descending order, and sorted\
    \ in ascending order and in descending order.\nThe function should also return\
    \ true if the number is in the list, sorted in ascending order, sorted in descending\
    \ order, and sorted in ascending order and in descending order.\nThe function ",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_first_element = findfirst(x\
    \ -> x < threshold, numbers_sorted)\n    \n    if index_of_first_element == length(numbers_sorted)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    numbers = sort(numbers)\n    \n    for n in numbers\n        if abs(n - numbers[1])\
    \ < threshold\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    \n    while i > 1\n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        \n \
    \       i -= 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nWrite ", "    \n    numbers = sort(numbers)\n    \n    for n in\
    \ numbers\n        if abs(n - numbers[1]) < threshold\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a number is in a given list of numbers, sorted in\
    \ ascending order.\n    >>> is_in_ascending_order([1.0, 2.0, 3.0])\n    true\n\
    \    >>> is_in_ascending_order([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n    false\n  \
    \  \"\"\"", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        \n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        \n        i = i + 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Hint: use the sum function.", "    \n    numbers = sort(numbers)\n    \n    i\
    \ = 0\n    j = length(numbers) - 1\n    \n    while i < j\n        if numbers[i]\
    \ + threshold < numbers[j] + threshold\n            i += 1\n        elseif numbers[j]\
    \ + threshold < numbers[i] + threshold\n            j -= 1\n        else\n   \
    \         return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of elements in a list\
    \ that satisfy a given condition. For example, the number of elements in a list\
    \ that satisfy $x^2 + y^2 > z^2$ is", "    \n    numbers = sort(numbers)\n   \
    \ \n    idx = 0\n    while idx < length(numbers)\n        if numbers[idx] - numbers[idx\
    \ - 1] > threshold\n            return true\n        end\n        idx += 1\n \
    \   end\n    return false\nend", "    \n    numbers = sort(numbers)\n    \n  \
    \  i = length(numbers)\n    \n    while i > 1\n        \n        j = i - 1\n \
    \       \n        while j > 0\n            \n            if numbers[j] - numbers[j-1]\
    \ < threshold\n                return true\n            \n            j = j -\
    \ 1\n        end\n        \n        i = i - 1\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and a threshold and returns a vector of booleans indicating whether each number\
    \ in the vector is closer to its neighbors than the threshold.", "    \n    numbers\
    \ = sort(numbers)\n    \n    if length(numbers) < 2\n        return false\n  \
    \  end\n    \n    i = 2\n    while i < length(numbers)\n        if numbers[i]\
    \ - numbers[i - 1] > threshold\n            return true\n        end\n       \
    \ i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of numbers and returns the mean of the numbers. If the vector\
    \ is empty, return NaN.", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 0\n        \n        j = i - 1\n        \n        while j\
    \ > 0\n            \n            if numbers[j] - numbers[j - 1] <= threshold\n\
    \                return true\n            \n            j = j - 1\n        end\n\
    \        \n        i = i - 1\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ - numbers[j] <= threshold\n            return true\n        end\n        i +=\
    \ 1\n        j += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if n ==\
    \ numbers[1]\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ < threshold\n            return true\n        end\n        i += 1\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n      \
    \  if numbers[idx] - numbers[idx - 1] > threshold\n            return true\n \
    \       end\n        idx += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and a threshold and\
    \ returns the number of numbers in the list that are closer to each other than\
    \ a given threshold.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    numbers = sort(numbers)\n    \n    if length(numbers) < 2\n        return\
    \ false\n    end\n    \n    idx1 = 1\n    idx2 = length(numbers)\n    \n    while\
    \ idx1 < idx2\n        if abs(numbers[idx1] - numbers[idx2]) < threshold\n   \
    \         return true\n        end\n        \n        if numbers[idx1] > numbers[idx2]\n\
    \            idx1 += 1\n        else\n            idx2 -= 1\n        end\n   \
    \ end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers)\n  \
    \          \n            if numbers[j] - numbers[i] < threshold\n            \
    \    return false\n            \n            j += 1\n            \n        i +=\
    \ 1\n        \n    return true\nend", "    \n    numbers = sort(numbers)\n   \
    \ \n    if length(numbers) < 2\n        return false\n    end\n    \n    idx1\
    \ = 1\n    idx2 = length(numbers)\n    \n    while idx1 < idx2\n        if abs(numbers[idx1]\
    \ - numbers[idx2]) < threshold\n            return true\n        end\n       \
    \ \n        if numbers[idx1] > numbers[idx2]\n            idx1 += 1\n        else\n\
    \            idx2 -= 1\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    closest_numbers = numbers_sorted[1..end]\n    \n    closest_numbers_sorted\
    \ = sort(closest_numbers)\n    \n    closest_numbers_sorted_diff = closest_numbers_sorted\
    \ - closest_numbers\n    \n    closest_numbers_sorted_diff_sum = sum(closest_numbers_sorted_diff)\n\
    \    \n    return closest_numbers_sorted_diff_sum < threshold\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if n == numbers[end-1]\n            return true\n    \
    \    end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] > threshold\n            return true\n\
    \        end\n        idx += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is in a given list of numbers,\
    \ sorted in ascending order.\n    >>> in_sorted_order([1.0, 2.0, 3.0])\n    true\n\
    \    >>> in_sorted_order([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n    false\n    \"\"\"",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        j = i + 1\n        while j < length(numbers)\n            if numbers[j]\
    \ - numbers[i] < threshold\n                return false\n            end\n  \
    \          j += 1\n        end\n        i += 1\n    end\n    return true\nend\n\
    </cell>\n<text>\nThe function has_close_elements checks if there are any two numbers\
    \ in the given list that are closer to each other than the given threshold. If\
    \ so, it returns false. Otherwise, it returns true.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n \
    \   i = 0\n    j = length(numbers)\n    while i < j\n        if numbers[i] ==\
    \ numbers[j] \n            i += 1\n            j += 1\n        elseif numbers[i]\
    \ - numbers[j] < threshold\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    \n    return i == j\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if n == numbers[1]\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of elements in a list that satisfy a given\
    \ condition.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers[1:end-1]\n     \
    \   if abs(numbers[1] - n) < threshold\n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return false\n    else\n        return true\n    end\nend\n</cell>\n<text>\n\
    Problem 4\nWrite a function that returns the number of elements in a list that\
    \ satisfy a given condition. For example, the number of elements in a list that\
    \ satisfy $x^2 + y^2 = z^2$ would be given by $count_elements([1, 2, 3, 4], (x^2\
    \ + y^2 = z^2))$.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n\
    \    while i < length(numbers)\n        \n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        \n        i = i +\
    \ 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is in a given list of numbers, sorted in\
    \ ascending order.\nHint: Use a for loop.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)-1 do\n        if numbers[i+1]\
    \ - numbers[i] < threshold then\n            return true\n        end\n      \
    \  i = i + 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of numbers and a threshold and returns\
    \ a vector of booleans indicating which numbers are closer to each other than\
    \ the threshold.", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest\
    \ = findfirst( (numbers_sorted .< threshold), numbers_sorted)\n    \n    if index_of_closest\
    \ == length(numbers_sorted)\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of numbers and a threshold and returns a list of numbers that are within that\
    \ threshold.\nFor example, if the input list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\
    \ and the threshold is 0.3, then the output should be [1.0, 2.0].", "    \n  \
    \  numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    \n    return false\nend", "    \n  \
    \  numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i >\
    \ 1\n        \n        j = i - 1\n        \n        while j > 1\n            \n\
    \            if numbers[j] - numbers[j - 1] < threshold\n                return\
    \ true\n            \n            j = j - 1\n        end\n        \n        i\
    \ = i - 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return true\n    else\n        return false\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that finds the closest index of a given number in\
    \ a sorted array of numbers.\nThe function should return the index of the closest\
    \ number in the sorted array.\nThe function should return -1 if the number is\
    \ not in the array.\nThe function should return an error if the array is empty.\n\
    The function should return an error if the array is not sorted.\nThe function\
    \ should return an error if the array contains more than one element that is closer\
    \ to the\ngiven number than the given threshold.\nThe function should return an\
    \ error if the given number is less than the smallest number in the array.\nThe\
    \ function should return an error if the given number is greater than the largest\
    \ number in the array.\nThe function should return an error if the given number\
    \ is outside the range of the array.\nThe function should return an error if the\
    \ given number is NaN.\nThe function should return an error if the given number\
    \ is infinite.\nThe function should return an error if the given number is negative.\n\
    The function should return an error if the given number is zero.\nThe function\
    \ should return an error if the given number is greater than or equal to the largest\
    \ number in the array.\nThe function should return an error if the given number\
    \ is less than or equal to the smallest number in the array.\nThe function should\
    \ return an error if the given number is infinite.\nThe function should return\
    \ an error if the given number is NaN.\nThe function should return an error if\
    \ the given number is negative.\nThe function should return an error if the given\
    \ number is zero.\nThe function should return an error if the given number is\
    \ greater than or equal to the largest number in the array.\nThe function should\
    \ return an error if the given number is less than or equal to the smallest number\
    \ in the array.\nThe function should return an error if the given number is infinite.\n\
    The function should return an error if the given number is NaN.\nThe function\
    \ should return an error if the given number is negative.\nThe function should\
    \ return an error if the given number is zero.\nThe function should return an\
    \ error if the given number is greater than or equal to the largest number in\
    \ the array.\nThe function should return an error if the given number is less\
    \ than or equal to the smallest number in the array.\nThe function should return\
    \ an error if the given number is infinite.\nThe function should return an error\
    \ if the given number is NaN.\nThe function should return an error if the given\
    \ number is negative.\nThe function should return an error if the given number\
    \ is zero.\nThe function should return an error if the given number is greater\
    \ than or equal to the largest number in the array.\nThe function should return\
    \ an error if the given number is less than or equal to the smallest number in\
    \ the array.\nThe function should return an error if the given number is infinite.\n\
    The function should return an error if the given number is NaN.\nThe function\
    \ should return ", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while\
    \ i < length(numbers)\n        \n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        \n        i = i + 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        j = i\
    \ + 1\n        \n        while j < length(numbers)\n            \n           \
    \ if abs(numbers[i] - numbers[j]) < threshold\n                return true\n \
    \           \n            j += 1\n            \n        end\n        \n      \
    \  i += 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
