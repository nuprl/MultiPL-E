language: jl
name: HumanEval_8_sum_product
results:
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci2re1q0.jl:20\nin expression starting at\
    \ /tmp/tmpci2re1q0.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1] \n        product = numbers[1] \n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * numbers[i]\
    \ \n        end \n        return (sum, product) \nend \n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that returns the sum of the first n positive integers.\
    \ \nFor example, sum_first_n(3) should return 5.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikjc9i6h.jl:20\nin expression starting at\
    \ /tmp/tmpikjc9i6h.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ containing the squares of the integers in the vector.\nFor example, if the input\
    \ vector is [4, 6, 9], then the output vector should be [16, 25, 36].\nThe function\
    \ should work for vectors of any length.\nThe function should work for vectors\
    \ of any type.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_7d_7z7.jl:13\nin expression starting at\
    \ /tmp/tmps_7d_7z7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[length(numbers)-1]\n        return\
    \ (sum_product, numbers[1]*numbers[length(numbers)-1])\n    end\nend\n</cell>\n\
    <text>\nExercise 3: Write a function that takes a vector and returns a vector\
    \ consisting of the squares of the elements in the vector.\n    >>> square_of_vector([1,\
    \ 2, 3, 4])\n    [1, 4, 9, 16]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dljbs7h.jl:16\nin expression starting at\
    \ /tmp/tmp6dljbs7h.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ = sum_ + i\n            prod_ = prod_ * i\n        return (sum_,\
    \ prod_)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns a new list with the integers reversed.\n>>> reverse([1, 2, 3, 4])\n\
    [4, 3, 2, 1]\n>>> reverse([1, 2, 3, 4, 5])\n[5, 4, 3, 2, 1]\n>>> reverse([1, 2,\
    \ 3, 4, 5, 6])\n[6, 5, 4, 3, 2, 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7])\n[7, 6,\
    \ 5, 4, 3, 2, 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7, 8])\n[8, 7, 6, 5, 4, 3, 2,\
    \ 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9])\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n\
    >>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\
    >>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n[11, 10, 9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n[12, 11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13])\n[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n>>> reverse([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n>>> reverse([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n[16, 15, 14, 13, 12, 11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17])\n[17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]\n>>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18])\n[18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n>>> reverse([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n[19, 18, 17,\
    \ 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n>>> reverse([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n[20, 19, 18,\
    \ 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n>>> reverse([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n[21,\
    \ 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n>>>\
    \ reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppuv4hcxi.jl:20\nin expression starting at\
    \ /tmp/tmppuv4hcxi.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1] \n        product = numbers[1] \n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * numbers[i]\
    \ \n        endfor \n        return (sum, product) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaoxzijm3.jl:21\nin expression starting at\
    \ /tmp/tmpaoxzijm3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the squares of all the integers in the vector.\nFor example,\
    \ if the input vector is [4, 6, 8, 10], the function should return [16, 36, 48,\
    \ 64].\nThe function should use map and reduce.\nHint: use map and reduce.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rcp82x8.jl:13\nin expression starting at\
    \ /tmp/tmp8rcp82x8.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n  \
    \      sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn6h7wul.jl:16\nin expression starting at\
    \ /tmp/tmpfn6h7wul.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_product = 1\n    for\
    \ i in numbers\n        product_product = product_product * i\n    end\n    return\
    \ (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpw9gpvt86.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw9gpvt86.jl:9\n\
    in expression starting at /tmp/tmpw9gpvt86.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgi40uek3.jl:13\nin expression starting at\
    \ /tmp/tmpgi40uek3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum and product of a given list of integers.\
    \ \nThe function should work for lists of any length.\nThe function should work\
    \ for empty lists.\nThe function should work for lists of integers containing\
    \ negative numbers.\nThe function should work for lists of integers containing\
    \ floating point numbers.\nThe function should work for lists of integers containing\
    \ integers other than integers.\nThe function should work for lists of integers\
    \ containing integers other than integers.\nThe function should work for lists\
    \ of integers containing integers other than integers.\nThe function should work\
    \ for lists of integers containing integers other than integers.\nThe function\
    \ should work for lists of integers containing integers other than integers.\n\
    The function should work for lists of integers containing integers other than\
    \ integers.\nThe function should work for lists of integers containing integers\
    \ other than integers.\nThe function should work for lists of integers containing\
    \ integers other than integers.\nThe function should work for lists of integers\
    \ containing integers other than integers.\nThe function should work for lists\
    \ of integers containing integers other than integers.\nThe function should work\
    \ for lists of integers containing integers other than integers.\nThe function\
    \ should work for lists of integers containing integers other than integers.\n\
    The function should work for lists of integers containing integers other than\
    \ integers.\nThe function should work for lists of integers containing integers\
    \ other than integers.\nThe function should work for lists of integers containing\
    \ integers other than integers.\nThe function should work for lists of integers\
    \ containing integers other than integers.\nThe function should work for lists\
    \ of integers containing integers other than integers.\nThe function should work\
    \ for lists of integers containing integers other than integers.\nThe function\
    \ should work for lists of integers containing integers other than integers.\n\
    The function should work for lists of integers containing integers other than\
    \ integers.\nThe function should work for lists of integers containing integers\
    \ other than integers.\nThe function should work for lists of integers containing\
    \ integers other than integers.\nThe function should work for lists of integers\
    \ containing integers other than integers.\nThe function should work for lists\
    \ of integers containing integers other than integers.\nThe function should work\
    \ for lists of integers containing integers other than integers.\nThe function\
    \ should work for lists of integers containing integers other than integers.\n\
    The function should work for lists of integers containing integers other than\
    \ integers.\nThe function should work for lists of integers containing integers\
    \ other than integers.\nThe function should work for lists of integers containing\
    \ integers other than integ\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8z8t80l.jl:13\nin expression starting at\
    \ /tmp/tmpb8z8t80l.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nFor example, sum_of_squares([1,2,3]) should\
    \ return 9\nWrite a function that takes a vector of integers and returns the product\
    \ of the integers in the vector.\nFor example, product_of_squares([1,2,3]) should\
    \ return 6\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector, multiplied by the product of the\
    \ integers in the vector.\nFor example, sum_of_squares([1,2,3]) should return\
    \ 9\nWrite a function that takes a vector of integers and returns the product\
    \ of the integers in the vector, multiplied by the sum of the squares of the integers\
    \ in the vector.\nFor example, product_of_squares([1,2,3]) should return 6\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector, multiplied by the product of the integers in\
    \ the vector, multiplied by the sum of the squares of the integers in the vector.\n\
    For example, sum_of_squares([1,2,3]) should return 9\nWrite a function that takes\
    \ a vector of integers and returns the product of the integers in the vector,\
    \ multiplied by the sum of the squares of the integers in the vector, multiplied\
    \ by the product of the integers in the vector.\nFor example, product_of_squares([1,2,3])\
    \ should return 6\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bupzvfu.jl:13\nin expression starting at\
    \ /tmp/tmp5bupzvfu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = numbers[1]\n    prod = 1\n    for i in numbers[2:end]\n\
    \        sum_ = sum_ + i\n        prod = prod * i\n    return (sum_, prod)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcvku9p5l.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcvku9p5l.jl:1\n\
    in expression starting at /tmp/tmpcvku9p5l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the integers in a given list.\n\
    \    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl678lfnt.jl:13\nin expression starting at\
    \ /tmp/tmpl678lfnt.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * i \n\
    \        end\n        return (sum, product)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that returns the sum and product of the numbers in a list.\n\
    The function should take one argument, a list of integers. \nThe function should\
    \ return two values, a sum and a product, of the numbers in the list.\nThe function\
    \ should return nothing if the list is empty.\nThe function should raise an error\
    \ if the list contains non-numeric values.\nThe function should raise an error\
    \ if the list contains negative numbers.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains negative numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains negative numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains negative numbers.\nThe function\
    \ should raise an error if the list contains negative numbers.\nThe function should\
    \ raise an error if the list contains negative numbers.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains negative numbers.\nThe function should raise an error\
    \ if the list contains negative numbers.\nThe function should raise an error if\
    \ the list contains negative numbers.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains negative numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains negative numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains negative numbers.\nThe function\
    \ should raise an error if the list contains negative numbers.\nThe function should\
    \ raise an error if the list contains negative numbers.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains negative numbers.\nThe function should raise an error\
    \ if the list contains negative numbers.\nThe function should raise an error if\
    \ the list contains negative numbers.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains negative numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains negative numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains negative numbers.\nThe function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7j7ogp1l.jl:21\nin expression starting at\
    \ /tmp/tmp7j7ogp1l.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns a list of all possible\
    \ permutations of the integers in the list.\nFor example, if the input list is\
    \ [1,2,3], the output should be [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].\n\
    The order of the output does not matter.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of integers and floats.\nThe\
    \ function should work for lists of any type.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8knuh_bw.jl:13\nin expression starting at\
    \ /tmp/tmp8knuh_bw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[0]\n        prod_ = 1\n        for i in 2:length(numbers)\n\
    \            sum_ = sum_ + numbers[i]\n            prod_ = prod_ * numbers[i]\n\
    \        end\n        return (sum_, prod_)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the first n integers in a list.\nThe function\
    \ should work for an empty list as well as for lists of length n.\n>>> sum_of_squares([])\n\
    0\n>>> sum_of_squares([1,2,3])\n9\n>>> sum_of_squares([1,2,3])\n9\n>>> sum_of_squares([1,2,3,4])\n\
    25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>>\
    \ sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n\
    25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>>\
    \ sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n\
    25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>>\
    \ sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n\
    25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>>\
    \ sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n\
    25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>>\
    \ sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n\
    25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>>\
    \ sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n\
    25\n>>> sum_of_squares([1,2,3,4])\n25\n>>> sum_of_squares([1,2,3,4])\n25\n>>>\
    \ sum_of_squares\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjpe9c26.jl:21\nin expression starting at\
    \ /tmp/tmpfjpe9c26.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\nThe vector can contain any number of elements.\nThe function\
    \ should work for vectors of any length.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7z6n7in6.jl:16\nin expression starting at\
    \ /tmp/tmp7z6n7in6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63xy0_qu.jl:16\nin expression starting at\
    \ /tmp/tmp63xy0_qu.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ += number\n        product_ *= number\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert sum_product([1, 2, 3]) == (6, 6)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the sum and product of a given list of integers,\
    \ where the product is defined as the product of all the integers excluding the\
    \ number itself. For instance, if the list is [4, 2, 3], the sum is 2 + 2 + 3\
    \ = 6 and the product is 2 * 3 * 4 = 24. Your function should work for any list\
    \ of integers, not just for lists of length 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuadg88n.jl:16\nin expression starting at\
    \ /tmp/tmpuuadg88n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1] \n        product = numbers[1] \n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * numbers[i]\
    \ \n        endfor \n        return (sum, product) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\n>>> sum_square([1,2,3,4,5])\n25\n>>> sum_square([-1,-2,-3,-4,-5])\n\
    25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>>\
    \ sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n\
    25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>>\
    \ sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n\
    25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>>\
    \ sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n\
    25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>>\
    \ sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n\
    25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>>\
    \ sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n\
    25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>>\
    \ sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,-4,5])\n25\n>>> sum_square([1,-2,3,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohajm8ln.jl:21\nin expression starting at\
    \ /tmp/tmpohajm8ln.jl:21\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd43a8a7c.jl:13\nin expression starting at\
    \ /tmp/tmpd43a8a7c.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinpb6_o9.jl:16\nin expression starting at\
    \ /tmp/tmpinpb6_o9.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = product = 1\n    for n in numbers\n        sum += n\n   \
    \     product *= n\n    return (sum, product)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq9zhfgbm.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq9zhfgbm.jl:1\n\
    in expression starting at /tmp/tmpq9zhfgbm.jl:1\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe sum of\
    \ the squares should be equal to the sum of the squares of the integers in the\
    \ vector.\nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector contains non-integer values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error if the vector\
    \ contains values greater than or equal to 100.\nThe function should raise an\
    \ error if the vector contains values less than or equal to 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nThe function should raise an error if the vector contains values\
    \ greater than or equal to 100.\nThe function should raise an error if the vector\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the vector contains values greater than or equal to 100.\nThe function should\
    \ raise an error if the vector contains values less than or equal to 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpia4t_jvf.jl:16\nin expression starting at\
    \ /tmp/tmpia4t_jvf.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum = sum\
    \ + n\n        product = product * n\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj2yzvmry.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj2yzvmry.jl:1\n\
    in expression starting at /tmp/tmpj2yzvmry.jl:1\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3y0ghibh.jl:13\nin expression starting at\
    \ /tmp/tmp3y0ghibh.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = product = 1\n    for n in numbers\n        sum += n\n   \
    \     product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum and product of all the integers in a given vector.\nThe function should\
    \ work for both vectors and matrices.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5q1903o.jl:15\nin expression starting at\
    \ /tmp/tmph5q1903o.jl:15\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of elements in a list that satisfy a\
    \ given condition. For example, a list with only positive integers has $n$ elements,\
    \ where $n$ is the number of positive integers in the list. Write a function that\
    \ returns the number of elements in a list that satisfy a given condition.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb79ivnur.jl:13\nin expression starting at\
    \ /tmp/tmpb79ivnur.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgi8rqus9.jl:17\nin expression starting at\
    \ /tmp/tmpgi8rqus9.jl:17\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    end\n    return (sum_product,\
    \ product_product)\nend\n</code>\n<|/ a tags=julia,function,tuples |>\n<| c |>\n\
    Thank you for your answer. Your code works fine, but I wanted to avoid using loops.\
    \ I edited my question to show my code using loops.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to show you a way to do it without loops.\n<|/ c |>\n<| c |>\nThank\
    \ you for your answer. Your code works fine, but I wanted to avoid using loops.\
    \ I edited my question to show my code using loops.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to show you a way to do it without loops.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie7w2duw.jl:16\nin expression starting at\
    \ /tmp/tmpie7w2duw.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert sum_product([1, 2, 3, 4]) == (10, 24)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum and product of a given\
    \ list of integers, where the product is defined as the product of the individual\
    \ digits. For example, sum_product_digits([1, 2, 3, 4]) should return (6, 24).\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljp_5z1g.jl:16\nin expression starting at\
    \ /tmp/tmpljp_5z1g.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjkma9d2.jl:16\nin expression starting at\
    \ /tmp/tmpnjkma9d2.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product_of_numbers = numbers[2:end]\n\
    \        sum_product += numbers[1]\n        sum_product *= product_of_numbers[1]\n\
    \        sum_product *= product_of_numbers[2:end]\n        return (sum_product,\
    \ product_of_numbers)\n    end\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that takes a list of integers and returns the sum of the integers squared.\n\
    The function should return 0 if the list is empty.\nThe function should return\
    \ 0 if the list contains only integers.\nThe function should return 0 if the list\
    \ contains only non-integers.\nThe function should return 0 if the list contains\
    \ only negative integers.\nThe function should return 0 if the list contains only\
    \ positive integers.\nThe function should return 0 if the list contains only non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-positive\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-negative\
    \ integers.\nThe function should return 0 if the list contains only non-non-non-\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvh1omtmr.jl:20\nin expression starting at\
    \ /tmp/tmpvh1omtmr.jl:20\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ = sum_ + i\n        product_ = product_ * i\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5a58naa.jl:16\nin expression starting at\
    \ /tmp/tmpp5a58naa.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n  \
    \      sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of all the integers in a\
    \ list.\nThe function should work for any type of numbers, not just Int64.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9hwazcr.jl:16\nin expression starting at\
    \ /tmp/tmpg9hwazcr.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1)\n    else \n  \
    \      return (sum(numbers), prod(numbers))\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns a list of all the even\
    \ numbers in the list.\nThe even numbers are those that are divisible by 2.\n\
    The function should return an empty list if the list is empty.\nThe function should\
    \ return a list of integers containing the even numbers in the list.\nThe function\
    \ should return a list of integers containing the even numbers in the list if\
    \ the list contains only even numbers.\nThe function should return a list of integers\
    \ containing the even numbers in the list if the list contains only even numbers\
    \ and is sorted in ascending order.\nThe function should return a list of integers\
    \ containing the even numbers in the list if the list contains only even numbers\
    \ and is sorted in descending order.\nThe function should return a list of integers\
    \ containing the even numbers in the list if the list contains only even numbers\
    \ and is sorted in ascending order and in descending order.\nThe function should\
    \ return a list of integers containing the even numbers in the list if the list\
    \ contains only even numbers and is sorted in ascending order and in descending\
    \ order.\nThe function should return a list of integers containing the even numbers\
    \ in the list if the list contains only even numbers and is sorted in ascending\
    \ order and in descending order.\nThe function should return a list of integers\
    \ containing the even numbers in the list if the list contains only even numbers\
    \ and is sorted in ascending order and in descending order.\nThe function should\
    \ return a list of integers containing the even numbers in the list if the list\
    \ contains only even numbers and is sorted in ascending order and in descending\
    \ order.\nThe function should return a list of integers containing the even numbers\
    \ in the list if the list contains only even numbers and is sorted in ascending\
    \ order and in descending order.\nThe function should return a list of integers\
    \ containing the even numbers in the list if the list contains only even numbers\
    \ and is sorted in ascending order and in descending order.\nThe function should\
    \ return a list of integers containing the even numbers in the list if the list\
    \ contains only even numbers and is sorted in ascending order and in descending\
    \ order.\nThe function should return a list of integers containing the even numbers\
    \ in the list if the list contains only even numbers and is sorted in ascending\
    \ order and in descending order.\nThe function should return a list of integers\
    \ containing the even numbers in the list if the list contains only even numbers\
    \ and is sorted in ascending order and in descending order.\nThe function should\
    \ return a list of integers containing the even numbers in the list if the list\
    \ contains only even numbers and is sorted in ascending order and in descending\
    \ order.\nThe function should return a list of integers containing the even numbers\
    \ in the list if the list contains only even numbers and \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj_68kpf.jl:14\nin expression starting at\
    \ /tmp/tmpbj_68kpf.jl:14\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the squares of the integers in a\
    \ given list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3,4,5])\n\
    \    25.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv875sw1o.jl:16\nin expression starting at\
    \ /tmp/tmpv875sw1o.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjxxird0.jl:16\nin expression starting at\
    \ /tmp/tmpxjxxird0.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nThe function should work for vectors of any size.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both positive and negative numbers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both integers and floats.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both integers and\
    \ floats.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both integers and floats.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both integers and\
    \ floats.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both integers and floats.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both integers and\
    \ floats.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both integers and floats.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both integers and\
    \ floats.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both integers and floats.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both integers and\
    \ floats.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both integers and floats.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both integers and\
    \ floats.\nThe function should work for both integers and floats.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzpzmpld.jl:13\nin expression starting at\
    \ /tmp/tmpwzpzmpld.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem6_efg4.jl:16\nin expression starting at\
    \ /tmp/tmpem6_efg4.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n  \
    \      sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that returns the sum of the squares of the integers\
    \ in a list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptug2aph_.jl:16\nin expression starting at\
    \ /tmp/tmptug2aph_.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the numbers in the vector.\nThe sum of\
    \ the squares should be equal to the sum of the numbers in the vector.\nThe function\
    \ should raise an error if the vector is empty.\nThe function should raise an\
    \ error if the vector contains non-numeric values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than 100.\nThe function should\
    \ raise an error if the vector contains values less than 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nThe function should raise an error if the vector contains values\
    \ greater than or equal to 100.\nThe function should raise an error if the vector\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the vector contains values greater than or equal to 100.\nThe function should\
    \ raise an error if the vector contains values less than or equal to 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error if the vector\
    \ contains values greater than or equal to 100.\nThe function should raise an\
    \ error if the vector contains values less than or equal to 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nThe function should raise an error if the vector contains values\
    \ greater than or equal to 100.\nThe function should raise an error if the vector\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the vector contains values greater than or equal to 100.\nThe function should\
    \ raise an error if the vector contains values less than or equal to 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaogzd9lc.jl:17\nin expression starting at\
    \ /tmp/tmpaogzd9lc.jl:17\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe squares should be calculated using the formula $x^2 = y^2\
    \ + z^2$, where $x, y, z$ are the integers in the vector.\nThe function should\
    \ return the sum of the squares.\nThe function should return 0 if the vector is\
    \ empty.\nThe function should raise an error if the vector contains non-integer\
    \ values.\nThe function should raise an error if the vector contains negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 elements.\nThe function should raise an error if the vector contains more\
    \ than 10 non-integer values.\nThe function should raise an error if the vector\
    \ contains more than 10 negative values.\nThe function should raise an error if\
    \ the vector contains more than 10 non-integer and negative values.\nThe function\
    \ should raise an error if the vector contains more than 10 non-integer and negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 non-integer and negative values.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer and negative values.\nThe function\
    \ should raise an error if the vector contains more than 10 non-integer and negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 non-integer and negative values.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer and negative values.\nThe function\
    \ should raise an error if the vector contains more than 10 non-integer and negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 non-integer and negative values.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer and negative values.\nThe function\
    \ should raise an error if the vector contains more than 10 non-integer and negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 non-integer and negative values.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer and negative values.\nThe function\
    \ should raise an error if the vector contains more than 10 non-integer and negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 non-integer and negative values.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer and negative values.\nThe function\
    \ should raise an error if the vector contains more than 10 non-integer and negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 non-integer and negative values.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer and negative values.\nThe function\
    \ should raise an error if the vector contains more than 10 non-integer and negative\
    \ values.\nThe function should raise an error if the vector contains more than\
    \ 10 non-integer and negative values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3htmax79.jl:13\nin expression starting at\
    \ /tmp/tmp3htmax79.jl:13\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3, 4, 5]) == (24,\
    \ 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1,\
    \ 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplla2u_o3.jl:20\nin expression starting at\
    \ /tmp/tmplla2u_o3.jl:20\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns a list of\
    \ all numbers in the list that are less than or equal to 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xg41sfy.jl:13\nin expression starting at\
    \ /tmp/tmp9xg41sfy.jl:13\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1] \n        product = numbers[1] \n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * numbers[i]\
    \ \n        endfor \n        return (sum, product) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (15, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n@assert \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphztkyjd8.jl:21\nin expression starting at\
    \ /tmp/tmphztkyjd8.jl:21\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_tutpqz.jl:16\nin expression starting at\
    \ /tmp/tmpm_tutpqz.jl:16\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = numbers[1]\n    prod = 1\n    for n in numbers[2:end]\n\
    \        sum_ += n\n        prod *= n\n    return (sum_, prod)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqquwdxid.jl:16\nin expression starting at\
    \ /tmp/tmpqquwdxid.jl:16\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = numbers[1]\n    prod = numbers[1]\n    for i in numbers[2:end]\n\
    \        sum_ = sum_ + i\n        prod = prod * i\n    end\n    return (sum_,\
    \ prod)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list.\nThe function should raise\
    \ an error if the list is empty.\n>>> square_sum([])\n0\n>>> square_sum([1, 2,\
    \ 3, 4])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5, 6])\n25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8])\n25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n25\n>>>\
    \ square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11])\n25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12])\n25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\
    25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n25\n>>>\
    \ square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21])\n25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22])\n25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24])\n25\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3ujkxow.jl:17\nin expression starting at\
    \ /tmp/tmpp3ujkxow.jl:17\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ = sum_ + i \n            product_ = product_ * i \n     \
    \   return (sum_, product_) \nend\n</cell>\n<code language=julia-1.4>\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n\
    @assert sum_product([1,2,3,4,5,6]) == (15, 240)\n@assert sum_product([1,2,3,4,5,6,7])\
    \ == (15, 480)\n@assert sum_product([1,2,3,4,5,6,7,8]) == (15, 720)\n@assert sum_product([1,2,3,4,5,6,7,8,9])\
    \ == (15, 960)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10]) == (15, 1200)\n@assert\
    \ sum_product([1,2,3,4,5,6,7,8,9,10,11]) == (15, 1600)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ == (15, 2000)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13]) == (15,\
    \ 2400)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == (15, 2800)\n\
    @assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == (15, 3200)\n@assert\
    \ sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == (15, 3600)\n@assert\
    \ sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == (15, 4000)\n@assert\
    \ sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == (15, 4400)\n\
    @assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == (15,\
    \ 4800)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ == (15, 5200)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\
    \ == (15, 5600)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\
    \ == (15, 6000)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq32g7m2k.jl:19\nin expression starting at\
    \ /tmp/tmpq32g7m2k.jl:19\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for number in numbers[2:end]\n\
    \        sum_product += number\n        product *= number\n    return (sum_product,\
    \ product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\n>>> square_sum([])\n\
    0\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([-1, -2, -3, -4])\n25\n>>>\
    \ square_sum([1, 2, -3, 4])\n25\n>>> square_sum([1, 2, -3, -4])\n25\n>>> square_sum([1,\
    \ 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3,\
    \ -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n\
    25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>>\
    \ square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1,\
    \ 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3,\
    \ -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n\
    25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>>\
    \ square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1,\
    \ 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3,\
    \ -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n\
    25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>>\
    \ square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1,\
    \ 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3,\
    \ -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n\
    25\n>>> square_sum([1, 2, 3, -4])\n25\n>>> square_sum([1, 2, 3, -4])\n25\n>>>\
    \ square_sum([1, 2, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhkgrsl4.jl:16\nin expression starting at\
    \ /tmp/tmpdhkgrsl4.jl:16\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of integers\
    \ and returns a new list consisting of the squares of the integers in the original\
    \ list. For example, given [1,2,3,4,5], the function should return [1,4,9,16,25].\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9tgxkz0.jl:17\nin expression starting at\
    \ /tmp/tmpq9tgxkz0.jl:17\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5]\
    \ + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11]\
    \ + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17]\
    \ + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23]\
    \ + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29]\
    \ + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35]\
    \ + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41]\
    \ + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47]\
    \ + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53]\
    \ + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59]\
    \ + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65]\
    \ + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71]\
    \ + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77]\
    \ + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83]\
    \ + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89]\
    \ + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95]\
    \ + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101]\
    \ + numbers[102] + numbers[103] + numbers[104] + numbers[105] + numbers[106] +\
    \ numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112]\
    \ + numbers[113] + numbers[114] + numbers[115] + numbers[116] + numbers[117] +\
    \ numbers[118] + number\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpjhv9ms9_.jl:9 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhv9ms9_.jl:1\nin expression\
    \ starting at /tmp/tmpjhv9ms9_.jl:1\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the sum\
    \ of the numbers and the product of the numbers. \nThe function should return\
    \ two values, a tuple consisting of the sum and the product of the numbers. \n\
    The function should return (0, 0) if the list is empty.\nThe function should raise\
    \ an error if the list contains non-numeric values.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains negative numbers.\nThe function should raise an error if\
    \ the list contains negative numbers.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains negative numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains negative numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains negative numbers.\nThe function\
    \ should raise an error if the list contains negative numbers.\nThe function should\
    \ raise an error if the list contains negative numbers.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains negative numbers.\nThe function should raise an error\
    \ if the list contains negative numbers.\nThe function should raise an error if\
    \ the list contains negative numbers.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains negative numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains negative numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains negative numbers.\nThe function\
    \ should raise an error if the list contains negative numbers.\nThe function should\
    \ raise an error if the list contains negative numbers.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains negative numbers.\nThe function should raise an error\
    \ if the list contains negative numbers.\nThe function should raise an error if\
    \ the list contains negative numbers.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains negative numbers.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains negative numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains negative numbers.\nThe function\
    \ should raise an error if the list contains \nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbu5879m.jl:13\nin expression starting at\
    \ /tmp/tmpgbu5879m.jl:13\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    product_ = Int64(1)\n    for number in numbers\n\
    \        sum_ = sum_ + number\n        product_ = product_ * number\n    end\n\
    \    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2]) == (3, 4)\n@assert\
    \ sum_product([1,3,4]) == (15, 12)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n\
    @assert sum_product([1,3,5]) == (15, 120)\n@assert sum_product([1,3,5,7]) == (15,\
    \ 120)\n@assert sum_product([1,3,5,7,9]) == (15, 120)\n@assert sum_product([1,3,5,7,9,11])\
    \ == (15, 120)\n@assert sum_product([1,3,5,7,9,11,13]) == (15, 120)\n@assert sum_product([1,3,5,7,9,11,13,15])\
    \ == (15, 120)\n@assert sum_product([1,3,5,7,9,11,13,15,17]) == (15, 120)\n@assert\
    \ sum_product([1,3,5,7,9,11,13,15,17,19]) == (15, 120)\n@assert sum_product([1,3,5,7,9,11,13,15,17,19,21])\
    \ == (15, 120)\n@assert sum_product([1,3,5,7,9,11,13,15,17,19,21,23]) == (15,\
    \ 120)\n@assert sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25]) == (15, 120)\n\
    @assert sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25,27]) == (15, 120)\n@assert\
    \ sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]) == (15, 120)\n@assert\
    \ sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]) == (15, 120)\n@assert\
    \ sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33]) == (15, 120)\n\
    @assert sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35]) == (15,\
    \ 120)\n@assert sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37])\
    \ == (15, 120)\n@assert sum_product([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oni9a_k.jl:17\nin expression starting at\
    \ /tmp/tmp4oni9a_k.jl:17\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list.\n>>> sum_square_of_numbers([1, 2, 3, 4])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1, 2, 3, -4, 5])\n25\n>>> sum_square_of_numbers([1,\
    \ 2, 3, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmrz4cgk2.jl:13\nin expression starting at\
    \ /tmp/tmpmrz4cgk2.jl:13\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return sum_product,\
    \ product_product\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a given list.\n    >>> sum_squares_product([1,\
    \ 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbot80oui.jl:16\nin expression starting at\
    \ /tmp/tmpbot80oui.jl:16\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a vector of integers and returns the sum of\
    \ the squares of the integers in the vector.\nThe function should raise an error\
    \ if the vector is empty or has only one element.\nThe function should raise an\
    \ error if the vector contains non-integer elements.\nThe function should raise\
    \ an error if the vector contains negative numbers.\nThe function should raise\
    \ an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains negative numbers.\nThe function should\
    \ raise an error if the vector \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmbrbcfz.jl:16\nin expression starting at\
    \ /tmp/tmpnmbrbcfz.jl:16\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] \n        prod_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ = sum_ + i \n            prod_ = prod_ * i \n        return\
    \ (sum_, prod_) \nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the first n positive integers less than or equal to n.\n>>> sum_first_n(5)\n\
    10\n>>> sum_first_n(10)\n15\n>>> sum_first_n(0)\n0\n>>> sum_first_n(1)\n1\n>>>\
    \ sum_first_n(100)\n100\n>>> sum_first_n(1000)\n1000\n>>> sum_first_n(10000)\n\
    10000\n>>> sum_first_n(100000)\n100000\n>>> sum_first_n(1000000)\n1000000\n>>>\
    \ sum_first_n(10000000)\n10000000\n>>> sum_first_n(100000000)\n100000000\n>>>\
    \ sum_first_n(1000000000)\n1000000000\n>>> sum_first_n(10000000000)\n10000000000\n\
    >>> sum_first_n(100000000000)\n100000000000\n>>> sum_first_n(1000000000000)\n\
    1000000000000\n>>> sum_first_n(1000000000001)\n1000000000001\n>>> sum_first_n(1000000000002)\n\
    1000000000002\n>>> sum_first_n(1000000000003)\n1000000000003\n>>> sum_first_n(1000000000004)\n\
    1000000000004\n>>> sum_first_n(1000000000005)\n1000000000005\n>>> sum_first_n(1000000000006)\n\
    1000000000006\n>>> sum_first_n(1000000000007)\n1000000000007\n>>> sum_first_n(1000000000008)\n\
    1000000000008\n>>> sum_first_n(1000000000009)\n1000000000009\n>>> sum_first_n(1000000000010)\n\
    1000000000010\n>>> sum_first_n(1000000000011)\n1000000000011\n>>> sum_first_n(1000000000012)\n\
    1000000000012\n>>> sum_first_n(1000000000013)\n1000000000013\n>>> sum_first_n(1000000000014)\n\
    1000000000014\n>>> sum_first_n(1000000000015)\n1000000000015\n>>> sum_first_n(1000000000016)\n\
    1000000000016\n>>> sum_first_n(1000000000017)\n1000000000017\n>>> sum_first_n(1000000000018)\n\
    1000000000018\n>>> sum_first_n(1000000000019)\n1000000000019\n>>> sum_first_n(1000000000020)\n\
    1000000000020\n>>> sum_first_n(1000000000021)\n1000000000021\n>>> sum_first_n(1000000000022)\n\
    1000000000022\n\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5tjqqp1.jl:19\nin expression starting at\
    \ /tmp/tmpf5tjqqp1.jl:19\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        product = 1\n        for\
    \ i in 2:length(numbers) \n            product *= numbers[i]\n            sum_product\
    \ += product\n        end\n        return (sum_product, product)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3, 4]) == (30,\
    \ 120)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4,\
    \ 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert\
    \ sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24,\
    \ 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3,\
    \ 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4,\
    \ 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert\
    \ sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24,\
    \ 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3,\
    \ 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4,\
    \ 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert\
    \ sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24,\
    \ 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3,\
    \ 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4,\
    \ 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert\
    \ sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24,\
    \ 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3,\
    \ 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4,\
    \ 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24, 6)\n@assert\
    \ sum_product([4, 3, 2, 1]) == (24, 6)\n@assert sum_product([4, 3, 2, 1]) == (24,\
    \ 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dnxw0_f.jl:21\nin expression starting at\
    \ /tmp/tmp6dnxw0_f.jl:21\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36c6b499.jl:16\nin expression starting at\
    \ /tmp/tmp36c6b499.jl:16\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\n    >>> sum_of_squares([4,\
    \ 9, 16])\n    49\n    >>> sum_of_squares([-1, 0, 1])\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwyjmw_u.jl:13\nin expression starting at\
    \ /tmp/tmpxwyjmw_u.jl:13\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for i in numbers[2:end]\n\
    \        sum_product = sum_product + i\n        product = product * i\n    end\n\
    \    return (sum_product, product)\nend\n</code>\n<|/ a tags=julia,function,sum,product\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00bqspr2.jl:17\nin expression starting at\
    \ /tmp/tmp00bqspr2.jl:17\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2]\n        prod_ = numbers[1] * numbers[2]\n\
    \        return (sum_, prod_)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of the integers squared. \n\
    The function should raise an error if the list is empty.\nHint: You can use the\
    \ sum function.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsolna14w.jl:16\nin expression starting at\
    \ /tmp/tmpsolna14w.jl:16\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0p297vvz.jl:13\nin expression starting at\
    \ /tmp/tmp0p297vvz.jl:13\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_product = 1\n    for\
    \ number in numbers\n        product_product = product_product * number\n    end\n\
    \    return (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([-1, -2, -3]) ==\
    \ (0, 6)\n@assert sum_product([-4, -5, -6]) == (24, 120)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list.\nThe function should work for lists of\
    \ any length.\nThe function should work for negative numbers as well.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any length.\nThe function should work for lists of\
    \ any length.\nThe \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpdlzgjqrf.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdlzgjqrf.jl:9\n\
    in expression starting at /tmp/tmpdlzgjqrf.jl:9\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n   \
    \     sum += n\n        prod *= n\n    return (sum, prod)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the squares of the integers in a given\
    \ list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    >>> sum_square([-1, 0,\
    \ 1])\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04h4iayl.jl:16\nin expression starting at\
    \ /tmp/tmp04h4iayl.jl:16\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2] \n        product = 1\n        for\
    \ i in numbers[2:end]\n            product = product * i\n        end\n      \
    \  return (sum_product, product)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=julia |>\nI like using reduce for these kinds of problems:\n<code>\n\
    reduce(+, numbers)\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfw13xqa6.jl:20\nin expression starting at\
    \ /tmp/tmpfw13xqa6.jl:20\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbdk8jqr.jl:13\nin expression starting at\
    \ /tmp/tmplbdk8jqr.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] \n        product_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ += i \n            product_ *= i \n        return (sum_,\
    \ product_) \nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mq4c8a_.jl:19\nin expression starting at\
    \ /tmp/tmp5mq4c8a_.jl:19\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevjz39oo.jl:13\nin expression starting at\
    \ /tmp/tmpevjz39oo.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\nend\n</code>\n<|/ a tags=julia,function,sum,product\
    \ |>\n<| c |>\nI like the use of tuple unpacking here. I would also suggest to\
    \ replace `numbers[1]` with `numbers[1] == 0 ? 0 : numbers[1]` since `numbers[1]`\
    \ is an `Int64` which can be compared to `0`.\n<|/ c |>\n<| a tags=julia,function,sum,product\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rd81mip.jl:19\nin expression starting at\
    \ /tmp/tmp9rd81mip.jl:19\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code\
    \ language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9e5nw6m.jl:17\nin expression starting at\
    \ /tmp/tmpk9e5nw6m.jl:17\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should raise an error\
    \ if the list is empty.\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3, 4])\n\
    25\n>>> square_sum([1, 2, 3])\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\"\
    , line 2, in sum\nTypeError: in method 'square_sum', argument 1 of type 'Vector{Int64}'\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppeoj5t1a.jl:13\nin expression starting at\
    \ /tmp/tmppeoj5t1a.jl:13\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of integers and returns the\
    \ sum of the squares of the integers in the list.\nThe sum of the squares should\
    \ be equal to the sum of the squares of the integers in the list.\nThe function\
    \ should return an error if the list is empty.\nThe function should return an\
    \ error if the list contains non-integer values.\nThe function should return an\
    \ error if the list contains negative values.\nThe function should return an error\
    \ if the list contains duplicate values.\nThe function should return an error\
    \ if the list contains negative values.\nThe function should return an error if\
    \ the list contains duplicate values.\nThe function should return an error if\
    \ the list contains negative values.\nThe function should return an error if the\
    \ list contains duplicate values.\nThe function should return an error if the\
    \ list contains negative values.\nThe function should return an error if the list\
    \ contains duplicate values.\nThe function should return an error if the list\
    \ contains negative values.\nThe function should return an error if the list contains\
    \ duplicate values.\nThe function should return an error if the list contains\
    \ negative values.\nThe function should return an error if the list contains duplicate\
    \ values.\nThe function should return an error if the list contains negative values.\n\
    The function should return an error if the list contains duplicate values.\nThe\
    \ function should return an error if the list contains negative values.\nThe function\
    \ should return an error if the list contains duplicate values.\nThe function\
    \ should return an error if the list contains negative values.\nThe function should\
    \ return an error if the list contains duplicate values.\nThe function should\
    \ return an error if the list contains negative values.\nThe function should return\
    \ an error if the list contains duplicate values.\nThe function should return\
    \ an error if the list contains negative values.\nThe function should return an\
    \ error if the list contains duplicate values.\nThe function should return an\
    \ error if the list contains negative values.\nThe function should return an error\
    \ if the list contains duplicate values.\nThe function should return an error\
    \ if the list contains negative values.\nThe function should return an error if\
    \ the list contains duplicate values.\nThe function should return an error if\
    \ the list contains negative values.\nThe function should return an error if the\
    \ list contains duplicate values.\nThe function should return an error if the\
    \ list contains negative values.\nThe function should return an error if the list\
    \ contains duplicate values.\nThe function should return an error if the list\
    \ contains negative values.\nThe function should return an error if the list contains\
    \ duplicate values.\nThe function should return an error if the list contains\
    \ negative values.\nThe function should return an error if the list contains duplicate\
    \ values.\nThe function should return an error if the list contains negative values.\n\
    The function should return an error if the list contains duplicate values.\nThe\
    \ function should return an error if the list contains negative values.\nThe function\
    \ should return an error if the list contains duplicate values.\nThe function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyo93p79.jl:13\nin expression starting at\
    \ /tmp/tmpuyo93p79.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product_of_numbers = numbers[1]\n  \
    \      for i in 2:length(numbers)\n            sum_product = sum_product + numbers[i]\n\
    \            product_of_numbers = product_of_numbers * numbers[i]\n        end\n\
    \        return (sum_product, product_of_numbers)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsuge1p0.jl:21\nin expression starting at\
    \ /tmp/tmpwsuge1p0.jl:21\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n  \
    \      sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 3)\n\
    @assert sum_product([4, 5]) == (20, 15)\n@assert sum_product([-4, -5]) == (-8,\
    \ 15)\n@assert sum_product([4, -5]) == (20, -8)\n@assert sum_product([-4, 5])\
    \ == (-8, -15)\n@assert sum_product([4, 5]) == (20, 15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum and product of all the integers in\
    \ a vector. \nFor an empty vector, return (0, 0).\nFor a vector with one element,\
    \ return (0, 1).\nFor a vector with more than one element, return a tuple consisting\
    \ of the sum and product of the elements.\nFor a vector with more than two elements,\
    \ return a tuple consisting of the sum and product of the elements and the sum\
    \ and product of the remaining elements.\nFor a vector with more than three elements,\
    \ return a tuple consisting of the sum and product of the elements, the sum and\
    \ product of the remaining elements and the sum and product of the remaining elements.\n\
    For a vector with more than four elements, return a tuple consisting of the sum\
    \ and product of the elements, the sum and product of the remaining elements,\
    \ the sum and product of the remaining elements and the sum and product of the\
    \ remaining elements.\nFor a vector with more than five elements, return a tuple\
    \ consisting of the sum and product of the elements, the sum and product of the\
    \ remaining elements, the sum and product of the remaining elements and the sum\
    \ and product of the remaining elements.\nFor a vector with more than six elements,\
    \ return a tuple consisting of the sum and product of the elements, the sum and\
    \ product of the remaining elements, the sum and product of the remaining elements\
    \ and the sum and product of the remaining elements.\nFor a vector with more than\
    \ seven elements, return a tuple consisting of the sum and product of the elements,\
    \ the sum and product of the remaining elements, the sum and product of the remaining\
    \ elements and the sum and product of the remaining elements.\nFor a vector with\
    \ more than eight elements, return a tuple consisting of the sum and product of\
    \ the elements, the sum and product of the remaining elements, the sum and product\
    \ of the remaining elements and the sum and product of the remaining elements.\n\
    For a vector with more than nine elements, return a tuple consisting of the sum\
    \ and product of the elements, the sum and product of the remaining elements,\
    \ the sum and product of the remaining elements and the sum and product of the\
    \ remaining elements.\nFor a vector with more than ten elements, return a tuple\
    \ consisting of the sum and product of the elements, the sum and product of the\
    \ remaining elements, the sum and product of the remaining elements and the sum\
    \ and product of the remaining elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzzik896.jl:16\nin expression starting at\
    \ /tmp/tmpfzzik896.jl:16\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the integers in a given list.\n    >>> sum_square([1, 2, 3, 4])\n\
    \    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzmjfi6d.jl:17\nin expression starting at\
    \ /tmp/tmpkzmjfi6d.jl:17\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbdk8jqr.jl:13\nin expression starting at\
    \ /tmp/tmplbdk8jqr.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        (0, 1) \n    else \n        sum_product(numbers[2:end-1])\
    \ + numbers[1] * product[numbers[1]] \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer values.\nThe function should raise an error if the list contains\
    \ negative values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains negative or\
    \ zero values.\nThe function should raise an error if the list contains values\
    \ greater than or equal to 0.\nThe function should raise an error if the list\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the list contains values greater than or equal to 1.\nThe function should\
    \ raise an error if the list contains values less than or equal to 1.\nThe function\
    \ should raise an error if the list contains values greater than or equal to 2.\n\
    The function should raise an error if the list contains values less than or equal\
    \ to 2.\nThe function should raise an error if the list contains values greater\
    \ than or equal to 3.\nThe function should raise an error if the list contains\
    \ values less than or equal to 3.\nThe function should raise an error if the list\
    \ contains values greater than or equal to 4.\nThe function should raise an error\
    \ if the list contains values less than or equal to 4.\nThe function should raise\
    \ an error if the list contains values greater than or equal to 5.\nThe function\
    \ should raise an error if the list contains values less than or equal to 5.\n\
    The function should raise an error if the list contains values greater than or\
    \ equal to 6.\nThe function should raise an error if the list contains values\
    \ less than or equal to 6.\nThe function should raise an error if the list contains\
    \ values greater than or equal to 7.\nThe function should raise an error if the\
    \ list contains values less than or equal to 7.\nThe function should raise an\
    \ error if the list contains values greater than or equal to 8.\nThe function\
    \ should raise an error if the list contains values less than or equal to 8.\n\
    The function should raise an error if the list contains values greater than or\
    \ equal to 9.\nThe function should raise an error if the list contains values\
    \ less than or equal to 9.\nThe function should raise an error if the list contains\
    \ values greater than or equal to 10.\nThe function should raise an error if the\
    \ list contains values less than or equal to 10.\nThe function should raise an\
    \ error if the list contains values greater than or equal to 11.\nThe function\
    \ should raise an error if the list contains values less than or equal to 11.\n\
    The function should raise an error if the list contains values greater than or\
    \ equal to 12.\nThe function should raise an error if the list contains values\
    \ less than or equal to 12.\nThe function should raise an error if the list contains\
    \ values greater than or equal to 13.\nThe function should raise an error if the\
    \ list contains values less than or equal to 13.\nThe function should \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dxf4wqg.jl:15\nin expression starting at\
    \ /tmp/tmp9dxf4wqg.jl:15\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n\
    @assert sum_product([1,2,3,4,5,6,7,8,9,10]) == (120, 3628800)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == (3628800, 120)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the sum of the squares of the first $n$ positive integers. \nFor example, sum_of_squares(10)\
    \ = 55.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxh5ohfe.jl:20\nin expression starting at\
    \ /tmp/tmpoxh5ohfe.jl:20\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in 2:length(numbers)\
    \ \n            sum_ = sum_ + numbers[i] \n            product_ = product_ * numbers[i]\
    \ \n        end\n        return (sum_, product_)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo79231q0.jl:21\nin expression starting at\
    \ /tmp/tmpo79231q0.jl:21\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_of_numbers = product\
    \ .(numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmp2g96guu5.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2g96guu5.jl:9\n\
    in expression starting at /tmp/tmp2g96guu5.jl:9\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum = sum\
    \ + n\n        product = product * n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([4,\
    \ 9, 16])\n    49.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3vpg9uz.jl:16\nin expression starting at\
    \ /tmp/tmph3vpg9uz.jl:16\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppt7d8x3m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppt7d8x3m.jl:1\n\
    in expression starting at /tmp/tmppt7d8x3m.jl:1\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ += i\n        product_ *= i\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ containing the squares of the integers in the vector.\nFor example, given [1,2,3],\
    \ the function should return [1,2,3].\nThe function should work for vectors of\
    \ any length.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf90eycip.jl:16\nin expression starting at\
    \ /tmp/tmpf90eycip.jl:16\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5]\
    \ + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11]\
    \ + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17]\
    \ + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23]\
    \ + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29]\
    \ + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35]\
    \ + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41]\
    \ + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47]\
    \ + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53]\
    \ + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59]\
    \ + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65]\
    \ + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71]\
    \ + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77]\
    \ + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83]\
    \ + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89]\
    \ + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95]\
    \ + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101]\
    \ + numbers[102] + numbers[103] + numbers[104] + numbers[105] + numbers[106] +\
    \ numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112]\
    \ + numbers[113] + numbers[114] + numbers[115] + numbers[116] + numbers[117] +\
    \ numbers[118] + number\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpjhv9ms9_.jl:9 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhv9ms9_.jl:1\nin expression\
    \ starting at /tmp/tmpjhv9ms9_.jl:1\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n   \
    \     sum += n\n        prod *= n\n    return (sum, prod)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a vector.\n\
    >>> sum_of_squares([4, 9, 16, 25])\n490\n>>> sum_of_squares([-1, 0, 1])\n1\n>>>\
    \ sum_of_squares([-4, 9, 16, 25])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7,\
    \ 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7, 0, 0])\n-490\n>>> sum_of_squares([-4,\
    \ 9, 16, 25, -7, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7, 0, 0,\
    \ 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7, 0, 0, 0, 0, 0])\n-490\n\
    >>> sum_of_squares([-4, 9, 16, 25, -7, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4,\
    \ 9, 16, 25, -7, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25,\
    \ -7, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25, -7, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, 16, 25,\
    \ -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9,\
    \ 16, 25, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4,\
    \ 9, 16, 25, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4,\
    \ 9, 16, 25, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4,\
    \ 9, 16, 25, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-490\n>>>\
    \ sum_of_squares([-4, 9, 16, 25, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0])\n-490\n>>> sum_of_squares([-4, 9, \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96qvzdca.jl:16\nin expression starting at\
    \ /tmp/tmp96qvzdca.jl:16\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2]\n        prod_product = numbers[1]\
    \ * numbers[2]\n        return (sum_product, prod_product)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum and product of a list of integers where\
    \ the product is greater than or equal to the sum.\n    >>> sum_product_greater_than_or_equal_to_sum([])\n\
    \    (0, 0)\n    >>> sum_product_greater_than_or_equal_to_sum([1, 2, 3, 4])\n\
    \    (10, 24)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13vt1q1a.jl:17\nin expression starting at\
    \ /tmp/tmp13vt1q1a.jl:17\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector and returns a new vector where each element\
    \ is the sum of the elements in the original vector, except for those that are\
    \ zero.\nFor example, if the input vector is [4, 0, 2, 3], the output vector should\
    \ be [5, 1, 3, 2].\nThe function should work for any vector and should return\
    \ a new vector rather than mutating the input vector.\nFor example, if the input\
    \ vector is [4, 0, 2, 3], the output vector should be [5, 1, 3, 2].\nThe function\
    \ should work for any vector and should return a new vector rather than mutating\
    \ the input vector.\nFor example, if the input vector is [4, 0, 2, 3], the output\
    \ vector should be [5, 1, 3, 2].\nThe function should work for any vector and\
    \ should return a new vector rather than mutating the input vector.\nFor example,\
    \ if the input vector is [4, 0, 2, 3], the output vector should be [5, 1, 3, 2].\n\
    The function should work for any vector and should return a new vector rather\
    \ than mutating the input vector.\nFor example, if the input vector is [4, 0,\
    \ 2, 3], the output vector should be [5, 1, 3, 2].\nThe function should work for\
    \ any vector and should return a new vector rather than mutating the input vector.\n\
    For example, if the input vector is [4, 0, 2, 3], the output vector should be\
    \ [5, 1, 3, 2].\nThe function should work for any vector and should return a new\
    \ vector rather than mutating the input vector.\nFor example, if the input vector\
    \ is [4, 0, 2, 3], the output vector should be [5, 1, 3, 2].\nThe function should\
    \ work for any vector and should return a new vector rather than mutating the\
    \ input vector.\nFor example, if the input vector is [4, 0, 2, 3], the output\
    \ vector should be [5, 1, 3, 2].\nThe function should work for any vector and\
    \ should return a new vector rather than mutating the input vector.\nFor example,\
    \ if the input vector is [4, 0, 2, 3], the output vector should be [5, 1, 3, 2].\n\
    The function should work for any vector and should return a new vector rather\
    \ than mutating the input vector.\nFor example, if the input vector is [4, 0,\
    \ 2, 3], the output vector should be [5, 1, 3, 2].\nThe function should work for\
    \ any vector and should return a new vector rather than mutating the input vector.\n\
    For example, if the input vector is [4, 0, 2, 3], the output vector should be\
    \ [5, 1, 3, 2].\nThe function should work for any vector and should return a new\
    \ vector rather than mutating the input vector.\nFor example, if the input vector\
    \ is [4, 0, 2, 3], the output vector should be [5, 1, 3, 2].\nThe function should\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd88w_mvb.jl:16\nin expression starting at\
    \ /tmp/tmpd88w_mvb.jl:16\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in the list.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any negative\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxnr1tq3.jl:13\nin expression starting at\
    \ /tmp/tmpcxnr1tq3.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given vector.\n    >>> sum_of_squares([4, 9, 16])\n    49\n    >>> sum_of_squares([-1,\
    \ 0, 1])\n    1\n    >>> sum_of_squares([-4, 9, 16])\n    -1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21hawklu.jl:16\nin expression starting at\
    \ /tmp/tmp21hawklu.jl:16\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = zeros(Int64, 2)\n    sum_product[1] = numbers[1]\n\
    \    sum_product[2] = numbers[2]\n    for i in 3:length(numbers)\n        sum_product[i]\
    \ = numbers[i] + sum_product[i-1]\n    end\n    return sum_product\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkdmq0jc.jl:17\nin expression starting at\
    \ /tmp/tmplkdmq0jc.jl:17\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * numbers[i]\
    \ \n        end\n        return (sum, product)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the first n integers of the vector. \nFor example, if\
    \ the input vector is [1,2,3,4,5,6,7,8,9], then the output vector should be [1,2,3,4,5,6,7].\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hl3b3bm.jl:21\nin expression starting at\
    \ /tmp/tmp6hl3b3bm.jl:21\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = numbers[1]\n    prod = numbers[1]\n    for n in numbers[2:end]\n\
    \        sum_ = sum_ + n\n        prod = prod * n\n    end\n    return (sum_,\
    \ prod)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nFor example,\
    \ sum_of_squares([4, 9, 16, 25]) should return 51.\nWrite a function that takes\
    \ in a vector of integers and returns the product of the integers in the vector.\n\
    For example, product_of_squares([4, 9, 16, 25]) should return 40.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6ny_7un.jl:17\nin expression starting at\
    \ /tmp/tmpa6ny_7un.jl:17\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers representing the number of times each integer appears in the vector.\n\
    For example, if the input vector is [1, 1, 2, 3], the function should return [1,\
    \ 1, 2, 3]. \nThe function should return an empty vector if the input vector is\
    \ empty.\nThe function should return [0, 0, 0] if the input vector is all zeros.\n\
    The function should return [0, 0, 0] if the input vector is all ones.\nThe function\
    \ should return [0, 0, 0] if the input vector is all negative integers.\nThe function\
    \ should return [0, 0, 0] if the input vector is all positive integers.\nThe function\
    \ should return [0, 0, 0] if the input vector is all integers.\nThe function should\
    \ return [0, 0, 0] if the input vector is all floating point numbers.\nThe function\
    \ should return [0, 0, 0] if the input vector is all strings.\nThe function should\
    \ return [0, 0, 0] if the input vector is all booleans.\nThe function should return\
    \ [0, 0, 0] if the input vector is all complex numbers.\nThe function should return\
    \ [0, 0, 0] if the input vector is all tuples.\nThe function should return [0,\
    \ 0, 0] if the input vector is all vectors.\nThe function should return [0, 0,\
    \ 0] if the input vector is all matrices.\nThe function should return [0, 0, 0]\
    \ if the input vector is all arrays.\nThe function should return [0, 0, 0] if\
    \ the input vector is all functions.\nThe function should return [0, 0, 0] if\
    \ the input vector is all generic functions.\nThe function should return [0, 0,\
    \ 0] if the input vector is all typed arrays.\nThe function should return [0,\
    \ 0, 0] if the input vector is all untyped arrays.\nThe function should return\
    \ [0, 0, 0] if the input vector is all untyped functions.\nThe function should\
    \ return [0, 0, 0] if the input vector is all untyped generic functions.\nThe\
    \ function should return [0, 0, 0] if the input vector is all untyped typed arrays.\n\
    The function should return [0, 0, 0] if the input vector is all untyped untyped\
    \ arrays.\nThe function should return [0, 0, 0] if the input vector is all untyped\
    \ untyped functions.\nThe function should return [0, 0, 0] if the input vector\
    \ is all untyped untyped generic functions.\nThe function should return [0, 0,\
    \ 0] if the input vector is all untyped untyped typed arrays.\nThe function should\
    \ return [0, 0, 0] if the \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9yx5gdo.jl:16\nin expression starting at\
    \ /tmp/tmpt9yx5gdo.jl:16\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ = sum_ + i\n            product_ = product_ * i \n      \
    \  return (sum_, product_) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the first n positive integers in a list.\n\
    If n is negative, return 0.\nIf n is zero, return 0.\nIf n is greater than the\
    \ number of integers in the list, return 0.\nIf n is less than or equal to 0,\
    \ return 0.\nIf n is greater than or equal to the number of integers in the list,\
    \ return 0.\nIf n is equal to or less than 0, return 0.\nIf n is greater than\
    \ or equal to the number of integers in the list, return 0.\nIf n is equal to\
    \ or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return 0.\nIf n is equal\
    \ to or greater than the number of integers in the list, return 0.\nIf n is equal\
    \ to or less than the number of integers in the list, return \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0vcp4q2.jl:20\nin expression starting at\
    \ /tmp/tmpj0vcp4q2.jl:20\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ += i \n            product_ *= i \n        return (sum_,\
    \ product_) \nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe function should\
    \ return 0 if the list is empty.\nThe function should return 0 if the list contains\
    \ only zeros.\nThe function should return 0 if the list contains only negative\
    \ numbers.\nThe function should return 0 if the list contains only positive numbers.\n\
    The function should return 0 if the list contains only even numbers.\nThe function\
    \ should return 0 if the list contains only odd numbers.\nThe function should\
    \ return 0 if the list contains only integers greater than 0.\nThe function should\
    \ return 0 if the list contains only integers less than 0.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 0.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 0.\nThe function should return 0 if the list contains only integers equal to\
    \ 0.\nThe function should return 0 if the list contains only integers equal to\
    \ 1.\nThe function should return 0 if the list contains only integers equal to\
    \ 2.\nThe function should return 0 if the list contains only integers equal to\
    \ 3.\nThe function should return 0 if the list contains only integers equal to\
    \ 4.\nThe function should return 0 if the list contains only integers equal to\
    \ 5.\nThe function should return 0 if the list contains only integers equal to\
    \ 6.\nThe function should return 0 if the list contains only integers equal to\
    \ 7.\nThe function should return 0 if the list contains only integers equal to\
    \ 8.\nThe function should return 0 if the list contains only integers equal to\
    \ 9.\nThe function should return 0 if the list contains only integers equal to\
    \ 10.\nThe function should return 0 if the list contains only integers equal to\
    \ 11.\nThe function should return 0 if the list contains only integers equal to\
    \ 12.\nThe function should return 0 if the list contains only integers equal to\
    \ 13.\nThe function should return 0 if the list contains only integers equal to\
    \ 14.\nThe function should return 0 if the list contains only integers equal to\
    \ 15.\nThe function should return 0 if the list contains only integers equal to\
    \ 16.\nThe function should return 0 if the list contains only integers equal to\
    \ 17.\nThe function should return 0 if the list contains only integers equal to\
    \ 18.\nThe function should return 0 if the list contains only integers equal to\
    \ 19.\nThe function should return 0 if the list contains only integers equal to\
    \ 20.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7nq_vu1.jl:19\nin expression starting at\
    \ /tmp/tmpr7nq_vu1.jl:19\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe function\
    \ should raise an error if the vector is empty.\nThe function should raise an\
    \ error if the vector contains non-integer elements.\nThe function should raise\
    \ an error if the vector contains negative elements.\nThe function should raise\
    \ an error if the vector contains duplicate elements.\nThe function should raise\
    \ an error if the vector contains negative or zero elements.\nThe function should\
    \ raise an error if the vector contains non-positive elements.\nThe function should\
    \ raise an error if the vector contains negative or zero elements.\nThe function\
    \ should raise an error if the vector contains non-positive elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ should raise an error if the vector contains non-integer elements.\nThe function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpapii6ljb.jl:17\nin expression starting at\
    \ /tmp/tmpapii6ljb.jl:17\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\n>>> square_sum([])\n\
    0.0\n>>> square_sum([1, 2, 3])\n25.0\n>>> square_sum([-1, -2, -3])\n25.0\n>>>\
    \ square_sum([1, 2, -3, 4])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5])\n25.0\n\
    >>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6])\n\
    25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1, -2, -3, -4,\
    \ -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\n>>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6])\n25.0\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11ll8yt0.jl:17\nin expression starting at\
    \ /tmp/tmp11ll8yt0.jl:17\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgi40uek3.jl:13\nin expression starting at\
    \ /tmp/tmpgi40uek3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = numbers[0]\n    product_ = 1\n    for number in numbers\n\
    \        sum_ = sum_ + number\n        product_ = product_ * number\n    end\n\
    \    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given list.\n    >>> sum_square([1, 2, 3,\
    \ 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51r5twam.jl:17\nin expression starting at\
    \ /tmp/tmp51r5twam.jl:17\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the integers in a\
    \ given list.\nThe function should work for both real and complex numbers.\nThe\
    \ function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    The function should work for both empty and non-empty lists.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both empty\
    \ and non-empty lists.\nThe function should work for both real and complex numbers.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_ima_5w.jl:13\nin expression starting at\
    \ /tmp/tmpn_ima_5w.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\nThe squares should be calculated using the formula\
    \ $x^2$\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7swrpsq.jl:13\nin expression starting at\
    \ /tmp/tmpy7swrpsq.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ 0, 2, 3])\n    9\n    >>> sum_square_of_numbers([])\n    0\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzomw3km.jl:13\nin expression starting at\
    \ /tmp/tmphzomw3km.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] \n        prod_ = 1\n        for i in numbers[2:end]\
    \ \n            prod_ *= i \n        end\n        return (sum_, prod_)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should work for an\
    \ empty list.\nThe function should work for a list of integers containing one\
    \ or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for a list of integers containing\
    \ one or more integers.\nThe function should work for \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdt5whs2.jl:20\nin expression starting at\
    \ /tmp/tmpvdt5whs2.jl:20\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the integers in a given\
    \ list.\n    >>> sum_square_of_list([])\n    0\n    >>> sum_square_of_list([1,2,3])\n\
    \    6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkrjta0b.jl:16\nin expression starting at\
    \ /tmp/tmpbkrjta0b.jl:16\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ containing the squares of the integers in the vector.\nFor example, if the input\
    \ vector is [4, 6, 9], then the output vector should be [16, 25, 36].\nThe function\
    \ should work for vectors of any length.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6gn3lak.jl:13\nin expression starting at\
    \ /tmp/tmpd6gn3lak.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n  \
    \      sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum and product of a given list\
    \ of integers where the product is greater than the sum.\nThe function should\
    \ take in a list of integers and return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\nEmpty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n>>> sum_product_greater_than_sum([])\n(0, 1)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 4])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1,\
    \ 2, 3, 5])\n(6, 24)\n>>> sum_product_greater_than_sum([1, 2, 3, 5])\n(6, 24)\n\
    >>> sum_product_greater_than_sum([1, 2, 3, 5])\n(\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwriqoej.jl:16\nin expression starting at\
    \ /tmp/tmphwriqoej.jl:16\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        sum_product *= numbers[0]\n        for\
    \ n in numbers[2:end]\n            sum_product += n\n        return sum_product,\
    \ sum_product\n    end\nend\n</code>\n<|/ a tags=julia,arrays,sum |>\n<| c |>\n\
    This does not work if the array is empty. `sum_product([])` returns `(0, 0)`\n\
    <|/ c |>\n<| c |>\nI believe this should work: `sum_product(numbers::Vector{Int64})\
    \ = sum(numbers), prod(numbers)`\n<|/ c |>\n<| a tags=julia,arrays,sum |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvrmwafh.jl:19\nin expression starting at\
    \ /tmp/tmpxvrmwafh.jl:19\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        (0, 1) \n    else \n        sum_product(numbers[1:],\
    \ numbers[0]*numbers[1]) \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list.\nThe function should raise an error if the list is\
    \ empty.\nThe function should raise an error if the list contains non-integer\
    \ values.\nThe function should raise an error if the list contains negative values.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains negative values.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains negative values.\nThe function should raise\
    \ an error if the list contains duplicate values.\nThe function should raise an\
    \ error if the list contains negative values.\nThe function should raise an error\
    \ if the list contains duplicate values.\nThe function should raise an error if\
    \ the list contains negative values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains negative\
    \ values.\nThe function should raise an error if the list contains duplicate values.\n\
    The function should raise an error if the list contains negative values.\nThe\
    \ function should raise an error if the list contains duplicate values.\nThe function\
    \ should raise an error if the list contains negative values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains negative values.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains negative values.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains negative values.\nThe function should raise an error if the list\
    \ contains duplicate values.\nThe function should raise an error if the list contains\
    \ negative values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains negative values.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains negative values.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains negative values.\nThe function should raise\
    \ an error if the list contains duplicate values.\nThe function should raise an\
    \ error if the list contains negative values.\nThe function should raise an error\
    \ if the list contains duplicate values.\nThe function should raise an error if\
    \ the list contains negative values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains negative\
    \ values.\nThe function should raise an error if the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeeh7ai2e.jl:12\nin expression\
    \ starting at /tmp/tmpeeh7ai2e.jl:12\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyg59gdz.jl:16\nin expression starting at\
    \ /tmp/tmpqyg59gdz.jl:16\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product_of_numbers = numbers[2:end]\n\
    \        sum_product += numbers[1]\n        product_of_numbers .* numbers[1]\n\
    \        return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the sum of the\
    \ integers squared. \nThe function should raise an error if the list is empty.\n\
    >>> square_sum([])\n0\n>>> square_sum([1, 2, 3])\n9\n>>> square_sum([1, 2, 3,\
    \ 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR: List\
    \ cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    >>> square_sum([1, 2, 3, -1])\nERROR: List cannot be empty\n>>> square_sum([1,\
    \ 2, 3, 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR:\
    \ List cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    >>> square_sum([1, 2, 3, -1])\nERROR: List cannot be empty\n>>> square_sum([1,\
    \ 2, 3, 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR:\
    \ List cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    >>> square_sum([1, 2, 3, -1])\nERROR: List cannot be empty\n>>> square_sum([1,\
    \ 2, 3, 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR:\
    \ List cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    >>> square_sum([1, 2, 3, -1])\nERROR: List cannot be empty\n>>> square_sum([1,\
    \ 2, 3, 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR:\
    \ List cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    >>> square_sum([1, 2, 3, -1])\nERROR: List cannot be empty\n>>> square_sum([1,\
    \ 2, 3, 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR:\
    \ List cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    >>> square_sum([1, 2, 3, -1])\nERROR: List cannot be empty\n>>> square_sum([1,\
    \ 2, 3, 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR:\
    \ List cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    >>> square_sum([1, 2, 3, -1])\nERROR: List cannot be empty\n>>> square_sum([1,\
    \ 2, 3, 0])\nERROR: List cannot be empty\n>>> square_sum([1, 2, 3, -1])\nERROR:\
    \ List cannot be empty\n>>> square_sum([1, 2, 3, 0])\nERROR: List cannot be empty\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hppngy4.jl:18\nin expression starting at\
    \ /tmp/tmp8hppngy4.jl:18\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15,\
    \ 120)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2,3]) ==\
    \ (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6gjvh7f.jl:16\nin expression starting at\
    \ /tmp/tmpp6gjvh7f.jl:16\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpdzv09k.jl:17\nin expression starting at\
    \ /tmp/tmpvpdzv09k.jl:17\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = sum(numbers) \n        prod_ = 1\n        for i in numbers \n \
    \           prod_ *= i \n        return (sum_, prod_)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should raise an error\
    \ if the list is empty or contains non-integer values.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains non-positive numbers.\nThe function should raise an error\
    \ if the list contains negative or non-integer values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any non-positive values.\nThe function should\
    \ raise an error if the list contains any negative values.\nThe function should\
    \ raise an error if the list contains any non-integer or non-positive values.\n\
    The function should raise an error if the list contains any negative or non-integer\
    \ values.\nThe function should raise an error if the list contains any non-integer\
    \ or non-positive values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any non-positive values.\nThe function should raise an error if the list contains\
    \ any negative or non-integer values.\nThe function should raise an error if the\
    \ list contains any non-integer values.\nThe function should raise an error if\
    \ the list contains any non-positive values.\nThe function should raise an error\
    \ if the list contains any negative or non-integer values.\nThe function should\
    \ raise an error if the list contains any non-integer or non-positive values.\n\
    The function should raise an error if the list contains any negative values.\n\
    The function should raise an error if the list contains any non-integer or non-positive\
    \ values.\nThe function should raise an error if the list contains any negative\
    \ or non-integer values.\nThe function should raise an error if the list contains\
    \ any non-integer or non-positive values.\nThe function should raise an error\
    \ if the list contains any negative or non-integer values.\nThe function should\
    \ raise an error if the list contains any non-integer or non-positive values.\n\
    The function should raise an error if the list contains any negative values.\n\
    The function should raise an error if the list contains any non-integer or non-positive\
    \ values.\nThe function should raise an error if the list contains any negative\
    \ or non-integer values.\nThe function should raise an error if the list contains\
    \ any non-integer or non-positive values.\nThe function should raise an error\
    \ if the list contains any negative or non-integer values.\nThe function should\
    \ raise an error if the list contains any non-integer or non-positive values.\n\
    The function should raise an error if the list contains any \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmqnbk62.jl:18\nin expression starting at\
    \ /tmp/tmphmqnbk62.jl:18\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = numbers[1]\n    prod = numbers[1]\n    for n in numbers[2:end]\n\
    \        sum_ = sum_ + n\n        prod = prod * n\n    end\n    return (sum_,\
    \ prod)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\n\
    The sum of the squares should be equal to the sum of the integers in the list.\n\
    The function should raise an error if the list is empty.\n>>> square_sum([])\n\
    0\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([1, 2, 3])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1,\
    \ 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, 0])\n\
    4\n>>> square_sum([1, 2, 3, 0])\n4\n>>> square_sum([1, 2, 3, \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp053qadk7.jl:17\nin expression starting at\
    \ /tmp/tmp053qadk7.jl:17\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nThe squares should be calculated using the formula\
    \ $x^2$\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnet5pdr.jl:13\nin expression starting at\
    \ /tmp/tmpqnet5pdr.jl:13\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in 2:length(numbers)\
    \ \n            sum_ = sum_ + numbers[i] \n            product_ = product_ * numbers[i]\
    \ \n        end\n        return (sum_, product_)\n    end\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=julia,functional-programming |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16gnhgn4.jl:21\nin expression starting at\
    \ /tmp/tmp16gnhgn4.jl:21\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n>>> sum_square_of_list([])\n0\n>>> sum_square_of_list([4, 9, 16])\n\
    49\n>>> sum_square_of_list([4, 9, 16, 25])\n49\n>>> sum_square_of_list([4, 9,\
    \ 16, 25, 36])\n49\n>>> sum_square_of_list([4, 9, 16, 25, 36, 49])\n49\n>>> sum_square_of_list([4,\
    \ 9, 16, 25, 36, 49, 64])\n49\n>>> sum_square_of_list([4, 9, 16, 25, 36, 49, 64,\
    \ 81])\n49\n>>> sum_square_of_list([4, 9, 16, 25, 36, 49, 64, 81, 100])\n49\n\
    >>> sum_square_of_list([4, 9, 16, 25, 36, 49, 64, 81, 100, 121])\n49\n>>> sum_square_of_list([4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 121, 144])\n49\n>>> sum_square_of_list([4, 9,\
    \ 16, 25, 36, 49, 64, 81, 100, 121, 144, 169])\n49\n>>> sum_square_of_list([4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196])\n49\n>>> sum_square_of_list([4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225])\n49\n>>> sum_square_of_list([4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256])\n49\n>>> sum_square_of_list([4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289])\n49\n>>>\
    \ sum_square_of_list([4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225,\
    \ 256, 289, 324])\n49\n>>> sum_square_of_list([4, 9, 16, 25, 36, 49, 64, 81, 100,\
    \ 121, 144, 169, 196, 225, 256, 289, 324, 361])\n49\n>>> sum_square_of_list([4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361,\
    \ 400])\n49\n>>> sum_square\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnz4n5i3.jl:16\nin expression starting at\
    \ /tmp/tmprnz4n5i3.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * numbers[i]\
    \ \n        end\n        return (sum, product) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum and product of a given list of integers,\
    \ where the sum is equal to the product of the numbers in the list except the\
    \ last.\n    >>> sum_product_except_last([1, 2, 3, 4])\n    (10, 24)\n    >>>\
    \ sum_product_except_last([-1, 1, -2, 2])\n    (-2, 4)\n    >>> sum_product_except_last([-1,\
    \ 1, -2, 2])\n    (-2, 4)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cvtgwjd.jl:21\nin expression starting at\
    \ /tmp/tmp9cvtgwjd.jl:21\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in the list.\nWrite a function that takes a list\
    \ of numbers and returns the product of the numbers in the list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list and the product of the numbers in the list.\nWrite \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn76n7fbm.jl:13\nin expression starting at\
    \ /tmp/tmpn76n7fbm.jl:13\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[0]\n        prod_product = 1\n    \
    \    for n in numbers[2:end] \n            prod_product *= n \n        return\
    \ (sum_product, prod_product) \nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given list.\n    >>> sum_square([1, 2, 3,\
    \ 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrug6ini.jl:18\nin expression starting at\
    \ /tmp/tmpgrug6ini.jl:18\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5]\
    \ + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11]\
    \ + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17]\
    \ + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23]\
    \ + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29]\
    \ + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35]\
    \ + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41]\
    \ + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47]\
    \ + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53]\
    \ + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59]\
    \ + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65]\
    \ + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71]\
    \ + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77]\
    \ + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83]\
    \ + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89]\
    \ + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95]\
    \ + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101]\
    \ + numbers[102] + numbers[103] + numbers[104] + numbers[105] + numbers[106] +\
    \ numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112]\
    \ + numbers[113] + numbers[114] + numbers[115] + numbers[116] + numbers[117] +\
    \ numbers[118] + number\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpjhv9ms9_.jl:9 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhv9ms9_.jl:1\nin expression\
    \ starting at /tmp/tmpjhv9ms9_.jl:1\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ = sum_ + i\n        product_ = product_ * i\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of all the integers in a\
    \ given list.\nThe function should work for any type of numbers, not just integers.\n\
    The function should work for an empty list.\nThe function should work for a list\
    \ of any length.\nThe function should work for a list of any type of numbers.\n\
    The function should work for a list of any length.\nThe function should work for\
    \ a list of any type of numbers.\nThe function should work for a list of any length.\n\
    The function should work for a list of any type of numbers.\nThe function should\
    \ work for a list of any length.\nThe function should work for a list of any type\
    \ of numbers.\nThe function should work for a list of any length.\nThe function\
    \ should work for a list of any type of numbers.\nThe function should work for\
    \ a list of any length.\nThe function should work for a list of any type of numbers.\n\
    The function should work for a list of any length.\nThe function should work for\
    \ a list of any type of numbers.\nThe function should work for a list of any length.\n\
    The function should work for a list of any type of numbers.\nThe function should\
    \ work for a list of any length.\nThe function should work for a list of any type\
    \ of numbers.\nThe function should work for a list of any length.\nThe function\
    \ should work for a list of any type of numbers.\nThe function should work for\
    \ a list of any length.\nThe function should work for a list of any type of numbers.\n\
    The function should work for a list of any length.\nThe function should work for\
    \ a list of any type of numbers.\nThe function should work for a list of any length.\n\
    The function should work for a list of any type of numbers.\nThe function should\
    \ work for a list of any length.\nThe function should work for a list of any type\
    \ of numbers.\nThe function should work for a list of any length.\nThe function\
    \ should work for a list of any type of numbers.\nThe function should work for\
    \ a list of any length.\nThe function should work for a list of any type of numbers.\n\
    The function should work for a list of any length.\nThe function should work for\
    \ a list of any type of numbers.\nThe function should work for a list of any length.\n\
    The function should work for a list of any type of numbers.\nThe function should\
    \ work for a list of any length.\nThe function should work for a list of any type\
    \ of numbers.\nThe function should work for a list of any length.\nThe function\
    \ should work for a list of any type of numbers.\nThe function should work for\
    \ a list of any length.\nThe function should work for a list of any type of numbers.\n\
    The function should work for a list of any length.\nThe function should work for\
    \ a list of any type of numbers.\nThe function should work for a list of any length.\n\
    The function should work for a list of any type of numbers.\nThe function should\
    \ work for a list of any length.\nThe function should work for a list of any type\
    \ of numbers.\nThe function should work for a list of any length.\nThe function\
    \ should work for \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdikm0n4g.jl:16\nin expression starting at\
    \ /tmp/tmpdikm0n4g.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = zero(Int64)\n    product = one(Int64)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_irokeb.jl:16\nin expression starting at\
    \ /tmp/tmpf_irokeb.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptljw1y3_.jl:17\nin expression starting at\
    \ /tmp/tmptljw1y3_.jl:17\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmlfi_fw.jl:13\nin expression starting at\
    \ /tmp/tmpvmlfi_fw.jl:13\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return sum_product,\
    \ product_product\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns a vector consisting of the squares of the numbers in the vector.\n \
    \   >>> square_numbers([1, 2, 3, 4])\n    [1, 4, 9, 16]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkh1eo6na.jl:16\nin expression starting at\
    \ /tmp/tmpkh1eo6na.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp0ir9t4f.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp0ir9t4f.jl:1\n\
    in expression starting at /tmp/tmpp0ir9t4f.jl:1\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2] \n        product = numbers[1] *\
    \ numbers[2] \n        return (sum_product, product) \nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how to do this\
    \ without using recursion.\n<|/ c |>\n<| c |>\nI agree with you, my answer is\
    \ not the best one. I'll try to improve it.\n<|/ c |>\n<| a tags=julia |>\nThe\
    \ recursive solution is quite elegant, but you can also use an iterative solution:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64y97d9g.jl:16\nin expression starting at\
    \ /tmp/tmp64y97d9g.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.\n>>> sum_squares_list([])\n\
    0.0\n>>> sum_squares_list([1, 2, 3, 4])\n25.0\n>>> sum_squares_list([-1, -2, -3,\
    \ -4])\n0.0\n>>> sum_squares_list([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n-36.0\n\
    >>> sum_squares_list([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\n\
    -36.0\n>>> sum_squares_list([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\
    \ -13, -14, -15, -16])\n-36.0\n>>> sum_squares_list([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])\n-36.0\n>>> sum_squares_list([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18,\
    \ -19, -20, -21])\n-36.0\n>>> sum_squares_list([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24])\n\
    -36.0\n>>> sum_squares_list([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\
    \ -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28,\
    \ -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44,\
    \ -45])\n-36.0\n>>> sum_squares_list([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10,\
    \ -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,\
    \ -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqmv8yys.jl:16\nin expression starting at\
    \ /tmp/tmpbqmv8yys.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the integers in a given\
    \ list.\n    >>> sum_square_of_list([])\n    0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9\n    >>> sum_square_of_list([-1,-2,-3])\n    27\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4jdxit0.jl:16\nin expression starting at\
    \ /tmp/tmpr4jdxit0.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\nThe most efficient way is to use foldl and\
    \ sum:\n<code>\nfoldl((x,y)->x+y, 0, [1,2,3])\n</code>\n<|/ a tags=julia,sum,product\
    \ |>\n<| a dscore=2 |>\nHere is a solution that uses no loops:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqpjuv32.jl:13\nin expression starting at\
    \ /tmp/tmpwqpjuv32.jl:13\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] \n        product_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ += i \n            product_ *= i \n        return (sum_,\
    \ product_)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 7\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprhw2fyt.jl:20\nin expression starting at\
    \ /tmp/tmpprhw2fyt.jl:20\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        (0, 1) \n    else \n        sum\
    \ = numbers[1]\n        product = 1\n        for i in 2:length(numbers) \n   \
    \         sum = sum + numbers[i]\n            product = product * numbers[i]\n\
    \        end\n        return (sum, product)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer values.\nThe function should raise an error if the list contains\
    \ negative values.\nThe function should raise an error if the list contains values\
    \ greater than $10$.\nThe function should raise an error if the list contains\
    \ values greater than $100$.\nThe function should raise an error if the list contains\
    \ values greater than $1000$.\nThe function should raise an error if the list\
    \ contains values greater than $10000$.\nThe function should raise an error if\
    \ the list contains values greater than $100000$.\nThe function should raise an\
    \ error if the list contains values greater than $1000000$.\nThe function should\
    \ raise an error if the list contains values greater than $10000000$.\nThe function\
    \ should raise an error if the list contains values greater than $100000000$.\n\
    The function should raise an error if the list contains values greater than $1000000000$.\n\
    The function should raise an error if the list contains values greater than $10000000000$.\n\
    The function should raise an error if the list contains values greater than $100000000000$.\n\
    The function should raise an error if the list contains values greater than $1000000000000$.\n\
    The function should raise an error if the list contains values greater than $10000000000000$.\n\
    The function should raise an error if the list contains values greater than $100000000000000$.\n\
    The function should raise an error if the list contains values greater than $1000000000000000$.\n\
    The function should raise an error if the list contains values greater than $10000000000000000$.\n\
    The function should raise an error if the list contains values greater than $100000000000000000$.\n\
    The function should raise an error if the list contains values greater than $1000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $10000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $100000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $1000000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $10000000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $100000000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $1000000000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $10000000000000000000000000$.\n\
    The function should raise an error if the list contains values greater than $100000000000000000000000000$.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl029pt2y.jl:21\nin expression starting at\
    \ /tmp/tmpl029pt2y.jl:21\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = zero(Int64)\n    product = one(Int64)\n    for n in numbers\n\
    \        sum = sum + n\n        product = product * n\n    return (sum, product)\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vrmzgjg.jl:16\nin expression starting at\
    \ /tmp/tmp5vrmzgjg.jl:16\n"
  stdout: ''
  timestamp: 1659823066
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_of_numbers = product\
    \ .(numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time sum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe function should return nothing\
    \ but a tuple of two integers, the first one being the sum of the squares and\
    \ the second one being the product of the squares.\nThe function should also raise\
    \ an error if the vector is empty.\nThe function should also raise an error if\
    \ the vector contains non-integer values.\nThe function should also raise an error\
    \ if the vector contains negative values.\nThe function should also raise an error\
    \ if the vector contains duplicate values.\nThe function should also raise an\
    \ error if the vector contains negative values.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpkh88vkqd.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkh88vkqd.jl:9\n\
    in expression starting at /tmp/tmpkh88vkqd.jl:9\n"
  stdout: ''
  timestamp: 1659823067
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum and product of a given list of integers\
    \ where the product is greater than the sum.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvfhx1zm.jl:13\nin expression starting at\
    \ /tmp/tmpsvfhx1zm.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        sum_product *= numbers[1]\n        sum_product\
    \ += numbers[2]\n        sum_product *= numbers[2]\n        return sum_product,\
    \ sum_product\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_dxgev_.jl:19\nin expression starting at\
    \ /tmp/tmpc_dxgev_.jl:19\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1)\n    else\n   \
    \     sum_product = numbers[1]\n        product_of_numbers = numbers[1]\n    \
    \    for number in numbers[2:end]\n            sum_product = sum_product + number\n\
    \            product_of_numbers = product_of_numbers * number\n        end\n \
    \       return (sum_product, product_of_numbers)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mslseu5.jl:21\nin expression starting at\
    \ /tmp/tmp0mslseu5.jl:21\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n   \
    \     sum = sum + n\n        prod = prod * n\n    return (sum, prod)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibdo1mvu.jl:16\nin expression starting at\
    \ /tmp/tmpibdo1mvu.jl:16\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe function should\
    \ work for any type of input (including vectors of different lengths).\nThe function\
    \ should work for an empty list ([]).\nThe function should work for a list of\
    \ integers (including vectors of different lengths).\nThe function should work\
    \ for a list of integers and a vector of integers (including vectors of different\
    \ lengths).\nThe function should work for a list of integers and a vector of integers\
    \ (including vectors of different lengths).\nThe function should work for a list\
    \ of integers and a vector of integers (including vectors of different lengths).\n\
    The function should work for a list of integers and a vector of integers (including\
    \ vectors of different lengths).\nThe function should work for a list of integers\
    \ and a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function should work for a list of integers and\
    \ a vector of integers (including vectors of different lengths).\nThe function\
    \ should work for a list of integers and a vector of integers (including vectors\
    \ of different lengths).\nThe function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqd2am0td.jl:16\nin expression starting at\
    \ /tmp/tmpqd2am0td.jl:16\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ = sum_ + i\n            prod_ = prod_ * i\n        return (sum_,\
    \ prod_)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and a number\
    \ as arguments and returns the sum of the numbers in the vector that are less\
    \ than or equal to the number.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49tmher3.jl:20\nin expression starting at\
    \ /tmp/tmp49tmher3.jl:20\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ = sum_ + i \n            product_ = product_ * i \n     \
    \   return (sum_, product_) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nThe function should return nothing and should raise an error\
    \ if the vector is empty.\n>>> square_sum([])\n>>> square_sum([1, 2, 3, 4])\n\
    >>> square_sum([1, 2, 3, 4, 5])\n>>> square_sum([1, 2, 3, 4, 5, 6])\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7])\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8])\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\
    >>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n>>> square_sum([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12])\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\
    >>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n>>> square_sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n>>> square_sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n>>>\
    \ square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22])\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23])\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n>>> square_sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25])\n>>> square_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n>>> square_sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5d2i2flc.jl:20\nin expression starting at\
    \ /tmp/tmp5d2i2flc.jl:20\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\nend\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1,\
    \ 2, 3, 4]) == (10, 24)\n@assert sum_product([-1, 1, -2, 3, -4]) == (6, -6)\n\
    @assert sum_product([-1, 1, -2, 3, -4, -5]) == (6, -6)\n@assert sum_product([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8]) == (6, -6)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the integers in a given list.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for an empty list.\nThe function should work for a list of any length.\n\
    The function should work for a list of any length.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06fo2jf7.jl:19\nin expression starting at\
    \ /tmp/tmp06fo2jf7.jl:19\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([-1,\
    \ -2, -3]) == (-6, -6)\n@assert sum_product([-4, -5, -6, -7, -8]) == (-24, -24)\n\
    @assert sum_product([-9, -10, -11, -12, -13]) == (-90, -90)\n@assert sum_product([-14,\
    \ -15, -16, -17, -18]) == (-240, -240)\n@assert sum_product([-19, -11, -20, -21,\
    \ -22]) == (-900, -900)\n@assert sum_product([-23, -24, -25, -26, -27]) == (-1800,\
    \ -1800)\n@assert sum_product([-28, -29, -30, -31, -32, -33]) == (-2700, -2700)\n\
    @assert sum_product([-34, -35, -36, -37, -38, -39]) == (-3600, -3600)\n@assert\
    \ sum_product([-40, -41, -42, -43, -44, -45]) == (-7200, -7200)\n@assert sum_product([-46,\
    \ -47, -48, -49, -50, -51]) == (-14400, -14400)\n@assert sum_product([-52, -53,\
    \ -54, -55, -56]) == (-21600, -21600)\n@assert sum_product([-57, -58, -59, -60,\
    \ -61]) == (-28800, -28800)\n@assert sum_product([-62, -63, -64, -65, -66]) ==\
    \ (-36000, -36000)\n@assert sum_product([-67, -68, -69, -70, -71]) == (-43200,\
    \ -43200)\n@assert sum_product([-72, -73, -74, -75, -76, -77]) == (-56800, -56800)\n\
    @assert sum_product([-78, -79, -80, -81, -82, -83]) == (-72000, -72000)\n@assert\
    \ sum_product([-84, -85, -86, -87, -88]) == (-144000, -144000)\n@assert sum_product([-89,\
    \ -90, -91, -92, -93]) == (-216000, -216000)\n@assert sum_product([-94, -95, -96,\
    \ -97, -98]) == (-288000, -288000)\n@assert sum_product([-99, -100, \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuhtcecg.jl:13\nin expression starting at\
    \ /tmp/tmpeuhtcecg.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer elements.\nThe function should raise an error if the list contains\
    \ negative elements.\nThe function should raise an error if the list contains\
    \ duplicate elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nThe function should raise an error if the list contains\
    \ non-positive elements.\nThe function should raise an error if the list contains\
    \ negative or zero elements.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7i3zxzix.jl:13\nin expression starting at\
    \ /tmp/tmp7i3zxzix.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        product = 1\n        for\
    \ i in 2:length(numbers) \n            product = product * numbers[i]\n      \
    \      sum_product = sum_product + product\n        end\n        return (sum_product,\
    \ product)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj63dyhqs.jl:21\nin expression starting at\
    \ /tmp/tmpj63dyhqs.jl:21\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3y0ghibh.jl:13\nin expression starting at\
    \ /tmp/tmp3y0ghibh.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    for number in numbers[2:end]\n  \
    \      sum_product = sum_product + number\n    end\n    product = 1\n    for number\
    \ in numbers[2:end]\n        product = product * number\n    end\n    return (sum_product,\
    \ product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given list.\n    >>> sum_square([1,2,3,4,5])\n    25\n \
    \   >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx0vng9i.jl:19\nin expression starting at\
    \ /tmp/tmpcx0vng9i.jl:19\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ where the ith element is the product of all the numbers in the original vector\
    \ except the ith element.\nFor example, if the input vector is [2, 3, 4], then\
    \ the output vector should be [4, 6].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfatkch5_.jl:13\nin expression starting at\
    \ /tmp/tmpfatkch5_.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for number in numbers\n\
    \        sum += number\n        product *= number\n    return (sum, product)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the numbers in a list.\n    >>> sum_square_of_list([])\n    0.0\n\
    \    >>> sum_square_of_list([4, 9, 16])\n    49.0\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3z9_ylrr.jl:16\nin expression starting at\
    \ /tmp/tmp3z9_ylrr.jl:16\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the squares of the integers in the vector.\n\
    The function should work for both vectors and matrices.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpbgh4k7.jl:17\nin expression starting at\
    \ /tmp/tmphpbgh4k7.jl:17\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time sum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe function should work for\
    \ vectors of any length.\nThe function should work for vectors of any type.\n\
    The function should work for vectors of any number of dimensions.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg29e5cuw.jl:13\nin expression starting at\
    \ /tmp/tmpg29e5cuw.jl:13\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ += i\n            prod_ *= i\n        return (sum_, prod_)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum and product\
    \ of the numbers in a given list.\nThe function should work for lists of any length.\n\
    The function should work for lists of integers or floats.\nThe function should\
    \ work for lists of any type.\nThe function should work for lists of any length.\n\
    The function should work for lists of any type.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8q50ff2.jl:19\nin expression starting at\
    \ /tmp/tmpz8q50ff2.jl:19\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and a number as input,\
    \ and returns a vector consisting of the numbers in the input vector that are\
    \ less than or equal to the given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf81uzj9s.jl:16\nin expression starting at\
    \ /tmp/tmpf81uzj9s.jl:16\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (24, 120)\n\
    @assert sum_product([1,2,3,4,5,6,7]) == (120, 720)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10])\
    \ == (720, 5040)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == (5040, 40320)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a\
    \ list of integers and returns the sum of the integers in the list multiplied\
    \ by their position in the list.\nFor example, if the list is [1,2,3,4,5], the\
    \ function should return 120.\nIf the list is [1,2,3,4,5,6,7], the function should\
    \ return 720.\nIf the list is [1,2,3,4,5,6,7,8,9,10], the function should return\
    \ 5040.\nIf the list is [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfh3er8d.jl:20\nin expression starting at\
    \ /tmp/tmphfh3er8d.jl:20\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2]\n        product_ = numbers[1] * numbers[2]\n\
    \        return (sum_, product_)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6,\
    \ 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3])\
    \ == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppw38sqht.jl:17\nin expression starting at\
    \ /tmp/tmppw38sqht.jl:17\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        sum_product += sum_product(numbers[2:end])\n\
    \        return sum_product, sum_product(numbers[1:end-1])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given vector.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qdu8j2a.jl:17\nin expression starting at\
    \ /tmp/tmp6qdu8j2a.jl:17\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.3>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the squares of the integers in a given list.\n>>> sum_square([1, 2, 3, 4])\n\
    25\n>>> sum_square([-1, -2, -3, -4])\n25\n>>> sum_square([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10])\n25\n>>> sum_square([-100, -200, -300, -400, -500, -600,\
    \ -700, -800, -800, -800, -800])\n25\n>>> sum_square([-100, -200, -300, -400,\
    \ -500, -600, -700, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800, -800,\
    \ -800, -800, -800, -800, -800, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gk3gg_l.jl:17\nin expression starting at\
    \ /tmp/tmp6gk3gg_l.jl:17\n"
  stdout: ''
  timestamp: 1659823068
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ += i\n        product_ *= i\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaif8s99o.jl:16\nin expression starting at\
    \ /tmp/tmpaif8s99o.jl:16\n"
  stdout: ''
  timestamp: 1659823069
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1rovkzv.jl:16\nin expression starting at\
    \ /tmp/tmpr1rovkzv.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6taxh73.jl:16\nin expression starting at\
    \ /tmp/tmpb6taxh73.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for number in numbers[2:end]\n\
    \        product *= number\n        sum_product += number\n    end\n    return\
    \ (sum_product, product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10])\
    \ == (120, 3628800)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the first $n$ positive integers. \nFor example, sum_of_squares(4)\
    \ should return 25. \nIf $n$ is negative, return $0$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnms_w8rx.jl:17\nin expression starting at\
    \ /tmp/tmpnms_w8rx.jl:17\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevjz39oo.jl:13\nin expression starting at\
    \ /tmp/tmpevjz39oo.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67r7rlw1.jl:16\nin expression starting at\
    \ /tmp/tmp67r7rlw1.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ += i\n            product_ *= i\n        return (sum_, product_)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ sum of the squares of the numbers in a list.\nThe function should take a list\
    \ of numbers as an argument and return the sum of the squares of the numbers in\
    \ the list.\nThe function should return 0 if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return NaN if the\
    \ list is empty.\nThe function should return Inf if the list is empty.\nThe function\
    \ should return NaN if the list is empty.\nThe function should return Inf if the\
    \ list is empty.\nThe function should return NaN if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return NaN if the\
    \ list is empty.\nThe function should return Inf if the list is empty.\nThe function\
    \ should return NaN if the list is empty.\nThe function should return Inf if the\
    \ list is empty.\nThe function should return NaN if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return NaN if the\
    \ list is empty.\nThe function should return Inf if the list is empty.\nThe function\
    \ should return NaN if the list is empty.\nThe function should return Inf if the\
    \ list is empty.\nThe function should return NaN if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return NaN if the\
    \ list is empty.\nThe function should return Inf if the list is empty.\nThe function\
    \ should return NaN if the list is empty.\nThe function should return Inf if the\
    \ list is empty.\nThe function should return NaN if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return NaN if the\
    \ list is empty.\nThe function should return Inf if the list is empty.\nThe function\
    \ should return NaN if the list is empty.\nThe function should return Inf if the\
    \ list is empty.\nThe function should return NaN if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return NaN if the\
    \ list is empty.\nThe function should return Inf if the list is empty.\nThe function\
    \ should return NaN if the list is empty.\nThe function should return Inf if the\
    \ list is empty.\nThe function should return NaN if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return NaN if the\
    \ list is empty.\nThe function should return Inf if the list is empty.\nThe function\
    \ should return NaN if the list is empty.\nThe function should return Inf if the\
    \ list is empty.\nThe function should return NaN if the list is empty.\nThe function\
    \ should return Inf if the list is empty.\nThe function should return \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdn2fu75n.jl:20\nin expression starting at\
    \ /tmp/tmpdn2fu75n.jl:20\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for number in numbers[2:end]\n\
    \        sum_product += number\n        product *= number\n    return (sum_product,\
    \ product)\nend\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1, 2,\
    \ 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3, 4, 5]) == (24, 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6]) == (120, 720)\n@assert sum_product([1,\
    \ 2, 3, 4, 5, 6]) == (120, 720)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiituw92q.jl:16\nin expression starting at\
    \ /tmp/tmpiituw92q.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbdk8jqr.jl:13\nin expression starting at\
    \ /tmp/tmplbdk8jqr.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns a list\
    \ of all the even numbers in the list.\nThe even numbers are those that have no\
    \ remainder when divided by 2.\nFor example, if the list is [4, 6, 8, 10, 12],\
    \ the function should return [2, 4, 6, 8].\nIf the list is [4, 6, 8, 10, 12, 14],\
    \ the function should return [2, 4, 6, 8, 10].\nIf the list is [4, 6, 8, 10, 12,\
    \ 14, 16], the function should return [2, 4, 6, 8, 10, 12].\nIf the list is [4,\
    \ 6, 8, 10, 12, 14, 16, 18], the function should return [2, 4, 6, 8, 10, 12, 14].\n\
    If the list is [4, 6, 8, 10, 12, 14, 16, 18, 20], the function should return [2,\
    \ 4, 6, 8, 10, 12, 14, 16].\nIf the list is [4, 6, 8, 10, 12, 14, 16, 18, 20,\
    \ 22], the function should return [2, 4, 6, 8, 10, 12, 14, 16, 18].\nIf the list\
    \ is [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24], the function should return [2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20].\nIf the list is [4, 6, 8, 10, 12, 14, 16,\
    \ 18, 20, 22, 24, 26], the function should return [2, 4, 6, 8, 10, 12, 14, 16,\
    \ 18, 20, 22].\nIf the list is [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28],\
    \ the function should return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24].\nIf\
    \ the list is [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], the function\
    \ should return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26].\nIf the list\
    \ is [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32], the function should\
    \ return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28].\nIf the list is\
    \ [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34], the function\
    \ should return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30].\nIf\
    \ the list is [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36],\
    \ the function should return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,\
    \ 28, 30, 32].\nIf the list is [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,\
    \ 30, 32, 34, 36, 38], the function should return [2, 4, 6, 8, 10, 12, 14, 16,\
    \ 18, 20, 22, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikv3t9n8.jl:13\nin expression starting at\
    \ /tmp/tmpikv3t9n8.jl:13\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        product = 1\n        for\
    \ i in 2:length(numbers) \n            product = product * numbers[i]\n      \
    \      sum_product = sum_product + product\n        end\n        return (sum_product,\
    \ product)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in a given list. \nWrite a function that returns the\
    \ product of the numbers in a given list. \nWrite a function that returns the\
    \ product of the numbers in a given list multiplied by a constant integer. \n\
    Write a function that returns the product of the numbers in a given list multiplied\
    \ by a constant integer and summed with another constant integer. \nWrite a function\
    \ that returns the product of the numbers in a given list multiplied by a constant\
    \ integer and summed with another constant integer and multiplied by a constant\
    \ integer. \nWrite a function that returns the product of the numbers in a given\
    \ list multiplied by a constant integer and summed with another constant integer\
    \ and multiplied by a constant integer and summed with another constant integer.\
    \ \nWrite a function that returns the product of the numbers in a given list multiplied\
    \ by a constant integer and summed with another constant integer and multiplied\
    \ by a constant integer and summed with another constant integer and multiplied\
    \ by a constant integer. \nWrite a function that returns the product of the numbers\
    \ in a given list multiplied by a constant integer and summed with another constant\
    \ integer and multiplied by a constant integer and summed with another constant\
    \ integer and multiplied by a constant integer and summed with another constant\
    \ integer. \nWrite a function that returns the product of the numbers in a given\
    \ list multiplied by a constant integer and summed with another constant integer\
    \ and multiplied by a constant integer and summed with another constant integer\
    \ and multiplied by a constant integer and summed with another constant integer\
    \ and multiplied by a constant integer. \nWrite a function that returns the product\
    \ of the numbers in a given list multiplied by a constant integer and summed with\
    \ another constant integer and multiplied by a constant integer and summed with\
    \ another constant integer and multiplied by a constant integer and summed with\
    \ another constant integer and multiplied by a constant integer and summed with\
    \ another constant integer. \nWrite a function that returns the product of the\
    \ numbers in a given list multiplied by a constant integer and summed with another\
    \ constant integer and multiplied by a constant integer and summed with another\
    \ constant integer and multiplied by a constant integer and summed with another\
    \ constant integer and multiplied by a constant integer and summed with another\
    \ constant integer and multiplied by a constant integer. \nWrite a function that\
    \ returns the product of the numbers in a given list multiplied by a constant\
    \ integer and summed with another constant integer and multiplied by a \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsbk2gk4.jl:21\nin expression starting at\
    \ /tmp/tmppsbk2gk4.jl:21\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the numbers in a vector.\n    >>> sum_square_of_vector([1,2,3])\n\
    \    25\n    >>> sum_square_of_vector([1,2,-3,4])\n    25\n    >>> sum_square_of_vector([1,-2,3,4])\n\
    \    25\n    >>> sum_square_of_vector([1,-2,3,-4,5])\n    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6])\n\
    \    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7])\n    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8])\n\
    \    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9])\n    25\n    >>>\
    \ sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10])\n    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11])\n\
    \    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12])\n    25\n\
    \    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13])\n    25\n   \
    \ >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14])\n    25\n   \
    \ >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14,15])\n    25\n\
    \    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14,15,16])\n  \
    \  25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    \    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    \    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    \    25\n    >>> sum_square_of_vector([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgij554d.jl:16\nin expression starting at\
    \ /tmp/tmpcgij554d.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the integers in a given\
    \ list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5fbnx6e.jl:16\nin expression starting at\
    \ /tmp/tmpa5fbnx6e.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the squares of the numbers in a vector.\nThe\
    \ vector can contain any number of elements.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both positive and negative\
    \ numbers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers with different precision.\n\
    The function should work for both integers and floating point numbers with different\
    \ precision.\nThe function should work for both integers and floating point numbers\
    \ with different precision.\nThe function should work for both integers and floating\
    \ point numbers with different precision.\nThe function should work for both integers\
    \ and floating point numbers with different precision.\nThe function should work\
    \ for both integers and floating point numbers with different precision.\nThe\
    \ function should work for both integers and floating point numbers with different\
    \ precision.\nThe function should work for both integers and floating point numbers\
    \ with different precision.\nThe function should work for both integers and floating\
    \ point numbers with different precision.\nThe function should work for both integers\
    \ and floating point numbers with different precision.\nThe function should work\
    \ for both integers and floating point numbers with different precision.\nThe\
    \ function should work for both integers and floating point numbers with different\
    \ precision.\nThe function should work for both integers and floating point numbers\
    \ with different precision.\nThe function should work for both integers and floating\
    \ point numbers with different precision.\nThe function should work for both integers\
    \ and floating point numbers with different precision.\nThe function should work\
    \ for both integers and floating point numbers with different precision.\nThe\
    \ function should work for both integers and floating point numbers with different\
    \ precision.\nThe function should work for both integers and floating point numbers\
    \ with different precision.\nThe function should work for both integers and floating\
    \ point numbers with different precision.\nThe function should work for both integers\
    \ and floating point numbers with different precision.\nThe function should work\
    \ for both integers and floating point numbers with different precision.\nThe\
    \ function should work for both integers and floating point numbers with different\
    \ precision.\nThe function should work for both integers and floating point numbers\
    \ with different precision.\nThe function should work for both integers and floating\
    \ point numbers with different precision.\nThe function should work for both integers\
    \ and floating point numbers with different precision.\nThe function should work\
    \ for both integers and floating point numbers with different precision.\nThe\
    \ function should work for both integers and floating point numbers with different\
    \ precision.\nThe function should work for both integers and \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmr8qj8yf.jl:17\nin expression starting at\
    \ /tmp/tmpmr8qj8yf.jl:17\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the first n integers of the vector.\nFor example, if\
    \ the input vector is [1,2,3,4,5,6], the output vector should be [1,2,3].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw9_vrd_.jl:13\nin expression starting at\
    \ /tmp/tmpcw9_vrd_.jl:13\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] \n        prod_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ = sum_ + i \n            prod_ = prod_ * i \n        return\
    \ (sum_, prod_) \nend \n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ of integers and returns the sum of the integers in the vector.\nWrite a function\
    \ that takes in a vector of integers and returns the product of the integers in\
    \ the vector.\nWrite a function that takes in a vector of integers and returns\
    \ the sum and product of the integers in the vector.\nWrite a function that takes\
    \ in a vector of integers and returns the sum of the integers in the vector and\
    \ product of the integers in the vector.\nWrite a function that takes in a vector\
    \ of integers and returns the sum of the integers in the vector and product of\
    \ the integers in the vector.\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the integers in the vector and product of the integers\
    \ in the vector.\nWrite a function that takes in a vector of integers and returns\
    \ the sum of the integers in the vector and product of the integers in the vector.\n\
    Write a function that takes in a vector of integers and returns the sum of the\
    \ integers in the vector and product of the integers in the vector.\nWrite a function\
    \ that takes in a vector of integers and returns the sum of the integers in the\
    \ vector and product of the integers in the vector.\nWrite a function that takes\
    \ in a vector of integers and returns the sum of the integers in the vector and\
    \ product of the integers in the vector.\nWrite a function that takes in a vector\
    \ of integers and returns the sum of the integers in the vector and product of\
    \ the integers in the vector.\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the integers in the vector and product of the integers\
    \ in the vector.\nWrite a function that takes in a vector of integers and returns\
    \ the sum of the integers in the vector and product of the integers in the vector.\n\
    Write a function that takes in a vector of integers and returns the sum of the\
    \ integers in the vector and product of the integers in the vector.\nWrite a function\
    \ that takes in a vector of integers and returns the sum of the integers in the\
    \ vector and product of the integers in the vector.\nWrite a function that takes\
    \ in a vector of integers and returns the sum of the integers in the vector and\
    \ product of the integers in the vector.\nWrite a function that takes in a vector\
    \ of integers and returns the sum of the integers in the vector and product of\
    \ the integers in the vector.\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the integers in the vector and product of the integers\
    \ in the vector.\nWrite a function that takes in a vector of integers and returns\
    \ the sum of the integers in the vector and product of the integers in the vector.\n\
    Write a function that takes in a vector of integers and returns the sum of the\
    \ integers in the vector and product of the integers in the vector.\nWrite a function\
    \ that takes in a vector of integers and returns the sum of the integers in the\
    \ vector and product of the integers in the vector.\nWrite a function that takes\
    \ in a vector of integers and \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdweatjwy.jl:19\nin expression starting at\
    \ /tmp/tmpdweatjwy.jl:19\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        product = 1\n        for\
    \ i in 2:length(numbers) \n            product *= numbers[i]\n            sum_product\
    \ += product\n        end\n        return (sum_product, product)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given list.\nThe function should work for both vectors and matrices.\n\
    The function should work for both positive and negative numbers.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both integers\
    \ and floats.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both positive and\
    \ negative integers.\nThe function should work for both integers and floats.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both integers\
    \ and floats.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both integers and floats.\nThe function should work for both positive and\
    \ negative integers.\nThe function should work for both integers and floats.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both integers and floats.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both integers\
    \ and floats.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floats.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ integers and floats.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both integers and floats.\nThe function\
    \ should work for both positive and \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ad0mwd8.jl:21\nin expression starting at\
    \ /tmp/tmp9ad0mwd8.jl:21\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3y0ghibh.jl:13\nin expression starting at\
    \ /tmp/tmp3y0ghibh.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ = sum_ + i\n        product_ = product_ * i\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the square of each integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_81s1fw.jl:16\nin expression starting at\
    \ /tmp/tmpd_81s1fw.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the integers in a given list.\nThe function should work for\
    \ both vectors and matrices.\nThe function should work for both positive and negative\
    \ numbers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both positive and negative integers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both positive and\
    \ negative integers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both positive and negative integers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both positive and\
    \ negative integers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both positive and negative integers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both positive and\
    \ negative integers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both positive and negative integers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both positive and\
    \ negative integers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both positive and negative integers.\nThe function should work for \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfbb6ydk.jl:19\nin expression starting at\
    \ /tmp/tmpkfbb6ydk.jl:19\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8iqzx08.jl:16\nin expression starting at\
    \ /tmp/tmpy8iqzx08.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        sum_product += sum_product(numbers[2:end])\n\
    \        return (sum_product, numbers[1])\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_square([1,\
    \ 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq85ws6hs.jl:16\nin expression starting at\
    \ /tmp/tmpq85ws6hs.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe function\
    \ should raise an error if the vector is empty.\nThe function should raise an\
    \ error if the vector contains non-integer values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains duplicate values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than 100.\nThe function should\
    \ raise an error if the vector contains values less than 0.\nThe function should\
    \ raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacusv1kb.jl:16\nin expression starting at\
    \ /tmp/tmpacusv1kb.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6v6rfej7.jl:17\nin expression starting at\
    \ /tmp/tmp6v6rfej7.jl:17\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        sum_product += sum_product(numbers[2:end])\n\
    \        return sum_product, sum_product \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3x33071.jl:16\nin expression starting at\
    \ /tmp/tmpc3x33071.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9ie_b9e.jl:13\nin expression starting at\
    \ /tmp/tmp_9ie_b9e.jl:13\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ a list of all integers in the list that are less than or equal to 100.\nThe\
    \ function should return a list of tuples, where each tuple consists of a single\
    \ integer and a list of all integers in the list that are less than or equal to\
    \ that integer.\nThe function should return an empty list if the list is empty.\n\
    >>> less_than_100([10, 20, 30, 40, 50])\n([10, 20, 30, 40], [10, 20, 30, 40, 50])\n\
    >>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> less_than_100([10,\
    \ 20, 30, 40, 50])\n[]\n>>> less_than_100([10, 20, 30, 40, 50])\n[]\n>>> \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbwrta_2.jl:16\nin expression starting at\
    \ /tmp/tmpbbwrta_2.jl:16\n"
  stdout: ''
  timestamp: 1659823070
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        numbers = numbers[2:end]\n\
    \        return sum_product, sum_product(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe function should work for both vectors and matrices.\nThe\
    \ function should work for both vectors and matrices.\nThe function should work\
    \ for both vectors and matrices.\nThe function should work for both vectors and\
    \ matrices.\nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both vectors and matrices.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both vectors and matrices.\n\
    The function should work for both vectors and matrices.\nThe function should work\
    \ for both vectors and matrices.\nThe function should work for both vectors and\
    \ matrices.\nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both vectors and matrices.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both vectors and matrices.\n\
    The function should work for both vectors and matrices.\nThe function should work\
    \ for both vectors and matrices.\nThe function should work for both vectors and\
    \ matrices.\nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both vectors and matrices.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both vectors and matrices.\n\
    The function should work for both vectors and matrices.\nThe function should work\
    \ for both vectors and matrices.\nThe function should work for both vectors and\
    \ matrices.\nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both vectors and matrices.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both vectors and matrices.\n\
    The function should work for both vectors and matrices.\nThe function should work\
    \ for both vectors and matrices.\nThe function should work for both vectors and\
    \ matrices.\nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both vectors and matrices.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both vectors and matrices.\n\
    The function should work for both vectors and matrices.\nThe function should work\
    \ for both vectors and matrices.\nThe function should work for both vectors and\
    \ matrices.\nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both vectors and matrices.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both vectors and matrice\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzc0_csi.jl:16\nin expression starting at\
    \ /tmp/tmplzc0_csi.jl:16\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the sum of the squares of the numbers\
    \ in a list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    >>> sum_square_of_numbers([])\n    0\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdlg8p2y8.jl:13\nin expression starting at\
    \ /tmp/tmpdlg8p2y8.jl:13\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi5k8ges.jl:16\nin expression starting at\
    \ /tmp/tmpzi5k8ges.jl:16\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        (0, 1) \n    else \n        sum_product_helper(numbers,\
    \ 0, 1) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjsesxqry.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpjsesxqry.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: sum_product_helper\
    \ not defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmpjsesxqry.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjsesxqry.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjsesxqry.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjsesxqry.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: sum_product_helper not defined\n\
    \  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpjsesxqry.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjsesxqry.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjsesxqry.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjsesxqry.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: sum_product_helper not defined\n\
    \  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpjsesxqry.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjsesxqry.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjsesxqry.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjsesxqry.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([10]) == (10, 10)\n  UndefVarError: sum_product_helper not defined\n\
    \  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpjsesxqry.jl:12\n"
  timestamp: 1659823073
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ += i\n        product_ *= i\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of all the integers in a given\
    \ list.\n    >>> sum_of_squares([1,2,3])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1u5fgnz.jl:16\nin expression starting at\
    \ /tmp/tmpa1u5fgnz.jl:16\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector.\n    >>> sum_of_squares([1,2,3,4,5])\n    25\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kk_xt8v.jl:17\nin expression starting at\
    \ /tmp/tmp6kk_xt8v.jl:17\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbdk8jqr.jl:13\nin expression starting at\
    \ /tmp/tmplbdk8jqr.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the integers\
    \ in a list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([4,\
    \ 9, 16])\n    49.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnpybt3w.jl:13\nin expression starting at\
    \ /tmp/tmpmnpybt3w.jl:13\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9410qeie.jl:16\nin expression starting at\
    \ /tmp/tmp9410qeie.jl:16\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for number in numbers[2:end]\n\
    \        sum_product = sum_product + number\n        product = product * number\n\
    \    end\n    return (sum_product, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_square([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square([-1, 2, -3, 4])\n    25\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_pkv7dbo.jl:17\nin expression starting at\
    \ /tmp/tmp_pkv7dbo.jl:17\n"
  stdout: ''
  timestamp: 1659823071
- exit_code: 1
  program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] \n        prod_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ = sum_ + i \n            prod_ = prod_ * i \n        return\
    \ (sum_, prod_) \nend \n</cell>\n<code language=julia-1.3>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a vector. \nThe vector can contain any number\
    \ of elements.\nThe function should work for vectors of any length.\nThe function\
    \ should work for vectors of any element type.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6axnfox.jl:19\nin expression starting at\
    \ /tmp/tmpv6axnfox.jl:19\n"
  stdout: ''
  timestamp: 1659823071
