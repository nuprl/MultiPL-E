language: jl
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    sorted_list\
    \ = sort(lst)\n    \n    sum = 0\n    \n    for i in sorted_list\n        sum\
    \ += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for i in\
    \ sorted_list\n        if length(i) == sum\n            push!(sorted_list, i)\n\
    \        end\n    end\n    \n    sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc220x2j2.jl:37\nin expression starting at\
    \ /tmp/tmpc220x2j2.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwear_660.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwear_660.jl:1\n\
    in expression starting at /tmp/tmpwear_660.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>>\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\
    \nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n    \n    sorted_list\
    \ = sort(lst)\n    \n    sum = 0\n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst, by = sum)\n    \n \
    \   return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpu863s_w5.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpu863s_w5.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ objects of type Int64 are not callable\n  Maybe you forgot to use an operator\
    \ such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64,\
    \ Base.Order.ForwardOrdering}, a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n\
    \    [2] sort!\n      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String},\
    \ lo::Int64, hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpu863s_w5.jl:26\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpu863s_w5.jl:35 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpu863s_w5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu863s_w5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: objects of type Int64 are not callable\n  Maybe you forgot to\
    \ use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Int64,\
    \ Base.Order.ForwardOrdering}, a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n\
    \    [2] sort!\n      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String},\
    \ lo::Int64, hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{Int64, Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n     "
