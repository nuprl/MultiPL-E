name: HumanEval_20_find_closest_elements
language: jl
prompt: "\"\"\" From a supplied list of numbers (of length at least two) select and\
  \ return two that are the closest to each\n    other and return them in order (smaller\
  \ number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
  \ Float64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0,\
  \ 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0,\
  \ 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
completions: ["    smallest = numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < smallest\n            smallest = i\n        elseif i > largest\n\
    \            largest = i\n        end\n    end\n    return (smallest, largest)\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if there\
    \ are two numbers that are equidistant from each other. For example, `find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])` returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. I've edited my answer to account for that\
    \ case.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a package for this:\nhttps://github.com/johnmyleswhite/ClosestPair\n\
    <code>\njulia> using ClosestPair", "    \n    smallest_number = numbers[1]\n \
    \   largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n  \
    \      if number < smallest_number\n            smallest_number = number\n   \
    \     elseif number > largest_number\n            largest_number = number\n  \
    \      end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function by comparing it to our known answers:",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n   \
    \     if numbers[i] < smallest \n            smallest = numbers[i]\n        elseif\
    \ numbers[i] > largest\n            largest = numbers[i]\n        end\n    end\n\
    \    return (smallest, largest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of numbers and return the sum of the numbers in the list.\
    \ \nWrite a function that will take a list of numbers and return the average of\
    \ the numbers in the list. \nWrite a function that will take a list of numbers\
    \ and return the median of the numbers in the list. \nWrite a function that will\
    \ take a list of numbers and return the mode of the numbers in the list. \nWrite\
    \ a function that will take a list of numbers and return the standard deviation\
    \ of the numbers in the list. \nWrite a function that will take a list of numbers\
    \ and return the variance of the numbers in the list. \nWrite a function that\
    \ will take a list of numbers and return the sum of the squares of the numbers\
    \ in the list. \nWrite a function that will take a list of numbers and return\
    \ the sum of the cubes of the numbers in the list. \nWrite a function that will\
    \ take a list of numbers and return the sum of the exponential of the numbers\
    \ in the list. \nWrite a function that will take a list of numbers and return\
    \ the sum of the natural logarithms of the numbers in the list. \nWrite a function\
    \ that will take a list of numbers and return the sum of the reciprocals of the\
    \ numbers in the list. \nWrite a function that will take a list of numbers and\
    \ return the sum of the absolute values of the numbers in the list. \nWrite a\
    \ function that will take a list of numbers and return the sum of the reciprocals\
    \ of the squares of the numbers in the list. \nWrite a function that will take\
    \ a list of numbers and return the sum of the reciprocals of the cubes of the\
    \ numbers in the list. \nWrite a function that will take a list of numbers and\
    \ return the sum of the reciprocals of the exponential of the numbers in the list.\
    \ \nWrite a function that will take a list of numbers and return the sum of the\
    \ reciprocals of the natural logarithms of the numbers in the list. \nWrite a\
    \ function that will take a list of numbers and return the sum of the reciprocals\
    \ of the absolute values of the numbers in the list. \nWrite a function that will\
    \ take a list of numbers and return the sum of the reciprocals of the reciprocals\
    \ of the numbers in the list. \nWrite a function that will take a list of numbers\
    \ and return the sum of the reciprocals of the reciprocals of the squares of the\
    \ numbers in the list. \nWrite a function that will take a list of numbers and\
    \ return the sum of the reciprocals of the reciprocals of the cubes of the numbers\
    \ in the list. \nWrite a function that will take a list of numbers and return\
    \ the sum of the reciprocals of the reciprocals of the exponential of the numbers\
    \ in the list. \nWrite a function that will take a list of numbers and return\
    \ the sum of the reciprocals of the reciprocals of the ", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n \
    \       if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        else\n            smallest\
    \ = number\n            largest = number\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nNow let's test our function by comparing it\
    \ to our known answer:", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.1>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.\nTest your function\
    \ on a few examples:", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < smallest_number\n            smallest_number = numbers[i]\n        elseif\
    \ numbers[i] > largest_number\n            largest_number = numbers[i]\n     \
    \   end\n    end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will return the square root of a number.\
    \ Test it on $5$ and $10$.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test the function by comparing it to our previous results.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ two numbers as arguments and returns the sum of the squares of the two numbers.\n\
    Test your function with some simple cases:", "    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest\n\
    \            smallest = number\n        elseif number > largest\n            largest\
    \ = number\n        else\n            return smallest, largest\n        end\n\
    \    end\n    return smallest, largest\nend\n</cell>\n<text>\nNow let's test the\
    \ function by comparing it to our previous implementation:", "    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for n in numbers[2:end]\n        if n < smallest\n\
    \            smallest = n\n        elseif n > largest\n            largest = n\n\
    \        else\n            break\n    end\n    return smallest, largest\nend\n\
    </cell>\n<text>\nThe function above takes in a list of numbers and returns the\
    \ two numbers that are closest to each other. Let's see how it works.", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n   \
    \ for number in numbers[2:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by running\
    \ it on some test data:", "    \n    smallest_diff = Float64(0.0)\n    smallest_number\
    \ = numbers[1]\n    \n    for i in numbers[2:end]\n        diff = abs(i - smallest_number)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_number = i\n        end\n    end\n    \n    return (smallest_number,\
    \ smallest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nNow let's test our new function by finding the closest pair of numbers\
    \ to each other.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow\
    \ let's test our function", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.\nHint: You can use the sum function.", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n   \
    \ for number in numbers[2:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    closest_elements\
    \ = numbers[1]\n    closest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < closest_number\n            closest_number = number\n   \
    \         closest_elements = number\n        elseif number > closest_number\n\
    \            closest_number = number\n            closest_elements = number\n\
    \        end\n    end\n    \n    return (closest_elements, closest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers and returns the index of the element that is the closest\
    \ to each of the numbers in the vector. For example, if the vector is [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2] the function should return [3, 5].", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest\
    \ \n            smallest = number\n        elseif number > largest\n         \
    \   largest = number\n        end\n    end\n    return (smallest, largest)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will find the closest element\
    \ in a given list to the mean of the list.\nFor example, if the list is [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], the mean is 2.0, so the function should return 2.0.\n\
    If the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2], the mean is 2.5, so the function\
    \ should return 2.5.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite ", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[0]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the sum of the squares of the numbers in that list.\n>>> square_sum(numbers::Vector{Float64})\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0])\n49.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n\
    145.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n245.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n345.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n495.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n725.0\n>>> square_sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n975.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n1225.0\n>>>\
    \ square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0,\
    \ 14.0])\n1475.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\
    \ 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n1725.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n1975.0\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0,\
    \ 13.0, 14.0, 15.0, 16.0, 17.0])\n2225.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n\
    2475.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.",
  "    smallest_number = numbers[1]\n    largest_number = numbers[end]\n    for i\
    \ in 2:length(numbers)\n        if numbers[i] < smallest_number\n            smallest_number\
    \ = numbers[i]\n        elseif numbers[i] > largest_number\n            largest_number\
    \ = numbers[i]\n        else\n            break\n        end\n    end\n    return\
    \ (smallest_number, largest_number)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to avoid the for loop?\n\
    <|/ c |>\n<| c |>\nI added a version that avoids the for loop, but I still think\
    \ it would be better to use a for loop. Also, if you don't mind me asking, why\
    \ do you think it would be better to use a for loop?\n<|/ c |>\n<| c |>\nI guess\
    \ I thought there might be a way to avoid the for loop. I'm just trying to learn\
    \ Julia. Thanks for the help!\n<|/ c |>\n<| c |>\nI added a version that avoids\
    \ the for loop, but I still think it would be better to use a for loop. Also,\
    \ if you don't mind me asking, why do you think it would be better to use a for\
    \ loop?\n<|/ c |>\n<| c |>\nI added a version that avoids the for loop, but I\
    \ still think it would be better to use a for loop. Also, if you don't mind me\
    \ asking, why do you think it would be better to use a for loop?\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI like your solution, but I wonder if there is a way to avoid\
    \ the for loop?", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest \n         \
    \   smallest = numbers[i]\n        elseif numbers[i] > largest\n            largest\
    \ = numbers[i]\n        else\n            smallest = numbers[i]\n            largest\
    \ = numbers[i]\n        end\n    end\n    return smallest, largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will find the closest element in a given list to the\
    \ mean of the list.\nThe function should take a list of numbers and return the\
    \ closest element to the mean of the list.\nThe function should return an error\
    \ if the list is empty.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only a single element.\nThe function should return an error if the list contains\
    \ only ", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:", "    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <code language=julia-1.5>", "    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    for i in numbers[2:end]\n        if i < minimum\n            minimum = i\n\
    \        elseif i > maximum\n            maximum = i\n        else\n         \
    \   return minimum, maximum\n        end\n    end\n    return minimum, maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_elements = Vector{Float64}(undef,\
    \ 0)\n    closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n\
    \    \n    for element in numbers[2:end]\n        if element < closest_elements[1]\n\
    \            closest_elements[1] = element\n        elseif element > closest_elements[2]\n\
    \            closest_elements[2] = element\n        end\n    end\n    \n    return\
    \ closest_elements\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a list of numbers\
    \ and return a new list with all the numbers in the original list except the two\
    \ numbers that are closest to each other. Test it by calling it on the list [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2].", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    smallest_index = 2\n    largest_index = end\n    \n    for\
    \ index in 2:end\n        if numbers[index] < smallest_number\n            smallest_number\
    \ = numbers[index]\n            smallest_index = index\n        elseif numbers[index]\
    \ > largest_number\n            largest_number = numbers[index]\n            largest_index\
    \ = index\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<text>\nNow let's test our function by finding the closest element\
    \ to each of the numbers in the list we created above:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. Test it by passing\
    \ it a list of numbers and printing the result.", "    \n    smallest_number =\
    \ numbers[1]\n    largest_number = numbers[end]\n    \n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function by finding the closest element to\
    \ each of the numbers in the list we created earlier. We'll use the function we\
    \ just wrote, find_closest_elements, and then compare the results to the numbers\
    \ we created earlier.", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return smallest, largest\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        else\n            return smallest,\
    \ largest\n    end\n    return smallest, largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of numbers and returns the sum of the\
    \ squares of the numbers in the list. \nWrite a function that takes a list of\
    \ numbers and returns the sum of the squares of the numbers in the list. \nWrite\
    \ a function that takes a list of numbers and returns the sum of the squares of\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the ", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's try it out on some examples:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest = numbers[1]\n    largest =\
    \ numbers[1]\n    for number in numbers[2:end]\n        if number < smallest\n\
    \            smallest = number\n        elseif number > largest\n            largest\
    \ = number\n        else\n            return smallest, largest\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of our test numbers:", "    smallest_number = numbers[1]\n\
    \    largest_number = numbers[0]\n    for number in numbers[2:end]\n        if\
    \ number < smallest_number\n            smallest_number = number\n        elseif\
    \ number > largest_number\n            largest_number = number\n        end\n\
    \    end\n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\n\
    The function above is called find_closest_elements and takes in a list of numbers\
    \ and returns a tuple of two numbers that are the closest to each other (smaller\
    \ number, larger number).", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    minimum\
    \ = minimum(numbers)\n    maximum = maximum(numbers)\n    \n    if minimum ==\
    \ maximum\n        return (minimum, minimum)\n    end\n    \n    index = findfirst(minimum\
    \ < numbers, numbers)\n    \n    if index == length(numbers)\n        return (minimum,\
    \ maximum)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    smallest_number =\
    \ numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function by comparing it to our known answers:",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by calling\
    \ it with the numbers we created earlier. We'll also print out our results to\
    \ make sure they look correct.", "    \n    closest_numbers = numbers[1]\n   \
    \ closest_numbers_2 = numbers[2]\n    \n    if numbers[1] < numbers[2]\n     \
    \   closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n   \
    \ else\n        closest_numbers = numbers[2]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    return closest_numbers, closest_numbers_2\nend\n</cell>\n\
    <text>\nNow let's test our new function with some test cases:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < smallest\n\
    \            smallest = number\n        elseif number > largest\n            largest\
    \ = number\n        end\n    end\n    return (smallest, largest)\nend\n</cell>\n\
    <code language=julia-1.5>", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    smallest_index = 2\n    largest_index = end\n    while smallest_index\
    \ < end && largest_index > 1\n        if numbers[smallest_index] < smallest_number\n\
    \            smallest_number = numbers[smallest_index]\n            smallest_index\
    \ = smallest_index + 1\n        elseif numbers[largest_index] > largest_number\n\
    \            largest_number = numbers[largest_index]\n            largest_index\
    \ = largest_index - 1\n        else\n            smallest_index = smallest_index\
    \ + 1\n            largest_index = largest_index - 1\n        end\n    end\n \
    \   return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's\
    \ test the function by comparing it to our previous implementation:", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n   \
    \ for number in numbers[2:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our new function by comparing it to our old function\
    \ and see how they compare:", "    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest \n           \
    \ smallest = number\n        elseif number > largest\n            largest = number\n\
    \        else\n            return smallest, largest\n        end\n    end\n  \
    \  return smallest, largest\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! I ended up using your first solution\
    \ and it worked perfectly. Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nThe other\
    \ answers here are great, but I thought I'd add my own solution, since I like\
    \ functional programming more than loops. \n<code>", "    \n    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for n in numbers[2:end]\n        if n < smallest\n\
    \            smallest = n\n        elseif n > largest\n            largest = n\n\
    \        end\n    end\n    return smallest, largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the square root of a number. Test it on $x$\
    \ = 2.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare.", "    \n    smallest_number\
    \ = numbers[1]\n    biggest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > biggest_number\n            biggest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, biggest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of numbers and return the number of times each number appears\
    \ in the list. \nFor example, if the input list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\
    \ the output should be [1 2 1 2 1 1]", "    \n    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    for number in numbers[2:end]\n        if number < minimum\n\
    \            minimum = number\n        elseif number > maximum\n            maximum\
    \ = number\n        end\n    end\n    return minimum, maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    return (smallest, largest)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a ", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's test our\
    \ function by comparing it to our known answer:", "    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < minimum\n            minimum = numbers[i]\n        elseif numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        else\n            break\n        end\n\
    \    end\n    return (minimum, maximum)\nend\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis doesn't work. Try it with `find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])`.\n<|/ c |>\n<| c |>\nIt works fine for me. Try it with `find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])`.\n<|/ c |>\n<| c |>\nIt doesn't work for me on Julia\
    \ 0.4.0-dev+4373. I get `ERROR: LoadError: ArgumentError: invalid argument to\
    \ find_closest_elements: expected a Vector{Float64}, got a Float64`\n<|/ c |>\n\
    <| c |>\nI tested it on 0.4.0-dev+4373 and it works fine. Maybe you have a different\
    \ version of Julia?\n<|/ c |>\n<| c |>\nI tested it on 0.4.0-dev+4373 and it works\
    \ fine. Maybe you have a different version of Julia?\n<|/ c |>\n<| a dscore=1\
    \ |>\nI wrote a package that does this for you:\n<code>\nusing FindClosestElements\n\
    using LinearAlgebra", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        end\n    end\n    \n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector. For example, if the\
    \ vector is [1.0, 2.0, 3.0, 4.0, 5.0], the function should return 25.", "    \n\
    \    smallest = numbers[1]\n    largest = numbers[1]\n    \n    for i in numbers[2:end]\n\
    \        if i < smallest\n            smallest = i\n        elseif i > largest\n\
    \            largest = i\n        end\n    end\n    \n    return (smallest, largest)\n\
    end\n</cell>\n<text>\nNow let's test our function by comparing it to our expectations:",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest \n            smallest = numbers[i]\n      \
    \  elseif numbers[i] > largest\n            largest = numbers[i]\n        end\n\
    \    end\n    return smallest, largest\nend\n</cell>\n<text>\nNow let's test our\
    \ function by comparing it to our original list:", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function", "    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    for i in 2:length(numbers)\n        if\
    \ numbers[i] < smallest_number\n            smallest_number = numbers[i]\n   \
    \     elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nI came up with a solution that is\
    \ more efficient than using sort. \n<code>", "    \n    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    \n    for n in numbers[2:end]\n        if n < smallest\n\
    \            smallest = n\n        elseif n > largest\n            largest = n\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Now let's try it out!", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a list of numbers and returns the average of the two numbers that are\
    \ closest to each other.", "    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    for i in numbers[2:end]\n        if i < minimum\n            minimum = i\n\
    \        elseif i > maximum\n            maximum = i\n        else\n         \
    \   minimum = min(minimum, i)\n            maximum = max(maximum, i)\n       \
    \ end\n    end\n    return (minimum, maximum)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare in terms of performance.", " \
    \   minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum_index\
    \ = index(minimum, numbers)\n    maximum_index = index(maximum, numbers)\n   \
    \ if minimum_index == maximum_index\n        return (minimum, minimum)\n    else\n\
    \        return (numbers[minimum_index], numbers[maximum_index])\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ that are equally close.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. The function returns the two numbers that are equally close.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if there are two numbers that are equally close.\
    \ Try it with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])`\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are two numbers that are equally close. Try\
    \ it with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])`\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are two numbers that are equally close. Try\
    \ it with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])`\n<|/ c |>\n\
    <| a tags=julia,arrays |>\nHere's a solution using broadcasting and the diff function\n\
    <code>\njulia> function find_closest_elements(numbers::Vector{Float64})\n    \
    \       minimum = minimum(numbers)\n           maximum = maximum(numbers)\n  \
    \         minimum_index = minimum.==minimum\n           maximum_index = maximum.==maximum\n\
    \           return (minimum[minimum_index], maximum[maximum_index])\n       end\n\
    find_closest_elements (generic function with 1 method)", "    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[0]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nNow let's test our function by comparing it to our known answers:", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the number of elements in the list that are\
    \ greater than the average of the list.\nFor example, if the list is [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0] the function should return 3.\nIf the list is [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2, 2.0] the function should return 4.\nIf the list is [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.0] the function should return 5.\nIf the list\
    \ is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.0] the function should return\
    \ 6.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.0] the function\
    \ should return 7.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5,\
    \ 2.6, 2.0] the function should return 8.\nIf the list is [1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.0] the function should return 9.\nIf the\
    \ list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.0] the\
    \ function should return 10.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3,\
    \ 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.0] the function should return 11.\nIf the list\
    \ is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.0]\
    \ the function should return 12.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2,\
    \ 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11, 2.0] the function should return\
    \ 13.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7,\
    \ 2.8, 2.9, 2.10, 2.11, 2.12, 2.0] the function should return 14.\nIf the list\
    \ is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11,\
    \ 2.12, 2.13, 2.0] the function should return 15.\nIf the list is [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11, 2.12, 2.13, 2.14, ",
  "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum_index\
    \ = get_index(minimum, numbers)\n    maximum_index = get_index(maximum, numbers)\n\
    \    return (minimum[minimum_index], maximum[maximum_index])\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ will take a list of numbers and return a new list with the numbers in sorted\
    \ order. \nThe function should take an optional argument that specifies what field\
    \ to sort on. \nThe function should return a new list with the numbers in sorted\
    \ order.\nThe function should return a new list with the numbers in sorted order.\n\
    The function should return a new list with the numbers in sorted order.\nThe function\
    \ should return a new list with the numbers in sorted order.\nThe function should\
    \ return a new list with the numbers in sorted order.\nThe function should return\
    \ a new list with the numbers in sorted order.\nThe function should return a new\
    \ list with the numbers in sorted order.\nThe function should return a new list\
    \ with the numbers in sorted order.\nThe function should return a new list with\
    \ the numbers in sorted order.\nThe function should return a new list with the\
    \ numbers in sorted order.\nThe function should return a new list with the numbers\
    \ in sorted order.\nThe function should return a new list with the numbers in\
    \ sorted order.\nThe function should return a new list with the numbers in sorted\
    \ order.\nThe function should return a new list with the numbers in sorted order.\n\
    The function should return a new list with the numbers in sorted order.\nThe function\
    \ should return a new list with the numbers in sorted order.\nThe function should\
    \ return a new list with the numbers in sorted order.\nThe function should return\
    \ a new list with the numbers in sorted order.\nThe function should return a new\
    \ list with the numbers in sorted order.\nThe function should return a new list\
    \ with the numbers in sorted order.\nThe function should return a new list with\
    \ the numbers in sorted order.\nThe function should return a new list with the\
    \ numbers in sorted order.\nThe function should return a new list with the numbers\
    \ in sorted order.\nThe function should return a new list with the numbers in\
    \ sorted order.\nThe function should return a new list with the numbers in sorted\
    \ order.\nThe function should return a new list with the numbers in sorted order.\n\
    The function should return a new list with the numbers in sorted order.\nThe function\
    \ should return a new list with the numbers in sorted order.\nThe function should\
    \ return a new list with the numbers in sorted order.\nThe function should return\
    \ a new list with the numbers in sorted order.\nThe function should return a new\
    \ list with the numbers in sorted order.\nThe function should return a new list\
    \ with the numbers in sorted order.\nThe function ", "    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n\
    \            minimum = i\n        elseif i > maximum\n            maximum = i\n\
    \        else\n            break\n    end\n    return (minimum, maximum)\nend\n\
    </cell>\n<code language=julia-1.0>", "    minimum = numbers[1]\n    maximum =\
    \ numbers[1]\n    for number in numbers[2:end]\n        if number < minimum\n\
    \            minimum = number\n        elseif number > maximum\n            maximum\
    \ = number\n        else\n            break\n    end\n    return (minimum, maximum)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,arrays |>\nThe answer by is correct\
    \ but can be improved. \n<code>", "    \n    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < minimum\n\
    \            minimum = number\n        elseif number > maximum\n            maximum\
    \ = number\n        end\n    end\n    \n    return (minimum, maximum)\nend\n</cell>\n\
    <text>\nNow let's test our function by comparing it to our known answers:", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by calling\
    \ it with the numbers we defined earlier", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.\nThe function should\
    \ raise an error if the vector is empty.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\nThe function should raise an error if\
    \ the vector has more than one element.\n", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nLet's test our function by comparing it to our known answer:",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        else\n            smallest\
    \ = number\n            largest = number\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nNow let's try it out on some random numbers:",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n \
    \       if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        else\n            return smallest,\
    \ largest\n        end\n    end\n    return smallest, largest\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. Test it on some vectors.",
  "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum_index\
    \ = index(minimum, numbers)\n    maximum_index = index(maximum, numbers)\n   \
    \ return (minimum[minimum_index], maximum[maximum_index])\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    smallest_diff\
    \ = Float64(0.0)\n    smallest_number = numbers[1]\n    largest_diff = Float64(0.0)\n\
    \    largest_number = numbers[1]\n    for i in 2:length(numbers)\n        diff\
    \ = abs(numbers[i] - smallest_number)\n        if diff < smallest_diff\n     \
    \       smallest_diff = diff\n            smallest_number = numbers[i]\n     \
    \   end\n        diff = abs(numbers[i] - largest_number)\n        if diff > largest_diff\n\
    \            largest_diff = diff\n            largest_number = numbers[i]\n  \
    \      end\n    end\n    return (smallest_number, largest_number)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without looping through the entire list?\n<|/ c |>\n<| c |>\nI guess\
    \ you could use [sort](http://julia.readthedocs.org/en/latest/stdlib/collections/#Base.sort)\
    \ but that would require a custom comparator function which would probably be\
    \ slower than the loop. Also note that `sort` will sort the entire list so you\
    \ might want to avoid that if possible.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without looping through the entire list\n<|/ c |>\n<| c |>\nI added a solution\
    \ without looping through the entire list\n<|/ c |>\n<| a |>\nHere's a solution\
    \ without looping through the entire list. \n<code>", "    \n    smallest_difference\
    \ = numbers[1] - numbers[0]\n    smallest_number = numbers[1]\n    \n    for i\
    \ in 2:length(numbers)\n        difference = numbers[i] - numbers[i-1]\n     \
    \   if difference < smallest_difference\n            smallest_difference = difference\n\
    \            smallest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, smallest_difference)\nend\n</cell>\n<text>\nNow let's test\
    \ our function by finding the closest element to each of our test cases:", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function.", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    minimum_index = 0\n    maximum_index = 0\n    \n    for number in numbers\n\
    \        if number < minimum\n            minimum = number\n            minimum_index\
    \ = length(numbers)\n        elseif number > maximum\n            maximum = number\n\
    \            maximum_index = length(numbers)\n        end\n    end\n    \n   \
    \ return (minimum, maximum(minimum_index..maximum_index))\nend\n</cell>\n<text>\n\
    The function above is called find_closest_elements and is defined in the file\
    \ find_closest_elements.jl. This function takes one argument, numbers, which is\
    \ a vector of floating point numbers. We will see how to use this function in\
    \ the next section. Let's try it out on some numbers.", "    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for i in numbers[2:end]\n        if i < smallest\
    \ \n            smallest = i\n        elseif i > largest\n            largest\
    \ = i\n        end\n    end\n    return smallest, largest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the ",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's test our\
    \ new function with some test cases:", "    \n    closest_numbers = numbers[1]\n\
    \    closest_numbers_index = numbers[2]\n    \n    smallest_number = numbers[1]\n\
    \    smallest_number_index = numbers[2]\n    \n    largest_number = numbers[1]\n\
    \    largest_number_index = numbers[2]\n    \n    for number in numbers[3:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \           smallest_number_index = number_index\n        elseif number > largest_number\n\
    \            largest_number = number\n            largest_number_index = number_index\n\
    \        end\n    end\n    \n    return (smallest_number, smallest_number_index),\
    \ (largest_number, largest_number_index)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ average of the numbers in the list.\nWrite a function that takes in a list of\
    \ numbers and returns the median of the numbers in the list.\nWrite a function\
    \ that takes in a list of numbers and returns the mode of the numbers in the list.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ numbers in the list.\nWrite a function that takes in a list of numbers and returns\
    \ the standard deviation of the numbers in the list.\nWrite a function that takes\
    \ in a list of numbers and returns the minimum and maximum values of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ number of numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the number of numbers in the list that are even.\nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are odd.\nWrite a function that takes in a list of numbers and returns\
    \ the number of numbers in the list that are odd and even.\nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are odd and even.\nWrite a function that takes in a list of numbers and returns\
    \ the number of numbers in the list that are odd and even.\nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are odd and even.\nWrite a function that takes in a list of numbers and returns\
    \ the number of numbers in the list that are odd and even.\nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are odd and even.\nWrite a function that takes in a list of numbers and returns\
    \ the number of numbers in the list that are odd and even.\nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are odd and even.\nWrite a function that takes in a list of numbers and returns\
    \ the number of numbers in the list that are odd and even.\nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are odd and even.\nWrite a function that takes in a list of numbers and returns\
    \ the number of numbers in the list that are odd and even.\nWrite a function that\
    \ takes in a list of numbers and returns the ", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nFor example, given\
    \ the list [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], your function should return 50.\nThe\
    \ function should work for lists of any length.\nThe function should work for\
    \ lists of any type of numbers.", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    minimum\
    \ = numbers[1]\n    maximum = numbers[1]\n    for i in 2:length(numbers)\n   \
    \     if numbers[i] < minimum\n            minimum = numbers[i]\n        elseif\
    \ numbers[i] > maximum\n            maximum = numbers[i]\n        end\n    end\n\
    \    return (minimum, maximum)\nend\n</cell>\n<text>\nNow let's try it out on\
    \ some random numbers:", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector.\nThe function should raise an error if\
    \ the vector is empty.\nThe function should raise an error if the vector has less\
    \ than two numbers.\nThe function should raise an error if the vector has more\
    \ than two numbers.\nThe function should raise an error if the vector has two\
    \ numbers that are not integers.\nThe function should raise an error if the vector\
    \ has two numbers that are not integers.\nThe function should raise an error if\
    \ the vector has two numbers that are not integers.\nThe function should raise\
    \ an error if the vector has two numbers that are not integers.\nThe function\
    \ should raise an error if the vector has two numbers that are not integers.\n\
    The function should raise an error if the vector has two numbers that are not\
    \ integers.\nThe function should raise an error if the vector has two numbers\
    \ that are not integers.\nThe function should raise an error if the vector has\
    \ two numbers that are not integers.\nThe function should raise an error if the\
    \ vector has two numbers that are not integers.\nThe function should raise an\
    \ error if the vector has two numbers that are not integers.\nThe function should\
    \ raise an error if the vector has two numbers that are not integers.\nThe function\
    \ should raise an error if the vector has two numbers that are not integers.\n\
    The function should raise an error if the vector has two numbers that are not\
    \ integers.\nThe function should raise an error if the vector has two numbers\
    \ that are not integers.\nThe function should raise an error if the vector has\
    \ two numbers that are not integers.\nThe function should raise an error if the\
    \ vector has two numbers that are not integers.\nThe function should raise an\
    \ error if the vector has two numbers that are not integers.\nThe function should\
    \ raise an error if the vector has two numbers that are not integers.\nThe function\
    \ should raise an error if the vector has two numbers that are not integers.\n\
    The function should raise an error if the vector has two numbers that are not\
    \ integers.\nThe function should raise an error if the vector has two numbers\
    \ that are not integers.\nThe function should raise an error if the vector has\
    \ two numbers that are not integers.\nThe function should raise an error if the\
    \ vector has two numbers that are not integers.\nThe function should raise an\
    \ error if the vector has two numbers that are not integers.\nThe function should\
    \ raise an error if the vector has two numbers that are not integers.\nThe function\
    \ should raise an error if the vector ", "    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n        \
    \    minimum = i\n        elseif i > maximum\n            maximum = i\n      \
    \  end\n    end\n    return (minimum, maximum)\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nNow let's test our function by finding the closest element to each of\
    \ the numbers in our list.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector has less than two elements.\nThe function\
    \ should raise an error if the vector has more than two elements.\nThe function\
    \ should raise an error if the vector contains non-numeric elements.\nThe function\
    \ should raise an error if the vector contains negative numbers.\nThe function\
    \ should raise an error if the vector contains any non-positive numbers.\nThe\
    \ function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains ", "    \n    closest_numbers\
    \ = numbers[1]\n    closest_numbers_2 = numbers[2]\n    \n    if numbers[1] <\
    \ numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    else\n        closest_numbers = numbers[2]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    return closest_numbers, closest_numbers_2\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n \
    \   largest = numbers[1]\n    for n in numbers[2:end]\n        if n < smallest\n\
    \            smallest = n\n        elseif n > largest\n            largest = n\n\
    \        end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes in a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. \nThe function should raise an error if the vector\
    \ is empty or has less than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\n", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test the function by comparing it to our previous implementation:",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    smallest = numbers[1]\n\
    \    largest = numbers[1]\n    for n in numbers[2:end]\n        if n < smallest\n\
    \            smallest = n\n        elseif n > largest\n            largest = n\n\
    \        end\n    end\n    return (smallest, largest)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>", "    \n    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if minimum > n\n            minimum\
    \ = n\n        elseif maximum < n\n            maximum = n\n        end\n    end\n\
    \    \n    return (minimum, maximum)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the square root of a number. Test it on $x$ and $y$\
    \ and $z$.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. For example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2],\
    \ the function should return 25.", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ take a list of numbers and a target number and will return the index of the\
    \ number in the list that is closest to the target number. Test it on a list of\
    \ numbers and a target number that should be in the list.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function", "    \n    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n\
    \            minimum = i\n        elseif i > maximum\n            maximum = i\n\
    \        end\n    end\n    return minimum, maximum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given vector.\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
    25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.1])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    minimum = minimum(numbers)\n    maximum\
    \ = maximum(numbers)\n    minimum_index = index(minimum, numbers)\n    maximum_index\
    \ = index(maximum, numbers)\n    if minimum_index == maximum_index\n        return\
    \ (minimum, minimum)\n    else\n        return (minimum[minimum_index], maximum[maximum_index])\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nI came up\
    \ with a solution that is very similar to yours, but I believe it may be more\
    \ efficient and easier to read. \n<code>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n        \
    \    minimum = i\n        elseif i > maximum\n            maximum = i\n      \
    \  end\n    end\n    return (minimum, maximum)\nend\n</cell>\n<text>\nNow let's\
    \ try it out on some examples:", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest\n\
    \            smallest = numbers[i]\n        elseif numbers[i] > largest\n    \
    \        largest = numbers[i]\n        end\n    end\n    return smallest, largest\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nThe other answers\
    \ are good, but I thought I'd add my own solution, which is more efficient and\
    \ uses less memory:\n<code>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    closest = minimum\n    \n    for number in numbers\n        if number\
    \ < closest\n            closest = number\n        end\n    end\n    \n    return\
    \ (closest, maximum)\nend\n</cell>\n<text>\nNow let's test our function", "  \
    \  \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[0]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nThe function above is called find_closest_elements and is defined\
    \ in the file closest_elements.jl. Let's take a look at how it works.", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n   \
    \ for number in numbers[2:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector that are less than a given number.\
    \ For example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] and you call your\
    \ function with 0.5 then your function should return 3.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our new function with some examples:", "    \n\
    \    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n    \n\
    \    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n      \
    \  closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    ", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[0]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    minimum = numbers[1]\n    maximum =\
    \ numbers[1]\n    for i in numbers[2:end]\n        if i < minimum\n          \
    \  minimum = i\n        elseif i > maximum\n            maximum = i\n        else\n\
    \            minimum = minimum if minimum < i else i\n            maximum = maximum\
    \ if maximum > i else i\n        end\n    end\n    return (minimum, maximum)\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nI like this solution, however\
    \ it only works if you have a list of numbers. If you have a vector of numbers,\
    \ it only returns the first two numbers. I added a solution that works for vectors.\n\
    <|/ c |>\n<| a dscore=2 |>\nI like solution, but I wanted to add an alternative\
    \ that doesn't require the use of any packages. I came up with this solution:\n\
    <code>", "    smallest = numbers[1]\n    largest = numbers[1]\n    for n in numbers[2:end]\n\
    \        if n < smallest\n            smallest = n\n        elseif n > largest\n\
    \            largest = n\n        else\n            smallest = largest\n     \
    \       largest = n\n        end\n    end\n    return smallest, largest\nend\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a list of numbers and returns\
    \ the average of all the numbers in the list. \nWrite a function that takes a\
    \ list of numbers and returns the average of all the numbers in the list. \nWrite\
    \ a function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ average of all the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of all the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the average of all the numbers\
    \ in the list. \nWrite a function that takes a list of ", "    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nNow let's test our function by finding the closest element to each of\
    \ our test vectors.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    \n    if minimum\
    \ == maximum\n        return (minimum, minimum)\n    end\n    \n    middle = (minimum\
    \ + maximum) / 2\n    \n    if middle == minimum\n        return (minimum, middle)\n\
    \    end\n    \n    if middle == maximum\n        return (middle, maximum)\n \
    \   end\n    \n    if middle == minimum + maximum\n        return (minimum, minimum)\n\
    \    end\n    \n    if middle == minimum - maximum\n        return (middle, maximum)\n\
    \    end\n    \n    if middle == maximum - minimum\n        return (minimum, minimum)\n\
    \    end\n    \n    if middle == minimum + maximum + minimum\n        return (minimum,\
    \ minimum)\n    end\n    \n    if middle == minimum + maximum - minimum\n    \
    \    return (minimum, middle)\n    end\n    \n    if middle == maximum - minimum\
    \ + minimum\n        return (middle, minimum)\n    end\n    \n    if middle ==\
    \ maximum - minimum - minimum\n        return (middle, middle)\n    end\n    \n\
    \    if middle == minimum + maximum + minimum + maximum\n        return (minimum,\
    \ minimum)\n    end\n    \n    if middle == minimum + maximum + minimum - maximum\n\
    \        return (minimum, middle)\n    end\n    \n    if middle == minimum + maximum\
    \ - minimum - maximum\n        return (minimum, middle)\n    end\n    \n    if\
    \ middle == maximum - minimum + minimum - maximum\n        return (middle, minimum)\n\
    \    end\n    \n    if middle == maximum - minimum - minimum - maximum\n     \
    \   return (middle, middle)\n    end\n    \n    if middle == minimum + maximum\
    \ + minimum + maximum + minimum\n        return (minimum, minimum)\n    end\n\
    \    \n    if middle == minimum + maximum + minimum + maximum - minimum\n    \
    \    return (minimum, middle)\n    end\n    \n    if middle == minimum + maximum\
    \ + minimum - maximum - minimum\n        return (minimum, middle)\n    end\n \
    \   \n    if middle == minimum + maximum - minimum - maximum - minimum\n     \
    \   return (middle, minimum)\n    end\n    \n    if middle == maximum - minimum\
    \ + minimum - maximum - minimum\n        return (middle, middle)\n    end\n  \
    \  \n    if middle == maximum - minimum - minimum - maximum - minimum\n      \
    \  return (middle, middle)\n    end\n    \n    if middle == minimum + maximum\
    \ + minimum + maximum + minimum + maximum\n        return (minimum, minimum)\n\
    \    end\n    \n    if middle == minimum + maximum + minimum + maximum - minimum\
    \ - maximum\n        return (minimum, middle)\n    end\n    \n    if middle ==\
    \ minimum + maximum + minimum - maximum - minimum - maximum\n        return (minimum,\
    \ middle)", "    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\n\
    Here is a simple solution that is O(n) time and O(1) space complexity:\n<code>",
  "    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < minimum\n            minimum = i\n        elseif i > maximum\n\
    \            maximum = i\n        else\n            minimum = minimum if minimum\
    \ < i else i\n            maximum = maximum if maximum > i else i\n        end\n\
    \    end\n    return minimum, maximum\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers = numbers[1]\n\
    \    closest_numbers_2 = numbers[2]\n    \n    if numbers[1] < numbers[2]\n  \
    \      closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    return closest_numbers, closest_numbers_2\nend", "    \n \
    \   smallest = numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < smallest \n            smallest = i\n        elseif i > largest\n\
    \            largest = i\n        end\n    end\n    return smallest, largest\n\
    end\n</cell>\n<text>\nNow let's try it out on some test data:", "    \n    minimum\
    \ = numbers[1]\n    maximum = numbers[1]\n    \n    for i in numbers[2:end]\n\
    \        if i < minimum\n            minimum = i\n        elseif i > maximum\n\
    \            maximum = i\n        end\n    end\n    \n    return (minimum, maximum)\n\
    end\n</cell>\n<text>\nNow let's test our function by calling it with the numbers\
    \ we created earlier. We'll use the function we defined earlier to find the closest\
    \ pair of numbers to each other.", "    \n    smallest_number = numbers[1]\n \
    \   largest_number = numbers[end]\n    \n    for i in 2:length(numbers)\n    \
    \    if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    minimum = numbers[1]\n    maximum\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < minimum\n\
    \            minimum = number\n        elseif number > maximum\n            maximum\
    \ = number\n        end\n    end\n    \n    return (minimum, maximum)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ numbers in a given vector. For example, given [1.0, 2.0, 3.0], the function\
    \ should return 14.0.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for i in 2:length(numbers)\n        if numbers[i] <\
    \ smallest_number\n            smallest_number = numbers[i]\n        elseif numbers[i]\
    \ > largest_number\n            largest_number = numbers[i]\n        end\n   \
    \ end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:", "    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            smallest_number =\
    \ number\n            largest_number = number\n        end\n    end\n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes in a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector. \nFor example, if the vector is [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0], the function should return 50.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers in that list. For\
    \ example, if the input list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2], the output should\
    \ be 14.0", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite ", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.\nFor example, if\
    \ the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], then the function should return\
    \ 25.\nHint: use the sum function.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nFor example, \n>>> square_sum([1.0, 2.0, 3.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    50.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n75.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n100.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0])\n125.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0])\n150.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0])\n175.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n200.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n225.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n250.0\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0,\
    \ 13.0, 14.0, 15.0])\n275.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\
    \ 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n300.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n325.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,\
    \ 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n350.0", "    \n\
    \    smallest_difference = numbers[1] - numbers[0]\n    smallest_number = numbers[1]\n\
    \    largest_difference = numbers[1] - numbers[0]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        difference = number - numbers[1]\n\
    \        if difference < smallest_difference\n            smallest_difference\
    \ = difference\n            smallest_number = number\n        elseif difference\
    \ > largest_difference\n            largest_difference = difference\n        \
    \    largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare.", "    \n    smallest_difference\
    \ = numbers[1] - numbers[0]\n    smallest_number = numbers[1]\n    largest_difference\
    \ = numbers[length(numbers) - 1] - numbers[length(numbers)-2]\n    largest_number\
    \ = numbers[length(numbers)-1]\n    \n    for number in numbers[2:length(numbers)-1]\n\
    \        difference = number - numbers[1]\n        if difference < smallest_difference\n\
    \            smallest_difference = difference\n            smallest_number = number\n\
    \        end\n        \n        difference = number - numbers[length(numbers)-2]\n\
    \        if difference > largest_difference\n            largest_difference =\
    \ difference\n            largest_number = number\n        end\n    end\n    \n\
    \    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector. ",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the closest element to a given number in a given\
    \ list of numbers. If the given number is greater than any of the numbers in the\
    \ list, return the first number in the list.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[0]\n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        else\n            break\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function", " \
    \   minimum = numbers[1]\n    maximum = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < minimum\n            minimum = numbers[i]\n        elseif\
    \ numbers[i] > maximum\n            maximum = numbers[i]\n        else\n     \
    \       minimum = minimum\n            maximum = maximum\n        end\n    end\n\
    \    return (minimum, maximum)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ code doesn't work for me. `minimum` and `maximum` are not defined. `minimum\
    \ = numbers[1]` should be `minimum = numbers[1]; maximum = numbers[1]`.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>", "    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n    \
    \    if number < smallest_number\n            smallest_number = number\n     \
    \   elseif number > largest_number\n            largest_number = number\n    \
    \    end\n    end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.", "    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        else\n            smallest_number = number\n            largest_number\
    \ = number\n        end\n    end\n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ will find the closest element to a given number in a given vector. For example,\
    \ if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] and the number you are looking\
    \ for is 2.2, then the function should return (2.0, 2.2).", "    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        else\n            return smallest_number, largest_number\n        end\n\
    \    end\n    return smallest_number, largest_number\nend\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\nI wrote a function that finds the closest element in a given\
    \ array to a given number. \n<code>", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest\n\
    \            smallest = numbers[i]\n        elseif numbers[i] > largest\n    \
    \        largest = numbers[i]\n        else\n            smallest = numbers[i]\n\
    \            largest = numbers[i]\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and it takes one argument (a vector) and returns two elements (a tuple with\
    \ two elements). The first element is the smallest number in the vector and the\
    \ second element is the largest number in the vector.", "    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < minimum\n            minimum = numbers[i]\n        elseif numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        else\n            return minimum, maximum\n\
    \        end\n    end\n    return minimum, maximum\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,arrays |>\n<code>", "    \n    closest_elements = numbers[1]\n\
    \    closest_distance = numbers[1]\n    for element in numbers[2:end]\n      \
    \  distance = abs(element - closest_elements)\n        if distance < closest_distance\n\
    \            closest_elements = element\n            closest_distance = distance\n\
    \        end\n    end\n    return closest_elements, closest_distance\nend\n</cell>\n\
    <code language=julia-1.5>", "    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      else\n            break\n    end\n    return smallest, largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    closest_numbers = numbers[1]\n    closest_numbers_2\
    \ = numbers[2]\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    ", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n   \
    \ for number in numbers[2:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.3>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nThe function find_closest_elements is now ready to be used in a Julia\
    \ program. Let's see how it works:", "    smallest = numbers[1]\n    largest =\
    \ numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] < smallest\
    \ \n            smallest = numbers[i]\n        elseif numbers[i] > largest\n \
    \           largest = numbers[i]\n        else\n            smallest = numbers[i]\n\
    \            largest = numbers[i]\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThis can be done\
    \ in O(n) time using binary search and O(1) space using an array:\n<code>", " \
    \   \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    biggest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > biggest_number\n            biggest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, biggest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for i in 2:length(numbers)\n   \
    \     if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in that list.\nHint: Use a for loop and a sum function.", "    \n    smallest_diff\
    \ = Float64(0.0)\n    smallest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        diff = abs(number - smallest_number)\n        if diff < smallest_diff\n\
    \            smallest_diff = diff\n            smallest_number = number\n    \
    \    end\n    end\n    \n    return (smallest_number, smallest_diff)\nend\n</cell>\n\
    <text>\nNow let's test the function by comparing it to our previous implementation",
  "    \n    closest_numbers = numbers[1]\n    closest_number = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < closest_number\n            closest_number\
    \ = number\n        elseif number > closest_number\n            closest_numbers\
    \ = number\n        end\n    end\n    return closest_numbers, closest_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for n in numbers[2:end]\n        if n < smallest\n       \
    \     smallest = n\n        elseif n > largest\n            largest = n\n    \
    \    else\n            smallest, largest = n, n\n        end\n    end\n    return\
    \ smallest, largest\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\n\
    <code>", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n  \
    \  for i in 2:length(numbers)\n        if numbers[i] < smallest\n            smallest\
    \ = numbers[i]\n        elseif numbers[i] > largest\n            largest = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in the list.\n>>> square_sum(numbers::Vector{Float64})\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0])\n49.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0])\n145.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n\
    2520.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n\
    47900.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    987000.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0])\n1987500.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\
    \ 10.0, 11.0, 12.0, 13.0])\n3987500.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n5987500.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n\
    7987500.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\
    \ 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n9987500.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n\
    11875000.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\
    \ 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n13875000.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.", "    \n    closest_elements\
    \ = numbers[1]\n    closest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < closest_number\n            closest_number = number\n   \
    \         closest_elements = number\n        else\n            if abs(number -\
    \ closest_number) < abs(closest_number - number)\n                closest_number\
    \ = number\n                closest_elements = number\n            end\n     \
    \   end\n    end\n    \n    return closest_elements, closest_number\nend\n</cell>\n\
    <text>\nThe function above is called find_closest_elements and takes in a list\
    \ of numbers and returns a tuple containing the two numbers that are closest to\
    \ each other (the smaller number, the larger number).", "    \n    smallest =\
    \ numbers[1]\n    largest = numbers[1]\n    for i in numbers[2:end]\n        if\
    \ i < smallest\n            smallest = i\n        elseif i > largest\n       \
    \     largest = i\n        end\n    end\n    return (smallest, largest)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    for i in numbers[2:end]\n        if i < smallest \n      \
    \      smallest = i\n        elseif i > largest\n            largest = i\n   \
    \     end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>",
  "    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in numbers[2:end]\n\
    \        if i < minimum\n            minimum = i\n        elseif i > maximum\n\
    \            maximum = i\n        else\n            minimum = minimum if minimum\
    \ < i else i\n            maximum = maximum if maximum > i else i\n        end\n\
    \    end\n    return (minimum, maximum)\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])` returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug and added a version that works with Julia 1.5.\n<|/ c\
    \ |>\n<| a tags=julia,sorting,arrays |>\nThis should work:\n<code>", "    minimum\
    \ = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum_index = index(minimum,\
    \ numbers)\n    maximum_index = index(maximum, numbers)\n    \n    if minimum_index\
    \ == maximum_index\n        return (minimum, minimum)\n    else\n        return\
    \ (numbers[minimum_index], numbers[maximum_index])\n    end\nend\n</cell>\n<text>\n\
    The function find_closest_elements takes two arguments: numbers and returns a\
    \ tuple of two numbers (the closest to each other).", "    minimum = numbers[1]\n\
    \    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ < minimum\n            minimum = numbers[i]\n        elseif numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        else\n            return minimum, maximum\n\
    \        end\n    end\n    return minimum, maximum\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like the idea of using minimum and maximum to keep track of the\
    \ minimum and maximum numbers. But this doesn't work if you have two numbers that\
    \ are equal, right? For example `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])` returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nYes,\
    \ you're right. I didn't think about that case. I'll edit my answer to fix it.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! I like your solution but I'm afraid\
    \ that it's too slow for my needs. I need a solution that is fast enough to run\
    \ on large vectors.\n<|/ c |>\n<| c |>\nI edited my answer to include a faster\
    \ solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I like\
    \ your solution but I'm afraid that it's too slow for my needs. I need a solution\
    \ that is fast enough to run on large vectors.\n<|/ c |>\n<| a dscore=1 |>\nI\
    \ wrote a solution that is fast enough to run on large vectors. I used the idea\
    \ of using minimum and maximum to keep track of the minimum and maximum numbers.\
    \ But this doesn't work if you have two numbers that are equal, right? For example\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) returns (2.0, 2.0) instead\
    \ of (2.0, 2.2).\n<code>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest\n      \
    \      smallest = number\n        elseif number > largest\n            largest\
    \ = number\n        end\n    end\n    \n    return (smallest, largest)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector. \nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the ", "    \n    closest_elements = numbers[1]\n\
    \    closest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < closest_number\n            closest_number = number\n      \
    \      closest_elements = number\n        elseif number > closest_number\n   \
    \         closest_number = number\n            closest_elements = number\n   \
    \     end\n    end\n    \n    return (closest_elements, closest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest = numbers[1]\n    largest =\
    \ numbers[1]\n    for number in numbers[2:end]\n        if number < smallest\n\
    \            smallest = number\n        elseif number > largest\n            largest\
    \ = number\n        else\n            largest = number\n            smallest =\
    \ number\n        end\n    end\n    return (smallest, largest)\nend\n</cell>\n\
    <code language=julia-1.0>", "    minimum = numbers[1]\n    maximum = numbers[1]\n\
    \    for i in numbers[2:end]\n        if i < minimum\n            minimum = i\n\
    \        elseif i > maximum\n            maximum = i\n        else\n         \
    \   minimum = min(minimum, i)\n            maximum = max(maximum, i)\n       \
    \ end\n    end\n    return (minimum, maximum)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,arrays |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
