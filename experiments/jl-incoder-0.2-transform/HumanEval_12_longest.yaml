name: HumanEval_12_longest
language: jl
prompt: "\"\"\" Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n    strings of the same length. Return None in case the input\
  \ list is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"a\", \"b\"\
  , \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n \
  \   \"\"\"\nfunction longest(strings::Vector{String})::Union{String, Nothing} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
  \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
completions: ["    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for s in strings \n  \
    \          if length(s) < length(longest) \n                longest = s \n   \
    \     return longest \nend\n</cell>\n<code language=julia-1.3>\nlongest([\"a\"\
    , \"b\", \"c\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\",\
    \ \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the longest\
    \ string in any given vector of strings. Use this function to find the longest\
    \ string in any given vector of strings. Return nothing in case the given vector\
    \ is empty.", "    longest = nothing\n    lengths = Vector{Int}()\n    for string\
    \ in strings\n        if string != nothing\n            push!(lengths, length(string.text))\n\
    \            if lengths[length(lengths)-1] > length(longest)\n               \
    \ longest = string\n            end\n        end\n    end\n    return longest\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest string\
    \ in a list of strings. Use this function to find the longest string in our list\
    \ of strings.", "    longest = nothing\n    for s in strings\n        if longest\
    \ == nothing || length(longest) > length(s)\n            longest = s\n       \
    \ end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\nI wrote a function that returns the longest string in a vector:\n<code>",
  "    longest = nothing\n    \n    if length(strings) == 0\n        return nothing\n\
    \    \n    longest = strings[1]\n    for string in strings\n        if length(longest)\
    \ < length(string)\n            longest = string\n        end\n    end\n    \n\
    \    return longest\nend\n</cell>\n<text>\nExercise 3: Write a function that takes\
    \ a vector of strings and returns a vector of the lengths of the strings. Return\
    \ nothing in case the vector is empty.\n    >>> lengths([])\n    nothing\n   \
    \ >>> lengths([\"a\", \"b\", \"c\"])\n    [1, 2, 3]\n    >>> lengths([\"a\", \"\
    bb\", \"ccc\"])\n    [3, 3]\n    \"\"\"", "    if length(strings) == 0\n     \
    \   nothing\n    else\n        longest = strings[length(strings)-1]\n        for\
    \ s in strings[2:end]\n            if length(longest) < length(s) \n         \
    \       longest = s\n            end\n        end\n        longest\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function which takes a string as input\
    \ and returns the number of characters in the string. \nWrite a second function\
    \ which takes a string as input and returns the number of words in the string.\
    \ \nWrite a third function which takes a string as input and returns the number\
    \ of sentences in the string. \nWrite a fourth function which takes a string as\
    \ input and returns the number of characters in the string divided by the number\
    \ of words in the string.", "    if length(strings) == 0 return nothing\n    max_length\
    \ = maximum(strings)\n    longest_string = filter(x -> x == max_length, strings)\n\
    \    if length(longest_string) == 0 return nothing\n    return longest_string\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of the same length with all strings replaced by \"nothing\"\
    .\nThe function should return nothing in case the input vector is empty.\nThe\
    \ function should return nothing in case the vector has only one element.\nThe\
    \ function should return the first string in case the vector has multiple strings.\n\
    The function should return the longest string in case the vector has multiple\
    \ strings.\nThe function should return the first string in case the vector has\
    \ multiple strings of the same length.", "    if length(strings) == 0 \n     \
    \   return nothing \n    else \n        longest_string <- strings[length(strings)-1]\
    \ \n        for string in strings \n            if length(string) > length(longest_string)\
    \ \n                longest_string <- string \n        longest_string \n    end\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that takes a vector of strings\
    \ and returns a vector of the same length with all strings replaced by \"nothing\"\
    .\n    >>> replace_all([\"a\", \"b\", \"c\"], nothing)\n    [\"nothing\", \"nothing\"\
    , \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n    [\"\
    nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"\
    ], \"nothing\")\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"a\", \"\
    bb\", \"ccc\"], \"nothing\")\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], \"nothing\")\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"", "    if length(strings) == 0 \n        return nothing \n   \
    \ else \n        max_length = length(strings) \n        longest_string = strings[max_length]\
    \ \n        for string in strings \n            if length(string) == max_length\
    \ \n                longest_string = string \n            end \n        end \n\
    \        return longest_string \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"ddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\",\
    \ \"bb\", \"ccc\", \"ddd\", \"eee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    , \"kkk\", \"lll\", \"mmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk", "    if length(strings) == 0\n        return nothing\n\
    \    max_length = maximum(strings)\n    longest_string = filter(x -> x == max_length,\
    \ strings)\n    if length(longest_string) == 1\n        return longest_string[0]\n\
    \    return longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return nothing.",
  "    longest = nothing\n    lengths = Vector{Int64}()\n    for string in strings\n\
    \        if lengths.contains(string)\n            longest = string\n        else\n\
    \            lengths.push(length(string.chars))\n        end\n    end\n    return\
    \ longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of strings and\
    \ returns a vector of strings with the longest strings removed.", "    if length(strings)\
    \ == 0 \n        return nothing \n    else \n        max_length = maximum(strings)\
    \ \n        for s in strings \n            if length(s) == max_length \n     \
    \           return s \n            else \n                max_length = length(s)\
    \ \n        endfor \n        return nothing \n    endif \nendfunction \n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nI like your answer, but I think it would be more\
    \ efficient to just use `maximum` instead of `findmax`.  `findmax` has to go through\
    \ every element in the vector to find the max value, whereas `maximum` just goes\
    \ through the vector once and returns the max value.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. `findmax` would also work in this case, but I wanted to show\
    \ a more general solution. `findmax` would also work if you use `findfirst` instead\
    \ of `findmax`.\n<|/ c |>\n<| c |>\nI agree that `findmax` is more general, but\
    \ I wanted to show a more general solution.  `findmax` would also work if you\
    \ use `findfirst` instead of `findmax`.\n<|/ c |>\n<| a dscore=2 |>\nI wanted\
    \ to add an answer that uses no packages and is more efficient than some of the\
    \ other answers here.  It uses no packages and is more efficient than some of\
    \ the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and is more efficient than some\
    \ of the other answers here.  It uses no packages and ", "    longest = nothing\n\
    \    if !isempty(strings)\n        longest = strings[end-1]\n        for s in\
    \ strings\n            if length(longest) > length(s) \n                longest\
    \ = s\n            end\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis doesn't seem to work. `longest([\"a\"\
    , \"bb\", \"ccc\"])` returns `\"bb\"` instead of `\"ccc\"`.\n<|/ c |>\n<| c |>\n\
    It does work. `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"`\n<|/ c |>\n\
    <| c |>\nAh, I missed that `longest` was a function. Thanks!\n<|/ c |>\n<| c |>\n\
    I added a version that doesn't use any functions. I hope it helps.\n<|/ c |>\n\
    <| a dscore=2 |>\nI believe this should work:\n<code>\nlongest(L::Vector{String})\
    \ = L[argmax(map(length, L))]\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n\
    `argmax` doesn't exist in Julia 1.5.1\n<|/ c |>\n<| c |>\nI believe it does in\
    \ 1.5.2\n<|/ c |>\n<| c |>\nIt does in 1.5.2\n<|/ c |>\n<| c |>\nIt does in 1.5.2\n\
    <|/ c |>\n<| c |>\nIt does in 1.5.2\n<|/ c |>\n<| a tags=julia,string |>\n<code>",
  "    if length(strings) == 0 return nothing\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings \n  \
    \      if length(s) == max_length \n            longest_string = s\n        end\n\
    \    end\n    return longest_string\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nHere's a solution that uses no loops and no recursion:\n<code>", "    if\
    \ length(strings) == 0\n        return nothing\n    max_length = maximum(strings)\n\
    \    longest_string = filter(x -> x == max_length, strings)\n    if length(longest_string)\
    \ == 1\n        return longest_string[0]\n    else\n        return nothing\n \
    \   end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there\
    \ are multiple strings of the same length. `longest([\"a\", \"bb\", \"ccc\"])`\
    \ returns `\"a\"` instead of `\"ccc\"`.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I missed that case. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "    if length(strings) == 0 return nothing\n    max_length = maximum(strings)\n\
    \    max_length_length = length(max_length)\n    for s in strings\n        if\
    \ length(s) == max_length_length\n            return max_length\n        end\n\
    \    end\n    return nothing\nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\",\
    \ \"nnnn\", \"oooo\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    bb", "    longest = nothing\n    for s in strings\n        if longest == nothing\
    \ || length(longest) > length(s) \n            longest = s\n        end\n    end\n\
    \    return longest\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThanks\
    \ for your answer! I actually tried this before posting my question, but I got\
    \ an error saying `ERROR: LoadError: MethodError: no method matching length(::String)`.\
    \ I tried `length(s)` instead of `length(longest)` but that didn't work either.\
    \ Do you know why that is?\n<|/ c |>\n<| c |>\nI edited my answer to include a\
    \ version that works with `String`s.\n<|/ c |>\n<| c |>\nThanks! That worked!\
    \ I didn't realize that `length` was a method for `Vector`s.\n<|/ c |>\n<| c |>\n\
    `length` is also a method for `Array`s and `Vector`s.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe answer by is perfectly fine, but I thought I'd add some explanation\
    \ as to why your original code didn't work.\nThe reason your code didn't work\
    \ is because you were trying to call length() on a String (which doesn't have\
    \ a length() method). length() is a method on Vectors and Arrays. \n<code>\njulia>\
    \ length(\"hello\")\nERROR: MethodError: no method matching length(::String)\n\
    </code>\nThe reason this doesn't work is because length() is a method on Strings.\
    \ \n<code>\njulia> length(\"hello\")\n5\n</code>\nSo to fix your original code,\
    \ you just need to change length(longest) to length(longest.) \n<code>", "   \
    \ if length(strings) == 0\n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for s in strings\n            if length(s) > length(longest)\n      \
    \          longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if length(strings) == 0 return\
    \ nothing\n    max_length = maximum(strings)\n    longest_string = filter(x ->\
    \ x == max_length, strings)\n    if length(longest_string) == 0 return nothing\n\
    \    else return longest_string[1]\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a vector of strings and returns a vector of booleans indicating\
    \ whether each string is a palindrome or not. \nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the vector contains only empty strings.\nThe function should return nothing\
    \ in case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains strings\
    \ that are palindromes but are of different lengths.\nThe function should return\
    \ nothing in case the vector contains strings that are palindromes but are of\
    \ different lengths.\nThe function should return nothing in case the vector contains\
    \ strings that are palindromes but are of different lengths.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindromes but are of different lengths.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains strings\
    \ that are palindromes but are of different lengths.\nThe function should return\
    \ nothing in case the vector contains strings that are palindromes but are of\
    \ different lengths.\nThe function should return nothing in case the vector contains\
    \ strings that are palindromes but are of different lengths.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindro", "    longest = nothing\n    for s in strings\n\
    \        if longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ strings of the same length. Try it with `longest([\"a\", \"bb\", \"ccc\"])`.\n\
    <|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a tags=julia,string |>\n\
    <code>", "    if length(strings) == 0 \n        return nothing \n    else \n \
    \       longest_string <- strings[length(strings)-1] \n        for string in strings\
    \ \n            if length(string) > length(longest_string) \n                longest_string\
    \ <- string \n        return longest_string \nend \n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that returns the longest string in a list of strings. Use\
    \ this function to find the longest string in a list of strings. Use this function\
    \ to find the longest string in a list of strings. Use this function to find the\
    \ longest string in a list of strings. Use this function to find the longest string\
    \ in a list of strings. Use this function to find the longest string in a list\
    \ of strings. Use this function to find the longest string in a list of strings.\
    \ Use this function to find the longest string in a list of strings. Use this\
    \ function to find the longest string in a list of strings. Use this function\
    \ to find the longest string in a list of strings. Use this function to find the\
    \ longest string in a list of strings. Use this function to find the longest string\
    \ in a list of strings. Use this function to find the longest string in a list\
    \ of strings. Use this function to find the longest string in a list of strings.\
    \ Use this function to find the longest string in a list of strings. Use this\
    \ function to find the longest string in a list of strings. Use this function\
    \ to find the longest string in a list of strings. Use this function to find the\
    \ longest string in a list of strings. Use this function to find the longest string\
    \ in a list of strings. Use this function to find the longest string in a list\
    \ of strings. Use this function to find the longest string in a list of strings.\
    \ Use this function to find the longest string in a list of strings. Use this\
    \ function to find the longest string in a list of strings. Use this function\
    \ to find the longest string in a list of strings. Use this function to find the\
    \ longest string in a list of strings. Use this function to find the longest string\
    \ in a list of strings. Use this function to find the longest string in a list\
    \ of strings. Use this function to find the longest string in a list of strings.\
    \ Use this function to find the longest string in a list of strings. Use this\
    \ function to find the longest string in a list of strings. Use this function\
    \ to find the longest string in a list of strings. Use this function to find the\
    \ longest string in a list of strings. Use this function to find the longest string\
    \ in a list of strings. Use this function to find the longest string in a list\
    \ of strings. Use this function to find the longest string in a list of strings.\
    \ Use this function to find the longest string in a list of strings. Use this\
    \ function to find the longest string in a list of strings. Use this function\
    \ to find the longest string in a list of strings. Use this function to find the\
    \ longest string in a list of strings. Use this function to find the longest string\
    \ in a list of strings. Use this function to find the longest string in ", " \
    \   longest = nothing\n    if !isempty(strings)\n        longest = strings[length(strings)\
    \ == maximum(length(strings))]\n    end\n    return longest\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=2 |>\nI wrote a package called \"longest\" that\
    \ does this in one line:\n<code>\nlongest(L::Vector{String}) = L[length(L) ==\
    \ maximum(length(L))]\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wrote\
    \ a package called \"longest\" that does this in one line:\n<code>\nlongest(L::Vector{String})\
    \ = L[length(L) == maximum(length(L))]\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    I wrote a package called \"longest\" that does this in one line:\n<code>\nlongest(L::Vector{String})\
    \ = L[length(L) == maximum(length(L))]\n</code>\n<|/ a tags=julia dscore=2 |>\n\
    <| a dscore=1 |>\nI wrote a package called \"longest\" that does this in one line:\n\
    <code>\nlongest(L::Vector{String}) = L[length(L) == maximum(length(L))]\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nI wrote a package called \"longest\" that\
    \ does this in one line:\n<code>\nlongest(L::Vector{String}) = L[length(L) ==\
    \ maximum(length(L))]\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI wrote\
    \ a package called \"longest\" that does this in one line:\n<code>\nlongest(L::Vector{String})\
    \ = L[length(L) == maximum(length(L))]\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nI wrote a package called \"longest\" that does this in one line:\n<code>\n\
    longest(L::Vector{String}) = L[length(L) == maximum(length(L))]\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a package called \"longest\" that does\
    \ this in one line:\n<code>\nlongest(L::Vector{String}) = L[length(L) == maximum(length(L))]\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wrote a package called \"\
    longest\" that does this in one line:\n<code>\nlongest(L::Vector{String}) = L[",
  "    longest = nothing\n    for s in strings\n        if longest == nothing\n  \
    \          longest = s\n        elseif length(longest) > length(s)\n         \
    \   longest = s\n        end\n    end\n    return longest\nend", "    longest\
    \ = nothing\n    longest = strings[1] if length(strings) == 1 else None\n    for\
    \ s in strings[2:end]\n        if length(s) > length(longest)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of strings and returns the longest string in the vector\
    \ and also the length of the longest string. Test your function with some test\
    \ cases.", "    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = length(strings) \n        longest_string = strings[max_length]\
    \ \n        for string in strings \n            if length(string) == max_length\
    \ \n                longest_string = string \n            end \n        end \n\
    \        return longest_string \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"ddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\",\
    \ \"bb\", \"ccc\", \"ddd\", \"eee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    , \"kkk\", \"lll\", \"mmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk", "    longest = nothing\n    if !isempty(strings)\n\
    \        longest = strings[end-1]\n        for s in strings\n            if length(s)\
    \ >= length(longest)\n                longest = s\n            end\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\nA simple\
    \ solution using Julia 1.0:\n<code>", "    longest = nothing\n    for s in strings\n\
    \        if longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0\n        nothing\n    elseif length(strings)\
    \ == 1\n        strings[1]\n    else\n        longest(sort(strings, by=length))[1]\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nI like using reduce\
    \ to solve this problem:\n<code>", "    if length(strings) == 0 \n        return\
    \ nothing \n    else \n        longest = strings[length(strings)-1] \n       \
    \ for s in strings \n            if length(s) == length(longest) \n          \
    \      longest = s \n            end \n        end \n        return longest \n\
    \    end \nend \n</cell>\n<text>\nExercise 7\nWrite a function that takes a vector\
    \ of strings and a vector of integers and returns the sum of the integers in the\
    \ vector. \nThe function should raise an error if the vector is empty or if the\
    \ vector has more than one element.", "    if length(strings) == 0 return nothing\n\
    \    max_length = maximum(strings)\n    longest_string = filter(x -> x == max_length,\
    \ strings)\n    if length(longest_string) == 0 return nothing\n    return longest_string[1]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of occurrences of the character 'a' in that string.",
  "    longest = nothing\n    for s in strings\n        if longest == nothing\n  \
    \          longest = s\n        elseif length(longest) < length(s)\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| a tags=julia |>\n<code>", "    if length(strings) == 0 return\
    \ nothing\n    max_length = maximum(strings)\n    max_length_str = strings[findfirst(x\
    \ -> x == max_length, strings)]\n    return max_length_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the longest string in a list of strings.", "   \
    \ if length(strings) == 0 return nothing\n    longest_len = length(strings[0])\n\
    \    for s in strings \n        if length(s) > longest_len \n            longest_len\
    \ = length(s)\n        end\n    end\n    longest_str = \"\"\n    for s in strings\
    \ \n        if length(s) == longest_len \n            longest_str = s\n      \
    \  end\n    end\n    return longest_str\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2: Write a function\
    \ that takes a vector of strings and returns a vector of strings with the same\
    \ length. \n    Each string in the output vector should contain the original string\
    \ repeated n times. \n    For example, if the input vector is [\"a\", \"bb\",\
    \ \"ccc\"] and the output vector is [\"aaa\", \"bbb\", \"ccc\"], \n    then the\
    \ first string in the output vector is \"aaa\" and the second string in the output\
    \ vector is \"bbb\".\n    >>> repeat_n([\"a\", \"bb\", \"ccc\"], 2)\n    [\"aaa\"\
    , \"bbb\", \"ccc\"]\n    >>> repeat_n([\"a\", \"bb\", \"ccc\"], 3)\n    [\"aaa\"\
    , \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\"]\n    >>> repeat_n([\"a\", \"bb\"\
    , \"ccc\"], 4)\n    [\"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"\
    aaa\", \"bbb\", \"ccc\"]\n    >>> repeat_n([\"a\", \"bb\", \"ccc\"], 5)\n    [\"\
    aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\"\
    , \"aaa\", \"bbb\", \"ccc\"]\n    >>> repeat_n([\"a\", \"bb\", \"ccc\"], 6)\n\
    \    [\"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\",\
    \ \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\"]\n    >>> repeat_n([\"\
    a\", \"bb\", \"ccc\"], 7)\n    [\"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"\
    ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\"\
    , \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\"\
    , \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\"\
    , \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\"\
    , \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\"\
    , \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\"\
    , \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"bbb\"\
    , \"ccc\", \"aaa\", \"bbb\", \"ccc\", \"aaa\", \"", "    if length(strings) ==\
    \ 0 \n        return nothing \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for s in strings \n            if length(s) == length(longest) \n\
    \                longest = s \n            end \n        end \n        return\
    \ longest \n    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns the longest string in that vector. Return nothing\
    \ if the vector is empty.", "    longest = nothing\n    if !isempty(strings)\n\
    \        longest = strings[end-1]\n        for s in strings[2:end]\n         \
    \   if isequal(longest, s)\n                longest = s\n            else\n  \
    \              break\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I wonder why you use `end-1` instead\
    \ of `end`?\n<|/ c |>\n<| c |>\nBecause `end-1` will return the index of the last\
    \ element of the list, while `end` will return the index of the last element of\
    \ the list minus one. Since `end-1` is the same as `end`, I prefer to use `end`\
    \ instead.\n<|/ c |>\n<| c |>\n`end-1` will return the index of the last element\
    \ of the list, while `end` will return the index of the last element of the list\
    \ minus one. Since `end-1` is the same as `end`, I prefer to use `end` instead.\n\
    <|/ c |>\n<| c |>\nI see, thank you. I was just wondering why you prefer `end`\
    \ over `end-1`.\n<|/ c |>\n<| c |>\nI prefer `end` because it's more intuitive.\
    \ `end-1` will return the index of the last element of the list, while `end` will\
    \ return the index of the last element of the list minus one. Since `end-1` is\
    \ the same as `end`, I prefer to use `end` instead.\n<|/ c |>\n<| a dscore=2 |>\n\
    Here's a solution using mapslices:\n<code>", "    longest = nothing\n    longest\
    \ = strings[end-1] if end>0 \n    if longest == nothing\n        longest = strings[end]\n\
    \    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n\
    <code>", "    longest = nothing\n    if !isempty(strings)\n        longest = strings[end-1]\n\
    \        for s in strings\n            if length(s) >= length(longest)\n     \
    \           longest = s\n            end\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    if length(strings)\
    \ == 0 \n        nothing\n    elseif length(strings) == 1\n        strings[1]\n\
    \    else\n        longest(strings[2:end-1]) \n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,string |>\n<code>", "    longest = nothing\n    longest\
    \ = strings[end-1] if length(strings) > 0 else None\n    for string in strings\n\
    \        if length(string) > length(longest)\n            longest = string\n \
    \       end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\nThe shortest and most efficient solution I have found is this:\n\
    <code>", "    if length(strings) == 0 \n        return nothing \n    else \n \
    \       max_length = length(strings)\n        longest = strings[max_length]\n\
    \        for i in 1:length(strings)\n            if strings[i] != longest\n  \
    \              max_length = i \n                longest = strings[max_length]\n\
    \            end\n        end\n        return longest\n    end\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>", "    longest =\
    \ nothing\n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    longest = strings[end-1] if end>0 \n    longest = strings[end]\
    \ if end>0 \n    ", "    longest = nothing\n    for s in strings\n        if longest\
    \ == nothing || length(longest) > length(s)\n            longest = s\n       \
    \ end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=2 |>\nI like to use this approach:\n<code>", "    if length(strings)\
    \ == 0 \n        return nothing \n    else \n        return maximum(strings) \n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings with the same length as the original vector,\
    \ but with each string repeated a number of times equal to the length of the original\
    \ vector. For example, if the input vector is [\"a\", \"b\", \"c\"], the output\
    \ vector should be [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"]. Write\
    \ a function that takes a vector of strings and returns a vector of strings with\
    \ the same length as the original vector, but with each string repeated a number\
    \ of times equal to the length of the original vector. For example, if the input\
    \ vector is [\"a\", \"b\", \"c\"], the output vector should be [\"a\", \"a\",\
    \ \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"]. Write a function that takes a vector\
    \ of strings and returns a vector of strings with the same length as the original\
    \ vector, but with each string repeated a number of times equal to the length\
    \ of the original vector. For example, if the input vector is [\"a\", \"b\", \"\
    c\"], the output vector should be [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"\
    c\", \"c\"]. Write a function that takes a vector of strings and returns a vector\
    \ of strings with the same length as the original vector, but with each string\
    \ repeated a number of times equal to the length of the original vector. For example,\
    \ if the input vector is [\"a\", \"b\", \"c\"], the output vector should be [\"\
    a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"]. Write a function that takes\
    \ a vector of strings and returns a vector of strings with the same length as\
    \ the original vector, but with each string repeated a number of times equal to\
    \ the length of the original vector. For example, if the input vector is [\"a\"\
    , \"b\", \"c\"], the output vector should be [\"a\", \"a\", \"a\", \"b\", \"b\"\
    , \"b\", \"c\", \"c\"]. Write a function that takes a vector of strings and returns\
    \ a vector of strings with the same length as the original vector, but with each\
    \ string repeated a number of times equal to the length of the original vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\"], the output vector\
    \ should be [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"]. Write a\
    \ function that takes a vector of strings and returns a vector of strings with\
    \ the same length as the original vector, but with each string repeated a number\
    \ of times equal to the length of the original vector. For example, if the input\
    \ vector is [\"a\", \"b\", \"c\"], the output vector should be [\"a\", \"a\",\
    \ \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"]. Write a function that takes a vector\
    \ of strings and returns a vector of strings with the same length as the original\
    \ vector, but with each string repeated a number of times equal to the length\
    \ of the original vector. For example, if the input vector is [\"a\", \"b\", \"\
    c\"], the output vector should be [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"\
    c\", \"c\"]. Write a function that takes a vector of strings and returns a vector\
    \ of strings with the same length as the original vector, but with each string\
    \ repeated a number of times equal to the length of the original vector. For example,\
    \ if the input vector is [\"a\", \"b\", \"c\"], the output vector should be [\"\
    a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"", "    longest = nothing\n \
    \   if !isempty(strings)\n        longest = strings[length(strings) == maximum(length(strings))]\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>", "    if length(strings) == 0 \n        return nothing \n    else \n \
    \       longest_str = strings[length(strings)-1] \n        for str in strings\
    \ \n            if length(str) > length(longest_str) \n                longest_str\
    \ = str \n        return longest_str \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of integers representing\
    \ the number of times each string appears in the vector. \nFor example, if the\
    \ input vector is [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], the output vector\
    \ should be [1, 1, 2, 2, 1, 1]. \nThe function should ignore case when counting\
    \ occurrences.\nThe function should ignore punctuation when counting occurrences.\n\
    The function should ignore empty strings.\nThe function should ignore empty vectors.\n\
    The function should ignore vectors of length 0.\nThe function should ignore vectors\
    \ of length 1.\nThe function should ignore vectors of length 2.\nThe function\
    \ should ignore vectors of length 3.\nThe function should ignore vectors of length\
    \ 4.\nThe function should ignore vectors of length 5.\nThe function should ignore\
    \ vectors of length 6.\nThe function should ignore vectors of length 7.\nThe function\
    \ should ignore vectors of length 8.\nThe function should ignore vectors of length\
    \ 9.\nThe function should ignore vectors of length 10.\nThe function should ignore\
    \ vectors of length 11.\nThe function should ignore vectors of length 12.\nThe\
    \ function should ignore vectors of length 13.\nThe function should ignore vectors\
    \ of length 14.\nThe function should ignore vectors of length 15.\nThe function\
    \ should ignore vectors of length 16.\nThe function should ignore vectors of length\
    \ 17.\nThe function should ignore vectors of length 18.\nThe function should ignore\
    \ vectors of length 19.\nThe function should ignore vectors of length 20.\nThe\
    \ function should ignore vectors of length 21.\nThe function should ignore vectors\
    \ of length 22.\nThe function should ignore vectors of length 23.\nThe function\
    \ should ignore vectors of length 24.\nThe function should ignore vectors of length\
    \ 25.\nThe function should ignore vectors of length 26.\nThe function should ignore\
    \ vectors of length 27.\nThe function should ignore vectors of length 28.\nThe\
    \ function should ignore vectors of length 29.\nThe function should ignore vectors\
    \ of length 30.\nThe function should ignore vectors of length 31.\nThe function\
    \ should ignore vectors of length 32.\nThe function should ignore vectors of length\
    \ 33.\nThe function should ignore vectors of length 34.\nThe function should ignore\
    \ vectors of length 35.\nThe function should ignore vectors of length 36.\nThe\
    \ function should ignore vectors of length 37.\nThe function should ignore vectors\
    \ of ", "    if length(strings) == 0 \n        return nothing \n    else \n  \
    \      max_length = length(strings) \n        longest_string = strings[max_length]\
    \ \n        for string in strings \n            if length(string) == max_length\
    \ \n                longest_string = string \n            end \n        end \n\
    \        return longest_string \n    end \nend \n</cell>\n<text>\nExercise: Write\
    \ a function that returns the longest string in a list of strings. Use longest()\
    \ from above.", "    if length(strings) == 0\n        nothing\n    else\n    \
    \    longest = strings[length(strings)-1]\n        for s in strings\n        \
    \    if length(s) == length(longest)\n                longest = s\n          \
    \  elseif length(s) > length(longest)\n                longest = s\n         \
    \   end\n        end\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c\
    \ |>\nThanks for your answer! I didn't know about `longest` function and I didn't\
    \ know that `length` function exists. I thought that `length` was a function that\
    \ returns length of string. Now I see that `length` function returns length of\
    \ string in characters. I thought that `length` was a function that returns length\
    \ of string in bytes. Thanks for your help!\n<|/ c |>\n<| c |>\n`length` returns\
    \ number of characters, not bytes. `length(\"a\") == 3` and `length(\"ab\") ==\
    \ 3`.\n<|/ c |>\n<| c |>\nYes, I thought that `length` returns number of characters.\
    \ Thanks for your help!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    if length(strings)\
    \ == 0 return nothing\n    max_length = maximum([length(s) for s in strings])\n\
    \    longest_string = nothing\n    for s in strings\n        if length(s) < max_length\n\
    \            if longest_string == nothing \n                longest_string = s\n\
    \            elseif length(s) == max_length\n                if longest_string\
    \ != nothing\n                    if longest_string == s\n                   \
    \     longest_string = nothing\n                    else\n                   \
    \     longest_string = nothing\n                end\n            end\n       \
    \ end\n    end\n    return longest_string\nend\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the longest string in a list of strings. Use longest() from above.",
  "    if length(strings) == 0\n        return nothing\n    else if length(strings)\
    \ == 1\n        return strings[1]\n    else\n        longest = strings[1]\n  \
    \      for s in strings[2:end]\n            if length(longest) < length(s)\n \
    \               longest = s\n        end\n        return longest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"\
    mmmmm\", \"nnnnn\"])", "    longest = nothing\n    for s in strings\n        if\
    \ longest == nothing || length(longest) < length(s)\n            longest = s\n\
    \        end\n    end\n    return longest\nend\n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\nThe shortest solution I came up with is this:\n<code>", "    if length(strings)\
    \ == 0 return nothing\n    max_length = maximum(strings)\n    for s in strings\n\
    \        if length(s) == max_length\n            return s\n    end\n    return\
    \ nothing\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings with the same length. \nThe function\
    \ should return nothing in case the vector is empty.\nThe function should return\
    \ nothing in case the vector has only one element.\nThe function should return\
    \ the first element of the vector in case the vector has more than one element.\n\
    The function should return the longest string in the vector in case the vector\
    \ has more than one element.\nThe function should return the first string in the\
    \ vector in case the vector has more than one element and all of them are of the\
    \ same length.", "    if length(strings) == 0\n        nothing\n    else\n   \
    \     longest = strings[length(strings)-1]\n        for s in strings\n       \
    \     if length(s) == length(longest)\n                longest = s\n         \
    \   else\n                break\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns a vector of the same length with strings replaced by the corresponding\
    \ integers. For example, if the input vector is [\"a\", \"b\", \"c\"] and the\
    \ integer vector is [5, 6, 7], the output should be [\"5\", \"6\", \"7\"]. Make\
    \ sure that the function does not modify the input vectors.", "    if length(strings)\
    \ == 0 \n        return nothing \n    else \n        max_length = length(strings)\
    \ \n        longest_string = None \n        for string in strings \n         \
    \   if length(string) == max_length \n                longest_string = string\
    \ \n            else \n                max_length = max_length \n            \
    \    longest_string = nothing \n        longest_string \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which takes a vector of strings and a vector of integers\
    \ and returns a vector of strings where each string in the input vector is replaced\
    \ by the corresponding element in the integer vector with the same index. For\
    \ example, if the input vector is [\"a\", \"bb\", \"ccc\"] and the integer vector\
    \ is [1, 1, 2], then the output vector should be [\"a\", \"bb\", \"ccc\"].", " \
    \   if length(strings) == 0 return nothing\n    max_length = maximum([length(string)\
    \ for string in strings])\n    longest_string = nothing\n    for string in strings\n\
    \        if length(string) == max_length\n            if longest_string == nothing\
    \ \n                longest_string = string\n            else\n              \
    \  if longest_string.length < string.length\n                    longest_string\
    \ = string\n                end\n            end\n        end\n    end\n    return\
    \ longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"\
    jjjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\",\
    \ \"kkkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"\
    , \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\",\
    \ \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"\
    , \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk", "    longest = nothing\n    longest =\
    \ strings[end-1] if length(strings) > 0 else None\n    for s in strings\n    \
    \    if longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"\
    mmmmm\", \"nnnnn\"])", "    if length(strings) == 0\n        nothing\n    elseif\
    \ length(strings) == 1\n        first(strings)\n    else\n        longest(sort(strings,\
    \ by=length))\n    end\nend", "    if length(strings) == 0 \n        return nothing\
    \ \n    else \n        max_length = length(strings) \n        longest_string =\
    \ None \n        longest_string_length = max_length \n        for string in strings\
    \ \n            if length(string) == max_length \n                longest_string\
    \ = string \n                longest_string_length = length \n            end\
    \ \n        end \n        return longest_string \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of integers\
    \ representing the number of times each string appears in the input vector. \n\
    For example, if the input vector is [\"a\", \"bb\", \"ccc\"], the output vector\
    \ should be [1, 1, 1]. \nThe function should return nothing in case the input\
    \ vector is empty.\nHint: Use a for loop to iterate over the input vector.", " \
    \   if length(strings) == 0 \n        nothing \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for s in strings \n            if length(s) == length(longest) \n\
    \                longest := s \n            else \n                break \n  \
    \      longest \n    end\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings with the same\
    \ length as the input vector, except that if the input vector is empty the output\
    \ vector is also empty.", "    longest = nothing\n    longest = strings[end-1]\
    \ if end>0 else None\n    for s in strings\n        if longest==nothing || length(longest)>length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nThe function longest is now defined. Let's test it by running the cell\
    \ below.", "    longest = nothing\n    for string in strings\n        if longest\
    \ == nothing || length(longest) > length(string)\n            longest = string\n\
    \        end\n    end\n    return longest\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string. \nWrite a function that takes a string and returns the number of words\
    \ in that string. \nWrite a function that takes a string and returns the number\
    \ of sentences in that string. \nWrite a function that takes a string and returns\
    \ the number of characters in that string divided by the number of words in that\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in that string divided by the number of sentences in that string. \nWrite a\
    \ function that takes a string and returns the number of characters in that string\
    \ divided by the number of words in that string divided by the number of sentences\
    \ in that string. \nWrite a function that takes a string and returns the number\
    \ of characters in that string divided by the number of words in that string divided\
    \ by the number of sentences in that string divided by the number of characters\
    \ in that string divided by the number of words in that string divided by the\
    \ number of sentences in that string. \nWrite a function that takes a string and\
    \ returns the number of characters in that string divided by the number of words\
    \ in that string divided by the number of sentences in that string divided by\
    \ the number of characters in that string divided by the number of words in that\
    \ string divided by the number of sentences in that string divided by the number\
    \ of characters in that string divided by the number of words in that string divided\
    \ by the number of sentences in that string. \nWrite a function that takes a string\
    \ and returns the number of characters in that string divided by the number of\
    \ words in that string divided by the number of sentences in that string divided\
    \ by the number of characters in that string divided by the number of words in\
    \ that string divided by the number of sentences in that string divided by the\
    \ number of characters in that string divided by the number of words in that string\
    \ divided by the number of sentences in that string divided by the number of characters\
    \ in that string divided by the number of words in that string divided by the\
    \ number of sentences in that string. \nWrite a function that takes a string and\
    \ returns the number of characters in that string divided by the number of words\
    \ in that string divided by the number of sentences in that string divided by\
    \ the number of characters in that string divided by the number of words in that\
    \ string divided by the number of sentences in that string divided by the number\
    \ of characters in that string divided by the number of words in that string divided\
    \ by the number of sentences in that string divided by the number of characters\
    \ in that string divided by the number of words in that string divided by the\
    \ number of sentences in that string divided by the number of characters in that\
    \ string divided by the number of words in that string divided by the number of\
    \ sentences in that string. \nWrite a function that takes a string and returns\
    \ the number of characters in that string divided by the number of words in that\
    \ string divided by the number of sentences in that string divided by the number\
    \ of characters in that ", "    if length(strings) == 0 \n        return nothing\
    \ \n    else \n        longest_len = length(strings[0]) \n        for s in strings\
    \ \n            if length(s) > longest_len \n                longest_len = length(s)\
    \ \n            end \n        end \n        return strings[longest_len] \n   \
    \ end \nend ", "    if length(strings) == 0 return nothing\n    longest_string\
    \ <- strings[[1]]\n    for string in strings[2:end]\n        if length(longest_string)\
    \ > length(string)\n            longest_string <- string\n        end\n    end\n\
    \    return longest_string\nend\n</cell>\n<text>\nExercise 7: Write a function\
    \ that returns the longest string in a list of strings. Use this function to find\
    \ the longest string in a list of strings.", "    if length(strings) == 0 return\
    \ nothing\n    max_length = maximum(strings)\n    longest_string = filter(x ->\
    \ x == max_length, strings)\n    if length(longest_string) == 0 return nothing\n\
    \    return longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of booleans indicating whether each string starts\
    \ with \"a\".", "    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum([length(s) for s in strings])\n    longest_string = nothing\n    for\
    \ s in strings\n        if length(s) == max_length\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend", "    if length(strings)\
    \ == 0\n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for string in strings\n            if length(longest) < length(string)\n\
    \                longest = string\n            end\n        end\n        longest\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "  \
    \  if length(strings) == 0 \n        return nothing \n    else \n        longest\
    \ := strings[length(strings)-1] \n        for s in strings \n            if length(s)\
    \ > length(longest) \n                longest := s \n        return longest \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ string in a list of strings. Use this function to find the longest string in\
    \ a list of strings.", "    longest = nothing\n    for s in strings\n        if\
    \ longest == nothing || length(longest) > length(s)\n            longest = s\n\
    \        end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a vector of strings as inputs and returns\
    \ a vector of strings as output. The function should return the same vector if\
    \ both inputs are empty. Otherwise, the function should return the longest string\
    \ from both inputs. Return nothing if the inputs are empty.", "    if length(strings)\
    \ == 0 return nothing\n    max_length = maximum([length(s) for s in strings])\n\
    \    longest_string = nothing\n    for s in strings \n        if length(s) ==\
    \ max_length \n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of strings\
    \ and returns a vector of booleans indicating whether each string is a palindrome\
    \ or not. \nThe function should return nothing in case the vector is empty.\n\
    The function should return an array of booleans indicating whether each string\
    \ is a palindrome or not.\nThe function should return an array of booleans indicating\
    \ whether each string is a palindrome or not.\nThe function should return an array\
    \ of booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe ", "  \
    \  longest = nothing\n    if !isempty(strings)\n        longest = strings[length(strings)\
    \ == maximum(length(strings))]\n    end\n    return longest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function which takes a vector of strings and a vector of integers\
    \ and returns a vector of strings where each string in the original vector is\
    \ replaced by the corresponding integer in the second vector. For example, if\
    \ the first vector is [\"a\", \"bb\", \"ccc\"] and the second vector is [3, 1,\
    \ 2], the function should return [\"a\", \"bb\", \"ccc\"]. The function should\
    \ also return nothing in case the two vectors are of different lengths.", "  \
    \  if length(strings) == 0 \n        nothing\n    elseif length(strings) == 1\
    \ \n        first(strings)\n    else\n        longest(sort(strings, by=length))\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of the same length with all strings replaced\
    \ by \"nothing\".\n    >>> replaced([\"a\", \"b\", \"c\"])\n    [\"nothing\",\
    \ \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"ccc\"])\n    [\"\
    nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"\
    d\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n    [\"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"\
    nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"f\", \"g\", \"h\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n    [\"nothing\",\
    \ \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n    [\"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\"])\n    [\"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n    [\"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\"]\n    >>> replaced([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n    [\"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing", "    if length(strings) == 0 \n      \
    \  return nothing \n    else \n        max_length = length(strings) \n       \
    \ longest_string = strings[max_length] \n        for s in strings[2:] \n     \
    \       if length(s) == max_length \n                longest_string = s \n   \
    \         end \n        end \n        return longest_string \n    end \nend \n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of strings where each string is the concatenation of all the\
    \ strings in the original vector except the one that comes first in the original\
    \ vector. For example, if the input vector is [\"a\", \"b\", \"c\", \"d\"], then\
    \ the output vector should be [\"a\", \"b\", \"c\", \"d\"]. The function should\
    \ work for empty vectors as well.", "    if length(strings) == 0 return nothing\n\
    \    max_length = maximum(strings)\n    longest_string = filter(x -> x == max_length,\
    \ strings)\n    if length(longest_string) == 0 return nothing\n    return longest_string[1]\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of booleans indicating whether each string is a palindrome\
    \ or not.", "    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = length(strings) \n        longest = strings[1] \n      \
    \  for s in strings[2:] \n            if length(s) == max_length \n          \
    \      longest = s \n            end \n        end \n        return longest \n\
    \    end \nend \n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\"])\n\
    </cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb", "    if length(strings) == 0 \n        return nothing \n\
    \    else \n        return maximum(strings) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings where each string is the\
    \ concatenation of all the strings in the input vector except the one that comes\
    \ first.\nFor example, if the input vector is [\"a\", \"b\", \"c\", \"d\"], the\
    \ output vector should be [\"ab\", \"cd\"].", "    longest = nothing\n    if !isempty(strings)\n\
    \        longest = strings[end-1]\n        for s in strings[2:end]\n         \
    \   if length(longest) < length(s)\n                longest = s\n            end\n\
    \        end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the shortest string in a list of strings. Return nothing in case\
    \ the list is empty.\n    >>> shortest([nothing])\n    nothing\n    >>> shortest([])\n\
    \    nothing\n    >>> shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n    \"\"\"", "    longest = nothing\n    for\
    \ s in strings\n        if longest == nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function which takes a string and returns the number\
    \ of occurrences of the substring \"ab\" in the string. \nWrite a function which\
    \ takes a string and returns the number of occurrences of the substring \"ab\"\
    \ in the string and also the number of occurrences of the substring \"ba\" in\
    \ the string. \nWrite a function which takes a string and returns the number of\
    \ occurrences of the substring \"ab\" in the string and also the number of occurrences\
    \ of the substring \"ba\" in the string and also the number of occurrences of\
    \ the substring \"bb\" in the string. \nWrite a function which takes a string\
    \ and returns the number of occurrences of the substring \"ab\" in the string\
    \ and also the number of occurrences of the substring \"ba\" in the string and\
    \ also the number of occurrences of the substring \"bb\" in the string and also\
    \ the number of occurrences of the substring \"cc\" in the string. \nWrite a function\
    \ which takes a string and returns the number of occurrences of the substring\
    \ \"ab\" in the string and also the number of occurrences of the substring \"\
    ba\" in the string and also the number of occurrences of the substring \"bb\"\
    \ in the string and also the number of occurrences of the substring \"cc\" in\
    \ the string and also the number of occurrences of the substring \"dd\" in the\
    \ string. \nWrite a function which takes a string and returns the number of occurrences\
    \ of the substring \"ab\" in the string and also the number of occurrences of\
    \ the substring \"ba\" in the string and also the number of occurrences of the\
    \ substring \"bb\" in the string and also the number of occurrences of the substring\
    \ \"cc\" in the string and also the number of occurrences of the substring \"\
    dd\" in the string and also the number of occurrences of the substring \"ee\"\
    \ in the string. \nWrite a function which takes a string and returns the number\
    \ of occurrences of the substring \"ab\" in the string and also the number of\
    \ occurrences of the substring \"ba\" in the string and also the number of occurrences\
    \ of the substring \"bb\" in the string and also the number of occurrences of\
    \ the substring \"cc\" in the string and also the number of occurrences of the\
    \ substring \"dd\" in the string and also the number of occurrences of the substring\
    \ \"ee\" in the string and also the number of occurrences of the substring \"\
    ff\" in the string. \nWrite a function which takes a string and returns the number\
    \ of occurrences of the substring \"ab\" in the string and also the number of\
    \ occurrences of the substring \"ba\" in the string and also the number of occurrences\
    \ of the substring \"bb\" in the string and also the number of occurrences of\
    \ the substring \"cc\" in the string and also the number of occurrences of the\
    \ substring \"dd\" in the string and also the number of occurrences of the substring\
    \ \"ee\" in the string and also the number of occurrences of the ", "    if length(strings)\
    \ == 0\n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for s in strings\n            if length(s) > length(longest)\n      \
    \          longest = s\n            end\n        end\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,string |>\nI wrote a package for this. It can\
    \ handle multiple strings of the same length and also handles empty strings. \n\
    <code>\nusing Strings", "    longest = nothing\n    for s in strings\n       \
    \ if longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 \n        return nothing \n    else \n    \
    \    return maximum(strings) \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function which takes\
    \ a vector of strings and returns the longest string in that vector. Return nothing\
    \ if the vector is empty.", "    if length(strings) == 0 \n        return nothing\
    \ \n    else \n        longest := strings[length(strings)-1] \n        for i in\
    \ length(strings)-2 \n            if strings[i] == longest \n                longest\
    \ := strings[i] \n            else \n                break \n        return longest\
    \ \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of booleans indicating whether each string is a palindrome\
    \ or not.", "    if length(strings) == 0 \n        return nothing\n    else \n\
    \        return max(strings, key=length)\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nI wrote a function that does exactly what you want, but in a different\
    \ way. \n<code>", "    longest = nothing\n    \n    for string in strings\n  \
    \      if longest == nothing\n            longest = string\n        elseif length(longest)\
    \ < length(string)\n            longest = string\n        end\n    end\n    \n\
    \    return longest\nend", "    if length(strings)==0 return nothing\n    max_length\
    \ = maximum([length(s) for s in strings])\n    longest_strings = [s for s in strings\
    \ if length(s) == max_length]\n    if length(longest_strings) > 0 return longest_strings[end]\n\
    \    else return nothing\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times it appears in the string.\n \
    \   >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"abracadabra\"\
    )\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    6\n    >>> count_times(\"\
    abracadabra\")\n    6\n    >>> count_times(\"abracadabra\")\n    ", "    if length(strings)\
    \ == 0 \n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for string in strings\n            if length(string) == length(longest)\n\
    \                longest = string\n            else\n                break\n \
    \       end\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `longest`\
    \ function can be simplified to `longest = strings[length(strings)==1 ? 1 : length(strings)]`.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe shortest and most efficient solution I found is\
    \ this:\n<code>", "    longest = nothing\n    longest = strings[end-1] if end>0\
    \ \n    if longest == nothing\n        longest = strings[end]\n    end\nend\n\
    </cell>\n<text>\nExercise 9: longest\nWrite a function that returns the longest\
    \ string in a list of strings.\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>>\
    \ longest([\"a\", \"bb\", \"ccc\"])\n\"ccc\"\n>>> longest([])\nnothing\n>>> longest([\"\
    a\", \"b\", \"c\", \"d\"])\n\"d\"\n>>> longest([\"a\", \"b\", \"c\", \"d\", \"\
    e\"])\n\"d\"\n>>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\"e\"\n\
    >>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n\"f\"\n>>> longest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n\"g\"\n>>> longest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n\"h\"\n>>> longest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n\"h\"\n\
    >>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\"])\n\"h\"\n>>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n\"h\"\n>>> longest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n\"\
    h\"\n>>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\"])\n\"h\"\n>>> longest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n\"h\"\n>>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"])\n\"h\"\n>>>\
    \ longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n\"h\"\n>>> longest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n\"h\"\n>>> longest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"])\n\"h\"\n>>> longest([\"a\", \"b\"\
    , \"c\", \"d\", \"", "    if length(strings) == 0 \n        return nothing \n\
    \    else \n        max_length = maximum([length(string) for string in strings])\n\
    \        longest_string = nothing\n        for string in strings \n          \
    \  if length(string) == max_length \n                longest_string = string \n\
    \            else \n                break \n        return longest_string \nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    , \"kkk\", \"lll\", \"mmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\", \"", "    if length(strings) == 0 \n        return\
    \ nothing \n    else \n        longest = strings[length(strings)-1] \n       \
    \ for s in strings \n            if length(s) == length(longest) \n          \
    \      longest = s \n            end \n        end \n        return longest \n\
    \    end \nend \n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ longest string in a list of strings. Use this function to find the longest string\
    \ in a list of strings.", "    longest = nothing\n    for s in strings\n     \
    \   if longest == nothing || length(longest) > length(s)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and returns a vector of the\
    \ same length with all strings replaced by \"nothing\".\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case ", "    longest\
    \ = nothing\n    for s in strings\n        if longest == nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 \n        return nothing \n    else \n    \
    \    max_length = length(strings) \n        longest_string = None \n        for\
    \ string in strings \n            if length(string) == max_length \n         \
    \       longest_string = string \n            else \n                max_length\
    \ = max_length \n                longest_string = longest_string \n        longest_string\
    \ \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\n</cell>\n<text>\nExercise: Write a function that takes a vector of strings\
    \ and returns the longest string in that vector. \n    Use longest() from above.",
  "    if length(strings) == 0 \n        return nothing \n    else \n        max_length\
    \ = length(strings) \n        longest = strings[max_length] \n        for s in\
    \ strings[2:] \n            if length(s) == max_length \n                longest\
    \ = s \n            end \n        end \n        return longest \n    end \nend\
    \ \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the longest substring of a given\
    \ string.", "    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum([length(s) for s in strings]) \n        longest_string\
    \ = None \n        for s in strings \n            if length(s) == max_length \n\
    \                if longest_string == None \n                    longest_string\
    \ = s \n                elseif length(longest_string) < length(s) \n         \
    \           longest_string = s \n        longest_string \n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function which takes a vector of strings and returns\
    \ a vector of strings of the same length with all strings replaced by \"nothing\"\
    .\n    >>> replace_all([\"a\", \"b\", \"c\"], nothing)\n    [\"nothing\", \"nothing\"\
    , \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n    [\"\
    nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"\
    ], \"nothing\")\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n\
    \    >>> replace_all([\"a\", \"bb\", \"ccc\"], \"nothing\")\n    [\"nothing\"\
    , \"nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n\
    \    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\"\
    , \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n\
    \    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n    [\"nothing\", \"\
    nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n\
    \    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\"\
    , \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n\
    \    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n    [\"nothing\", \"\
    nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n\
    \    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\"\
    , \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"\
    a\", \"bb\", \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n\
    \    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n    [\"nothing\", \"\
    nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\", \"ccc\"], nothing)\n\
    \    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all([\"a\", \"bb\"\
    , \"ccc\"], nothing)\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replace_all(",
  "    if length(strings) == 0 \n        return nothing \n    else \n        return\
    \ maximum(strings) \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings with the first letter of\
    \ each string capitalized.", "    longest = nothing\n    for s in strings\n  \
    \      if longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function which takes a vector of strings and returns\
    \ a vector of the same length with all strings replaced by \"nothing\".\n    >>>\
    \ replaced([\"a\", \"bb\", \"ccc\"])\n    [\"nothing\", \"nothing\", \"nothing\"\
    ]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\"])\n    [\"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    ]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n   \
    \ [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    ]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    ])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"\
    fff\", \"ggg\", \"hhh\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n  \
    \  [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"\
    ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n    [\"\
    nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"\
    nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"\
    bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\",\
    \ \"kkk\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    ]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\"])\n    [\"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"\
    ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"\
    , \"ll", "    if length(strings) == 0 return nothing\n    max_length = maximum(strings)\n\
    \    longest_string = filter(x -> x == max_length, strings)\n    if length(longest_string)\
    \ == 0 return nothing\n    else return longest_string[1]\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=julia,string |>\nThe shortest and most efficient way\
    \ is to use findfirst:\n<code>\njulia> findfirst(x->length(x)==3, [\"a\", \"bb\"\
    , \"ccc\"])\n\"ccc\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n\
    I wrote a package called StringTools that has a function called longest.\n<code>\n\
    julia> using StringTools", "    if length(strings) == 0 return nothing\n    longest_string\
    \ = strings[length(strings)-1]\n    for string in strings\n        if string.length()\
    \ > longest_string.length()\n            longest_string = string\n        end\n\
    \    end\n    return longest_string\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns the longest string in that vector.\
    \ Return nothing in case the vector is empty.\nWrite a function that takes a vector\
    \ of strings and returns a vector of the same length with all strings replaced\
    \ by the longest string in that vector. Return nothing in case the vector is empty.\n\
    Write a function that takes a vector of strings and returns a vector of the same\
    \ length with all strings replaced by the longest string in that vector. Return\
    \ nothing in case the vector is empty.\nWrite a function that takes a vector of\
    \ strings and returns a vector of the same length with all strings replaced by\
    \ the longest string in that vector. Return nothing in case the vector is empty.\n\
    Write a function that takes a vector of strings and returns a vector of the same\
    \ length with all strings replaced by the longest string in that vector. Return\
    \ nothing in case the vector is empty.\nWrite a function that takes a vector of\
    \ strings and returns a vector of the same length with all strings replaced by\
    \ the longest string in that vector. Return nothing in case the vector is empty.\n\
    Write a function that takes a vector of strings and returns a vector of the same\
    \ length with all strings replaced by the longest string in that vector. Return\
    \ nothing in case the vector is empty.\nWrite a function that takes a vector of\
    \ strings and returns a vector of the same length with all strings replaced by\
    \ the longest string in that vector. Return nothing in case the vector is empty.\n\
    Write a function that takes a vector of strings and returns a vector of the same\
    \ length with all strings replaced by the longest string in that vector. Return\
    \ nothing in case the vector is empty.\nWrite a function that takes a vector of\
    \ strings and returns a vector of the same length with all strings replaced by\
    \ the longest string in that vector. Return nothing in case the vector is empty.\n\
    Write a function that takes a vector of strings and returns a vector of the same\
    \ length with all strings replaced by the longest string in that vector. Return\
    \ nothing in case the vector is empty.\nWrite a function that takes a vector of\
    \ strings and returns a vector of the same length with all strings replaced by\
    \ the longest string in that vector. Return nothing in case the vector is empty.\n\
    Write a function that takes a vector of strings and returns a vector of the same\
    \ length with all strings replaced by the longest string in that vector. Return\
    \ nothing in case the vector is empty.\nWrite a function that takes a vector of\
    \ strings and returns a vector of the same length with all strings replaced by\
    \ the longest string in that vector. Return ", "    if length(strings) == 0 \n\
    \        return nothing \n    else \n        max_length = length(strings) \n \
    \       longest_string = strings[max_length] \n        for string in strings \n\
    \            if length(string) == max_length \n                longest_string\
    \ = string \n            end \n        end \n        return longest_string \n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of booleans indicating whether each string is a palindrome\
    \ or not. \nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return ", "    longest = nothing\n    if !isempty(strings)\n\
    \        longest = strings[end-1]\n        for s in strings\n            if length(s)\
    \ < length(longest)\n                longest = s\n            end\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wrote\
    \ a function that does this for you:\n<code>", "    if length(strings) == 0 \n\
    \        return nothing \n    else \n        longest := strings[length(strings)-1]\
    \ \n        for string in strings \n            if length(string) > length(longest)\
    \ \n                longest := string \n        return longest \nend \n</cell>\n\
    <text>\nExercise 7: Write a function that takes a vector of strings and returns\
    \ a vector of strings with the first letter of each string capitalized.\n    >>>\
    \ capitalize([\"a\", \"b\", \"c\"])\n    [\"A\", \"B\", \"C\"]\n    >>> capitalize([\"\
    a\", \"bb\", \"ccc\"])\n    [\"A\", \"Bb\", \"Ccc\"]\n    \"\"\"", "    if length(strings)\
    \ == 0 return nothing\n    max_length = maximum(strings)\n    longest_string =\
    \ filter(x -> x == max_length, strings)\n    if length(longest_string) == 0 return\
    \ nothing\n    longest_string = longest_string[1]\n    return longest_string\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string is the concatenation of all the strings\
    \ in the input vector. \nFor example, [\"a\", \"bb\", \"ccc\"] becomes [\"a\"\
    , \"bb\", \"ccc\", \"abb\", \"bcc\", \"ccc\"]. \nThe function should work for\
    \ an empty input vector. \nThe function should work for vectors of strings of\
    \ different lengths. \nThe function should work for vectors of strings of different\
    \ lengths. \nThe function should work for vectors of strings of different lengths.\
    \ \nThe function should work for vectors of strings of different lengths. \nThe\
    \ function should work for vectors of strings of different lengths. \nThe function\
    \ should work for vectors of strings of different lengths. \nThe function should\
    \ work for vectors of strings of different lengths. \nThe function should work\
    \ for vectors of strings of different lengths. \nThe function should work for\
    \ vectors of strings of different lengths. \nThe function should work for vectors\
    \ of strings of different lengths. \nThe function should work for vectors of strings\
    \ of different lengths. \nThe function should work for vectors of strings of different\
    \ lengths. \nThe function should work for vectors of strings of different lengths.\
    \ \nThe function should work for vectors of strings of different lengths. \nThe\
    \ function should work for vectors of strings of different lengths. \nThe function\
    \ should work for vectors of strings of different lengths. \nThe function should\
    \ work for vectors of strings of different lengths. \nThe function should work\
    \ for vectors of strings of different lengths. \nThe function should work for\
    \ vectors of strings of different lengths. \nThe function should work for vectors\
    \ of strings of different lengths. \nThe function should work for vectors of strings\
    \ of different lengths. \nThe function should work for vectors of strings of different\
    \ lengths. \nThe function should work for vectors of strings of different lengths.\
    \ \nThe function should work for vectors of strings of different lengths. \nThe\
    \ function should work for vectors of strings of different lengths. \nThe function\
    \ should work for vectors of strings of different lengths. \nThe function should\
    \ work for vectors of strings of different lengths. \nThe function should work\
    \ for vectors of strings of different lengths. \nThe function should work for\
    \ vectors of strings of different lengths. \nThe function should work for vectors\
    \ of strings of different lengths. \nThe function should work for vectors of strings\
    \ of different lengths. \n", "    if length(strings) == 0 \n        return nothing\
    \ \n    else \n        return maximum(strings) \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string is the concatenation of all the strings in the original vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\"], the output vector\
    \ should be [\"a\", \"ab\", \"abc\"]. Do not use any built-in function or any\
    \ loops.", "    longest = nothing\n    if length(strings) == 0\n        return\
    \ nothing\n    longest = strings[1]\n    for s in strings[2:end]\n        if length(s)\
    \ > length(longest)\n            longest = s\n        end\n    end\n    return\
    \ longest\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    longest\
    \ = nothing\n    longest = strings[end-1] if end-1 >= 0 && length(longest) ==\
    \ 0 \n    for s in strings\n        if length(longest) > length(s) \n        \
    \    longest = s\n        end\n    end\n    longest\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if length(strings) == 0 \n    \
    \    return nothing \n    else \n        longest_length = length(strings) \n \
    \       longest_string = strings[longest_length] \n        for string in strings\
    \ \n            if length(string) == longest_length \n                return string\
    \ \n            else \n                longest_length = length(string) \n    \
    \            longest_string = string \n        endfor \n        return longest_string\
    \ \n    endfor \nendfunction \n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nI like using reduce to solve this problem:\n<code>", "    longest = nothing\n\
    \    for s in strings\n        if longest == nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns a vector of the integers multiplied by the strings. If the input\
    \ vectors are empty or contain no strings, return an empty vector.", "    if length(strings)\
    \ == 0\n        nothing\n    else\n        longest = strings[end-1]\n        for\
    \ s in strings[2:end]\n            if length(longest) > length(s)\n          \
    \      longest = s\n            end\n        end\n        longest\n    end\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nHere's a solution using\
    \ regular expressions:\n<code>\njulia> function longest(s::Vector{String})\n \
    \          if length(s) == 0\n               nothing\n           else\n      \
    \         m = match(r\"(\\w+)\", join(s))\n               if m != nothing\n  \
    \                 longest = m.captures[1]\n                   for s in s[2:end]\n\
    \                       if length(longest) > length(s)\n                     \
    \      longest = s\n                       end\n                   end\n     \
    \              longest\n               end\n           end\n       end\nlongest\
    \ (generic function with 1 method)", "    if length(strings) == 0 return nothing\n\
    \    max_length = maximum(strings)\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = if max_length == nothing\
    \ then max_length else max_length.length\n    max_length = ", "    longest = nothing\n\
    \    longest = strings[1] if length(strings) == 1 else None\n    for s in strings[2:end]\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0\
    \ |>\n<code>", "    longest = nothing\n    for string in strings\n        if longest\
    \ == nothing\n            longest = string\n        elseif length(longest) > length(string)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string is a palindrome or not.\
    \ Return nothing in case the input vector is empty.\nHint: use the function length\
    \ to get the length of a string.", "    if length(strings) == 0 \n        return\
    \ nothing \n    else \n        max_length = length(strings) \n        longest_string\
    \ = strings[max_length] \n        for string in strings \n            if length(string)\
    \ == max_length \n                longest_string = string \n            end \n\
    \        end \n        return longest_string \n    end \nend \n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string. \nWrite a function that takes a string and\
    \ returns the number of characters in the string divided by the number of words\
    \ in the string.", "    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum([length(string) for string in strings])\n    longest_string = nothing\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    if longest_string == nothing\n                longest_string = string\n \
    \           else\n                if longest_string != string\n              \
    \      longest_string = nothing\n                end\n            end\n      \
    \  else\n            if longest_string != nothing\n                longest_string\
    \ = nothing\n            end\n        end\n    end\n    return longest_string\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function which takes a vector of strings and returns\
    \ a vector of strings with the same length. \nThe function should return nothing\
    \ in case the vector is empty.\nThe function should return the first string in\
    \ the vector in case the vector has multiple strings of the same length.", " \
    \   if length(strings)==0 return nothing\n    max_length = length(strings)\n \
    \   longest_string = strings[max_length]\n    for string in strings\n        if\
    \ length(string) == max_length\n            return longest_string\n        end\n\
    \    end\n    return longest_string\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    <code>", "    if length(strings) == 0 \n        return nothing \n    else \n \
    \       max_length = maximum([length(s) for s in strings]) \n        for s in\
    \ strings \n            if length(s) == max_length \n                return s\
    \ \n        return nothing \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of the same length with all strings\
    \ replaced by \"nothing\".", "    longest = nothing\n    for string in strings\n\
    \        if longest == nothing || string.length() > longest.length()\n       \
    \     longest = string\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings with the same length as the original vector, but with all the strings\
    \ concatenated together. For example, [\"a\", \"bb\", \"ccc\"] -> [\"aa\", \"\
    bb\", \"ccc\"]", "    if length(strings) == 0 \n        return nothing\n    else\
    \ \n        return maximum(strings)\nend\n</cell>\n<text>\nExercise 10\nWrite\
    \ a function that takes a vector of strings and returns a vector of booleans indicating\
    \ whether each string is a palindrome or not. For example,", "    longest = nothing\n\
    \    for s in strings\n        if longest == nothing\n            longest = s\n\
    \        elseif length(longest) < length(s)\n            longest = s\n       \
    \ end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nI came up with this solution:\n<code>", "    if length(strings) == 0\n \
    \       nothing\n    else\n        longest = strings[length(strings)-1]\n    \
    \    for s in strings\n            if length(s) > length(longest)\n          \
    \      longest = s\n        end\n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThanks, this works great. I'm still trying to wrap my head around Julia's\
    \ type system. Why does this work? Why does `longest` return a `Union{String,\
    \ Nothing}` and not a `String`?\n<|/ c |>\n<| c |>\nBecause `longest` returns\
    \ a `String` when `length(strings) == 0`, otherwise it returns a `String` of the\
    \ longest string. `longest` returns a `String` because `longest = strings[length(strings)-1]`\
    \ assigns the string at the `length(strings)-1`th position of `strings` to `longest`.\n\
    <|/ c |>\n<| c |>\nOkay, so `longest` returns a `String` because `longest = strings[length(strings)-1]`\
    \ assigns the string at the `length(strings)-1`th position of `strings` to `longest`.\
    \ But why does `longest` return a `String` and not a `Union{String, Nothing}`?\n\
    <|/ c |>\n<| c |>\nBecause `longest = strings[length(strings)-1]` assigns the\
    \ string at the `length(strings)-1`th position of `strings` to `longest`. `longest`\
    \ returns a `String` because `longest = strings[length(strings)-1]` assigns the\
    \ string at the `length(strings)-1`th position of `strings` to `longest`. `longest`\
    \ returns a `String` because `longest = strings[length(strings)-1]` assigns the\
    \ string at the `length(strings)-1`th position of `strings` to `longest`. `longest`\
    \ returns a `String` because `longest = strings[length(strings)-1]` assigns the\
    \ string at the `length(strings)-1`th position of `strings` to `longest`. `longest`\
    \ returns a `String` because `longest = strings[length(strings)-1]` assigns the\
    \ string at the `length(strings)-1`th position of `strings` to `longest`. `longest`\
    \ returns a `String` because `longest = strings[length(strings)-1]` assigns the\
    \ string at the `length(strings)-1`th position of `strings` to `longest`. `longest`\
    \ returns a `String` because `longest = strings[length(strings)-1]` assigns the\
    \ string at the `length(strings)-1`th position of `strings` to `longest`. `longest` ",
  "    longest = nothing\n    if length(strings) == 0 \n        return nothing\n \
    \   else \n        longest = strings[length(strings)-1]\n        for s in strings[2:length(strings)-1]\n\
    \            if length(longest) > length(s) \n                longest = s\n  \
    \          end\n        end\n    end\n    return longest\nend\n</code>\n<|/ a\
    \ tags=julia,string |>\n<| a tags=julia,string |>\nThe shortest way is to use\
    \ join:\n<code>\njulia> join([\"a\", \"b\", \"c\"])\n\"abc\"\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 |>\nThe shortest way is to use join:\n<code>\njulia> join([\"\
    a\", \"b\", \"c\"])\n\"abc\"\n</code>\n<|/ a tags=julia,string |>\n<| a |>\n<code>\n\
    julia> function longest(arr::Vector{String})\n           return arr[maximum(map(length,\
    \ arr))]\n       end\nlongest (generic function with 1 method)", "    if length(strings)\
    \ == 0 \n        nothing \n    else \n        longest = strings[length(strings)-1]\n\
    \        for s in strings[2:length(strings)-1] \n            if length(longest)\
    \ < length(s) \n                longest = s\n            end\n        end\n  \
    \      longest\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ takes a vector of strings and returns the longest string in that vector. Return\
    \ nothing if the vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"", "    if length(strings) == 0 \n        nothing \n   \
    \ else \n        longest = strings[length(strings)-1]\n        for s in strings\
    \ \n            if length(s) == length(longest) \n                longest := s\
    \ \n            else \n                break\n        end\n        longest\n \
    \   end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings with the first letter of each string\
    \ capitalized.", "    if length(strings) == 0 \n        return nothing \n    else\
    \ \n        max_length = length(strings) \n        longest = strings[1] \n   \
    \     for s in strings[2:] \n            if length(s) == max_length \n       \
    \         longest = s \n            else \n                max_length = length(s)\
    \ \n                longest = s \n        \n        return longest \nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function which takes a vector of strings and returns\
    \ a vector of strings where each string is the concatenation of all the strings\
    \ in the original vector, except the longest one. For example, if the input vector\
    \ is [\"a\", \"b\", \"c\", \"d\"], then the output vector should be [\"a\", \"\
    b\", \"c\", \"d\"]. Write a test for this function.", "    if length(strings)\
    \ == 0 \n        nothing \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for string in strings \n            if length(string) > length(longest)\
    \ \n                longest = string \n        endfor \n    endif \n    return\
    \ longest \nendfunction \n</cell>\n<code language=julia-1.4>\nlongest([\"a\",\
    \ \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of integers representing the number\
    \ of times each string appears in the vector.\nFor example, if the input vector\
    \ is [\"a\", \"bb\", \"ccc\"], the output should be [1, 1, 1].\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the strings are not all lowercase letters.\nThe function should\
    \ return nothing in case the strings are not all lowercase letters.\nThe function\
    \ should return nothing in case the strings are not all lowercase letters.\nThe\
    \ function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return nothing in case the strings are not all lowercase letters.\n\
    The function should return ", "    if length(strings) == 0\n        return nothing\n\
    \    max_length = maximum(strings)\n    max_length_idx = argmax(strings)\n   \
    \ if max_length_idx == length(strings)\n        return strings[max_length_idx]\n\
    \    else\n        return strings[max_length_idx]\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest substring of a given string.\
    \ \nThe function should take as input a list of strings and return the longest\
    \ substring in that list.\nThe function should return nothing in case the list\
    \ is empty.\nThe function should return nothing in case the list contains only\
    \ empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains\
    \ only empty strings.\nThe function should return nothing in case the list contains ",
  "    longest = nothing\n    if !isempty(strings)\n        longest = strings[end-1]\n\
    \        for s in strings\n            if length(s) >= length(longest)\n     \
    \           longest = s\n            end\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\nHere is a solution\
    \ using Julia's built-in function findfirst:\n<code>", "    if length(strings)\
    \ == 0 \n        return nothing \n    else \n        max_length = length(strings)\
    \ \n        longest_string = strings[max_length] \n        for string in strings\
    \ \n            if length(string) == max_length \n                longest_string\
    \ = string \n            end \n        end \n        return longest_string \n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and returns the longest string in that vector. \nWrite a function that\
    \ takes a vector of strings and returns the shortest string in that vector. \n\
    Write a function that takes a vector of strings and returns the average string\
    \ in that vector. \nWrite a function that takes a vector of strings and returns\
    \ the median string in that vector. \nWrite a function that takes a vector of\
    \ strings and returns the mode string in that vector. \nWrite a function that\
    \ takes a vector of strings and returns the most common string in that vector.\
    \ \nWrite a function that takes a vector of strings and returns the least common\
    \ string in that vector. \nWrite a function that takes a vector of strings and\
    \ returns the number of times each string appears in the vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of times each string appears\
    \ in the vector and returns the counts in descending order. \nWrite a function\
    \ that takes a vector of strings and returns the number of times each string appears\
    \ in the vector and returns the counts in ascending order. \nWrite a function\
    \ that takes a vector of strings and returns the number of times each string appears\
    \ in the vector and returns the counts in descending order and returns the counts\
    \ in ascending order. \nWrite a function that takes a vector of strings and returns\
    \ the number of times each string appears in the vector and returns the counts\
    \ in descending order and returns the counts in ascending order and returns the\
    \ counts in descending order. \nWrite a function that takes a vector of strings\
    \ and returns the number of times each string appears in the vector and returns\
    \ the counts in descending order and returns the counts in ascending order and\
    \ returns the counts in ascending order and returns the counts in descending order.\
    \ \nWrite a function that takes a vector of strings and returns the number of\
    \ times each string appears in the vector and returns the counts in descending\
    \ order and returns the counts in ascending order and returns the counts in ascending\
    \ order and returns the counts in descending order and returns the counts in ascending\
    \ order and returns the counts in descending order. \nWrite a function that takes\
    \ a vector of strings and returns the number of times each string appears in the\
    \ vector and returns the counts in descending order and returns the counts in\
    \ ascending order and returns the counts in ascending order and returns the counts\
    \ in descending order and returns the counts in ascending order and returns the\
    \ counts in descending order and returns the counts in ascending order and returns\
    \ the counts in descending order. \nWrite ", "    if length(strings) == 0\n  \
    \      nothing\n    else\n        longest = strings[length(strings)-1]\n     \
    \   for s in strings\n            if length(s) < length(longest)\n           \
    \     longest = s\n            end\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the longest string in a list of strings. Return\
    \ nothing in case the list is empty.", "    if length(strings) == 0 return nothing\n\
    \    max_length = maximum(strings)\n    longest_string = filter(x -> x == max_length,\
    \ strings)\n    if length(longest_string) == 0 return nothing\n    return longest_string[1]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and a vector of integers and returns a vector of the same length with strings\
    \ replaced by the corresponding integers. For example, if the input vector is\
    \ [\"a\", \"b\", \"c\"] and the integer vector is [10, 20, 30], the output should\
    \ be [\"10\", \"20\", \"30\"].", "    if length(strings) == 0\n        nothing\n\
    \    else\n        longest = strings[length(strings)-1]\n        for s in strings\n\
    \            if length(s) == length(longest)\n                longest = s\n  \
    \          else\n                break\n        end\n        longest\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n<code>", "    if length(strings)\
    \ == 0\n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for s in strings\n            if length(s) == length(longest)\n     \
    \           longest = s\n            else\n                break\n        end\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have\
    \ multiple strings of the same length. For example, `longest([\"a\", \"bb\", \"\
    ccc\"])` returns `\"ccc\"`, not `\"a\"`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code by adding an if statement to check if `length(strings)\
    \ == 0` before returning.\n<|/ c |>\n<| a dscore=2 |>\nI like using reduce for\
    \ this:\n<code>\nreduce(max, strings)\n</code>\n<|/ a tags=julia,string |>\n<|\
    \ a dscore=2 |>\n<code>", "    if length(strings) == 0 \n        return nothing\n\
    \    else \n        return maximum(strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ which returns the longest string in a list of strings. Return nothing in case\
    \ the list is empty.\nHint: use longest.", "    if length(strings) == 0 return\
    \ nothing\n    max_length = maximum([length(s) for s in strings])\n    longest_string\
    \ = nothing\n    for s in strings \n        if length(s) == max_length \n    \
    \        longest_string = s\n            break\n    end\n    return longest_string\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the longest string in a list of strings. Use longest()\
    \ from above.", "    if length(strings) == 0 return nothing\n    max_length =\
    \ maximum([length(string) for string in strings])\n    longest_string = nothing\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    if longest_string == nothing \n                longest_string = string\n\
    \            elseif length(string) > length(longest_string)\n                longest_string\
    \ = string\n        end\n    end\n    return longest_string\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=2 |>\n<code>", "    longest = nothing\n    for\
    \ s in strings\n        if longest == nothing || length(longest) > length(s) \n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of words in the string. \nWrite a function that takes a string and\
    \ returns the number of lines in the string. \nWrite a function that takes a string\
    \ and returns the number of characters in the string divided by the number of\
    \ words in the string. \nWrite a function that takes a string and returns the\
    \ number of characters in the string divided by the number of lines in the string.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string divided by the number of words in the string divided by the number\
    \ of lines in the string. \nWrite a function that takes a string and returns the\
    \ number of characters in the string divided by the number of words in the string\
    \ divided by the number of lines in the string divided by the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of lines in the string divided by the number of characters in\
    \ the string divided by the number of words in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of lines in the string\
    \ divided by the number of characters in the string divided by the number of words\
    \ in the string divided by the number of lines in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of lines in the string\
    \ divided by the number of characters in the string divided by the number of words\
    \ in the string divided by the number of lines in the string divided by the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string divided by the number of words in the\
    \ string divided by the number of lines in the string divided by the number of\
    \ characters in the string divided by the number of words in the string divided\
    \ by the number of lines in the string divided by the number of characters in\
    \ the string divided by the number of words in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of lines in the string\
    \ divided by the number of characters in the string divided by the number of words\
    \ in the string divided by the number of lines in the string divided by the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of lines in the string. \nWrite a function that takes a string\
    \ and returns the number of characters in the string divided by the number of\
    \ words in the string divided by the number of lines in the string divided by\
    \ the number of characters in the string divided by the number of words in the\
    \ string divided by the number of lines in the string divided by the number of\
    \ characters in the string divided by the number of words in the string divided\
    \ by the number of lines in the string divided by the number of characters in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ characters in the string divided by the number of words in the string divided\
    \ by the number of lines in the ", "    if length(strings) == 0 \n        nothing\
    \ \n    else \n        longest = strings[length(strings)-1] \n        for string\
    \ in strings \n            if length(longest) < length(string) \n            \
    \    longest = string \n            end \n        end \n    end \n    return longest\
    \ \nend ", "    if length(strings) == 0 \n        return nothing\n    else \n\
    \        return maximum(strings)\nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise: Write a function that returns the longest\
    \ string in any given vector of strings. \n    Use longest() from above.", " \
    \   if length(strings) == 0 \n        nothing \n    else \n        longest = strings[length(strings)-1]\n\
    \        for s in strings \n            if length(s) == length(longest) \n   \
    \             longest := s \n            else \n                break\n      \
    \  end\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector of booleans indicating whether each\
    \ string is a palindrome or not.\nThe function should return nothing in case the\
    \ input vector is empty.\nThe function should return nothing in case the vector\
    \ contains only empty strings.\nThe function should return nothing in case the\
    \ vector contains only empty strings.\nThe function should return nothing in case\
    \ the vector contains only empty strings.\nThe function should return nothing\
    \ in case the vector contains only empty strings.\nThe function should return\
    \ nothing in case the vector contains only empty strings.\nThe function should\
    \ return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return ", "    if length(strings) == 0 return nothing\n    else return\
    \ strings[length(strings)-1]\nend", "    longest = nothing\n    if !isempty(strings)\n\
    \        longest = strings[end-1]\n        for s in strings\n            if length(longest)\
    \ < length(s)\n                longest = s\n            end\n        end\n   \
    \ end\n    return longest\nend", "    longest = nothing\n    for s in strings\n\
    \        if longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns the longest string in that vector. Return nothing if the vector\
    \ is empty.\nHint: use the longest function you wrote in exercise 2.", "    if\
    \ length(strings) == 0\n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for s in strings\n            if length(s) == length(longest)\n     \
    \           longest = s\n            elseif length(s) > length(longest)\n    \
    \            longest = s\n            end\n        end\n    end\n    return longest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of the same length with all strings replaced by \"nothing\"\
    .", "    if length(strings) == 0 return nothing\n    else return strings[argmax(lengths(strings))]\n\
    end\n</cell>\n<text>\nExercise 2: Write a function that returns the longest string\
    \ in a list of strings. If the list is empty, return nothing. Otherwise, return\
    \ the string with the highest length.", "    if length(strings) == 0 \n      \
    \  return nothing \n    else \n        longest = strings[length(strings)-1] \n\
    \        for s in strings \n            if length(s) == length(longest) \n   \
    \             longest = s \n            end \n        end \n        return longest\
    \ \n    end \nend \n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings and returns a vector of booleans indicating whether each string\
    \ is a palindrome or not. \nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the vector contains\
    \ only empty strings.\nThe function should return nothing in case the vector contains\
    \ only strings of length 1.\nThe function should return nothing in case the vector\
    \ contains only strings of length 2 or more.\nThe function should return nothing\
    \ in case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains only strings that are palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are palindromes.\nThe function should return nothing\
    \ in case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains only strings that are not\
    \ palindromes.\nThe function should return nothing in case the vector contains\
    \ only strings that are not palindromes.\nThe function should return nothing in\
    \ case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains only strings that are not\
    \ palindromes.\nThe function should return nothing in case the vector contains\
    \ only strings that are not palindromes.\nThe function should return nothing in\
    \ case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains only strings that are not\
    \ palindromes.\nThe function should return nothing in case the vector contains\
    \ only strings that are not palindromes.\nThe function should return nothing in\
    \ case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains only strings that are not\
    \ palindromes.\nThe function should return nothing in case the vector contains\
    \ only strings that are not palindromes.\nThe function should return nothing in\
    \ case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains only strings that are not\
    \ palindromes.\nThe function should return nothing in case the vector contains\
    \ only strings that are not palindromes.\nThe function should return nothing in\
    \ case the vector contains only ", "    if length(strings) == 0 \n        nothing\
    \ \n    else \n        longest = strings[length(strings)-1]\n        for s in\
    \ strings \n            if length(s) > length(longest) \n                longest\
    \ = s\n        end\n    end\n    return longest\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a vector of strings and returns a vector of strings\
    \ where each string is the concatenation of all the strings in the input vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\"], the output vector\
    \ should be [\"a\", \"b\", \"c\"].", "    if length(strings) == 0 \n        return\
    \ nothing\n    else \n        return maximum(strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the longest string in a list of strings. Return nothing in case\
    \ the list is empty.\nWrite a function that returns the longest string in a list\
    \ of strings. Return nothing in case the list is empty.\nWrite a function that\
    \ returns the longest string in a list of strings. Return nothing in case the\
    \ list is empty.\nWrite a function that returns the longest string in a list of\
    \ strings. Return nothing in case the list is empty.\nWrite a function that returns\
    \ the longest string in a list of strings. Return nothing in case the list is\
    \ empty.\nWrite a function that returns the longest string in a list of strings.\
    \ Return nothing in case the list is empty.\nWrite a function that returns the\
    \ longest string in a list of strings. Return nothing in case the list is empty.\n\
    Write a function that returns the longest string in a list of strings. Return\
    \ nothing in case the list is empty.\nWrite a function that returns the longest\
    \ string in a list of strings. Return nothing in case the list is empty.\nWrite\
    \ a function that returns the longest string in a list of strings. Return nothing\
    \ in case the list is empty.\nWrite a function that returns the longest string\
    \ in a list of strings. Return nothing in case the list is empty.\nWrite a function\
    \ that returns the longest string in a list of strings. Return nothing in case\
    \ the list is empty.\nWrite a function that returns the longest string in a list\
    \ of strings. Return nothing in case the list is empty.\nWrite a function that\
    \ returns the longest string in a list of strings. Return nothing in case the\
    \ list is empty.\nWrite a function that returns the longest string in a list of\
    \ strings. Return nothing in case the list is empty.\nWrite a function that returns\
    \ the longest string in a list of strings. Return nothing in case the list is\
    \ empty.\nWrite a function that returns the longest string in a list of strings.\
    \ Return nothing in case the list is empty.\nWrite a function that returns the\
    \ longest string in a list of strings. Return nothing in case the list is empty.\n\
    Write a function that returns the longest string in a list of strings. Return\
    \ nothing in case the list is empty.\nWrite a function that returns the longest\
    \ string in a list of strings. Return nothing in case the list is empty.\nWrite\
    \ a function that returns the longest string in a list of strings. Return nothing\
    \ in case the list is empty.\nWrite a function that returns the longest string\
    \ in a list of strings. Return nothing in case the list is empty.\nWrite a function\
    \ that returns the longest string in a list of strings. Return nothing in case\
    \ the list is empty.\nWrite a function that returns the longest string in a list\
    \ of strings. Return nothing in case the list is empty.\nWrite a function that\
    \ returns the longest string in a list of strings. Return nothing in case the\
    \ list is empty.\nWrite a function that returns the longest string in a list of\
    \ strings. Return nothing in case ", "    if length(strings) == 0 \n        return\
    \ nothing\n    else \n        return max(strings, key=length)\nend\n</cell>\n\
    <text>\nExercise 7: Write a function that returns the longest string in a list\
    \ of strings. Use longest() from above.", "    if length(strings) == 0 \n    \
    \    nothing\n    elseif length(strings) == 1 \n        strings[1]\n    elseif\
    \ length(strings) > 1 \n        longest(strings[2:end])\n    else\n        nothing\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    if\
    \ length(strings) == 0 \n        return nothing\n    else \n        return max(strings,\
    \ key=length)\nend", "    if length(strings) == 0\n        nothing\n    else\n\
    \        longest = strings[end]\n        for s in strings\n            if length(s)\
    \ < length(longest)\n                longest = s\n        end\n        longest\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings with all words capitalized. Use this\
    \ function to capitalize all the words in a given vector of strings.", "    if\
    \ length(strings) == 0 return nothing\n    max_length = maximum([length(s) for\
    \ s in strings])\n    longest_string = nothing\n    for s in strings \n      \
    \  if length(s) == max_length \n            longest_string = s\n            break\n\
    \    end\n    return longest_string\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ is the concatenation of the first character of each string in the input vector.\
    \ For example, [\"a\", \"bb\", \"ccc\"] -> [\"a\", \"ab\", \"abc\"]", "    if\
    \ length(strings) == 0 return nothing\n    max_length = maximum(strings)\n   \
    \ longest_string = filter(x -> x == max_length, strings)\n    if length(longest_string)\
    \ == 0 return nothing\n    longest_string = longest_string[1]\n    return longest_string\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function which takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string starts with \"a\".\nThe\
    \ function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the strings are all empty.\nThe function should\
    \ return nothing in case the strings are all empty.\nThe function should return\
    \ nothing in case the strings are all empty.\nThe function should return nothing\
    \ in case the strings are all empty.\nThe function should return nothing in case\
    \ the strings are all empty.\nThe function should return nothing in case the strings\
    \ are all empty.\nThe function should return nothing in case the strings are all\
    \ empty.\nThe function should return nothing in case the strings are all empty.\n\
    The function should return nothing in case the strings are all empty.\nThe function\
    \ should return nothing in case the strings are all empty.\nThe function should\
    \ return nothing in case the strings are all empty.\nThe function should return\
    \ nothing in case the strings are all empty.\nThe function should return nothing\
    \ in case the strings are all empty.\nThe function should return nothing in case\
    \ the strings are all empty.\nThe function should return nothing in case the strings\
    \ are all empty.\nThe function should return nothing in case the strings are all\
    \ empty.\nThe function should return nothing in case the strings are all empty.\n\
    The function should return nothing in case the strings are all empty.\nThe function\
    \ should return nothing in case the strings are all empty.\nThe function should\
    \ return nothing in case the strings are all empty.\nThe function should return\
    \ nothing in case the strings are all empty.\nThe function should return nothing\
    \ in case the strings are all empty.\nThe function should return nothing in case\
    \ the strings are all empty.\nThe function should return nothing in case the strings\
    \ are all empty.\nThe function should return nothing in case the strings are all\
    \ empty.\nThe function should return nothing in case the strings are all empty.\n\
    The function should return nothing in case the strings are all empty.\nThe function\
    \ should return nothing in case the strings are all empty.\nThe function should\
    \ return nothing in case the strings are all empty.\nThe function should return\
    \ nothing in case the strings are all empty.\nThe function should return nothing\
    \ in case the strings are all empty.\nThe function should return nothing in case\
    \ the strings are all empty.\nThe function should return nothing in case the strings\
    \ are all empty.\nThe ", "    if length(strings) == 0\n        nothing\n    else\n\
    \        longest = strings[length(strings)-1]\n        for s in strings[2:end]\n\
    \            if length(longest) > length(s)\n                longest = s\n   \
    \         end\n        end\n        longest\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which takes a vector of strings and returns the longest\
    \ string in that vector. Return nothing in case the vector is empty.\nWrite a\
    \ function which takes a vector of strings and returns the shortest string in\
    \ that vector. Return nothing in case the vector is empty.\nWrite a function which\
    \ takes a vector of strings and returns the longest string in that vector which\
    \ contains all the strings in the vector. Return nothing in case the vector is\
    \ empty.\nWrite a function which takes a vector of strings and returns the shortest\
    \ string in that vector which contains all the strings in the vector. Return nothing\
    \ in case the vector is empty.\nWrite a function which takes a vector of strings\
    \ and returns the longest string in that vector which contains all the strings\
    \ in the vector. Return nothing in case the vector is empty.\nWrite a function\
    \ which takes a vector of strings and returns the shortest string in that vector\
    \ which contains all the strings in the vector. Return nothing in case the vector\
    \ is empty.\nWrite a function which takes a vector of strings and returns the\
    \ longest string in that vector which contains all the strings in the vector.\
    \ Return nothing in case the vector is empty.\nWrite a function which takes a\
    \ vector of strings and returns the shortest string in that vector which contains\
    \ all the strings in the vector. Return nothing in case the vector is empty.\n\
    Write a function which takes a vector of strings and returns the longest string\
    \ in that vector which contains all the strings in the vector. Return nothing\
    \ in case the vector is empty.\nWrite a function which takes a vector of strings\
    \ and returns the shortest string in that vector which contains all the strings\
    \ in the vector. Return nothing in case the vector is empty.\nWrite a function\
    \ which takes a vector of strings and returns the longest string in that vector\
    \ which contains all the strings in the vector. Return nothing in case the vector\
    \ is empty.\nWrite a function which takes a vector of strings and returns the\
    \ shortest string in that vector which contains all the strings in the vector.\
    \ Return nothing in case the vector is empty.\nWrite a function which takes a\
    \ vector of strings and returns the longest string in that vector which contains\
    \ all the strings in the vector. Return nothing in case the vector is empty.\n\
    Write a function which takes a vector of strings and returns the shortest string\
    \ in that vector which contains all the strings in the vector. Return nothing\
    \ in case the vector is empty.\nWrite a function which takes a vector of strings\
    \ and returns the longest string in that vector which contains all the strings\
    \ in the vector. Return nothing in case the vector is empty.\nWrite a function\
    \ which takes a vector of strings and returns the shortest string in that vector\
    \ which contains all the strings in the vector. Return nothing in case the vector\
    \ is ", "    longest = nothing\n    for s in strings\n        if longest == nothing\n\
    \            longest = s\n        elseif length(longest) < length(s)\n       \
    \     longest = s\n        end\n    end\n    return longest\nend\n</code>\n<|/\
    \ a tags=julia,string |>\n<| a tags=julia,string |>\nI wrote a package to solve\
    \ this problem called longest-substring-matching-in-julia\n<code>\nusing longest-substring-matching-in-julia",
  "    longest = nothing\n    lengths = Vector{Int}()\n    for s in strings\n    \
    \    push!(lengths, length(s))\n        if lengths > 1\n            longest =\
    \ s[end]\n            break\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string is a palindrome or not.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the vector contains only empty strings.\nThe function\
    \ should return nothing in case the vector contains only strings that are not\
    \ palindromes.\nThe function should return nothing in case the vector contains\
    \ strings that are palindromes but are not of the same length.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindromes but are of different lengths.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains strings\
    \ that are palindromes but are of different lengths.\nThe function should return\
    \ nothing in case the vector contains strings that are palindromes but are of\
    \ different lengths.\nThe function should return nothing in case the vector contains\
    \ strings that are palindromes but are of different lengths.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindromes but are of different lengths.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains strings\
    \ that are palindromes but are of different lengths.\nThe function should return\
    \ nothing in case the vector contains strings that are palindromes but ", "  \
    \  longest = nothing\n    if !isempty(strings)\n        longest = strings[length(strings)\
    \ == maximum(length(strings))]\n    end\n    return longest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not.", "    if length(strings) == 0 \n      \
    \  return nothing \n    else \n        longest = strings[1] \n        for s in\
    \ strings[2:] \n            if length(longest) < length(s) \n                longest\
    \ = s \n            end \n        end \n        return longest \n    end \nend\
    \ \n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ a string with all the letters capitalized. \nFor example, capitalize(\"hello\"\
    ) should return \"Hello\".", "    longest = nothing\n    if length(strings) ==\
    \ 0\n        return nothing\n    longest = strings[1]\n    for s in strings[2:end]\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend", "    if length(strings) == 0 return nothing\n\
    \    else return strings[argmax(lengths(strings))]\nend", "    if length(strings)\
    \ == 0 \n        return nothing\n    else \n        max_length = length(strings)\n\
    \        longest_string = strings[max_length]\n        for string in strings \n\
    \            if length(string) == max_length \n                longest_string\
    \ = string\n            end\n        end\n        return longest_string\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings where\
    \ each string is the concatenation of all the strings in the original vector except\
    \ the one that comes first.", "    if length(strings) == 0 return nothing\n  \
    \  max_length = maximum(strings)\n    longest_string = filter(x -> x == max_length,\
    \ strings)\n    if length(longest_string) == 0 return nothing\n    return longest_string\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb", "    if length(strings)==0 \n  \
    \      return nothing \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for s in strings \n            if length(longest)>length(s) \n   \
    \             longest = s \n            end \n        end \n        return longest\
    \ \n    end \nend \n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ string and returns the number of occurrences of that string in the input string.\
    \ \nWrite a function that takes a string and returns the number of occurrences\
    \ of that string in the input string ignoring case.\nWrite a function that takes\
    \ a string and returns the number of occurrences of that string in the input string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of occurrences of that string in the input string ignoring case.\nWrite a function\
    \ that takes a string and returns the number of occurrences of that string in\
    \ the input string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of occurrences of that string in the input string ignoring case.\n\
    Write a function that takes a string and returns the number of occurrences of\
    \ that string in the input string ignoring case.\nWrite a function that takes\
    \ a string and returns the number of occurrences of that string in the input string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of occurrences of that string in the input string ignoring case.\nWrite a function\
    \ that takes a string and returns the number of occurrences of that string in\
    \ the input string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of occurrences of that string in the input string ignoring case.\n\
    Write a function that takes a string and returns the number of occurrences of\
    \ that string in the input string ignoring case.\nWrite a function that takes\
    \ a string and returns the number of occurrences of that string in the input string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of occurrences of that string in the input string ignoring case.\nWrite a function\
    \ that takes a string and returns the number of occurrences of that string in\
    \ the input string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of occurrences of that string in the input string ignoring case.\n\
    Write a function that takes a string and returns the number of occurrences of\
    \ that string in the input string ignoring case.\nWrite a function that takes\
    \ a string and returns the number of occurrences of that string in the input string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of occurrences of that string in the input string ignoring case.\nWrite a function\
    \ that takes a string and returns the number of occurrences of that string in\
    \ the input string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of occurrences of that string in the input string ignoring case.\n\
    Write a function that takes a string and returns the number of occurrences of\
    \ that string in the input string ignoring case.\nWrite a function that takes\
    \ a string and returns the number of occurrences of that string in the input string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of occurrences of that ", "    longest = nothing\n    for s in strings\n   \
    \     if longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\nA simple and efficient\
    \ solution is to use max.\n<code>\njulia> longest(vec([\"a\", \"bb\", \"ccc\"\
    ]))\n\"ccc\"", "    if length(strings) == 0 \n        return nothing \n    else\
    \ \n        longest_string = strings[length(strings)-1] \n        for string in\
    \ strings \n            if length(string) == length(longest_string) \n       \
    \         longest_string = string \n            end \n        end \n        return\
    \ longest_string \n    end \nend \n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"\
    b\", \"c\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"])\n\
    </cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\"])\n\
    </cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\"])\n</cell>\n\
    <code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\"])\n</cell>\n\
    <code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"\
    ])\n</cell", "    longest = nothing\n    longest = strings[1] if length(strings)\
    \ == 1 else None\n    for string in strings\n        if length(string) == length(longest)\n\
    \            longest = string\n        else\n            return longest\n    \
    \    end\n    end\n    return longest\nend", "    longest = nothing\n    if !isempty(strings)\n\
    \        longest = strings[end-1]\n        for s in strings\n            if length(s)>length(longest)\n\
    \                longest = s\n            end\n        end\n    end\n    return\
    \ longest\nend", "    longest = nothing\n    for s in strings\n        if longest\
    \ == nothing || length(longest) > length(s)\n            longest = s\n       \
    \ end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nHere is a solution using max.\n<code>", "    if length(strings) == 0 return\
    \ nothing\n    max_length = maximum([length(s) for s in strings])\n    longest_string\
    \ = nothing\n    for s in strings \n        if length(s) == max_length \n    \
    \        longest_string = s\n        end\n    end\n    return longest_string\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>", "    if length(strings)\
    \ == 0 \n        return nothing \n    else \n        max_length = length(strings)\
    \ \n        longest_string = strings[max_length] \n        for string in strings\
    \ \n            if length(string) == max_length \n                longest_string\
    \ = string \n            end \n        end \n        return longest_string \n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and returns the longest string in the vector and also the index of the\
    \ string in the vector.\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    (3, ccc)\n\
    \    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n    (3, dddd)\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n    (3, eeeee)\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n    (3, fffff)\n    >>>\
    \ longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\"])\n\
    \    (3, ggggg)\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"\
    , \"fffff\", \"ggggg\", \"hhhhh\"])\n    (3, hhhhh)\n    >>> longest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"\
    ])\n    (3, iiiii)\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"\
    , \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"])\n    (3, iiiii)\n  \
    \  >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\"\
    , \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\"])\n    (3, kkkkk)\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\"])\n    (3, lllll)\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n    (3, mmmmm)\n    >>>\
    \ longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\",\
    \ \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\", \"nnnnn\"\
    ])\n    (3, nnnnn)\n", "    if length(strings) == 0 \n        return nothing \n\
    \    else \n        longest_string <- strings[length(strings)-1] \n        for\
    \ string in strings \n            if length(longest_string) > length(string) \n\
    \                longest_string <- string \n        return longest_string \nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of booleans indicating whether each string is a palindrome\
    \ or not. \nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input ", "    longest = nothing\n    for s\
    \ in strings\n        if longest == nothing || length(longest) > length(s)\n \
    \           longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the longest string in a list of strings.\
    \ Return the first one in case of multiple strings of the same length.", "   \
    \ if length(strings) == 0 \n        return nothing \n    else \n        longest\
    \ = strings[1] \n        for string in strings[2:] \n            if string.length\
    \ > longest.length \n                longest = string \n            end \n   \
    \     end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns the longest string in that vector.\
    \ \nWrite a function that takes a vector of strings and returns the shortest string\
    \ in that vector. \nWrite a function that takes a vector of strings and returns\
    \ the average string in that vector. \nWrite a function that takes a vector of\
    \ strings and returns the median string in that vector. \nWrite a function that\
    \ takes a vector of strings and returns the mode string in that vector. \nWrite\
    \ a function that takes a vector of strings and returns the number of strings\
    \ that start with a particular letter. \nWrite a function that takes a vector\
    \ of strings and returns the number of strings that end with a particular letter.\
    \ \nWrite a function that takes a vector of strings and returns the number of\
    \ strings that contain a particular letter. \nWrite a function that takes a vector\
    \ of strings and returns the number of strings that start with a particular letter\
    \ and end with a particular letter. \nWrite a function that takes a vector of\
    \ strings and returns the number of strings that start with a particular letter\
    \ and contain a particular letter. \nWrite a function that takes a vector of strings\
    \ and returns the number of strings that end with a particular letter and contain\
    \ a particular letter. \nWrite a function that takes a vector of strings and returns\
    \ the number of strings that contain a particular letter and end with a particular\
    \ letter. \nWrite a function that takes a vector of strings and returns the number\
    \ of strings that start with a particular letter and contain a particular letter\
    \ and end with a particular letter. \nWrite a function that takes a vector of\
    \ strings and returns the number of strings that end with a particular letter\
    \ and contain a particular letter and end with a particular letter. \nWrite a\
    \ function that takes a vector of strings and returns the number of strings that\
    \ contain a particular letter and end with a particular letter and end with a\
    \ particular letter. \nWrite a function that takes a vector of strings and returns\
    \ the number of strings that start with a particular letter and contain a particular\
    \ letter and end with a particular letter and end with a particular letter.",
  "    if length(strings) == 0 \n        return nothing \n    else \n        max_length\
    \ = maximum(strings) \n        for s in strings \n            if length(s) ==\
    \ max_length \n                return s \n            else \n                max_length\
    \ = length(s) \n        endfor \n        return nothing \n    endif \nendfunction\
    \ \n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are multiple strings\
    \ of the same length. For example, `longest([\"a\", \"bb\", \"ccc\"])` returns\
    \ `\"a\"` instead of `\"ccc\"`.\n<|/ c |>\n<| c |>\nI added a version that works\
    \ with multiple strings of the same length\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with multiple strings of the same length\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    if length(strings) == 0 \n        return nothing\n    else\
    \ \n        return max(strings, key=length) \nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of strings and a vector of integers as inputs\
    \ and returns a vector of integers as output. \nThe function should do the following:",
  "    if length(strings) == 0 return nothing\n    max_length = maximum(strings)\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? 1 : max_length\n    max_length = max_length == nothing ? 1 : max_length\n\
    \    max_length = max_length == nothing ? 1 : max_length\n    max_length = max_length\
    \ == nothing ? ", "    if length(strings) == 0 return nothing\n    max_length\
    \ = maximum([length(string) for string in strings])\n    longest_string = nothing\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    if longest_string == nothing \n                longest_string = string\n\
    \            elseif longest_string != string\n                longest_string =\
    \ nothing\n            end\n        else\n            if longest_string != nothing\n\
    \                longest_string = nothing\n            end\n        end\n    end\n\
    \    return longest_string\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n\
    This code does not work if there are multiple strings of the same length. For\
    \ example, `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"` instead of `\"\
    a\"`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a tags=julia,string |>\n<code>", "    if length(strings) == 0 \n\
    \        nothing\n    elseif length(strings) == 1 \n        first(strings)\n \
    \   else\n        longest(sort(strings, by=length))\n    end\nend\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of strings and returns a vector\
    \ of integers representing the number of times each string appears in the vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\"], your function should return [1, 1, 2, 1, 1, 2, 1].", "    longest =\
    \ nothing\n    for s in strings\n        if longest == nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    if length(strings)\
    \ == 0 \n        return nothing \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for string in strings \n            if length(longest) < length(string)\
    \ \n                longest = string \n        return longest \nend \n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of strings where each string is the concatenation of all the strings\
    \ in the original vector. For example, [\"a\", \"b\", \"c\"] -> [\"abc\"]", " \
    \   if length(strings) == 0 return nothing\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_strings = [s for s in strings if length(s) ==\
    \ max_length]\n    if length(longest_strings) > 1 \n        return longest(longest_strings)\n\
    \    else \n        return longest_strings[0]\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not. Return nothing in case\
    \ the input vector is empty.\nHint: Use islower() and isupper() functions to check\
    \ the first and last characters of each string.", "    longest = nothing\n   \
    \ for s in strings\n        if longest == nothing\n            longest = s\n \
    \       elseif length(longest) < length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nA simple solution is to use findfirst:\n<code>\njulia> findfirst(x -> length(x)\
    \ > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nThe shortest solution I found was this:\n<code>\njulia> findfirst(x -> length(x)\
    \ > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\nThe shortest solution I found was this:\n<code>\njulia> findfirst(x -> length(x)\
    \ > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n<|/ a tags=julia,string |>\n<|\
    \ a dscore=1 |>\nThe shortest solution I found was this:\n<code>\njulia> findfirst(x\
    \ -> length(x) > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nThe shortest solution I found was this:\n<code>\n\
    julia> findfirst(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,string |>\n<code>\njulia> findfirst(x -> length(x)\
    \ > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\n<code>\njulia> findfirst(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n\"\
    a\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> findfirst(x\
    \ -> length(x) > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=1 |>\n<code>\njulia> findfirst(x -> length(x) > 1, [\"a\", \"\
    b\", \"c\"])\n\"a\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\n<code>\njulia> findfirst(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n\"\
    a\"\n</code>\n<|/ a dscore=1 |>", "    if length(strings) == 0 return nothing\n\
    \    max_length = maximum(strings)\n    longest_string = filter(x -> x == max_length,\
    \ strings)\n    if length(longest_string) == 0 return nothing\n    return longest_string[1]\n\
    end", "    if length(strings) == 0 \n        nothing \n    else \n        longest\
    \ = strings[length(strings)-1] \n        for string in strings \n            if\
    \ length(string) == length(longest) \n                longest = string \n    \
    \        end \n        end \n    end \nend \n</cell>\n<text>\nExercise 9\nWrite\
    \ a function that returns the longest string in a list of strings. If the list\
    \ is empty, return nothing. Otherwise, return the string with the longest length.\
    \ For example, for the following list:", "    if length(strings) == 0 return nothing\n\
    \    max_length = maximum([length(s) for s in strings])\n    longest_strings =\
    \ [s for s in strings if length(s) == max_length]\n    if length(longest_strings)\
    \ > 0 return longest_strings[end]\n    else return nothing\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the longest string in a list of strings. Return\
    \ nothing in case the list is empty.\n    >>> longest([])\n    nothing\n    >>>\
    \ longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"\
    ccc\"])\n    \"ccc\"\n    \"\"\"", "    if length(strings)==0 return nothing\n\
    \    longest_string <- strings[[1]]\n    for string in strings[2:end]\n      \
    \  if length(longest_string)>length(string)\n            longest_string <- string\n\
    \        else\n            if length(longest_string)==length(string)\n       \
    \         if length(longest_string)>length(string)\n                    longest_string\
    \ <- string\n                else\n                    longest_string <- nothing\n\
    \            end\n        end\n    end\n    return longest_string\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ the longest string in the vector and also the index of the string in the vector.\n\
    For example, for the input [\"a\", \"bb\", \"ccc\"] it should return (\"ccc\"\
    , 2)", "    longest = nothing\n    longest = strings[1] if length(strings) ==\
    \ 1 else None\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    </code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.1 you can do:\n\
    <code>\njulia> longest(collect([\"a\", \"b\", \"c\", \"d\"]))\n\"d\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.1 you can do:\n<code>\n\
    julia> longest(collect([\"a\", \"b\", \"c\", \"d\"]))\n\"d\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can do:\n<code>\njulia> longest(collect([\"\
    a\", \"b\", \"c\", \"d\"]))\n\"d\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.1 you can do:\n<code>\njulia> longest(collect([\"a\", \"b\",\
    \ \"c\", \"d\"]))\n\"d\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n\
    In Julia 1.1 you can do:\n<code>\nlongest(collect([\"a\", \"b\", \"c\", \"d\"\
    ]))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can\
    \ do:\n<code>\nlongest(collect([\"a\", \"b\", \"c\", \"d\"]))\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can do:\n<code>\nlongest(collect([\"\
    a\", \"b\", \"c\", \"d\"]))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nIn\
    \ Julia 1.1 you can do:\n<code>\nlongest(collect([\"a\", \"b\", \"c\", \"d\"]))\n\
    </code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\nIn Julia 1.1 you can do:\n\
    <code>\nlongest(collect([\"a\", \"b\", \"c\", \"d\"]))\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can do:\n<code>\nlongest(collect([\"\
    a\", \"b\", \"c\", \"d\"]))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.1 you can do:\n<code>\nlongest(colle", "    longest = nothing\n\
    \    for s in strings\n        if longest == nothing || length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if there are multiple strings of the same\
    \ length. Try it with `longest([\"a\", \"bb\", \"ccc\"])`.\n<|/ c |>\n<| c |>\n\
    Yes, I noticed that and fixed it now. Thanks for pointing it out.\n<|/ c |>\n\
    <| a tags=julia |>\nHere's a solution that uses no loops:\n<code>", "    if length(strings)\
    \ == 0 return nothing\n    max_length = maximum(strings)\n    max_length_length\
    \ = length(max_length)\n    for s in strings \n        if length(s) == max_length_length\
    \ \n            return max_length\n    end\n    return nothing\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the same length as the input. \nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the vector contains strings of different lengths.\nThe function\
    \ should return the first string in the vector in case the vector contains strings\
    \ of the same length.", "    if length(strings) == 0\n        nothing\n    else\n\
    \        longest = strings[length(strings)-1]\n        for string in strings\n\
    \            if string.length() > longest.length()\n                longest =\
    \ string\n            end\n        end\n    end\nend", "    if length(strings)\
    \ == 0\n        return nothing\n    max_length = 0\n    max_length_str = \"\"\n\
    \    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            max_length_str = s\n        end\n    end\n    return\
    \ max_length_str\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\",\
    \ \"nnnn\", \"oooo\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gg", "    if length(strings) ==\
    \ 0\n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for s in strings\n            if length(s) > length(longest)\n      \
    \          longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns the longest\
    \ string in that vector. Return nothing if the vector is empty.\nWrite a function\
    \ that takes a vector of strings and returns the shortest string in that vector.\
    \ Return nothing if the vector is empty.\nWrite a function that takes a vector\
    \ of strings and returns the average string in that vector. Return nothing if\
    \ the vector is empty.\nWrite a function that takes a vector of strings and returns\
    \ the median string in that vector. Return nothing if the vector is empty.\nWrite\
    \ a function that takes a vector of strings and returns the mode string in that\
    \ vector. Return nothing if the vector is empty.\nWrite a function that takes\
    \ a vector of strings and returns the number of strings in that vector. Return\
    \ nothing if the vector is empty.\nWrite a function that takes a vector of strings\
    \ and returns the number of unique strings in that vector. Return nothing if the\
    \ vector is empty.\nWrite a function that takes a vector of strings and returns\
    \ the number of strings that are not empty. Return nothing if the vector is empty.\n\
    Write a function that takes a vector of strings and returns the number of strings\
    \ that are not empty and are the same length. Return nothing if the vector is\
    \ empty.\nWrite a function that takes a vector of strings and returns the number\
    \ of strings that are not empty and are the same length. Return nothing if the\
    \ vector is empty.\nWrite a function that takes a vector of strings and returns\
    \ the number of strings that are not empty and are the same length. Return nothing\
    \ if the vector is empty.\nWrite a function that takes a vector of strings and\
    \ returns the number of strings that are not empty and are the same length. Return\
    \ nothing if the vector is empty.\nWrite a function that takes a vector of strings\
    \ and returns the number of strings that are not empty and are the same length.\
    \ Return nothing if the vector is empty.\nWrite a function that takes a vector\
    \ of strings and returns the number of strings that are not empty and are the\
    \ same length. Return nothing if the vector is empty.\nWrite a function that takes\
    \ a vector of strings and returns the number of strings that are not empty and\
    \ are the same length. Return nothing if the vector is empty.\nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length. Return nothing if the vector is empty.\nWrite\
    \ a function that takes a vector of strings and returns the number of strings\
    \ that are not empty and are the same length. Return nothing if the vector is\
    \ empty.\nWrite a function that takes a vector of strings and returns the number\
    \ of strings that are not empty and are the same length. Return nothing if the\
    \ vector is empty.\nWrite a function that takes a vector of strings and returns\
    \ the number of strings that are not empty and are ", "    longest = nothing\n\
    \    \n    for s in strings\n        if longest == nothing\n            longest\
    \ = s\n        elseif length(longest) < length(s)\n            longest = s\n \
    \       end\n    end\n    \n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of the same length with\
    \ all strings replaced by \"nothing\".\n    >>> replaced([\"a\", \"bb\", \"ccc\"\
    ])\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\"\
    , \"ccc\", \"ddd\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    ]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n    [\"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n    [\"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n    [\"nothing\", \"\
    nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n\
    \    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\"])\n    [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"\
    ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n    [\"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n    [\"nothing\", \"\
    nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"\
    nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"])\n \
    \   [\"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    ]\n    >>> replaced([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\"])\n    [\"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\", \"nothing\"\
    , \"nothing\", \"nothing\", \"nothing\", \"nothing\"]\n    >>> replaced([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii", "    if\
    \ length(strings) == 0 \n        nothing\n    else\n        longest = strings[length(strings)-1]\n\
    \        for string in strings\n            if length(string) > length(longest)\n\
    \                longest = string\n            end\n        end\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ and returns the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string. \nWrite a function that takes a string\
    \ and returns the number of characters in the string divided by the number of\
    \ sentences in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string divided by the number of words in the\
    \ string divided by the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of sentences in the\
    \ string divided by the number of characters in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of sentences in the\
    \ string divided by the number of characters in the string divided by the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of characters in the string divided by the number of words in the string\
    \ divided by the number of sentences in the string divided by the number of characters\
    \ in the string divided by the number of words in the string divided by the number\
    \ of sentences in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string divided by the number of words in the\
    \ string divided by the number of sentences in the string divided by the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string divided by the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string divided by the number of characters\
    \ in the string divided by the number of words in the string divided by the number\
    \ of sentences in the string divided by the number of characters in the string\
    \ divided by the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string divided by the number\
    \ of words in the string divided by the number of sentences in the string divided\
    \ by the number of characters in the string divided by the number of words in\
    \ the string divided by the number of sentences in the string divided by the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string. \nWrite a function that takes a string\
    \ and returns the number of characters in the string divided by the number of\
    \ words in the string divided by the number of sentences in the string divided\
    \ by the number of characters in the string divided by the number of words in\
    \ the string divided by the number of sentences in the string divided by the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string divided by the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of character", "    longest = nothing\n    for s in strings\n        if longest\
    \ == nothing || length(longest) > length(s)\n            longest = s\n       \
    \ end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but I think it can be simplified\
    \ a little bit. I've posted my own answer which I believe is simpler.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe solution I came up with is as follows:\n<code>", "    if\
    \ length(strings) == 0 \n        return nothing \n    else \n        longest_string\
    \ <- strings[length(strings)-1] \n        for string in strings \n           \
    \ if length(string) == length(longest_string) \n                longest_string\
    \ <- string \n            end \n        end \n        return longest_string \n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return an array of booleans indicating whether each string\
    \ is a palindrome or not.\nThe function should return an array of booleans indicating\
    \ whether each string is a palindrome or not.\nThe function should return an array\
    \ of booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each string is a palindrome or not.\nThe function\
    \ should return an array of booleans indicating whether each string is a palindrome\
    \ or not.\nThe function should return an array of booleans indicating whether\
    \ each string is a palindrome or not.\nThe function should return an array of\
    \ booleans indicating whether each ", "    if length(strings) == 0\n        nothing\n\
    \    else\n        longest = strings[end]\n        for s in strings\n        \
    \    if length(longest) < length(s)\n                longest = s\n           \
    \ end\n        end\n        longest\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function which takes a vector of strings and returns a vector of the same\
    \ length with all strings replaced by \"nothing\".\n    >>> nothings([\"a\", \"\
    b\", \"c\"])\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> nothings([\"\
    a\", \"bb\", \"ccc\"])\n    [\"nothing\", \"nothing\", \"nothing\"]\n    >>> nothings([])\n\
    \    []\n    \"\"\"", "    longest = nothing\n    for s in strings\n        if\
    \ longest == nothing\n            longest = s\n        elseif length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    longest =\
    \ nothing\n    if length(strings) > 0 \n        longest = strings[length(strings)-1]\n\
    \        for s in strings[2:end]\n            if length(s) == length(longest)\n\
    \                longest = s\n            else\n                break\n      \
    \  end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\n<code>", "    if length(strings) == 0 \n        return\
    \ nothing\n    else \n        max_length = length(strings)\n        longest_string\
    \ = strings[max_length]\n        for s in strings[2:end]\n            if length(s)\
    \ == max_length \n                longest_string = s\n            else\n     \
    \           break\n        end\n        return longest_string\n    end\nend\n\
    </cell>\n<text>\nExercise 7: Write a function that takes a vector of strings and\
    \ returns a vector containing the number of times each string appears in the vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\", \"a\", \"b\", \"b\"\
    , \"a\"], the output vector should be [1, 1, 2, 1, 1, 2, 1].", "    longest =\
    \ nothing\n    for s in strings\n        if longest == nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg", "    if length(strings) == 0 \n        return nothing \n    else\
    \ \n        max_length = length(strings) \n        max_length_str = strings[max_length]\
    \ \n        for s in strings \n            if length(s) < max_length \n      \
    \          max_length = length(s) \n                max_length_str = s \n    \
    \    max_length_str = max_length_str[1:] \n        return max_length_str \n  \
    \  end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer. Could you\
    \ please explain why you use \"nothing\" instead of \"nothing\" ?\n<|/ c |>\n\
    <| c |>\n`nothing` is just a special value that indicates that a variable is uninitialized.\
    \ In Julia, uninitialized variables are `nothing`. So `longest` returns `nothing`\
    \ if the input list is empty, and `longest` returns the first element of the input\
    \ list if the input list has more than one element.\n<|/ c |>\n<| a dscore=2 |>\n\
    The answer by is very good, but I thought I'd add some explanation as to why it\
    \ works.\nThe reason why it works is that Julia's for loop is really just a syntactic\
    \ sugar for map, which applies a function to each element of a collection. \n\
    So the for loop can be rewritten as:\n<code>", "    if length(strings) == 0\n\
    \        return nothing\n    max_length = maximum([length(s) for s in strings])\n\
    \    longest_strings = [s for s in strings if length(s) == max_length]\n    if\
    \ length(longest_strings) > 1\n        return longest_strings[1]\n    else\n \
    \       return longest_strings[0]\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of strings and returns a vector where each\
    \ string in the input vector is replaced by the string \"hello\" and the string\
    \ \"goodbye\" if the string contains \"hello\" or \"goodbye\". The function should\
    \ return the new vector. Test your function with some test cases.", "    if length(strings)\
    \ == 0 \n        return nothing \n    else \n        longest_length = length(strings)\
    \ \n        longest_string = strings[longest_length] \n        for string in strings\
    \ \n            if length(string) == longest_length \n                return string\
    \ \n            elseif length(string) > longest_length \n                longest_length\
    \ = length(string) \n                longest_string = string \n        return\
    \ longest_string \n    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote\
    \ a function that returns the longest string in a list of strings:\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
