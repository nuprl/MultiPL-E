language: jl
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1s7wl07t.jl:17\nin expression starting at\
    \ /tmp/tmp1s7wl07t.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp90w2t9va.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp90w2t9va.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:25\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 3] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:26\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 2, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:27\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:28\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nSta"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp9akj4ns.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpp9akj4ns.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 5, 6] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\n"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the integral of a polynomial\
    \ using trapezoidal rule. \nThe function should take as input a vector of coefficients\
    \ xs and a vector of values ys.\nThe function should return a single value that\
    \ is the integral of the polynomial using trapezoidal rule.\nThe function should\
    \ return an error if the input vectors are not of the same length.\nThe function\
    \ should return an error if the input vectors contain negative values.\nThe function\
    \ should return an error if the input vectors contain values greater than 1.\n\
    The function should return an error if the input vectors contain values less than\
    \ 0.\nThe function should return an error if the input vectors contain values\
    \ equal to 0.\nThe function should return an error if the input vectors contain\
    \ values equal to 1.\nThe function should return an error if the input vectors\
    \ contain values greater than 1.\nThe function should return an error if the input\
    \ vectors contain values less than 0.\nThe function should return an error if\
    \ the input vectors contain values equal to 0.\nThe function should return an\
    \ error if the input vectors contain values equal to 1.\nThe function should return\
    \ an error if the input vectors contain values greater than 1.\nThe function should\
    \ return an error if the input vectors contain values less than 0.\nThe function\
    \ should return an error if the input vectors contain values equal to 0.\nThe\
    \ function should return an error if the input vectors contain values equal to\
    \ 1.\nThe function should return an error if the input vectors contain values\
    \ greater than 1.\nThe function should return an error if the input vectors contain\
    \ values less than 0.\nThe function should return an error if the input vectors\
    \ contain values equal to 0.\nThe function should return an error if the input\
    \ vectors contain values equal to 1.\nThe function should return an error if the\
    \ input vectors contain values greater than 1.\nThe function should return an\
    \ error if the input vectors contain values less than 0.\nThe function should\
    \ return an error if the input vectors contain values equal to 0.\nThe function\
    \ should return an error if the input vectors contain values equal to 1.\nThe\
    \ function should return an error if the input vectors contain values greater\
    \ than 1.\nThe function should return an error if the input vectors contain values\
    \ less than 0.\nThe function should return an error if the input vectors contain\
    \ values equal to 0.\nThe function should return an error if the input vectors\
    \ contain values equal to 1.\nThe function should return an error if the input\
    \ vectors contain values greater than 1.\nThe function should return an error\
    \ if the input vectors contain values less than 0.\nThe function should return\
    \ an error if the input vectors contain values equal to 0.\nThe function should\
    \ return an error if the input vectors contain values equal to 1.\nThe function\
    \ should return an error if the input vectors contain values greater than 1.\n\
    The function should return an error if the input vectors contain \nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl4htd9hk.jl:17\nin expression starting at\
    \ /tmp/tmpl4htd9hk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a vector of coefficients and returns the polynomial\
    \ evaluated at x.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxufcstax.jl:17\nin expression starting at\
    \ /tmp/tmpxufcstax.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpw32ffdd1.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpw32ffdd1.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n  BoundsError: attempt\
    \ to access 4-element Vector{Float64} at index [5]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] derivative(xs::Vector{Int64})\n     @\
    \ Main /tmp/tmpw32ffdd1.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw32ffdd1.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw32ffdd1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpw32ffdd1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 6]\n  BoundsError: attempt to access 2-element Vector{Float64}\
    \ at index [3]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] derivative(xs::Vector{Int64})\n     @ Main /tmp/tmpw32ffdd1.jl:13\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw32ffdd1.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw32ffdd1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpw32ffdd1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [2, 2]\n  BoundsError: attempt to access 2-element Vector{Float64}\
    \ at index [3]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] derivative(xs::Vector{Int64})\n     @ Main /tmp/tmpw32ffdd1.jl:13\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw32ffdd1.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw32ffdd1.jl:21\ntest set:\
    \ Error Du"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the derivative of a polynomial\n$$\nx^3 + 2x^2\
    \ + 4x + 5\n$$\nand returns the result as a vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd61wu8a6.jl:17\nin expression starting at\
    \ /tmp/tmpd61wu8a6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57__6s5s.jl:17\nin expression starting at\
    \ /tmp/tmp57__6s5s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial with one variable.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplls0r7hv.jl:17\nin expression starting at\
    \ /tmp/tmplls0r7hv.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first derivative of a polynomial\
    \ given its coefficients.\nThe function should take in an array of coefficients\
    \ and return an array of derivatives.\nThe function should return an array of\
    \ length equal to the number of coefficients.\nThe first element of the returned\
    \ array should be the derivative of the polynomial evaluated at 0.\nThe second\
    \ element of the returned array should be the derivative of the polynomial evaluated\
    \ at 1.\nThe third element of the returned array should be the derivative of the\
    \ polynomial evaluated at 2.\nThe fourth element of the returned array should\
    \ be the derivative of the polynomial evaluated at 3.\nThe fifth element of the\
    \ returned array should be the derivative of the polynomial evaluated at 4.\n\
    The sixth element of the returned array should be the derivative of the polynomial\
    \ evaluated at 5.\nThe function should return an array of length equal to the\
    \ number of coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpno3j2c.jl:17\nin expression starting at\
    \ /tmp/tmpqpno3j2c.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial using Horner's method.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfi_tb_wt.jl:21\nin expression starting at\
    \ /tmp/tmpfi_tb_wt.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplgyqj1k4.jl:17\nin expression starting at\
    \ /tmp/tmplgyqj1k4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2q9ildbb.jl:17\nin expression starting at\
    \ /tmp/tmp2q9ildbb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    The function should take in a vector of coefficients and return its derivative.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function should return an array of coefficients.\n\
    The function should return an array of coefficients.\nThe function should return\
    \ an array of coefficients.\nThe function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuupgaobg.jl:19\nin expression starting at\
    \ /tmp/tmpuupgaobg.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list. For example, sum([1, 2, 3, 4]) should return\
    \ 10. Make sure you use sum and no other built-in functions.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplm_p1d82.jl:17\nin expression starting at\
    \ /tmp/tmplm_p1d82.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_im3l04k.jl:19\nin expression starting at\
    \ /tmp/tmp_im3l04k.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp90w2t9va.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp90w2t9va.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:25\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 3] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:26\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 2, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:27\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:28\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nSta"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltehpbkx.jl:17\nin expression starting at\
    \ /tmp/tmpltehpbkx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpapcoo40f.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpapcoo40f.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 2] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, -1, 2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # Initialize a vector to store the derivative\n    deriv = zeros(length(xs))\n\
    \    \n    # Compute the first derivative\n    deriv[1] = xs[1]\n    \n    # Compute\
    \ the second derivative\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    \n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu_hxf1u.jl:24\nin expression starting at\
    \ /tmp/tmpgu_hxf1u.jl:24\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagvs8e0a.jl:19\nin expression starting at\
    \ /tmp/tmpagvs8e0a.jl:19\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1shlk1h.jl:17\nin expression starting at\
    \ /tmp/tmpr1shlk1h.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[2]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ polynomial and returns the derivative polynomial. \nThe derivative polynomial\
    \ is represented as a vector of coefficients.\nThe first element of the vector\
    \ is the coefficient of x^0, the second element is the coefficient of x^1, the\
    \ third element is the coefficient of x^2, the fourth element is the coefficient\
    \ of x^3, and so on. \nThe derivative polynomial is represented as a vector of\
    \ coefficients.\nThe first element of the vector is the coefficient of x^0, the\
    \ second element is the coefficient of x^1, the third element is the coefficient\
    \ of x^2, the fourth element is the coefficient of x^3, and so on. \nThe derivative\
    \ polynomial is represented as a vector of coefficients.\nThe first element of\
    \ the vector is the coefficient of x^0, the second element is the coefficient\
    \ of x^1, the third element is the coefficient of x^2, the fourth element is the\
    \ coefficient of x^3, and so on. \nThe derivative polynomial is represented as\
    \ a vector of coefficients.\nThe first element of the vector is the coefficient\
    \ of x^0, the second element is the coefficient of x^1, the third element is the\
    \ coefficient of x^2, the fourth element is the coefficient of x^3, and so on.\
    \ \nThe derivative polynomial is represented as a vector of coefficients.\nThe\
    \ first element of the vector is the coefficient of x^0, the second element is\
    \ the coefficient of x^1, the third element is the coefficient of x^2, the fourth\
    \ element is the coefficient of x^3, and so on. \nThe derivative polynomial is\
    \ represented as a vector of coefficients.\nThe first element of the vector is\
    \ the coefficient of x^0, the second element is the coefficient of x^1, the third\
    \ element is the coefficient of x^2, the fourth element is the coefficient of\
    \ x^3, and so on. \nThe derivative polynomial is represented as a vector of coefficients.\n\
    The first element of the vector is the coefficient of x^0, the second element\
    \ is the coefficient of x^1, the third element is the coefficient of x^2, the\
    \ fourth element is the coefficient of x^3, and so on. \nThe derivative polynomial\
    \ is represented as a vector of coefficients.\nThe first element of the vector\
    \ is the coefficient of x^0, the second element is the coefficient of x^1, the\
    \ third element is the coefficient of x^2, the fourth element is the coefficient\
    \ of x^3, and so on. \nThe derivative polynomial is represented as a vector of\
    \ \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmayeec8z.jl:16\nin expression starting at\
    \ /tmp/tmpmayeec8z.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial using\
    \ Horner's method.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_1s8c6t.jl:17\nin expression starting at\
    \ /tmp/tmp7_1s8c6t.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiv9232np.jl:17\nin expression starting at\
    \ /tmp/tmpiv9232np.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. For example, sum([1, 2, 3]) should return 10.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6e6fy5mx.jl:19\nin expression starting at\
    \ /tmp/tmp6e6fy5mx.jl:19\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs[2:end]\n        deriv = deriv * x + xs[1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the squares of the numbers from 1 to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk57cpuq5.jl:16\nin expression starting at\
    \ /tmp/tmpk57cpuq5.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with n coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mhv7d1j.jl:17\nin expression starting at\
    \ /tmp/tmp2mhv7d1j.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list. For example, sum([1, 2, 3]) should return\
    \ 10. Make sure you use sum and no other built-in functions. You can test your\
    \ function by calling it on a few different lists. What happens when you call\
    \ your function on a list that has non-numeric elements?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2h8cdq9.jl:17\nin expression starting at\
    \ /tmp/tmp_2h8cdq9.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3cnl2wb.jl:17\nin expression starting at\
    \ /tmp/tmpl3cnl2wb.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the derivative of a polynomial of degree $n$. \n\
    $$ f(x) = x^n + 2x^(n-1) + ... + 1 $$\nThe function should take $n$ as a parameter.\
    \ \nThe function should return an array of $n$ elements.\nThe function should\
    \ return $0$ if $n$ is less than or equal to 0.\nThe function should return $0$\
    \ if $n$ is greater than or equal to 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6sxshjzp.jl:17\nin expression starting at\
    \ /tmp/tmp6sxshjzp.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpabuiwiin.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpabuiwiin.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test Failed at /tmp/tmpabuiwiin.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpapcoo40f.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpapcoo40f.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 2] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, -1, 2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapcoo40f.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapcoo40f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpapcoo40f.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv += xs[i] * deriv\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3dpmopzy.jl:16\nin expression starting at\
    \ /tmp/tmp3dpmopzy.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1862h2xc.jl:17\nin expression starting at\
    \ /tmp/tmp1862h2xc.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    for i=1:length(xs)-1\n        deriv[i]\
    \ = xs[i+1] - xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp058hauiw.jl:16\nin expression starting at\
    \ /tmp/tmp058hauiw.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4u3ewbv.jl:17\nin expression starting at\
    \ /tmp/tmpr4u3ewbv.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5n5oaaj_.jl:17\nin expression starting at\
    \ /tmp/tmp5n5oaaj_.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjj043ap3.jl:17\nin expression starting at\
    \ /tmp/tmpjj043ap3.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_n8cnz0.jl:17\nin expression starting at\
    \ /tmp/tmpl_n8cnz0.jl:17\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzcmei_z.jl:17\nin expression starting at\
    \ /tmp/tmpwzcmei_z.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with given\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa784qtfg.jl:17\nin expression starting at\
    \ /tmp/tmpa784qtfg.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers in the\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwm9mirw.jl:17\nin expression starting at\
    \ /tmp/tmpjwm9mirw.jl:17\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrg6mq4v.jl:17\nin expression starting at\
    \ /tmp/tmplrg6mq4v.jl:17\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i =\
    \ 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n   \
    \ return derivative\nend\n</cell>\n<code language=julia-1.4>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vyzlmrk.jl:17\nin expression starting at\
    \ /tmp/tmp6vyzlmrk.jl:17\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpzgz109.jl:17\nin expression starting at\
    \ /tmp/tmphpzgz109.jl:17\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    for i = 1:length(xs)\n        deriv[i]\
    \ = xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhf_1rvk.jl:16\nin expression starting at\
    \ /tmp/tmpjhf_1rvk.jl:16\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with coefficients\
    \ given as a vector. \nThe function should take as input a vector of coefficients\
    \ and output a vector of derivatives.\nThe function should return an error if\
    \ the input vector is empty or if the length of the input vector is not equal\
    \ to the number of coefficients.\nThe function should return an error if the input\
    \ vector contains non-integer coefficients.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains duplicate coefficients.\n\
    The function should return an error if the input vector contains coefficients\
    \ outside the range $[-1,1]$.\nThe function should return an error if the input\
    \ vector contains coefficients outside the range $[-1,1]$.\nThe function should\
    \ return an error if the input vector contains coefficients outside the range\
    \ $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ coefficients outside the range $[-1,1]$.\nThe function should return an error\
    \ if the input vector contains coefficients outside the range $[-1,1]$.\nThe function\
    \ should return an error if the input vector contains coefficients outside the\
    \ range $[-1,1]$.\nThe function should return an error if the input vector contains\
    \ \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0vawh93.jl:17\nin expression starting at\
    \ /tmp/tmpi0vawh93.jl:17\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprywgq6l8.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmprywgq6l8.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprywgq6l8.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test Failed at /tmp/tmprywgq6l8.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprywgq6l8.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprywgq6l8.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n  \
    \  end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovu38sdp.jl:21\nin expression starting at\
    \ /tmp/tmpovu38sdp.jl:21\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n    end\n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuzyf28h.jl:17\nin expression starting at\
    \ /tmp/tmpeuzyf28h.jl:17\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa9fosyes.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpa9fosyes.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test Failed at /tmp/tmpa9fosyes.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxex690d.jl:17\nin expression starting at\
    \ /tmp/tmpxxex690d.jl:17\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nFor example, sum([1, 2, 3, 4]) should return\
    \ 10 (1 + 2 + 3 + 4).\nHint: Remember that you can use the sum function.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hzvjpdo.jl:19\nin expression starting at\
    \ /tmp/tmp2hzvjpdo.jl:19\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0uovo7d.jl:17\nin expression starting at\
    \ /tmp/tmpx0uovo7d.jl:17\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp9akj4ns.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpp9akj4ns.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 5, 6] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\n"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58jqqowf.jl:17\nin expression starting at\
    \ /tmp/tmp58jqqowf.jl:17\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. Use a for loop to do this.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4336ftsw.jl:17\nin expression starting at\
    \ /tmp/tmp4336ftsw.jl:17\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp90w2t9va.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp90w2t9va.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:25\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 3] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:26\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 2, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:27\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:28\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nSta"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6e4pi7i.jl:21\nin expression starting at\
    \ /tmp/tmp_6e4pi7i.jl:21\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmczpm4d.jl:19\nin expression starting at\
    \ /tmp/tmpwmczpm4d.jl:19\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjszs28yn.jl:17\nin expression starting at\
    \ /tmp/tmpjszs28yn.jl:17\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7beizni.jl:17\nin expression starting at\
    \ /tmp/tmpg7beizni.jl:17\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpabuiwiin.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpabuiwiin.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test Failed at /tmp/tmpabuiwiin.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nNow let's try it out!\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlei9glz.jl:17\nin expression starting at\
    \ /tmp/tmpqlei9glz.jl:17\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb55ghhf9.jl:17\nin expression starting at\
    \ /tmp/tmpb55ghhf9.jl:17\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpabuiwiin.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpabuiwiin.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test Failed at /tmp/tmpabuiwiin.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvijb3ayj.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvijb3ayj.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvijb3ayj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvijb3ayj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvijb3ayj.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvijb3ayj.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvijb3ayj.jl:21\ntest set: Test Failed at /tmp/tmpvijb3ayj.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvijb3ayj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvijb3ayj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvijb3ayj.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvijb3ayj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvijb3ayj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvijb3ayj.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @"
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp32w2n614.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp32w2n614.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32w2n614.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32w2n614.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp32w2n614.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 2] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp32w2n614.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp32w2n614.jl:21\ntest set: Test Failed at /tmp/tmp32w2n614.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32w2n614.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32w2n614.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp32w2n614.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32w2n614.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32w2n614.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp32w2n614.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~"
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit64lpoy.jl:17\nin expression starting at\
    \ /tmp/tmpit64lpoy.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # initialize a vector to store the derivative\n    d::Vector{Int64}\
    \ = zeros(length(xs))\n    \n    # loop through each element in the vector\n \
    \   for i in 1:length(xs)\n        # calculate the derivative of the ith element\n\
    \        d[i] = xs[i]\n        # loop through each element in the vector\n   \
    \     for j in i+1:length(xs)\n            # calculate the derivative of the ith\
    \ element and add it to the ith element\n            d[i] += xs[j] * d[j]\n  \
    \      end\n    end\n    \n    return d\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpag76dhjr.jl:27\nin expression starting at\
    \ /tmp/tmpag76dhjr.jl:27\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomtvaqds.jl:17\nin expression starting at\
    \ /tmp/tmpomtvaqds.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the integral of a polynomial using trapezoidal rule. \nThe function should take\
    \ as input a vector of coefficients xs and a vector of points x. \nThe function\
    \ should return an vector of integral values ys.\nThe function should return an\
    \ error if the input is not of the correct type.\nThe function should return an\
    \ error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function should return\
    \ an error if the input is not of the correct length.\nThe function should return\
    \ an error if the input is not of the correct type.\nThe function \nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5rxxgbf.jl:17\nin expression starting at\
    \ /tmp/tmpa5rxxgbf.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial using\
    \ central differences.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7x1_zcvn.jl:17\nin expression starting at\
    \ /tmp/tmp7x1_zcvn.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n terms of the Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2}\
    \ $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function that returns the first\
    \ n terms of the Fibonacci sequence using recursion.\nThe Fibonacci sequence is\
    \ defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and\
    \ $F_1 = 1$. \nWrite a function that returns the first n terms of the Fibonacci\
    \ sequence using recursion.\nThe Fibonacci sequence is defined by the recurrence\
    \ \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function\
    \ that returns the first n terms of the Fibonacci sequence using recursion.\n\
    The Fibonacci sequence is defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2}\
    \ $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function that returns the first\
    \ n terms of the Fibonacci sequence using recursion.\nThe Fibonacci sequence is\
    \ defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and\
    \ $F_1 = 1$. \nWrite a function that returns the first n terms of the Fibonacci\
    \ sequence using recursion.\nThe Fibonacci sequence is defined by the recurrence\
    \ \n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function\
    \ that returns the first n terms of the Fibonacci sequence using recursion.\n\
    The Fibonacci sequence is defined by the recurrence \n$$ Fn = F{n-1} + F_{n-2}\
    \ $$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a function that returns the first\
    \ n terms of the Fibonacci sequence using \nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjqzihob.jl:17\nin expression starting at\
    \ /tmp/tmpqjqzihob.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial using\
    \ Horner's method.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9hvx03b.jl:17\nin expression starting at\
    \ /tmp/tmpu9hvx03b.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7501fu4.jl:19\nin expression starting at\
    \ /tmp/tmpw7501fu4.jl:19\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[1]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnicy1kp.jl:16\nin expression starting at\
    \ /tmp/tmpwnicy1kp.jl:16\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of number\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7dp1kl1.jl:17\nin expression starting at\
    \ /tmp/tmpl7dp1kl1.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the integral of a polynomial from 0 to infinity\
    \ using trapezoidal rule. \nThe function should take two arguments: \nthe polynomial\
    \ coefficients xs and the lower limit of the integral.\nThe function should return\
    \ an array: \nthe integral of the polynomial from 0 to infinity using the trapezoidal\
    \ rule.\nThe function should return an array of size $n+1$, where $n$ is the number\
    \ of terms in the polynomial.\nThe first element of the array should be the value\
    \ of the integral from 0 to $x_0$, \nthe second element should be the value of\
    \ the integral from $x_0$ to $x_1$, \nand so on. \nThe function should return\
    \ an array of size $n+1$, where $n$ is the number of terms in the polynomial.\n\
    The first element of the array should be the value of the integral from 0 to $x_0$,\
    \ \nthe second element should be the value of the integral from $x_0$ to $x_1$,\
    \ \nand so on. \nThe function should return an array of size $n+1$, where $n$\
    \ is the number of terms in the polynomial.\nThe first element of the array should\
    \ be the value of the integral from 0 to $x_0$, \nthe second element should be\
    \ the value of the integral from $x_0$ to $x_1$, \nand so on. \nThe function should\
    \ return an array of size $n+1$, where $n$ is the number of terms in the polynomial.\n\
    The first element of the array should be the value of the integral from 0 to $x_0$,\
    \ \nthe second element should be the value of the integral from $x_0$ to $x_1$,\
    \ \nand so on. \nThe function should return an array of size $n+1$, where $n$\
    \ is the number of terms in the polynomial.\nThe first element of the array should\
    \ be the value of the integral from 0 to $x_0$, \nthe second element should be\
    \ the value of the integral from $x_0$ to $x_1$, \nand so on. \nThe function should\
    \ return an array of size $n+1$, where $n$ is the number of terms in the polynomial.\n\
    The first element of the array should be the value of the integral from 0 to $x_0$,\
    \ \nthe second element should be the value of the integral from $x_0$ to $x_1$,\
    \ \nand so on. \nThe function should return an array of size \nusing Test\n\n\
    @testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8oiuj0wk.jl:17\nin expression starting at\
    \ /tmp/tmp8oiuj0wk.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.0>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0bk93i3.jl:17\nin expression starting at\
    \ /tmp/tmp_0bk93i3.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n    end\n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise: Write a function that calculates the derivative of a polynomial\
    \ given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprorc2r61.jl:17\nin expression starting at\
    \ /tmp/tmprorc2r61.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise: Write a function that calculates\
    \ the derivative of a polynomial using Newton's method. Implement the Newton's\
    \ method using Julia's built-in function optimize.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41vdq5m2.jl:17\nin expression starting at\
    \ /tmp/tmp41vdq5m2.jl:17\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslm5ezac.jl:19\nin expression starting at\
    \ /tmp/tmpslm5ezac.jl:19\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: -1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[1]\n  \
    \  end\n    return deriv\nend\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial using Newton's\
    \ method.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurd_i99r.jl:17\nin expression starting at\
    \ /tmp/tmpurd_i99r.jl:17\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppi4kmqse.jl:17\nin expression starting at\
    \ /tmp/tmppi4kmqse.jl:17\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes as input a polynomial and returns\
    \ the derivative polynomial. \nThe derivative polynomial is represented as a vector\
    \ of coefficients.\nThe first element of the vector is the constant term of the\
    \ derivative.\nThe remaining elements are the coefficients of the polynomial evaluated\
    \ at xs.\nThe function should work for polynomials of any order.\nThe function\
    \ should work for polynomials of degree less than or equal to 2.\nThe function\
    \ should work for polynomials of degree greater than or equal to 1.\nThe function\
    \ should work for polynomials of degree 0.\nThe function should work for polynomials\
    \ of degree 1.\nThe function should work for polynomials of degree 2.\nThe function\
    \ should work for polynomials of degree 3.\nThe function should work for polynomials\
    \ of degree 4.\nThe function should work for polynomials of degree 5.\nThe function\
    \ should work for polynomials of degree 6.\nThe function should work for polynomials\
    \ of degree 7.\nThe function should work for polynomials of degree 8.\nThe function\
    \ should work for polynomials of degree 9.\nThe function should work for polynomials\
    \ of degree 10.\nThe function should work for polynomials of degree 11.\nThe function\
    \ should work for polynomials of degree 12.\nThe function should work for polynomials\
    \ of degree 13.\nThe function should work for polynomials of degree 14.\nThe function\
    \ should work for polynomials of degree 15.\nThe function should work for polynomials\
    \ of degree 16.\nThe function should work for polynomials of degree 17.\nThe function\
    \ should work for polynomials of degree 18.\nThe function should work for polynomials\
    \ of degree 19.\nThe function should work for polynomials of degree 20.\nThe function\
    \ should work for polynomials of degree 21.\nThe function should work for polynomials\
    \ of degree 22.\nThe function should work for polynomials of degree 23.\nThe function\
    \ should work for polynomials of degree 24.\nThe function should work for polynomials\
    \ of degree 25.\nThe function should work for polynomials of degree 26.\nThe function\
    \ should work for polynomials of degree 27.\nThe function should work for polynomials\
    \ of degree 28.\nThe function should work for polynomials of degree 29.\nThe function\
    \ should work for polynomials of degree 30.\nThe function should work for polynomials\
    \ of degree 31.\nThe function should work for polynomials of degree 32.\nThe function\
    \ should work for polynomials of degree 33.\nThe function should work for polynomials\
    \ of degree 34.\nThe function should work for polynomials of degree 35.\nThe function\
    \ should work for polynomials of degree 36.\nThe function should work for polynomials\
    \ of degree 37.\nThe function should work for polynomials of degree 38.\nThe function\
    \ should work for polynomials of degree 39.\nThe function should work for polynomials\
    \ of degree 40.\nThe function should work for polynomials of degree 41.\nThe function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb06cvb6y.jl:17\nin expression starting at\
    \ /tmp/tmpb06cvb6y.jl:17\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    The function should only take in numbers that are integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiotcanea.jl:17\nin expression starting at\
    \ /tmp/tmpiotcanea.jl:17\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0u9nol_w.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp0u9nol_w.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0u9nol_w.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 2] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test Failed at /tmp/tmp0u9nol_w.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0u9nol_w.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0u9nol_w.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~"
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7f3jqv8l.jl:17\nin expression starting at\
    \ /tmp/tmp7f3jqv8l.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    deriv = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    deriv[i] = xs[i]\n    end\n    \n    return deriv\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt9z8j3ba.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpt9z8j3ba.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9z8j3ba.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9z8j3ba.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpt9z8j3ba.jl:25\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 3] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt9z8j3ba.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt9z8j3ba.jl:23\ntest set: Test Failed at /tmp/tmpt9z8j3ba.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9z8j3ba.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9z8j3ba.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpt9z8j3ba.jl:27\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9z8j3ba.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9z8j3ba.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpt9z8j3ba.jl:28\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/.co"
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp90w2t9va.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp90w2t9va.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:25\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 3] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:26\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 2, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:27\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90w2t9va.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90w2t9va.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90w2t9va.jl:28\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nSta"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpabuiwiin.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpabuiwiin.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test Failed at /tmp/tmpabuiwiin.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a polynomial and returns the derivative of the polynomial in reverse order.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmrkgie8.jl:19\nin expression starting at\
    \ /tmp/tmphmrkgie8.jl:19\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_zpuvm3.jl:18\nin expression starting at\
    \ /tmp/tmpw_zpuvm3.jl:18\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nFor example, sum([1, 2, 3, 4]) should return\
    \ 10 (1 + 4 + 9 + 16).\nHint: use the sum function.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovsj8ip9.jl:17\nin expression starting at\
    \ /tmp/tmpovsj8ip9.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5u8qfa0.jl:21\nin expression starting at\
    \ /tmp/tmps5u8qfa0.jl:21\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1p6lrozo.jl:17\nin expression starting at\
    \ /tmp/tmp1p6lrozo.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp9akj4ns.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpp9akj4ns.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 5, 6] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9akj4ns.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9akj4ns.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp9akj4ns.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\n"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpdcbs3i.jl:17\nin expression starting at\
    \ /tmp/tmpdpdcbs3i.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n    end\n   \
    \ return derivative\nend\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyy_ba3ka.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpyy_ba3ka.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy_ba3ka.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy_ba3ka.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyy_ba3ka.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyy_ba3ka.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyy_ba3ka.jl:21\ntest set: Test Failed at /tmp/tmpyy_ba3ka.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy_ba3ka.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy_ba3ka.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyy_ba3ka.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy_ba3ka.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy_ba3ka.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyy_ba3ka.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaeaw26ji.jl:17\nin expression starting at\
    \ /tmp/tmpaeaw26ji.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4hlobj67.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp4hlobj67.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hlobj67.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hlobj67.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4hlobj67.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4hlobj67.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4hlobj67.jl:21\ntest set: Test Failed at /tmp/tmp4hlobj67.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hlobj67.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hlobj67.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4hlobj67.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4hlobj67.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hlobj67.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4hlobj67.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_n8cnz0.jl:17\nin expression starting at\
    \ /tmp/tmpl_n8cnz0.jl:17\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.\nThe function should take in a vector of coefficients\
    \ and return a vector of derivatives.\nThe function should return an error if\
    \ the input vector is empty.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\nThe function should return an error if the input\
    \ vector is not of length 3.\n\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeaff48v9.jl:17\nin expression starting at\
    \ /tmp/tmpeaff48v9.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)-1)\n    \n    for i = 1:length(xs)-1\n\
    \        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwb57d0je.jl:19\nin expression starting at\
    \ /tmp/tmpwb57d0je.jl:19\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_im3l04k.jl:19\nin expression starting at\
    \ /tmp/tmp_im3l04k.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpabuiwiin.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpabuiwiin.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test Failed at /tmp/tmpabuiwiin.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpabuiwiin.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpabuiwiin.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabuiwiin.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ff_l8y5.jl:17\nin expression starting at\
    \ /tmp/tmp4ff_l8y5.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph4jbxqa2.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmph4jbxqa2.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4jbxqa2.jl:25\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 3] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test Failed at /tmp/tmph4jbxqa2.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4jbxqa2.jl:27\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4jbxqa2.jl:28\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/.co"
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpey5a48ja.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpey5a48ja.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpey5a48ja.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpey5a48ja.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpey5a48ja.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpey5a48ja.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpey5a48ja.jl:21\ntest set: Test Failed at /tmp/tmpey5a48ja.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpey5a48ja.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpey5a48ja.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpey5a48ja.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpey5a48ja.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpey5a48ja.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpey5a48ja.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfshfvujx.jl:17\nin expression starting at\
    \ /tmp/tmpfshfvujx.jl:17\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n\
    \    return derivative\nend\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp82bdu2kn.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp82bdu2kn.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82bdu2kn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82bdu2kn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp82bdu2kn.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 2] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp82bdu2kn.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp82bdu2kn.jl:21\ntest set: Test Failed at /tmp/tmp82bdu2kn.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82bdu2kn.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82bdu2kn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp82bdu2kn.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82bdu2kn.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82bdu2kn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp82bdu2kn.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~"
  timestamp: 1659822708
- exit_code: -1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    deriv[2] = xs[2]\n\
    \    for i = 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n  \
    \  return deriv\nend\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp97ouggh8.jl:23\n  Expression: candidate([3,
    1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12, 20]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp97ouggh8.jl:23 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp97ouggh8.jl:22\ntest set: Test Failed
    at /tmp/tmp97ouggh8.jl:24\n  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated:
    [1, 1, 2] == [2, 6]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp97ouggh8.jl:24 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp97ouggh8.jl:22\ntest set: Test Failed
    at /tmp/tmp97ouggh8.jl:25\n  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated:
    [3, -1, 2] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp97ouggh8.jl:25 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp97ouggh8.jl:22\ntest set: Test Failed
    at /tmp/tmp97ouggh8.jl:26\n  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2,
    0, 16]\n   Evaluated: [3, -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n [1] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp97ouggh8.jl:26 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp97ouggh8.jl:22\n'''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jh96v2z.jl:17\nin expression starting at\
    \ /tmp/tmp7jh96v2z.jl:17\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibw756fo.jl:17\nin expression starting at\
    \ /tmp/tmpibw756fo.jl:17\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)-1)\n    \n    for i = 1:length(xs)-1\n\
    \        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the integral\
    \ of a polynomial from 0 to infinity using trapezoidal rule.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobldlyw7.jl:19\nin expression starting at\
    \ /tmp/tmpobldlyw7.jl:19\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a polynomial and returns the derivative of\
    \ the polynomial. \nThe function should take in a vector of coefficients xs and\
    \ return a vector of coefficients ds \nwhere ds[0] is the derivative of xs[0]\
    \ and so on.\nHint: Use a for loop to iterate through the vector. \nHint: Use\
    \ a for loop to iterate through the vector. \nHint: Use a for loop to iterate\
    \ through the vector. \nHint: Use a for loop to iterate through the vector. \n\
    Hint: Use a for loop to iterate through the vector. \nHint: Use a for loop to\
    \ iterate through the vector. \nHint: Use a for loop to iterate through the vector.\
    \ \nHint: Use a for loop to iterate through the vector. \nHint: Use a for loop\
    \ to iterate through the vector. \nHint: Use a for loop to iterate through the\
    \ vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use a\
    \ for loop to iterate through the vector. \nHint: Use a for loop to iterate through\
    \ the vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use\
    \ a for loop to iterate through the vector. \nHint: Use a for loop to iterate\
    \ through the vector. \nHint: Use a for loop to iterate through the vector. \n\
    Hint: Use a for loop to iterate through the vector. \nHint: Use a for loop to\
    \ iterate through the vector. \nHint: Use a for loop to iterate through the vector.\
    \ \nHint: Use a for loop to iterate through the vector. \nHint: Use a for loop\
    \ to iterate through the vector. \nHint: Use a for loop to iterate through the\
    \ vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use a\
    \ for loop to iterate through the vector. \nHint: Use a for loop to iterate through\
    \ the vector. \nHint: Use a for loop to iterate through the vector. \nHint: Use\
    \ a for loop to iterate through the vector. \nHint: Use a for loop to iterate\
    \ through the vector. \nHint: Use a for loop to iterate through the vector. \n\
    Hint: Use a for loop to iterate through the vector. \nHint: Use a for loop to\
    \ iterate through the vector. \nHint: Use a for loop to iterate through the vector.\
    \ \nHint: Use a for loop to iterate through the vector. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63htjb82.jl:17\nin expression starting at\
    \ /tmp/tmp63htjb82.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a polynomial and returns the derivative polynomial\
    \ in its simplest form. \nThe simplest form is one in which all coefficients are\
    \ non-zero and are in ascending order.\nFor example, \n$$\nx^3 + 2x^2 + 3x + 4\n\
    $$\nhas derivative \n$$\n3x^2 + 2x + 1\n$$\nThe function should return this derivative\
    \ polynomial.\nHint: Use a for loop to iterate through the coefficients and use\
    \ if statements to check whether the coefficient is non-zero.\nusing Test\n\n\
    @testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2c94zl32.jl:17\nin expression starting at\
    \ /tmp/tmp2c94zl32.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2r9f8dp.jl:17\nin expression starting at\
    \ /tmp/tmpp2r9f8dp.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05q1s54z.jl:17\nin expression starting at\
    \ /tmp/tmp05q1s54z.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm4jr6_86.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpm4jr6_86.jl:26\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4jr6_86.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4jr6_86.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpm4jr6_86.jl:27\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm4jr6_86.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm4jr6_86.jl:25\ntest set: Test Failed at /tmp/tmpm4jr6_86.jl:28\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4jr6_86.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4jr6_86.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpm4jr6_86.jl:29\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4jr6_86.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4jr6_86.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpm4jr6_86.jl:30\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp73ge4ahs.jl:17\nin expression starting at\
    \ /tmp/tmp73ge4ahs.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with coefficients\
    \ in reverse order. \nFor example, derivative([3, 1, 2, 4, 5]) should return [1,\
    \ 4, 12, 20].\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazzn1iz5.jl:17\nin expression starting at\
    \ /tmp/tmpazzn1iz5.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptrjw5og.jl:17\nin expression starting at\
    \ /tmp/tmpptrjw5og.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a polynomial and returns the derivative\
    \ of the polynomial. \nHint: Use a for loop to iterate through the polynomial\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujuzjnb0.jl:17\nin expression starting at\
    \ /tmp/tmpujuzjnb0.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    for i = 1:length(xs)-1\n        deriv[i]\
    \ = xs[i+1] - xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the derivative of a polynomial with n terms.\nThe function should take in an\
    \ array of integers and return an array of integers.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function should return\
    \ an array of integers containing the derivative.\nThe function \nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkuamj0j.jl:16\nin expression starting at\
    \ /tmp/tmpqkuamj0j.jl:16\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_n8cnz0.jl:17\nin expression starting at\
    \ /tmp/tmpl_n8cnz0.jl:17\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa9fosyes.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpa9fosyes.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test Failed at /tmp/tmpa9fosyes.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a polynomial and returns the\
    \ derivative of the polynomial in the same form.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02qps1ah.jl:17\nin expression starting at\
    \ /tmp/tmp02qps1ah.jl:17\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0u9nol_w.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp0u9nol_w.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0u9nol_w.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 2] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test Failed at /tmp/tmp0u9nol_w.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0u9nol_w.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0u9nol_w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0u9nol_w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0u9nol_w.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~"
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprra083mh.jl:17\nin expression starting at\
    \ /tmp/tmprra083mh.jl:17\n"
  stdout: ''
  timestamp: 1659822710
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshqvqiu1.jl:17\nin expression starting at\
    \ /tmp/tmpshqvqiu1.jl:17\n"
  stdout: ''
  timestamp: 1659822710
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv = deriv * xs[i]\
    \ + xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a polynomial\
    \ and returns the derivative polynomial. \nThe derivative polynomial is represented\
    \ as a vector of coefficients. \nThe first element of the vector is the coefficient\
    \ for the constant term in the polynomial. \nThe rest of the elements in the vector\
    \ are the coefficients for the terms other than the first one. \nFor example,\
    \ if the polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is\
    \ $[1, 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and\
    \ returns the derivative polynomial. \nThe derivative polynomial is represented\
    \ as a vector of coefficients. \nThe first element of the vector is the coefficient\
    \ for the constant term in the polynomial. \nThe rest of the elements in the vector\
    \ are the coefficients for the terms other than the first one. \nFor example,\
    \ if the polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is\
    \ $[1, 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and\
    \ returns the derivative polynomial. \nThe derivative polynomial is represented\
    \ as a vector of coefficients. \nThe first element of the vector is the coefficient\
    \ for the constant term in the polynomial. \nThe rest of the elements in the vector\
    \ are the coefficients for the terms other than the first one. \nFor example,\
    \ if the polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is\
    \ $[1, 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and\
    \ returns the derivative polynomial. \nThe derivative polynomial is represented\
    \ as a vector of coefficients. \nThe first element of the vector is the coefficient\
    \ for the constant term in the polynomial. \nThe rest of the elements in the vector\
    \ are the coefficients for the terms other than the first one. \nFor example,\
    \ if the polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is\
    \ $[1, 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and\
    \ returns the derivative polynomial. \nThe derivative polynomial is represented\
    \ as a vector of coefficients. \nThe first element of the vector is the coefficient\
    \ for the constant term in the polynomial. \nThe rest of the elements in the vector\
    \ are the coefficients for the terms other than the first one. \nFor example,\
    \ if the polynomial is $x^3 + 2x^2 + 3x + 4$, then the derivative polynomial is\
    \ $[1, 3, 2, 4]$. \nWrite a function that takes in a vector of coefficients and\
    \ returns the derivative polynomial. \nThe derivative polynomial is represented\
    \ as a vector of coefficients. \nThe first element of the vector is the coefficient\
    \ for the constant term in the polynomial. \nThe rest of the elements in the \n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj34lrzk.jl:16\nin expression starting at\
    \ /tmp/tmpdj34lrzk.jl:16\n"
  stdout: ''
  timestamp: 1659822710
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuf1y6fhw.jl:21\nin expression starting at\
    \ /tmp/tmpuf1y6fhw.jl:21\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprg0c52op.jl:19\nin expression starting at\
    \ /tmp/tmprg0c52op.jl:19\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv += xs[i] * deriv\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9msxyhft.jl:16\nin expression starting at\
    \ /tmp/tmp9msxyhft.jl:16\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with given\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpia_sxsxh.jl:17\nin expression starting at\
    \ /tmp/tmpia_sxsxh.jl:17\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    for i = 1:length(xs)-1\n        deriv[i]\
    \ = xs[i+1] - xs[i] * xs[i+1]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecp3s0eq.jl:16\nin expression starting at\
    \ /tmp/tmpecp3s0eq.jl:16\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa9fosyes.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpa9fosyes.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test Failed at /tmp/tmpa9fosyes.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9fosyes.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9fosyes.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa9fosyes.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with coefficients\
    \ given as a vector of integers. \nThe function should return the same vector\
    \ as the derivative function above.\nHint: Use a for loop.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihq19k53.jl:17\nin expression starting at\
    \ /tmp/tmpihq19k53.jl:17\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with given\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20f0_2jk.jl:17\nin expression starting at\
    \ /tmp/tmp20f0_2jk.jl:17\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial with n coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksem3z0g.jl:17\nin expression starting at\
    \ /tmp/tmpksem3z0g.jl:17\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmj82m7ie.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpmj82m7ie.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj82m7ie.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj82m7ie.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmj82m7ie.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmj82m7ie.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmj82m7ie.jl:21\ntest set: Test Failed at /tmp/tmpmj82m7ie.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj82m7ie.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj82m7ie.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmj82m7ie.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj82m7ie.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj82m7ie.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmj82m7ie.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822713
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_n8cnz0.jl:17\nin expression starting at\
    \ /tmp/tmpl_n8cnz0.jl:17\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    The function should take in a vector of coefficients and return a vector of coefficients.\n\
    The function should return an error if the input vector is empty.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return an error if the input vector has more than one element.\nThe function\
    \ should return \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaauaxa8z.jl:17\nin expression starting at\
    \ /tmp/tmpaauaxa8z.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a polynomial and returns the derivative of\
    \ the polynomial. \nThe function should take in a vector of coefficients and return\
    \ another vector of coefficients.\nThe function should return an error if the\
    \ input vector is of length less than 2.\nThe function should return an error\
    \ if the input vector is of length greater than 2.\nThe function should return\
    \ an error if the input vector is of length not equal to 2.\nThe function should\
    \ return an error if the input vector contains non-integer values.\nThe function\
    \ should return an error if the input vector contains negative values.\nThe function\
    \ should return an error if the input vector contains values greater than 1.\n\
    The function should return an error if the input vector contains values less than\
    \ 0.\nThe function should return an error if the input vector contains values\
    \ equal to 0.\nThe function should return an error if the input vector contains\
    \ values equal to 1.\nThe function should return an error if the input vector\
    \ contains values equal to 2.\nThe function should return an error if the input\
    \ vector contains values equal to 3.\nThe function should return an error if the\
    \ input vector contains values equal to 4.\nThe function should return an error\
    \ if the input vector contains values equal to 5.\nThe function should return\
    \ an error if the input vector contains values equal to 6.\nThe function should\
    \ return an error if the input vector contains values equal to 7.\nThe function\
    \ should return an error if the input vector contains values equal to 8.\nThe\
    \ function should return an error if the input vector contains values equal to\
    \ 9.\nThe function should return an error if the input vector contains values\
    \ equal to 10.\nThe function should return an error if the input vector contains\
    \ values equal to 11.\nThe function should return an error if the input vector\
    \ contains values equal to 12.\nThe function should return an error if the input\
    \ vector contains values equal to 13.\nThe function should return an error if\
    \ the input vector contains values equal to 14.\nThe function should return an\
    \ error if the input vector contains values equal to 15.\nThe function should\
    \ return an error if the input vector contains values equal to 16.\nThe function\
    \ should return an error if the input vector contains values equal to 17.\nThe\
    \ function should return an error if the input vector contains values equal to\
    \ 18.\nThe function should return an error if the input vector contains values\
    \ equal to 19.\nThe function should return an error if the input vector contains\
    \ values equal to 20.\nThe function should return an error if the input vector\
    \ contains values equal to 21.\nThe function should return an error if the input\
    \ vector contains values equal to 22.\nThe function should return an error if\
    \ the input vector contains values equal to 23.\nThe function should return an\
    \ error if the input vector contains values equal to 24.\nThe function should\
    \ \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfedfyzuh.jl:17\nin expression starting at\
    \ /tmp/tmpfedfyzuh.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial with coefficients given as a vector\
    \ of integers. \nThe function should take as input a vector of integers representing\
    \ the coefficients of a polynomial.\nThe function should return the same vector\
    \ but with the derivative of the polynomial computed.\nThe function should return\
    \ an error if the input vector is empty.\nThe function should return an error\
    \ if the input vector has less than two elements.\nThe function should return\
    \ an error if the input vector has more than two elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum1qll5h.jl:21\nin expression starting at\
    \ /tmp/tmpum1qll5h.jl:21\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdj4upfu.jl:19\nin expression starting at\
    \ /tmp/tmpsdj4upfu.jl:19\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp164vidrq.jl:17\nin expression starting at\
    \ /tmp/tmp164vidrq.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpdcbs3i.jl:17\nin expression starting at\
    \ /tmp/tmpdpdcbs3i.jl:17\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dgnp4xt.jl:17\nin expression starting at\
    \ /tmp/tmp0dgnp4xt.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytez0qby.jl:17\nin expression starting at\
    \ /tmp/tmpytez0qby.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2sa0bsd.jl:17\nin expression starting at\
    \ /tmp/tmp_2sa0bsd.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i =\
    \ 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ using central differences.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f6kk051.jl:17\nin expression starting at\
    \ /tmp/tmp3f6kk051.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprg0c52op.jl:19\nin expression starting at\
    \ /tmp/tmprg0c52op.jl:19\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_m_grpa.jl:21\nin expression starting at\
    \ /tmp/tmpb_m_grpa.jl:21\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with given coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiyz9cerw.jl:17\nin expression starting at\
    \ /tmp/tmpiyz9cerw.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprg0c52op.jl:19\nin expression starting at\
    \ /tmp/tmprg0c52op.jl:19\n"
  stdout: ''
  timestamp: 1659822711
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a polynomial and returns the derivative of\
    \ the polynomial. \nThe function should take in a vector of coefficients and return\
    \ the vector of coefficients of the derivative.\nThe function should return an\
    \ error if the input vector is empty or if the length of the input vector is not\
    \ equal to the number of coefficients in the polynomial.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a vector of coefficients.\n\
    The function should return an error if the input vector is not in the form of\
    \ a vector of coefficients.\nThe function should return an error if the input\
    \ vector is not in the form of a vector of coefficients.\nThe function should\
    \ return an error if the input vector is not in the form of a \nusing Test\n\n\
    @testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqxusps6.jl:17\nin expression starting at\
    \ /tmp/tmpgqxusps6.jl:17\n"
  stdout: ''
  timestamp: 1659822713
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytez0qby.jl:17\nin expression starting at\
    \ /tmp/tmpytez0qby.jl:17\n"
  stdout: ''
  timestamp: 1659822712
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nFor example, sum([1, 2, 3, 4]) should return\
    \ 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should return 10\
    \ (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should return 10\
    \ (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should return 10\
    \ (1 + 4 + 9 + 16).\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nFor example, sum([1, 2, 3, 4]) should return 10 (1 + 4 + 9 + 16).\nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nFor example, sum([1, 2, 3, 4]) should return 10\
    \ (1 + 4 + 9 + 16).\nWrite a function that takes in \nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7k3elshw.jl:17\nin expression starting at\
    \ /tmp/tmp7k3elshw.jl:17\n"
  stdout: ''
  timestamp: 1659822713
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the derivative of a polynomial with\
    \ n terms.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zw52fjh.jl:17\nin expression starting at\
    \ /tmp/tmp6zw52fjh.jl:17\n"
  stdout: ''
  timestamp: 1659822713
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprra083mh.jl:17\nin expression starting at\
    \ /tmp/tmprra083mh.jl:17\n"
  stdout: ''
  timestamp: 1659822710
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with given coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y41hoh8.jl:17\nin expression starting at\
    \ /tmp/tmp5y41hoh8.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltehpbkx.jl:17\nin expression starting at\
    \ /tmp/tmpltehpbkx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprra083mh.jl:17\nin expression starting at\
    \ /tmp/tmprra083mh.jl:17\n"
  stdout: ''
  timestamp: 1659822710
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the elements of a vector. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that returns the sum of the squares\
    \ of the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return\
    \ 10. \nWrite a function that returns the sum of the squares of the elements of\
    \ a vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nFor example, sum([1, 2, 3, 4])\
    \ should return 10. \nWrite a function that returns the sum of the squares of\
    \ the elements of a vector. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. \nFor example, sum([1, 2, 3, 4]) should return \nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobadwaf9.jl:17\nin expression starting at\
    \ /tmp/tmpobadwaf9.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc53sxxkq.jl:17\nin expression starting at\
    \ /tmp/tmpc53sxxkq.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial using\
    \ central differences.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_wuxd_n.jl:17\nin expression starting at\
    \ /tmp/tmp9_wuxd_n.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for i\
    \ = 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n \
    \   return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the integral of a polynomial using trapezoidal method.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhttsfjo.jl:17\nin expression starting at\
    \ /tmp/tmpjhttsfjo.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the integral of a polynomial function\
    \ using trapezoidal rule.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4ghd4hg.jl:17\nin expression starting at\
    \ /tmp/tmpz4ghd4hg.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nNow let's try it out on a few examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12hek03e.jl:17\nin expression starting at\
    \ /tmp/tmp12hek03e.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj5cqglya.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpj5cqglya.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 1, 1] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:24\n  Expression: candidate([3, 2, 1]) == [2,\
    \ 2]\n   Evaluated: [3, 3, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj5cqglya.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj5cqglya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj5cqglya.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64"
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vnqak8c.jl:17\nin expression starting at\
    \ /tmp/tmp7vnqak8c.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1t0ejy_f.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp1t0ejy_f.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1t0ejy_f.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1t0ejy_f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1t0ejy_f.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 3, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1t0ejy_f.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1t0ejy_f.jl:21\ntest set: Test Failed at /tmp/tmp1t0ejy_f.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1t0ejy_f.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1t0ejy_f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1t0ejy_f.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1t0ejy_f.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1t0ejy_f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1t0ejy_f.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822715
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs[2:end]\n        deriv += x\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvu_e7o3r.jl:16\nin expression starting at\
    \ /tmp/tmpvu_e7o3r.jl:16\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial of degree $n$\
    \ with respect to $x$.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5cq52gn.jl:19\nin expression starting at\
    \ /tmp/tmpg5cq52gn.jl:19\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_i0wnff.jl:17\nin expression starting at\
    \ /tmp/tmpp_i0wnff.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the derivative of a polynomial using Horner's method.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0c7846t1.jl:17\nin expression starting at\
    \ /tmp/tmp0c7846t1.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # xs is a vector\n    # xs[0] is the coefficient of x^0\n    # xs[1]\
    \ is the coefficient of x^1\n    # xs[2] is the coefficient of x^2\n    # ...\n\
    \    # xs[len(xs)-1] is the coefficient of x^len(xs)\n    \n    # Return derivative\
    \ of polynomial\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1)\
    \ + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1)\
    \ + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1)\
    \ + ... + x^0\n    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n\
    \    # Return derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return\
    \ derivative of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative\
    \ of polynomial x^k + x^(k-1) + ... + x^0\n    # Return derivative of polynomial\
    \ x^k\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfqdt2d10.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfqdt2d10.jl:1\n\
    in expression starting at /tmp/tmpfqdt2d10.jl:1\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nNow let's use our derivative function to find the derivative of our polynomial\
    \ $f(x) = x^3 + x^2 + x + 1$:\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9svwnzah.jl:17\nin expression starting at\
    \ /tmp/tmp9svwnzah.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslm5ezac.jl:19\nin expression starting at\
    \ /tmp/tmpslm5ezac.jl:19\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprywgq6l8.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmprywgq6l8.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprywgq6l8.jl:23\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 6] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test Failed at /tmp/tmprywgq6l8.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprywgq6l8.jl:25\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprywgq6l8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprywgq6l8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprywgq6l8.jl:26\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/"
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs[2:end]\n        deriv = deriv * x + xs[1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the derivative of a polynomial\
    \ given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88ti2uy4.jl:16\nin expression starting at\
    \ /tmp/tmp88ti2uy4.jl:16\n"
  stdout: ''
  timestamp: 1659822715
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # initialize a vector to store the derivative\n    d::Vector{Int64}\
    \ = zeros(length(xs))\n    \n    # loop through each element of xs\n    for i\
    \ in 1:length(xs)\n        # compute the product of xs and i\n        product\
    \ = xs[i] * i\n        # compute the sum of xs and product\n        sum = xs[i]\
    \ + product\n        # update the ith element of d\n        d[i] = sum\n    end\n\
    \    return d\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3njqjtp.jl:25\nin expression starting at\
    \ /tmp/tmpa3njqjtp.jl:25\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69arlm5z.jl:17\nin expression starting at\
    \ /tmp/tmp69arlm5z.jl:17\n"
  stdout: ''
  timestamp: 1659822714
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__xpumsz.jl:17\nin expression starting at\
    \ /tmp/tmp__xpumsz.jl:17\n"
  stdout: ''
  timestamp: 1659822715
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial using Horner's\
    \ method.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_w9yhb_w.jl:17\nin expression starting at\
    \ /tmp/tmp_w9yhb_w.jl:17\n"
  stdout: ''
  timestamp: 1659822715
- exit_code: 1
  program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph4jbxqa2.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmph4jbxqa2.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4jbxqa2.jl:25\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 6]\n   Evaluated: [1, 2, 3] == [2, 6]\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test Failed at /tmp/tmph4jbxqa2.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4jbxqa2.jl:27\n  Expression: candidate([3, 2, 1, 0, 4]) ==\
    \ [2, 2, 0, 16]\n   Evaluated: [3, 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4jbxqa2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4jbxqa2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4jbxqa2.jl:28\n  Expression: candidate([1]) == Vector{Int64}([])\n\
    \   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/.co"
  timestamp: 1659822708
